<?xml version="1.0"?>
<doc>
    <assembly>
        <name>itextsharp</name>
    </assembly>
    <members>
        <member name="M:iTextSharp.text.html.simpleparser.ChainedProperties.#ctor">
            Creates a new instance of ChainedProperties 
        </member>
        <member name="T:iTextSharp.text.html.simpleparser.FactoryProperties">
            
             @author  psoares
        </member>
        <member name="M:iTextSharp.text.html.simpleparser.FactoryProperties.#ctor">
            Creates a new instance of FactoryProperties 
        </member>
        <member name="T:iTextSharp.text.pdf.ISimpleXMLDocHandler">
            The handler for the events fired by <CODE>SimpleXMLParser</CODE>.
            @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="M:iTextSharp.text.pdf.ISimpleXMLDocHandler.StartElement(System.String,System.Collections.Hashtable)">
            Called when a start tag is found.
            @param tag the tag name
            @param h the tag's attributes
        </member>
        <member name="M:iTextSharp.text.pdf.ISimpleXMLDocHandler.EndElement(System.String)">
            Called when an end tag is found.
            @param tag the tag name
        </member>
        <member name="M:iTextSharp.text.pdf.ISimpleXMLDocHandler.StartDocument">
            Called when the document starts to be parsed.
        </member>
        <member name="M:iTextSharp.text.pdf.ISimpleXMLDocHandler.EndDocument">
            Called after the document is parsed.
        </member>
        <member name="M:iTextSharp.text.pdf.ISimpleXMLDocHandler.Text(System.String)">
            Called when a text element is found.
            @param str the text element, probably a fragment.
        </member>
        <member name="T:iTextSharp.text.IDocListener">
            <summary>
            A class that implements DocListener will perform some
            actions when some actions are performed on a Document.
            </summary>
            <seealso cref="T:iTextSharp.text.IElementListener"/>
            <seealso cref="T:iTextSharp.text.Document"/>
            <seealso cref="T:iTextSharp.text.DocWriter"/>
        </member>
        <member name="T:iTextSharp.text.IElementListener">
            <summary>
            A class that implements ElementListener will perform some
            actions when an Element is added.
            </summary>
        </member>
        <member name="M:iTextSharp.text.IElementListener.Add(iTextSharp.text.IElement)">
            <summary>
            Signals that an Element was added to the Document.
            </summary>
            <param name="element">Element added</param>
            <returns>true if the element was added, false if not.</returns>
        </member>
        <member name="M:iTextSharp.text.IDocListener.Open">
            <summary>
            Signals that the Document has been opened and that
            Elements can be added.
            </summary>
        </member>
        <member name="M:iTextSharp.text.IDocListener.SetPageSize(iTextSharp.text.Rectangle)">
            <summary>
            Sets the pagesize.
            </summary>
            <param name="pageSize">the new pagesize</param>
            <returns>a boolean</returns>
        </member>
        <member name="M:iTextSharp.text.IDocListener.Add(iTextSharp.text.Watermark)">
            <summary>
            Signals that a Watermark was added to the Document.
            </summary>
            <param name="watermark">the new Watermark</param>
            <returns>true if the Watermark was added, false if not</returns>
        </member>
        <member name="M:iTextSharp.text.IDocListener.RemoveWatermark">
            <summary>
            Signals that a Watermark was removed from the Document
            </summary>
        </member>
        <member name="M:iTextSharp.text.IDocListener.SetMargins(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the margins.
            </summary>
            <param name="marginLeft">the margin on the left</param>
            <param name="marginRight">the margin on the right</param>
            <param name="marginTop">the margin on the top</param>
            <param name="marginBottom">the margin on the bottom</param>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.IDocListener.SetMarginMirroring(System.Boolean)">
            Parameter that allows you to do margin mirroring (odd/even pages)
            @param marginMirroring
            @return true if succesfull
        </member>
        <member name="M:iTextSharp.text.IDocListener.NewPage">
            <summary>
            Signals that an new page has to be started.
            </summary>
            <returns>true if the page was added, false if not.</returns>
        </member>
        <member name="M:iTextSharp.text.IDocListener.ResetHeader">
            <summary>
            Resets the header of this document.
            </summary>
        </member>
        <member name="M:iTextSharp.text.IDocListener.ResetFooter">
            <summary>
            Resets the footer of this document.
            </summary>
        </member>
        <member name="M:iTextSharp.text.IDocListener.ResetPageCount">
            <summary>
            Sets the page number to 0.
            </summary>
        </member>
        <member name="M:iTextSharp.text.IDocListener.ClearTextWrap">
            Clears text wrapping around images (if applicable).
            Method suggested by Pelikan Stephan
            @throws DocumentException
        </member>
        <member name="M:iTextSharp.text.IDocListener.Close">
            <summary>
            Signals that the Document was closed and that no other
            Elements will be added.
            </summary>
            <remarks>
            The output stream of every writer implementing IDocListener will be closed.
            </remarks>
        </member>
        <member name="P:iTextSharp.text.IDocListener.Header">
            <summary>
            Changes the header of this document.
            </summary>
            <value>a Header</value>
        </member>
        <member name="P:iTextSharp.text.IDocListener.Footer">
            <summary>
            Changes the footer of this document.
            </summary>
            <value>a Footer</value>
        </member>
        <member name="P:iTextSharp.text.IDocListener.PageCount">
            <summary>
            Sets the page number.
            </summary>
            <value>the new page number</value>
        </member>
        <member name="M:iTextSharp.text.html.simpleparser.HTMLWorker.#ctor(iTextSharp.text.IDocListener)">
            Creates a new instance of HTMLWorker 
        </member>
        <member name="T:iTextSharp.text.html.simpleparser.IncCell">
            
             @author  psoares
        </member>
        <member name="T:iTextSharp.text.ITextElementArray">
            <summary>
            Interface for a text element to which other objects can be added.
            </summary>
            <seealso cref="T:iTextSharp.text.Phrase"/>
            <seealso cref="T:iTextSharp.text.Paragraph"/>
            <seealso cref="T:iTextSharp.text.Section"/>
            <seealso cref="T:iTextSharp.text.ListItem"/>
            <seealso cref="T:iTextSharp.text.Chapter"/>
            <seealso cref="T:iTextSharp.text.Anchor"/>
            <seealso cref="T:iTextSharp.text.Cell"/>
        </member>
        <member name="T:iTextSharp.text.IElement">
            <summary>
            Interface for a text element.
            </summary>
            <seealso cref="T:iTextSharp.text.Anchor"/>
            <seealso cref="T:iTextSharp.text.Cell"/>
            <seealso cref="T:iTextSharp.text.Chapter"/>
            <seealso cref="T:iTextSharp.text.Chunk"/>
            <seealso cref="T:iTextSharp.text.Gif"/>
            <seealso cref="T:iTextSharp.text.Graphic"/>
            <seealso cref="T:iTextSharp.text.Header"/>
            <seealso cref="T:iTextSharp.text.Image"/>
            <seealso cref="T:iTextSharp.text.Jpeg"/>
            <seealso cref="T:iTextSharp.text.List"/>
            <seealso cref="T:iTextSharp.text.ListItem"/>
            <seealso cref="T:iTextSharp.text.Meta"/>
            <seealso cref="T:iTextSharp.text.Paragraph"/>
            <seealso cref="T:iTextSharp.text.Phrase"/>
            <seealso cref="T:iTextSharp.text.Rectangle"/>
            <seealso cref="T:iTextSharp.text.Row"/>
            <seealso cref="T:iTextSharp.text.Section"/>
            <seealso cref="T:iTextSharp.text.Table"/>
        </member>
        <member name="M:iTextSharp.text.IElement.Process(iTextSharp.text.IElementListener)">
            <summary>
            Processes the element by adding it (or the different parts) to an
            IElementListener.
            </summary>
            <param name="listener">an IElementListener</param>
            <returns>true if the element was processed successfully</returns>
        </member>
        <member name="M:iTextSharp.text.IElement.ToString">
            <summary>
            Gets the content of the text element.
            </summary>
            <returns>the content of the text element</returns>
        </member>
        <member name="P:iTextSharp.text.IElement.Type">
            <summary>
            Gets the type of the text element.
            </summary>
            <value>a type</value>
        </member>
        <member name="P:iTextSharp.text.IElement.Chunks">
            <summary>
            Gets all the chunks in this element.
            </summary>
            <value>an ArrayList</value>
        </member>
        <member name="M:iTextSharp.text.ITextElementArray.Add(System.Object)">
            <summary>
            Adds an object to the TextElementArray.
            </summary>
            <param name="o">an object that has to be added</param>
            <returns>true if the addition succeeded; false otherwise</returns>
        </member>
        <member name="M:iTextSharp.text.html.simpleparser.IncCell.#ctor(System.String,iTextSharp.text.html.simpleparser.ChainedProperties)">
            Creates a new instance of IncCell 
        </member>
        <member name="T:iTextSharp.text.html.simpleparser.IncTable">
            
             @author  psoares
        </member>
        <member name="M:iTextSharp.text.html.simpleparser.IncTable.#ctor(System.Collections.Hashtable)">
            Creates a new instance of IncTable 
        </member>
        <member name="M:iTextSharp.text.html.simpleparser.StyleSheet.#ctor">
            Creates a new instance of StyleSheet 
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.html.HtmlEncoder" -->
        <member name="F:iTextSharp.text.html.HtmlEncoder.htmlCode">
            List with the HTML translation of all the characters. 
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.html.HtmlEncoder.#ctor" -->
        <member name="M:iTextSharp.text.html.HtmlEncoder.Encode(System.String)">
             Converts a <CODE>String</CODE> to the HTML-format of this <CODE>String</CODE>.
            
             @param   string  The <CODE>String</CODE> to convert
             @return  a <CODE>String</CODE>
        </member>
        <member name="M:iTextSharp.text.html.HtmlEncoder.Encode(iTextSharp.text.Color)">
             Converts a <CODE>Color</CODE> into a HTML representation of this <CODE>Color</CODE>.
            
             @param   color   the <CODE>Color</CODE> that has to be converted.
             @return  the HTML representation of this <COLOR>Color</COLOR>
        </member>
        <member name="M:iTextSharp.text.html.HtmlEncoder.GetAlignment(System.Int32)">
             Translates the alignment value.
            
             @param   alignment   the alignment value
             @return  the translated value
        </member>
        <member name="T:iTextSharp.text.html.HtmlParser">
            <summary>
            This class can be used to parse an XML file.
            </summary>
        </member>
        <member name="T:iTextSharp.text.xml.XmlParser">
            <summary>
            This class can be used to parse an XML file.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.XmlParser.parser">
            <summary> This is the instance of the parser. </summary>
        </member>
        <member name="M:iTextSharp.text.xml.XmlParser.#ctor">
            <summary>
            Constructs an XmlParser.
            </summary>
        </member>
        <member name="M:iTextSharp.text.xml.XmlParser.Go(iTextSharp.text.IDocListener,System.Xml.XmlDocument)">
            <summary>
            Parses a given file.
            </summary>
            <param name="document"></param>
            <param name="file"></param>
        </member>
        <member name="M:iTextSharp.text.xml.XmlParser.Go(iTextSharp.text.IDocListener,System.String)">
            <summary>
            Parses a given file.
            </summary>
            <param name="document"></param>
            <param name="file"></param>
        </member>
        <member name="M:iTextSharp.text.xml.XmlParser.Go(iTextSharp.text.IDocListener,System.Xml.XmlTextReader)">
            <summary>
            Parses a given XmlTextReader.
            </summary>
            <param name="document"></param>
            <param name="reader"></param>
        </member>
        <member name="M:iTextSharp.text.xml.XmlParser.Go(iTextSharp.text.IDocListener,System.Xml.XmlDocument,System.Xml.XmlDocument)">
            <summary>
            Parses a given file.
            </summary>
            <param name="document"></param>
            <param name="file"></param>
            <param name="tagmap"></param>
        </member>
        <member name="M:iTextSharp.text.xml.XmlParser.Go(iTextSharp.text.IDocListener,System.Xml.XmlTextReader,System.String)">
            <summary>
            Parses a given XmlTextReader.
            </summary>
            <param name="document"></param>
            <param name="reader"></param>
            <param name="tagmap"></param>
        </member>
        <member name="M:iTextSharp.text.xml.XmlParser.Go(iTextSharp.text.IDocListener,System.String,System.String)">
            <summary>
            Parses a given file.
            </summary>
            <param name="document"></param>
            <param name="file"></param>
            <param name="tagmap"></param>
        </member>
        <member name="M:iTextSharp.text.xml.XmlParser.Go(iTextSharp.text.IDocListener,System.String,System.Collections.Hashtable)">
            <summary>
            Parses a given file.
            </summary>
            <param name="document"></param>
            <param name="file"></param>
            <param name="tagmap"></param>
        </member>
        <member name="M:iTextSharp.text.xml.XmlParser.Go(iTextSharp.text.IDocListener,System.Xml.XmlTextReader,System.Collections.Hashtable)">
            <summary>
            Parses a given XmlTextReader.
            </summary>
            <param name="document"></param>
            <param name="reader"></param>
            <param name="tagmap"></param>
        </member>
        <member name="M:iTextSharp.text.xml.XmlParser.Parse(iTextSharp.text.IDocListener,System.Xml.XmlDocument)">
            <summary>
            Parses a given file.
            </summary>
            <param name="document"></param>
            <param name="file"></param>
        </member>
        <member name="M:iTextSharp.text.xml.XmlParser.Parse(iTextSharp.text.IDocListener,System.String)">
            <summary>
            Parses a given file.
            </summary>
            <param name="document"></param>
            <param name="file"></param>
        </member>
        <member name="M:iTextSharp.text.xml.XmlParser.Parse(iTextSharp.text.IDocListener,System.Xml.XmlTextReader)">
            <summary>
            Parses a given XmlTextReader.
            </summary>
            <param name="document"></param>
            <param name="reader"></param>
        </member>
        <member name="M:iTextSharp.text.xml.XmlParser.Parse(iTextSharp.text.IDocListener,System.Xml.XmlDocument,System.Xml.XmlDocument)">
            <summary>
            Parses a given file.
            </summary>
            <param name="document"></param>
            <param name="file"></param>
            <param name="tagmap"></param>
        </member>
        <member name="M:iTextSharp.text.xml.XmlParser.Parse(iTextSharp.text.IDocListener,System.String,System.String)">
            <summary>
            Parses a given file.
            </summary>
            <param name="document"></param>
            <param name="file"></param>
            <param name="tagmap"></param>
        </member>
        <member name="M:iTextSharp.text.xml.XmlParser.Parse(iTextSharp.text.IDocListener,System.String,System.Collections.Hashtable)">
            <summary>
            Parses a given file.
            </summary>
            <param name="document"></param>
            <param name="file"></param>
            <param name="tagmap"></param>
        </member>
        <member name="M:iTextSharp.text.xml.XmlParser.Parse(iTextSharp.text.IDocListener,System.Xml.XmlTextReader,System.String)">
            <summary>
            Parses a given XmlTextReader.
            </summary>
            <param name="document"></param>
            <param name="reader"></param>
            <param name="tagmap"></param>
        </member>
        <member name="M:iTextSharp.text.xml.XmlParser.Parse(iTextSharp.text.IDocListener,System.Xml.XmlTextReader,System.Collections.Hashtable)">
            <summary>
            Parses a given XmlTextReader.
            </summary>
            <param name="document"></param>
            <param name="reader"></param>
            <param name="tagmap"></param>
        </member>
        <member name="M:iTextSharp.text.html.HtmlParser.#ctor">
            <summary>
            Constructs an XmlParser.
            </summary>
        </member>
        <member name="M:iTextSharp.text.html.HtmlParser.Go(iTextSharp.text.IDocListener,System.Xml.XmlDocument)">
            <summary>
            Parses a given file.
            </summary>
            <param name="document"></param>
            <param name="file"></param>
        </member>
        <member name="M:iTextSharp.text.html.HtmlParser.Go(iTextSharp.text.IDocListener,System.String)">
            <summary>
            Parses a given file.
            </summary>
            <param name="document"></param>
            <param name="file"></param>
        </member>
        <member name="M:iTextSharp.text.html.HtmlParser.Go(iTextSharp.text.IDocListener,System.Xml.XmlTextReader)">
            <summary>
            Parses a given XmlTextReader.
            </summary>
            <param name="document"></param>
            <param name="reader"></param>
        </member>
        <member name="M:iTextSharp.text.html.HtmlParser.Go(iTextSharp.text.IDocListener,System.Xml.XmlDocument,System.Xml.XmlDocument)">
            <summary>
            Parses a given file.
            </summary>
            <param name="document"></param>
            <param name="file"></param>
            <param name="tagmap"></param>
        </member>
        <member name="M:iTextSharp.text.html.HtmlParser.Go(iTextSharp.text.IDocListener,System.Xml.XmlTextReader,System.String)">
            <summary>
            Parses a given XmlTextReader.
            </summary>
            <param name="document"></param>
            <param name="reader"></param>
            <param name="tagmap"></param>
        </member>
        <member name="M:iTextSharp.text.html.HtmlParser.Go(iTextSharp.text.IDocListener,System.String,System.String)">
            <summary>
            Parses a given file.
            </summary>
            <param name="document"></param>
            <param name="file"></param>
            <param name="tagmap"></param>
        </member>
        <member name="M:iTextSharp.text.html.HtmlParser.Go(iTextSharp.text.IDocListener,System.String,System.Collections.Hashtable)">
            <summary>
            Parses a given file.
            </summary>
            <param name="document"></param>
            <param name="file"></param>
            <param name="tagmap"></param>
        </member>
        <member name="M:iTextSharp.text.html.HtmlParser.Go(iTextSharp.text.IDocListener,System.Xml.XmlTextReader,System.Collections.Hashtable)">
            <summary>
            Parses a given XmlTextReader.
            </summary>
            <param name="document"></param>
            <param name="reader"></param>
            <param name="tagmap"></param>
        </member>
        <member name="M:iTextSharp.text.html.HtmlParser.Parse(iTextSharp.text.IDocListener,System.Xml.XmlDocument)">
            <summary>
            Parses a given file.
            </summary>
            <param name="document"></param>
            <param name="file"></param>
        </member>
        <member name="M:iTextSharp.text.html.HtmlParser.Parse(iTextSharp.text.IDocListener,System.String)">
            <summary>
            Parses a given file.
            </summary>
            <param name="document"></param>
            <param name="file"></param>
        </member>
        <member name="M:iTextSharp.text.html.HtmlParser.Parse(iTextSharp.text.IDocListener,System.Xml.XmlTextReader)">
            <summary>
            Parses a given XmlTextReader.
            </summary>
            <param name="document"></param>
            <param name="reader"></param>
        </member>
        <member name="M:iTextSharp.text.html.HtmlParser.Parse(iTextSharp.text.IDocListener,System.Xml.XmlDocument,System.Xml.XmlDocument)">
            <summary>
            Parses a given file.
            </summary>
            <param name="document"></param>
            <param name="file"></param>
            <param name="tagmap"></param>
        </member>
        <member name="M:iTextSharp.text.html.HtmlParser.Parse(iTextSharp.text.IDocListener,System.String,System.String)">
            <summary>
            Parses a given file.
            </summary>
            <param name="document"></param>
            <param name="file"></param>
            <param name="tagmap"></param>
        </member>
        <member name="M:iTextSharp.text.html.HtmlParser.Parse(iTextSharp.text.IDocListener,System.String,System.Collections.Hashtable)">
            <summary>
            Parses a given file.
            </summary>
            <param name="document"></param>
            <param name="file"></param>
            <param name="tagmap"></param>
        </member>
        <member name="M:iTextSharp.text.html.HtmlParser.Parse(iTextSharp.text.IDocListener,System.Xml.XmlTextReader,System.String)">
            <summary>
            Parses a given XmlTextReader.
            </summary>
            <param name="document"></param>
            <param name="reader"></param>
            <param name="tagmap"></param>
        </member>
        <member name="M:iTextSharp.text.html.HtmlParser.Parse(iTextSharp.text.IDocListener,System.Xml.XmlTextReader,System.Collections.Hashtable)">
            <summary>
            Parses a given XmlTextReader.
            </summary>
            <param name="document"></param>
            <param name="reader"></param>
            <param name="tagmap"></param>
        </member>
        <member name="T:iTextSharp.text.html.HtmlPeer">
            This interface is implemented by the peer of all the iText objects.
        </member>
        <member name="T:iTextSharp.text.xml.XmlPeer">
            <summary>
            This interface is implemented by the peer of all the iText objects.
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.XmlPeer.tagname">
            <summary> This is the name of the alias. </summary>
        </member>
        <member name="F:iTextSharp.text.xml.XmlPeer.customTagname">
            <summary> This is the name of the alias. </summary>
        </member>
        <member name="F:iTextSharp.text.xml.XmlPeer.attributeAliases">
            <summary> This is the Map that contains the aliases of the attributes. </summary>
        </member>
        <member name="F:iTextSharp.text.xml.XmlPeer.attributeValues">
            <summary> This is the Map that contains the default values of the attributes. </summary>
        </member>
        <member name="F:iTextSharp.text.xml.XmlPeer.defaultContent">
            <summary> This is String that contains the default content of the attributes. </summary>
        </member>
        <member name="M:iTextSharp.text.xml.XmlPeer.#ctor(System.String,System.String)">
            <summary>
            Creates a XmlPeer.
            </summary>
            <param name="name"></param>
            <param name="alias"></param>
        </member>
        <member name="M:iTextSharp.text.xml.XmlPeer.GetAttributes(System.Collections.Hashtable)">
            <summary> Gets the list of attributes of the peer. </summary>
        </member>
        <member name="M:iTextSharp.text.xml.XmlPeer.AddAlias(System.String,System.String)">
            <summary>
            Sets an alias for an attribute.
            </summary>
            <param name="name">the iText tagname</param>
            <param name="alias">the custom tagname</param>
        </member>
        <member name="M:iTextSharp.text.xml.XmlPeer.AddValue(System.String,System.String)">
            <summary>
            Sets a value for an attribute.
            </summary>
            <param name="name">the iText tagname</param>
            <param name="value">the default value for this tag</param>
        </member>
        <member name="M:iTextSharp.text.xml.XmlPeer.GetName(System.String)">
            <summary>
            Returns the iText attribute name.
            </summary>
            <param name="name">the custom attribute name</param>
            <returns>the iText attribute name</returns>
        </member>
        <member name="P:iTextSharp.text.xml.XmlPeer.Tag">
            <summary>
            Gets the tagname of the peer.
            </summary>
            <value>the tagname of the peer</value>
        </member>
        <member name="P:iTextSharp.text.xml.XmlPeer.Alias">
            <summary>
            Gets the alias of the peer.
            </summary>
            <value>the alias of the peer</value>
        </member>
        <member name="P:iTextSharp.text.xml.XmlPeer.Content">
            <summary>
            Sets the default content.
            </summary>
            <value>the default content</value>
        </member>
        <member name="P:iTextSharp.text.xml.XmlPeer.DefaultValues">
            <summary>
            Returns the default values.
            </summary>
            <value>the default values</value>
        </member>
        <member name="M:iTextSharp.text.html.HtmlPeer.#ctor(System.String,System.String)">
            Creates a XmlPeer.
            @param name the iText name of the tag
            @param alias the Html name of the tag
        </member>
        <member name="M:iTextSharp.text.html.HtmlPeer.AddAlias(System.String,System.String)">
             Sets an alias for an attribute.
            
             @param   name    the iText tagname
             @param   alias   the custom tagname
        </member>
        <member name="T:iTextSharp.text.html.HtmlTagMap">
            The <CODE>Tags</CODE>-class maps several XHTML-tags to iText-objects.
        </member>
        <member name="M:iTextSharp.text.html.HtmlTagMap.#ctor">
            Constructs an HtmlTagMap.
        </member>
        <member name="M:iTextSharp.text.html.HtmlTagMap.IsHtml(System.String)">
            Checks if this is the root tag.
            @param tag a tagvalue
            @return true if tag is HTML or html
        </member>
        <member name="M:iTextSharp.text.html.HtmlTagMap.IsHead(System.String)">
            Checks if this is the head tag.
            @param tag a tagvalue
            @return true if tag is HEAD or head
        </member>
        <member name="M:iTextSharp.text.html.HtmlTagMap.IsMeta(System.String)">
            Checks if this is the meta tag.
            @param tag a tagvalue
            @return true if tag is META or meta
        </member>
        <member name="M:iTextSharp.text.html.HtmlTagMap.IsLink(System.String)">
            Checks if this is the linl tag.
            @param tag a tagvalue
            @return true if tag is LINK or link
        </member>
        <member name="M:iTextSharp.text.html.HtmlTagMap.IsTitle(System.String)">
            Checks if this is the title tag.
            @param tag a tagvalue
            @return true if tag is TITLE or title
        </member>
        <member name="M:iTextSharp.text.html.HtmlTagMap.IsBody(System.String)">
            Checks if this is the root tag.
            @param tag a tagvalue
            @return true if tag is BODY or body
        </member>
        <member name="M:iTextSharp.text.html.HtmlTagMap.IsSpecialTag(System.String)">
            Checks if this is a special tag.
            @param tag a tagvalue
            @return true if tag is a HTML, HEAD, META, LINK or BODY tag (case insensitive)
        </member>
        <member name="T:iTextSharp.text.html.HtmlTags">
            A class that contains all the possible tagnames and their attributes.
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.HTML">
            the root tag. 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.HEAD">
            the head tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.CONTENT">
            This is a possible HTML attribute for the HEAD tag. 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.META">
            the meta tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.SUBJECT">
            attribute of the root tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.KEYWORDS">
            attribute of the root tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.AUTHOR">
            attribute of the root tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.TITLE">
            the title tag. 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.SCRIPT">
            the script tag. 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.LANGUAGE">
            This is a possible HTML attribute for the SCRIPT tag. 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.JAVASCRIPT">
            This is a possible value for the LANGUAGE attribute. 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.BODY">
            the body tag. 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.JAVASCRIPT_ONLOAD">
            This is a possible HTML attribute for the BODY tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.JAVASCRIPT_ONUNLOAD">
            This is a possible HTML attribute for the BODY tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.TOPMARGIN">
            This is a possible HTML attribute for the BODY tag. 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.BOTTOMMARGIN">
            This is a possible HTML attribute for the BODY tag. 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.LEFTMARGIN">
            This is a possible HTML attribute for the BODY tag. 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.RIGHTMARGIN">
            This is a possible HTML attribute for the BODY tag. 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.CHUNK">
            the chunk tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.CODE">
            the phrase tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.VAR">
            the phrase tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.ANCHOR">
            the anchor tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.ORDEREDLIST">
            the list tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.UNORDEREDLIST">
            the list tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.LISTITEM">
            the listitem tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.PARAGRAPH">
            the paragraph tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.NAME">
            attribute of anchor tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.REFERENCE">
            attribute of anchor tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.FONT">
            attribute of the chunk tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.SIZE">
            attribute of the chunk tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.COLOR">
            attribute of the chunk/table/cell tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.EM">
            some phrase tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.I">
            some phrase tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.STRONG">
            some phrase tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.B">
            some phrase tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.S">
            some phrase tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.U">
            some phrase tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.SUB">
            some phrase tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.SUP">
            some phrase tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.HORIZONTALRULE">
            the possible value of a tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.TABLE">
            the table tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.ROW">
            the cell tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.CELL">
            the cell tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.HEADERCELL">
            attribute of the cell tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.COLUMNS">
            attribute of the table tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.CELLPADDING">
            attribute of the table tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.CELLSPACING">
            attribute of the table tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.COLSPAN">
            attribute of the cell tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.ROWSPAN">
            attribute of the cell tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.NOWRAP">
            attribute of the cell tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.BORDERWIDTH">
            attribute of the table/cell tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.WIDTH">
            attribute of the table/cell tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.BACKGROUNDCOLOR">
            attribute of the table/cell tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.BORDERCOLOR">
            attribute of the table/cell tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.ALIGN">
            attribute of paragraph/image/table tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.LEFT">
            attribute of chapter/section/paragraph/table/cell tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.RIGHT">
            attribute of chapter/section/paragraph/table/cell tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.HORIZONTALALIGN">
            attribute of the cell tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.VERTICALALIGN">
            attribute of the cell tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.TOP">
            attribute of the table/cell tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.BOTTOM">
            attribute of the table/cell tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.IMAGE">
            the image tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.URL">
            attribute of the image tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.ALT">
            attribute of the image tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.PLAINWIDTH">
            attribute of the image tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.PLAINHEIGHT">
            attribute of the image tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.NEWLINE">
            the newpage tag 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.ALIGN_LEFT">
            the possible value of an alignment attribute 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.ALIGN_CENTER">
            the possible value of an alignment attribute 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.ALIGN_RIGHT">
            the possible value of an alignment attribute 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.ALIGN_JUSTIFIED">
            the possible value of an alignment attribute 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.ALIGN_TOP">
            the possible value of an alignment attribute 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.ALIGN_MIDDLE">
            the possible value of an alignment attribute 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.ALIGN_BOTTOM">
            the possible value of an alignment attribute 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.ALIGN_BASELINE">
            the possible value of an alignment attribute 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.DEFAULT">
            the possible value of an alignment attribute 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.DIV">
            The DIV tag. 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.SPAN">
            The SPAN tag. 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.LINK">
            The LINK tag. 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.TEXT_CSS">
            This is a possible HTML attribute for the LINK tag. 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.REL">
            This is a possible HTML attribute for the LINK tag. 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.STYLE">
            This is used for inline css style information 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.TYPE">
            This is a possible HTML attribute for the LINK tag. 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.STYLESHEET">
            This is a possible HTML attribute. 
        </member>
        <member name="F:iTextSharp.text.html.HtmlTags.H">
            attribute of anchor tag 
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.html.HtmlWriter" -->
        <member name="T:iTextSharp.text.DocWriter">
            <summary>
            An abstract Writer class for documents.
            </summary>
            <remarks>
            DocWriter is the abstract class of several writers such
            as PdfWriter and HtmlWriter.
            A DocWriter can be added as a DocListener
            to a certain Document by getting an instance (see method
            GetInstance() in the specific writer-classes).
            Every Element added to the original Document
            will be written to the stream of the listening
            DocWriter.
            </remarks>
            <seealso cref="T:iTextSharp.text.Document"/>
            <seealso cref="T:iTextSharp.text.IDocListener"/>
        </member>
        <member name="F:iTextSharp.text.DocWriter.NEWLINE">
            <summary> This is some byte that is often used. </summary>
        </member>
        <member name="F:iTextSharp.text.DocWriter.TAB">
            <summary> This is some byte that is often used. </summary>
        </member>
        <member name="F:iTextSharp.text.DocWriter.LT">
            <summary> This is some byte that is often used. </summary>
        </member>
        <member name="F:iTextSharp.text.DocWriter.SPACE">
            <summary> This is some byte that is often used. </summary>
        </member>
        <member name="F:iTextSharp.text.DocWriter.EQUALS">
            <summary> This is some byte that is often used. </summary>
        </member>
        <member name="F:iTextSharp.text.DocWriter.QUOTE">
            <summary> This is some byte that is often used. </summary>
        </member>
        <member name="F:iTextSharp.text.DocWriter.GT">
            <summary> This is some byte that is often used. </summary>
        </member>
        <member name="F:iTextSharp.text.DocWriter.FORWARD">
            <summary> This is some byte that is often used. </summary>
        </member>
        <member name="F:iTextSharp.text.DocWriter.pageSize">
            <summary> The pageSize. </summary>
        </member>
        <member name="F:iTextSharp.text.DocWriter.document">
            <summary> This is the document that has to be written. </summary>
        </member>
        <member name="F:iTextSharp.text.DocWriter.os">
            <summary> The stream of this writer. </summary>
        </member>
        <member name="F:iTextSharp.text.DocWriter.open">
            <summary> Is the writer open for writing? </summary>
        </member>
        <member name="F:iTextSharp.text.DocWriter.pause">
            <summary> Do we have to pause all writing actions? </summary>
        </member>
        <member name="F:iTextSharp.text.DocWriter.closeStream">
            Closes the stream on document close 
        </member>
        <member name="M:iTextSharp.text.DocWriter.#ctor(iTextSharp.text.Document,System.IO.Stream)">
            <summary>
            Constructs a DocWriter.
            </summary>
            <param name="document">The Document that has to be written</param>
            <param name="os">The Stream the writer has to write to.</param>
        </member>
        <member name="M:iTextSharp.text.DocWriter.Add(iTextSharp.text.IElement)">
            <summary>
            Signals that an Element was added to the Document.
            </summary>
            <remarks>
            This method should be overriden in the specific DocWriter classes
            derived from this abstract class.
            </remarks>
            <param name="element"></param>
            <returns>false</returns>
        </member>
        <member name="M:iTextSharp.text.DocWriter.Open">
            <summary>
            Signals that the Document was opened.
            </summary>
        </member>
        <member name="M:iTextSharp.text.DocWriter.SetPageSize(iTextSharp.text.Rectangle)">
            <summary>
            Sets the pagesize.
            </summary>
            <param name="pageSize">the new pagesize</param>
            <returns>a boolean</returns>
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.DocWriter.Add(iTextSharp.text.Watermark)" -->
        <member name="M:iTextSharp.text.DocWriter.RemoveWatermark">
            <summary>
            Removes the Watermark (if there is one).
            </summary>
        </member>
        <member name="M:iTextSharp.text.DocWriter.SetMargins(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the margins.
            </summary>
            <remarks>
            This does nothing. Has to be overridden if needed.
            </remarks>
            <param name="marginLeft">the margin on the left</param>
            <param name="marginRight">the margin on the right</param>
            <param name="marginTop">the margin on the top</param>
            <param name="marginBottom">the margin on the bottom</param>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.DocWriter.NewPage">
            <summary>
            Signals that an new page has to be started.
            </summary>
            <remarks>
            This does nothing. Has to be overridden if needed.
            </remarks>
            <returns>true if the page was added, false if not.</returns>
        </member>
        <member name="M:iTextSharp.text.DocWriter.ResetHeader">
            <summary>
            Resets the header of this document.
            </summary>
            <remarks>
            This method should be overriden in the specific DocWriter classes
            derived from this abstract class if they actually support the use of
            headers.
            </remarks>
        </member>
        <member name="M:iTextSharp.text.DocWriter.ResetFooter">
            <summary>
            Resets the footer of this document.
            </summary>
            <remarks>
            This method should be overriden in the specific DocWriter classes
            derived from this abstract class if they actually support the use of
            footers.
            </remarks>
        </member>
        <member name="M:iTextSharp.text.DocWriter.ResetPageCount">
            <summary>
            Sets the page number to 0.
            </summary>
            <remarks>
            This method should be overriden in the specific DocWriter classes
            derived from this abstract class if they actually support the use of
            pagenumbers.
            </remarks>
        </member>
        <member name="M:iTextSharp.text.DocWriter.Close">
            <summary>
            Signals that the Document was closed and that no other
            Elements will be added.
            </summary>
        </member>
        <member name="M:iTextSharp.text.DocWriter.GetISOBytes(System.String)">
            <summary>
            Converts a string into a Byte array
            according to the ISO-8859-1 codepage.
            </summary>
            <param name="text">the text to be converted</param>
            <returns>the conversion result</returns>
        </member>
        <member name="M:iTextSharp.text.DocWriter.Pause">
            <summary>
            Let the writer know that all writing has to be paused.
            </summary>
        </member>
        <member name="M:iTextSharp.text.DocWriter.Resume">
            <summary>
            Let the writer know that writing may be resumed.
            </summary>
        </member>
        <member name="M:iTextSharp.text.DocWriter.Flush">
            <summary>
            Flushes the Stream.
            </summary>
        </member>
        <member name="M:iTextSharp.text.DocWriter.Write(System.String)">
            <summary>
            Writes a string to the stream.
            </summary>
            <param name="str">the string to write</param>
        </member>
        <member name="M:iTextSharp.text.DocWriter.AddTabs(System.Int32)">
            <summary>
            Writes a number of tabs.
            </summary>
            <param name="indent">the number of tabs to add</param>
        </member>
        <member name="M:iTextSharp.text.DocWriter.Write(System.String,System.String)">
            <summary>
            Writes a key-value pair to the stream.
            </summary>
            <param name="key">the name of an attribute</param>
            <param name="value">the value of an attribute</param>
        </member>
        <member name="M:iTextSharp.text.DocWriter.WriteStart(System.String)">
            <summary>
            Writes a starttag to the stream.
            </summary>
            <param name="tag">the name of the tag</param>
        </member>
        <member name="M:iTextSharp.text.DocWriter.WriteEnd(System.String)">
            <summary>
            Writes an endtag to the stream.
            </summary>
            <param name="tag">the name of the tag</param>
        </member>
        <member name="M:iTextSharp.text.DocWriter.WriteEnd">
            <summary>
            Writes an endtag to the stream.
            </summary>
        </member>
        <member name="M:iTextSharp.text.DocWriter.WriteMarkupAttributes(iTextSharp.text.IMarkupAttributes)">
            <summary>
            Writes the markup attributes of the specified MarkupAttributes
            object to the stream.
            </summary>
            <param name="mAtt">the MarkupAttributes to write.</param>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.DocWriter.HasMarkupAttributes(iTextSharp.text.IElement)">
            <summary>
            Returns true if the specified Element implements
            MarkupAttributes and has one or more attributes to write.
            </summary>
            <param name="element">the Element to check.</param>
            <returns>a boolean</returns>
        </member>
        <member name="P:iTextSharp.text.DocWriter.Header">
            <summary>
            Changes the header of this document.
            </summary>
            <remarks>
            This method should be overriden in the specific DocWriter classes
            derived from this abstract class if they actually support the use of
            headers.
            </remarks>
            <value>the new header</value>
        </member>
        <member name="P:iTextSharp.text.DocWriter.Footer">
            <summary>
            Changes the footer of this document.
            </summary>
            <remarks>
            This method should be overriden in the specific DocWriter classes
            derived from this abstract class if they actually support the use of
            footers.
            </remarks>
            <value>the new footer</value>
        </member>
        <member name="P:iTextSharp.text.DocWriter.PageCount">
            <summary>
            Sets the page number.
            </summary>
            <remarks>
            This method should be overriden in the specific DocWriter classes
            derived from this abstract class if they actually support the use of
            pagenumbers.
            </remarks>
        </member>
        <member name="F:iTextSharp.text.html.HtmlWriter.NBSP">
            This is a possible HTML-tag. 
        </member>
        <member name="F:iTextSharp.text.html.HtmlWriter.BEGINCOMMENT">
            This is a possible HTML-tag. 
        </member>
        <member name="F:iTextSharp.text.html.HtmlWriter.ENDCOMMENT">
            This is a possible HTML-tag. 
        </member>
        <member name="F:iTextSharp.text.html.HtmlWriter.currentfont">
            This is the current font of the HTML. 
        </member>
        <member name="F:iTextSharp.text.html.HtmlWriter.standardfont">
            This is the standard font of the HTML. 
        </member>
        <member name="F:iTextSharp.text.html.HtmlWriter.imagepath">
            This is a path for images. 
        </member>
        <member name="F:iTextSharp.text.html.HtmlWriter.pageN">
            Stores the page number. 
        </member>
        <member name="F:iTextSharp.text.html.HtmlWriter.header">
            This is the textual part of a header 
        </member>
        <member name="F:iTextSharp.text.html.HtmlWriter.footer">
            This is the textual part of the footer 
        </member>
        <member name="M:iTextSharp.text.html.HtmlWriter.#ctor(iTextSharp.text.Document,System.IO.Stream)">
             Constructs a <CODE>HtmlWriter</CODE>.
            
             @param doc     The <CODE>Document</CODE> that has to be written as HTML
             @param os      The <CODE>Stream</CODE> the writer has to write to.
        </member>
        <member name="M:iTextSharp.text.html.HtmlWriter.GetInstance(iTextSharp.text.Document,System.IO.Stream)">
             Gets an instance of the <CODE>HtmlWriter</CODE>.
            
             @param document  The <CODE>Document</CODE> that has to be written
             @param os  The <CODE>Stream</CODE> the writer has to write to.
             @return  a new <CODE>HtmlWriter</CODE>
        </member>
        <member name="M:iTextSharp.text.html.HtmlWriter.NewPage">
             Signals that an new page has to be started.
            
             @return  <CODE>true</CODE> if this action succeeded, <CODE>false</CODE> if not.
             @throws  DocumentException when a document isn't open yet, or has been closed
        </member>
        <member name="M:iTextSharp.text.html.HtmlWriter.Add(iTextSharp.text.IElement)">
             Signals that an <CODE>Element</CODE> was added to the <CODE>Document</CODE>.
            
             @return  <CODE>true</CODE> if the element was added, <CODE>false</CODE> if not.
             @throws  DocumentException when a document isn't open yet, or has been closed
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.html.HtmlWriter.Open" -->
        <member name="M:iTextSharp.text.html.HtmlWriter.Close">
            Signals that the <CODE>Document</CODE> was closed and that no other
            <CODE>Elements</CODE> will be added.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.html.HtmlWriter.InitHeader" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.html.HtmlWriter.InitFooter" -->
        <member name="M:iTextSharp.text.html.HtmlWriter.WriteHeader(iTextSharp.text.Meta)">
             Writes a Metatag in the header.
            
             @param   meta   the element that has to be written
             @throws  IOException
        </member>
        <member name="M:iTextSharp.text.html.HtmlWriter.WriteLink(iTextSharp.text.Header)">
             Writes a link in the header.
            
             @param   header   the element that has to be written
             @throws  IOException
        </member>
        <member name="M:iTextSharp.text.html.HtmlWriter.WriteJavaScript(iTextSharp.text.Header)">
             Writes a JavaScript section or, if the markup attribute HtmlTags.URL is set, a JavaScript reference in the header.
            
             @param   header   the element that has to be written
             @throws  IOException
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.html.HtmlWriter.WriteComment(System.String)" -->
        <member name="M:iTextSharp.text.html.HtmlWriter.SetStandardFont(iTextSharp.text.Font)">
             Changes the standardfont.
            
             @param standardFont  The font
        </member>
        <member name="M:iTextSharp.text.html.HtmlWriter.IsOtherFont(iTextSharp.text.Font)">
             Checks if a given font is the same as the font that was last used.
            
             @param   font    the font of an object
             @return  true if the font differs
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.html.HtmlWriter.SetImagepath(System.String)" -->
        <member name="M:iTextSharp.text.html.HtmlWriter.ResetImagepath">
            Resets the imagepath.
        </member>
        <member name="M:iTextSharp.text.html.HtmlWriter.SetHeader(iTextSharp.text.HeaderFooter)">
             Changes the header of this document.
            
             @param header    the new header
        </member>
        <member name="M:iTextSharp.text.html.HtmlWriter.SetFooter(iTextSharp.text.HeaderFooter)">
             Changes the footer of this document.
            
             @param footer    the new footer
        </member>
        <member name="M:iTextSharp.text.html.HtmlWriter.Add(System.String)">
             Signals that a <CODE>String</CODE> was added to the <CODE>Document</CODE>.
            
             @return  <CODE>true</CODE> if the string was added, <CODE>false</CODE> if not.
             @throws  DocumentException when a document isn't open yet, or has been closed
        </member>
        <member name="M:iTextSharp.text.html.HtmlWriter.Write(iTextSharp.text.IElement,System.Int32)">
             Writes the HTML representation of an element.
            
             @param   element     the element
             @param   indent      the indentation
        </member>
        <member name="M:iTextSharp.text.html.HtmlWriter.WriteSection(iTextSharp.text.Section,System.Int32)">
             Writes the HTML representation of a section.
            
             @param   section     the section to write
             @param   indent      the indentation
        </member>
        <member name="M:iTextSharp.text.html.HtmlWriter.Write(iTextSharp.text.Font,System.util.Properties)">
             Writes the representation of a <CODE>Font</CODE>.
            
             @param font              a <CODE>Font</CODE>
             @param styleAttributes   the style of the font
        </member>
        <member name="M:iTextSharp.text.html.HtmlWriter.WriteCssProperty(System.String,System.String)">
            Writes out a CSS property.
        </member>
        <member name="T:iTextSharp.text.html.ITextmyHtmlHandler">
            The <CODE>Tags</CODE>-class maps several XHTML-tags to iText-objects.
        </member>
        <member name="T:iTextSharp.text.xml.ITextmyHandler">
            <summary>
            The <CODE>iTextmyHandler</CODE>-class maps several XHTML-tags to iText-objects.
            </summary>
        </member>
        <member name="T:iTextSharp.text.xml.ITextHandler">
            <summary>
            The <CODE>iTextHandler</CODE>-class maps several XHTML-tags to iText-objects.
            </summary>
        </member>
        <member name="T:iTextSharp.text.xml.ParserBase">
            <summary>
            The <CODE>ParserBase</CODE>-class provides XML document parsing.
            </summary>
        </member>
        <member name="M:iTextSharp.text.xml.ParserBase.Parse(System.String)">
            <summary>
            Begins the process of processing an XML document
            </summary>
            <param name="url">the XML document to parse</param>
        </member>
        <member name="M:iTextSharp.text.xml.ParserBase.StartElement(System.String,System.String,System.String,System.Collections.Hashtable)">
            <summary>
            This method gets called when a start tag is encountered.
            </summary>
            <param name="uri"></param>
            <param name="lname"></param>
            <param name="name">the name of the tag that is encountered</param>
            <param name="attrs">the list of attributes</param>
        </member>
        <member name="M:iTextSharp.text.xml.ParserBase.EndElement(System.String,System.String,System.String)">
            <summary>
            This method gets called when an end tag is encountered.
            </summary>
            <param name="uri"></param>
            <param name="lname"></param>
            <param name="name">the name of the tag that ends</param>
        </member>
        <member name="M:iTextSharp.text.xml.ParserBase.Characters(System.String,System.Int32,System.Int32)">
            <summary>
            This method gets called when characters are encountered.
            </summary>
            <param name="content">an array of characters</param>
            <param name="start">the start position in the array</param>
            <param name="length">the number of characters to read from the array</param>
        </member>
        <member name="F:iTextSharp.text.xml.ITextHandler.document">
            <summary> This is the resulting document. </summary>
        </member>
        <member name="F:iTextSharp.text.xml.ITextHandler.stack">
            <summary> This is a <CODE>Stack</CODE> of objects, waiting to be added to the document. </summary>
        </member>
        <member name="F:iTextSharp.text.xml.ITextHandler.chapters">
            <summary> Counts the number of chapters in this document. </summary>
        </member>
        <member name="F:iTextSharp.text.xml.ITextHandler.currentChunk">
            <summary> This is the current chunk to which characters can be added. </summary>
        </member>
        <member name="F:iTextSharp.text.xml.ITextHandler.ignore">
            <summary> This is the current chunk to which characters can be added. </summary>
        </member>
        <member name="F:iTextSharp.text.xml.ITextHandler.controlOpenClose">
            <summary> This is a flag that can be set, if you want to open and close the Document-object yourself. </summary>
        </member>
        <member name="F:iTextSharp.text.xml.ITextHandler.topMargin">
            current margin of a page. 
        </member>
        <member name="F:iTextSharp.text.xml.ITextHandler.rightMargin">
            current margin of a page. 
        </member>
        <member name="F:iTextSharp.text.xml.ITextHandler.leftMargin">
            current margin of a page. 
        </member>
        <member name="F:iTextSharp.text.xml.ITextHandler.bottomMargin">
            current margin of a page. 
        </member>
        <member name="M:iTextSharp.text.xml.ITextHandler.#ctor(iTextSharp.text.IDocListener)">
            <summary>
            Constructs a new iTextHandler that will translate all the events
            triggered by the parser to actions on the <CODE>Document</CODE>-object.
            </summary>
            <param name="document">this is the document on which events must be triggered</param>
        </member>
        <member name="M:iTextSharp.text.xml.ITextHandler.SetControlOpenClose(System.Boolean)">
            <summary>
            Sets the parameter that allows you to enable/disable the control over the Document.Open() and Document.Close() method.
            </summary>
            <remarks>
            If you set this parameter to true (= default), the parser will open the Document object when the start-root-tag is encountered
            and close it when the end-root-tag is met. If you set it to false, you have to open and close the Document object
            yourself.
            </remarks>
            <param name="controlOpenClose">set this to false if you plan to open/close the Document yourself</param>
        </member>
        <member name="M:iTextSharp.text.xml.ITextHandler.StartElement(System.String,System.String,System.String,System.Collections.Hashtable)">
            <summary>
            This method gets called when a start tag is encountered.
            </summary>
            <param name="uri"></param>
            <param name="lname"></param>
            <param name="name">the name of the tag that is encountered</param>
            <param name="attrs">the list of attributes</param>
        </member>
        <member name="M:iTextSharp.text.xml.ITextHandler.HandleStartingTags(System.String,System.util.Properties)">
            <summary>
            This method deals with the starting tags.
            </summary>
            <param name="name">the name of the tag</param>
            <param name="attributes">the list of attributes</param>
        </member>
        <member name="M:iTextSharp.text.xml.ITextHandler.IgnorableWhitespace(System.Char[],System.Int32,System.Int32)">
            <summary>
            This method gets called when ignorable white space encountered.
            </summary>
            <param name="ch">an array of characters</param>
            <param name="start">the start position in the array</param>
            <param name="length">the number of characters to read from the array</param>
        </member>
        <member name="M:iTextSharp.text.xml.ITextHandler.Characters(System.String,System.Int32,System.Int32)">
            <summary>
            This method gets called when characters are encountered.
            </summary>
            <param name="content">an array of characters</param>
            <param name="start">the start position in the array</param>
            <param name="length">the number of characters to read from the array</param>
        </member>
        <member name="M:iTextSharp.text.xml.ITextHandler.EndElement(System.String,System.String,System.String)">
            <summary>
            This method gets called when an end tag is encountered.
            </summary>
            <param name="uri"></param>
            <param name="lname"></param>
            <param name="name">the name of the tag that ends</param>
        </member>
        <member name="M:iTextSharp.text.xml.ITextHandler.HandleEndingTags(System.String)">
            <summary>
            This method deals with the starting tags.
            </summary>
            <param name="name">the name of the tag</param>
        </member>
        <member name="M:iTextSharp.text.xml.ITextHandler.IsNewpage(System.String)">
            <summary>
            Checks if a certain tag corresponds with the newpage-tag.
            </summary>
            <param name="tag">a presumed tagname</param>
            <returns><CODE>true</CODE> or <CODE>false</CODE></returns>
        </member>
        <member name="M:iTextSharp.text.xml.ITextHandler.IsNewline(System.String)">
            <summary>
            Checks if a certain tag corresponds with the newpage-tag.
            </summary>
            <param name="tag">a presumed tagname</param>
            <returns><CODE>true</CODE> or <CODE>false</CODE></returns>
        </member>
        <member name="M:iTextSharp.text.xml.ITextHandler.IsDocumentRoot(System.String)">
            <summary>
            Checks if a certain tag corresponds with the roottag.
            </summary>
            <param name="tag">a presumed tagname</param>
            <returns><CODE>true</CODE> if <VAR>tag</VAR> equals <CODE>itext</CODE>, <CODE>false</CODE> otherwise.</returns>
        </member>
        <member name="F:iTextSharp.text.xml.ITextmyHandler.myTags">
            <summary> This Hashtable contains all the custom keys and peers. </summary>
        </member>
        <member name="M:iTextSharp.text.xml.ITextmyHandler.#ctor(iTextSharp.text.IDocListener,System.Collections.Hashtable)">
            <summary>
            Constructs a new iTextHandler that will translate all the events
            triggered by the parser to actions on the <CODE>Document</CODE>-object.
            </summary>
            <param name="document">this is the document on which events must be triggered</param>
            <param name="myTags">a map of tags</param>
        </member>
        <member name="M:iTextSharp.text.xml.ITextmyHandler.StartElement(System.String,System.String,System.String,System.Collections.Hashtable)">
            <summary>
            This method gets called when a start tag is encountered.
            </summary>
            <param name="uri"></param>
            <param name="lname"></param>
            <param name="name">the name of the tag that is encountered</param>
            <param name="attrs">the list of attributes</param>
        </member>
        <member name="M:iTextSharp.text.xml.ITextmyHandler.EndElement(System.String,System.String,System.String)">
            <summary>
            This method gets called when an end tag is encountered.
            </summary>
            <param name="uri"></param>
            <param name="lname"></param>
            <param name="name">the name of the tag that ends</param>
        </member>
        <member name="F:iTextSharp.text.html.ITextmyHtmlHandler.bodyAttributes">
            These are the properties of the body section. 
        </member>
        <member name="F:iTextSharp.text.html.ITextmyHtmlHandler.tableBorder">
            This is the status of the table border. 
        </member>
        <member name="M:iTextSharp.text.html.ITextmyHtmlHandler.#ctor(iTextSharp.text.IDocListener)">
             Constructs a new SAXiTextHandler that will translate all the events
             triggered by the parser to actions on the <CODE>Document</CODE>-object.
            
             @param   document    this is the document on which events must be triggered
        </member>
        <member name="M:iTextSharp.text.html.ITextmyHtmlHandler.#ctor(iTextSharp.text.IDocListener,System.Collections.Hashtable)">
             Constructs a new SAXiTextHandler that will translate all the events
             triggered by the parser to actions on the <CODE>Document</CODE>-object.
            
             @param   document    this is the document on which events must be triggered
             @param htmlTags a tagmap translating HTML tags to iText tags
        </member>
        <member name="M:iTextSharp.text.html.ITextmyHtmlHandler.StartElement(System.String,System.String,System.String,System.Collections.Hashtable)">
             This method gets called when a start tag is encountered.
            
             @param   uri         the Uniform Resource Identifier
             @param   lname       the local name (without prefix), or the empty string if Namespace processing is not being performed.
             @param   name        the name of the tag that is encountered
             @param   attrs       the list of attributes
        </member>
        <member name="M:iTextSharp.text.html.ITextmyHtmlHandler.EndElement(System.String,System.String,System.String)">
             This method gets called when an end tag is encountered.
            
             @param   uri         the Uniform Resource Identifier
             @param   lname       the local name (without prefix), or the empty string if Namespace processing is not being performed.
             @param   name        the name of the tag that ends
        </member>
        <member name="T:iTextSharp.text.markup.MarkupParser">
            <summary>
            This class contains several static methods that can be used to parse markup.
            </summary>
        </member>
        <member name="F:iTextSharp.text.markup.MarkupParser.stylecache">
            HashMap with styles for each known combination of tag/id/class. The key
            is a String-combination, the value a Properties object.
        </member>
        <member name="F:iTextSharp.text.markup.MarkupParser.fontcache">
            HashMap with fonts for each known combination of tag/id/class. The key is
            the same String-combination used for the stylecache.
        </member>
        <member name="M:iTextSharp.text.markup.MarkupParser.#ctor(System.String)">
            Creates new MarkupParser
            
            @param file
                       the path to a CSS file.
        </member>
        <member name="M:iTextSharp.text.markup.MarkupParser.RemoveComment(System.String,System.String,System.String)">
            Removes the comments sections of a String.
            
            @param string
                       the original String
            @param startComment
                       the String that marks the start of a Comment section
            @param endComment
                       the String that marks the end of a Comment section.
            @return the String stripped of its comment section
        </member>
        <member name="M:iTextSharp.text.markup.MarkupParser.ParseAttributes(System.String)">
            <summary>
            This method parses a string with attributes and returns a Properties object.
            </summary>
            <param name="str">a string of this form: 'key1="value1"; key2="value2";... keyN="valueN" '</param>
            <returns>a Properties object</returns>
        </member>
        <member name="M:iTextSharp.text.markup.MarkupParser.ParseLength(System.String)">
            <summary>
            Parses a length.
            </summary>
            <param name="str">a length in the form of an optional + or -, followed by a number and a unit.</param>
            <returns>a float</returns>
        </member>
        <member name="M:iTextSharp.text.markup.MarkupParser.DecodeColor(System.String)">
            <summary>
            Converts a <CODE>Color</CODE> into a HTML representation of this <CODE>Color</CODE>.
            </summary>
            <param name="color">the <CODE>Color</CODE> that has to be converted.</param>
            <returns>the HTML representation of this <CODE>Color</CODE></returns>
        </member>
        <member name="M:iTextSharp.text.markup.MarkupParser.GetKey(System.util.Properties)">
            Generates a key for an tag/id/class combination and adds the style
            attributes to the stylecache.
            
            @param attributes
                       a Properties object with the tagname and the attributes of the
                       tag.
            @return a key
        </member>
        <member name="M:iTextSharp.text.markup.MarkupParser.GetPageBreakBefore(System.util.Properties)">
            Returns pagebreak information.
            
            @param attributes
            @return true if a page break is needed before the tag
        </member>
        <member name="M:iTextSharp.text.markup.MarkupParser.GetPageBreakAfter(System.util.Properties)">
            Returns pagebreak information.
            
            @param attributes
            @return true if a page break is needed after the tag
        </member>
        <member name="M:iTextSharp.text.markup.MarkupParser.GetObject(System.util.Properties)">
            Returns an object based on a tag and its attributes.
            
            @param attributes
                       a Properties object with the tagname and the attributes of the
                       tag.
            @return an iText object
        </member>
        <member name="M:iTextSharp.text.markup.MarkupParser.GetFont(System.util.Properties)">
            Returns a font based on the ID and CLASS attributes of a tag.
            
            @param attributes
                       a Properties object with the tagname and the attributes of the
                       tag.
            @return an iText Font;
        </member>
        <member name="M:iTextSharp.text.markup.MarkupParser.GetRectangle(System.util.Properties)">
            Returns a rectangle based on the width and height attributes of a tag,
            can be overridden by the ID and CLASS attributes.
            
            @param attrs
                       the attributes that came with the tag
            @return an iText Rectangle object
        </member>
        <member name="M:iTextSharp.text.markup.MarkupParser.RetrievePhrase(iTextSharp.text.Font,System.util.Properties)">
            Retrieves a Phrase based on some style attributes.
            
            @param font
            @param styleattributes
                       a Properties object containing keys and values
            @return an iText Phrase object
        </member>
        <member name="M:iTextSharp.text.markup.MarkupParser.RetrieveParagraph(iTextSharp.text.Font,System.util.Properties)">
            Retrieves a Paragraph based on some style attributes.
            
            @param font
            @param styleattributes
                       a Properties object containing keys and values
            @return an iText Paragraph object
        </member>
        <member name="M:iTextSharp.text.markup.MarkupParser.RetrieveTable(System.util.Properties,System.util.Properties)">
            Gets a table based on the styleattributes.
            
            @param attributes
            @param styleattributes
            @return an iText Table
        </member>
        <member name="M:iTextSharp.text.markup.MarkupParser.RetrieveTableRow(System.util.Properties,System.util.Properties)">
            Returns a Cell based on the styleattributes.
            
            @param attributes
            @param styleattributes
            @return an iText Cell
        </member>
        <member name="M:iTextSharp.text.markup.MarkupParser.RetrieveTableCell(System.util.Properties,System.util.Properties)">
            Returns a Cell based on the styleattributes.
            
            @param attributes
            @param styleattributes
            @return an iText Cell
        </member>
        <member name="M:iTextSharp.text.markup.MarkupParser.RetrieveListItem(iTextSharp.text.Font,System.util.Properties)">
            Returns a ListItem based on the styleattributes.
            
            @param font
            @param styleattributes
            @return an iText ListItem
        </member>
        <member name="M:iTextSharp.text.markup.MarkupParser.ApplyBordersColors(iTextSharp.text.Rectangle,System.util.Properties,System.util.Properties)">
            Applies colors to a Rectangle object.
            @param rect
            @param attributes
            @param styleattributes
        </member>
        <member name="M:iTextSharp.text.markup.MarkupParser.RetrieveFont(System.util.Properties)">
            Retrieves a font from the FontFactory based on some style attributes.
            Looks for the font-family, font-size, font-weight, font-style and color.
            Takes the default encoding and embedded value.
            
            @param styleAttributes
                       a Properties object containing keys and values
            @return an iText Font object
        </member>
        <member name="T:iTextSharp.text.markup.MarkupTags">
            <summary>
            A class that contains all the possible tagnames and their attributes.
            </summary>
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.ITEXT_TAG">
            the key for any tag 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.HTML_TAG_BODY">
            the markup for the body part of a file 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.HTML_TAG_DIV">
            The DIV tag. 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.HTML_TAG_LINK">
            This is a possible HTML-tag. 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.HTML_TAG_SPAN">
            The SPAN tag. 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.HTML_ATTR_HEIGHT">
            the height attribute. 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.HTML_ATTR_HREF">
            the hyperlink reference attribute. 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.HTML_ATTR_REL">
            This is a possible HTML attribute for the LINK tag. 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.HTML_ATTR_STYLE">
            This is used for inline css style information 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.HTML_ATTR_TYPE">
            This is a possible HTML attribute for the LINK tag. 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.HTML_ATTR_STYLESHEET">
            This is a possible HTML attribute. 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.HTML_ATTR_WIDTH">
            the width attribute. 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.HTML_ATTR_CSS_CLASS">
            attribute for specifying externally defined CSS class 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.HTML_ATTR_CSS_ID">
            The ID attribute. 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.HTML_VALUE_JAVASCRIPT">
            This is a possible value for the language attribute (SCRIPT tag). 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.HTML_VALUE_CSS">
            This is a possible HTML attribute for the LINK tag. 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.CSS_KEY_BGCOLOR">
            the CSS tag for background color 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.CSS_KEY_COLOR">
            the CSS tag for text color 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.CSS_KEY_DISPLAY">
            CSS key that indicate the way something has to be displayed 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.CSS_KEY_FONTFAMILY">
            the CSS tag for the font family 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.CSS_KEY_FONTSIZE">
            the CSS tag for the font size 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.CSS_KEY_FONTSTYLE">
            the CSS tag for the font style 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.CSS_KEY_FONTWEIGHT">
            the CSS tag for the font weight 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.CSS_KEY_LINEHEIGHT">
            the CSS tag for text decorations 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.CSS_KEY_MARGIN">
            the CSS tag for the margin of an object 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.CSS_KEY_MARGINLEFT">
            the CSS tag for the margin of an object 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.CSS_KEY_MARGINRIGHT">
            the CSS tag for the margin of an object 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.CSS_KEY_MARGINTOP">
            the CSS tag for the margin of an object 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.CSS_KEY_MARGINBOTTOM">
            the CSS tag for the margin of an object 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.CSS_KEY_PADDING">
            the CSS tag for the margin of an object 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.CSS_KEY_PADDINGLEFT">
            the CSS tag for the margin of an object 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.CSS_KEY_PADDINGRIGHT">
            the CSS tag for the margin of an object 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.CSS_KEY_PADDINGTOP">
            the CSS tag for the margin of an object 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.CSS_KEY_PADDINGBOTTOM">
            the CSS tag for the margin of an object 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.CSS_KEY_BORDERCOLOR">
            the CSS tag for the margin of an object 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.CSS_KEY_BORDERWIDTH">
            the CSS tag for the margin of an object 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.CSS_KEY_BORDERWIDTHLEFT">
            the CSS tag for the margin of an object 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.CSS_KEY_BORDERWIDTHRIGHT">
            the CSS tag for the margin of an object 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.CSS_KEY_BORDERWIDTHTOP">
            the CSS tag for the margin of an object 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.CSS_KEY_BORDERWIDTHBOTTOM">
            the CSS tag for the margin of an object 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.CSS_KEY_PAGE_BREAK_AFTER">
            the CSS tag for adding a page break when the document is printed 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.CSS_KEY_PAGE_BREAK_BEFORE">
            the CSS tag for adding a page break when the document is printed 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.CSS_KEY_TEXTALIGN">
            the CSS tag for the horizontal alignment of an object 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.CSS_KEY_TEXTDECORATION">
            the CSS tag for text decorations 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.CSS_KEY_VERTICALALIGN">
            the CSS tag for text decorations 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.CSS_KEY_VISIBILITY">
            the CSS tag for the visibility of objects 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.CSS_VALUE_ALWAYS">
            value for the CSS tag for adding a page break when the document is printed 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.CSS_VALUE_BLOCK">
            A possible value for the DISPLAY key 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.CSS_VALUE_BOLD">
            a CSS value for text font weight 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.CSS_VALUE_HIDDEN">
            the value if you want to hide objects. 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.CSS_VALUE_INLINE">
            A possible value for the DISPLAY key 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.CSS_VALUE_ITALIC">
            a CSS value for text font style 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.CSS_VALUE_LINETHROUGH">
            a CSS value for text decoration 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.CSS_VALUE_LISTITEM">
            A possible value for the DISPLAY key 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.CSS_VALUE_NONE">
            a CSS value 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.CSS_VALUE_NORMAL">
            a CSS value 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.CSS_VALUE_OBLIQUE">
            a CSS value for text font style 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.CSS_VALUE_TABLE">
            A possible value for the DISPLAY key 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.CSS_VALUE_TABLEROW">
            A possible value for the DISPLAY key 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.CSS_VALUE_TABLECELL">
            A possible value for the DISPLAY key 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.CSS_VALUE_TEXTALIGNLEFT">
            the CSS value for a horizontal alignment of an object 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.CSS_VALUE_TEXTALIGNRIGHT">
            the CSS value for a horizontal alignment of an object 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.CSS_VALUE_TEXTALIGNCENTER">
            the CSS value for a horizontal alignment of an object 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.CSS_VALUE_TEXTALIGNJUSTIFY">
            the CSS value for a horizontal alignment of an object 
        </member>
        <member name="F:iTextSharp.text.markup.MarkupTags.CSS_VALUE_UNDERLINE">
            a CSS value for text decoration 
        </member>
        <member name="T:iTextSharp.text.markup.WebColors">
            This class is a HashMap that contains the names of colors as a key and the
            corresponding Color as value. (Source: Wikipedia
            http://en.wikipedia.org/wiki/Web_colors )
            
            @author blowagie
        </member>
        <member name="M:iTextSharp.text.markup.WebColors.GetRGBColor(System.String)">
            Gives you a Color based on a name.
            
            @param name
                       a name such as black, violet, cornflowerblue
            @return the corresponding Color object
            @throws IllegalArgumentException
                        if the String isn't a know representation of a color.
        </member>
        <member name="T:iTextSharp.text.pdf.codec.wmf.InputMeta">
            <summary>
            Summary description for InputMeta.
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.codec.wmf.MetaDo">
            <summary>
            Summary description for MetaDo.
            </summary>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.wmf.MetaState.#ctor">
            Creates new MetaState 
        </member>
        <member name="P:iTextSharp.text.pdf.codec.wmf.MetaState.CurrentBackgroundColor">
            Getter for property currentBackgroundColor.
            @return Value of property currentBackgroundColor.
        </member>
        <member name="P:iTextSharp.text.pdf.codec.wmf.MetaState.CurrentTextColor">
            Getter for property currentTextColor.
            @return Value of property currentTextColor.
        </member>
        <member name="P:iTextSharp.text.pdf.codec.wmf.MetaState.BackgroundMode">
            Getter for property backgroundMode.
            @return Value of property backgroundMode.
        </member>
        <member name="P:iTextSharp.text.pdf.codec.wmf.MetaState.TextAlign">
            Getter for property textAlign.
            @return Value of property textAlign.
        </member>
        <member name="P:iTextSharp.text.pdf.codec.wmf.MetaState.PolyFillMode">
            Getter for property polyFillMode.
            @return Value of property polyFillMode.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.pdf.codec.BmpImage" -->
        <member name="M:iTextSharp.text.pdf.codec.BmpImage.GetImage(System.Uri)">
            Reads a BMP from an url.
            @param url the url
            @throws IOException on error
            @return the image
        </member>
        <member name="M:iTextSharp.text.pdf.codec.BmpImage.GetImage(System.IO.Stream)">
            Reads a BMP from a stream. The stream is not closed.
            @param is the stream
            @throws IOException on error
            @return the image
        </member>
        <member name="M:iTextSharp.text.pdf.codec.BmpImage.GetImage(System.IO.Stream,System.Boolean,System.Int32)">
            Reads a BMP from a stream. The stream is not closed.
            The BMP may not have a header and be considered as a plain DIB.
            @param is the stream
            @param noHeader true to process a plain DIB
            @param size the size of the DIB. Not used for a BMP
            @throws IOException on error
            @return the image
        </member>
        <member name="M:iTextSharp.text.pdf.codec.BmpImage.GetImage(System.String)">
            Reads a BMP from a file.
            @param file the file
            @throws IOException on error
            @return the image
        </member>
        <member name="M:iTextSharp.text.pdf.codec.BmpImage.GetImage(System.Byte[])">
            Reads a BMP from a byte array.
            @param data the byte array
            @throws IOException on error
            @return the image
        </member>
        <member name="T:iTextSharp.text.pdf.codec.CCITTG4Encoder">
            Encodes data in the CCITT G4 FAX format.
        </member>
        <member name="M:iTextSharp.text.pdf.codec.CCITTG4Encoder.#ctor(System.Int32)">
            Creates a new encoder.
            @param width the line width
        </member>
        <member name="M:iTextSharp.text.pdf.codec.CCITTG4Encoder.Fax4Encode(System.Byte[],System.Int32,System.Int32)">
            Encodes a number of lines.
            @param data the data to be encoded
            @param offset the offset into the data
            @param size the size of the data to be encoded
        </member>
        <member name="M:iTextSharp.text.pdf.codec.CCITTG4Encoder.Compress(System.Byte[],System.Int32,System.Int32)">
            Encodes a full image.
            @param data the data to encode
            @param width the image width
            @param height the image height
            @return the encoded image
        </member>
        <member name="M:iTextSharp.text.pdf.codec.CCITTG4Encoder.Fax4Encode(System.Byte[],System.Int32)">
            Encodes a number of lines.
            @param data the data to be encoded
            @param height the number of lines to encode
        </member>
        <member name="M:iTextSharp.text.pdf.codec.CCITTG4Encoder.Close">
            Closes the encoder and returns the encoded data.
            @return the encoded data
        </member>
        <member name="T:iTextSharp.text.pdf.codec.GifImage">
            Reads gif images of all types. All the images in a gif are read in the constructors
            and can be retrieved with other methods.
            @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="M:iTextSharp.text.pdf.codec.GifImage.#ctor(System.Uri)">
            Reads gif images from an URL.
            @param url the URL
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.codec.GifImage.#ctor(System.String)">
            Reads gif images from a file.
            @param file the file
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.codec.GifImage.#ctor(System.Byte[])">
            Reads gif images from a byte array.
            @param data the byte array
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.codec.GifImage.#ctor(System.IO.Stream)">
            Reads gif images from a stream. The stream isp not closed.
            @param isp the stream
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.codec.GifImage.GetFrameCount">
            Gets the number of frames the gif has.
            @return the number of frames the gif has
        </member>
        <member name="M:iTextSharp.text.pdf.codec.GifImage.GetImage(System.Int32)">
            Gets the image from a frame. The first frame isp 1.
            @param frame the frame to get the image from
            @return the image
        </member>
        <member name="M:iTextSharp.text.pdf.codec.GifImage.GetFramePosition(System.Int32)">
            Gets the [x,y] position of the frame in reference to the
            logical screen.
            @param frame the frame
            @return the [x,y] position of the frame
        </member>
        <member name="M:iTextSharp.text.pdf.codec.GifImage.GetLogicalScreen">
            Gets the logical screen. The images may be smaller and placed
            in some position in this screen to playback some animation.
            No image will be be bigger that this.
            @return the logical screen dimensions as [x,y]
        </member>
        <member name="M:iTextSharp.text.pdf.codec.GifImage.ReadHeader">
            Reads GIF file header information.
        </member>
        <member name="M:iTextSharp.text.pdf.codec.GifImage.ReadLSD">
            Reads Logical Screen Descriptor
        </member>
        <member name="M:iTextSharp.text.pdf.codec.GifImage.ReadShort">
            Reads next 16-bit value, LSB first
        </member>
        <member name="M:iTextSharp.text.pdf.codec.GifImage.ReadBlock">
             Reads next variable length block from input.
            
             @return number of bytes stored in "buffer"
        </member>
        <member name="M:iTextSharp.text.pdf.codec.GifImage.ReadImage">
            Reads next frame image
        </member>
        <member name="M:iTextSharp.text.pdf.codec.GifImage.ResetFrame">
            Resets frame state for reading next image.
        </member>
        <member name="M:iTextSharp.text.pdf.codec.GifImage.ReadGraphicControlExt">
            Reads Graphics Control Extension values
        </member>
        <member name="M:iTextSharp.text.pdf.codec.GifImage.Skip">
            Skips variable length blocks up to and including
            next zero length block.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.pdf.codec.PngImage" -->
        <member name="F:iTextSharp.text.pdf.codec.PngImage.IHDR">
            A PNG marker. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.PngImage.PLTE">
            A PNG marker. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.PngImage.IDAT">
            A PNG marker. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.PngImage.IEND">
            A PNG marker. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.PngImage.tRNS">
            A PNG marker. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.PngImage.pHYs">
            A PNG marker. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.PngImage.gAMA">
            A PNG marker. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.PngImage.cHRM">
            A PNG marker. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.PngImage.sRGB">
            A PNG marker. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.PngImage.iCCP">
            A PNG marker. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.PngImage.PNGID">
            Some PNG specific values. 
        </member>
        <member name="M:iTextSharp.text.pdf.codec.PngImage.#ctor(System.IO.Stream)">
            Creates a new instance of PngImage 
        </member>
        <member name="M:iTextSharp.text.pdf.codec.PngImage.GetImage(System.Uri)">
            Reads a PNG from an url.
            @param url the url
            @throws IOException on error
            @return the image
        </member>
        <member name="M:iTextSharp.text.pdf.codec.PngImage.GetImage(System.IO.Stream)">
            Reads a PNG from a stream.
            @param is the stream
            @throws IOException on error
            @return the image
        </member>
        <member name="M:iTextSharp.text.pdf.codec.PngImage.GetImage(System.String)">
            Reads a PNG from a file.
            @param file the file
            @throws IOException on error
            @return the image
        </member>
        <member name="M:iTextSharp.text.pdf.codec.PngImage.GetImage(System.Byte[])">
            Reads a PNG from a byte array.
            @param data the byte array
            @throws IOException on error
            @return the image
        </member>
        <member name="M:iTextSharp.text.pdf.codec.PngImage.GetInt(System.IO.Stream)">
             Gets an <CODE>int</CODE> from an <CODE>Stream</CODE>.
            
             @param		is      an <CODE>Stream</CODE>
             @return		the value of an <CODE>int</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.PngImage.GetWord(System.IO.Stream)">
             Gets a <CODE>word</CODE> from an <CODE>Stream</CODE>.
            
             @param		is      an <CODE>Stream</CODE>
             @return		the value of an <CODE>int</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.PngImage.GetString(System.IO.Stream)">
             Gets a <CODE>String</CODE> from an <CODE>Stream</CODE>.
            
             @param		is      an <CODE>Stream</CODE>
             @return		the value of an <CODE>int</CODE>
        </member>
        <member name="T:iTextSharp.text.pdf.codec.TIFFConstants">
             A baseline TIFF reader. The reader has some functionality in addition to
             the baseline specifications for Bilevel images, for which the group 3 and
             group 4 decompression schemes have been implemented. Support for LZW
             decompression has also been added. Support for Horizontal differencing
             predictor decoding is also included, when used with LZW compression.
             However, this support is limited to data with bitsPerSample value of 8.
             When reading in RGB images, support for alpha and extraSamples being
             present has been added. Support for reading in images with 16 bit samples
             has been added. Support for the SampleFormat tag (signed samples as well
             as floating-point samples) has also been added. In all other cases, support
             is limited to Baseline specifications.
            
            
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.pdf.codec.TIFFDirectory" -->
        <member name="F:iTextSharp.text.pdf.codec.TIFFDirectory.isBigEndian">
            A bool storing the endianness of the stream. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TIFFDirectory.numEntries">
            The number of entries in the IFD. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TIFFDirectory.fields">
            An array of TIFFFields. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TIFFDirectory.fieldIndex">
            A Hashtable indexing the fields by tag number. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TIFFDirectory.IFDOffset">
            The offset of this IFD. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TIFFDirectory.nextIFDOffset">
            The offset of the next IFD. 
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFDirectory.#ctor">
            The default constructor. 
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFDirectory.#ctor(iTextSharp.text.pdf.RandomAccessFileOrArray,System.Int32)">
             Constructs a TIFFDirectory from a SeekableStream.
             The directory parameter specifies which directory to read from
             the linked list present in the stream; directory 0 is normally
             read but it is possible to store multiple images in a single
             TIFF file by maintaing multiple directories.
            
             @param stream a SeekableStream to read from.
             @param directory the index of the directory to read.
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFDirectory.#ctor(iTextSharp.text.pdf.RandomAccessFileOrArray,System.Int64,System.Int32)">
             Constructs a TIFFDirectory by reading a SeekableStream.
             The ifd_offset parameter specifies the stream offset from which
             to begin reading; this mechanism is sometimes used to store
             private IFDs within a TIFF file that are not part of the normal
             sequence of IFDs.
            
             @param stream a SeekableStream to read from.
             @param ifd_offset the long byte offset of the directory.
             @param directory the index of the directory to read beyond the
                    one at the current stream offset; zero indicates the IFD
                    at the current offset.
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFDirectory.GetNumEntries">
            Returns the number of directory entries. 
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFDirectory.GetField(System.Int32)">
            Returns the value of a given tag as a TIFFField,
            or null if the tag is not present.
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFDirectory.IsTagPresent(System.Int32)">
            Returns true if a tag appears in the directory.
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFDirectory.GetTags">
            Returns an ordered array of ints indicating the tag
            values.
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFDirectory.GetFields">
            Returns an array of TIFFFields containing all the fields
            in this directory.
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFDirectory.GetFieldAsByte(System.Int32,System.Int32)">
            Returns the value of a particular index of a given tag as a
            byte.  The caller is responsible for ensuring that the tag is
            present and has type TIFFField.TIFF_SBYTE, TIFF_BYTE, or
            TIFF_UNDEFINED.
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFDirectory.GetFieldAsByte(System.Int32)">
            Returns the value of index 0 of a given tag as a
            byte.  The caller is responsible for ensuring that the tag is
            present and has  type TIFFField.TIFF_SBYTE, TIFF_BYTE, or
            TIFF_UNDEFINED.
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFDirectory.GetFieldAsLong(System.Int32,System.Int32)">
            Returns the value of a particular index of a given tag as a
            long.  The caller is responsible for ensuring that the tag is
            present and has type TIFF_BYTE, TIFF_SBYTE, TIFF_UNDEFINED,
            TIFF_SHORT, TIFF_SSHORT, TIFF_SLONG or TIFF_LONG.
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFDirectory.GetFieldAsLong(System.Int32)">
            Returns the value of index 0 of a given tag as a
            long.  The caller is responsible for ensuring that the tag is
            present and has type TIFF_BYTE, TIFF_SBYTE, TIFF_UNDEFINED,
            TIFF_SHORT, TIFF_SSHORT, TIFF_SLONG or TIFF_LONG.
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFDirectory.GetFieldAsFloat(System.Int32,System.Int32)">
            Returns the value of a particular index of a given tag as a
            float.  The caller is responsible for ensuring that the tag is
            present and has numeric type (all but TIFF_UNDEFINED and
            TIFF_ASCII).
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFDirectory.GetFieldAsFloat(System.Int32)">
            Returns the value of index 0 of a given tag as a float.  The
            caller is responsible for ensuring that the tag is present and
            has numeric type (all but TIFF_UNDEFINED and TIFF_ASCII).
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFDirectory.GetFieldAsDouble(System.Int32,System.Int32)">
            Returns the value of a particular index of a given tag as a
            double.  The caller is responsible for ensuring that the tag is
            present and has numeric type (all but TIFF_UNDEFINED and
            TIFF_ASCII).
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFDirectory.GetFieldAsDouble(System.Int32)">
            Returns the value of index 0 of a given tag as a double.  The
            caller is responsible for ensuring that the tag is present and
            has numeric type (all but TIFF_UNDEFINED and TIFF_ASCII).
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFDirectory.GetNumDirectories(iTextSharp.text.pdf.RandomAccessFileOrArray)">
            Returns the number of image directories (subimages) stored in a
            given TIFF file, represented by a <code>SeekableStream</code>.
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFDirectory.IsBigEndian">
            Returns a bool indicating whether the byte order used in the
            the TIFF file is big-endian (i.e. whether the byte order is from
            the most significant to the least significant)
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFDirectory.GetIFDOffset">
            Returns the offset of the IFD corresponding to this
            <code>TIFFDirectory</code>.
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFDirectory.GetNextIFDOffset">
            Returns the offset of the next IFD after the IFD corresponding to this
            <code>TIFFDirectory</code>.
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFFaxDecoder.#ctor(System.Int32,System.Int32,System.Int32)">
            @param fillOrder   The fill order of the compressed data bytes.
            @param w
            @param h
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.pdf.codec.TIFFField" -->
        <member name="F:iTextSharp.text.pdf.codec.TIFFField.TIFF_BYTE">
            Flag for 8 bit unsigned integers. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TIFFField.TIFF_ASCII">
            Flag for null-terminated ASCII strings. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TIFFField.TIFF_SHORT">
            Flag for 16 bit unsigned integers. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TIFFField.TIFF_LONG">
            Flag for 32 bit unsigned integers. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TIFFField.TIFF_RATIONAL">
            Flag for pairs of 32 bit unsigned integers. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TIFFField.TIFF_SBYTE">
            Flag for 8 bit signed integers. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TIFFField.TIFF_UNDEFINED">
            Flag for 8 bit uninterpreted bytes. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TIFFField.TIFF_SSHORT">
            Flag for 16 bit signed integers. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TIFFField.TIFF_SLONG">
            Flag for 32 bit signed integers. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TIFFField.TIFF_SRATIONAL">
            Flag for pairs of 32 bit signed integers. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TIFFField.TIFF_FLOAT">
            Flag for 32 bit IEEE floats. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TIFFField.TIFF_DOUBLE">
            Flag for 64 bit IEEE doubles. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TIFFField.tag">
            The tag number. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TIFFField.type">
            The tag type. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TIFFField.count">
            The number of data items present in the field. 
        </member>
        <member name="F:iTextSharp.text.pdf.codec.TIFFField.data">
            The field data. 
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFField.#ctor">
            The default constructor. 
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.codec.TIFFField.#ctor(System.Int32,System.Int32,System.Int32,System.Object)" -->
        <member name="M:iTextSharp.text.pdf.codec.TIFFField.GetTag">
            Returns the tag number, between 0 and 65535.
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFField.GetType">
             Returns the type of the data stored in the IFD.
             For a TIFF6.0 file, the value will equal one of the
             TIFF_ constants defined in this class.  For future
             revisions of TIFF, higher values are possible.
            
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFField.GetCount">
            Returns the number of elements in the IFD.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.codec.TIFFField.GetAsBytes" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.codec.TIFFField.GetAsChars" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.codec.TIFFField.GetAsShorts" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.codec.TIFFField.GetAsInts" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.codec.TIFFField.GetAsLongs" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.codec.TIFFField.GetAsFloats" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.codec.TIFFField.GetAsDoubles" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.codec.TIFFField.GetAsSRationals" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.codec.TIFFField.GetAsRationals" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.codec.TIFFField.GetAsInt(System.Int32)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.codec.TIFFField.GetAsLong(System.Int32)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.codec.TIFFField.GetAsFloat(System.Int32)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.codec.TIFFField.GetAsDouble(System.Int32)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.codec.TIFFField.GetAsString(System.Int32)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.codec.TIFFField.GetAsSRational(System.Int32)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.codec.TIFFField.GetAsRational(System.Int32)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.codec.TIFFField.CompareTo(System.Object)" -->
        <member name="T:iTextSharp.text.pdf.codec.TiffImage">
            Reads TIFF images
            @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffImage.GetNumberOfPages(iTextSharp.text.pdf.RandomAccessFileOrArray)">
            Gets the number of pages the TIFF document has.
            @param s the file source
            @return the number of pages
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffImage.GetTiffImage(iTextSharp.text.pdf.RandomAccessFileOrArray,System.Int32)">
            Reads a page from a TIFF image. Direct mode is not used.
            @param s the file source
            @param page the page to get. The first page is 1
            @return the <CODE>Image</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TiffImage.GetTiffImage(iTextSharp.text.pdf.RandomAccessFileOrArray,System.Int32,System.Boolean)">
            Reads a page from a TIFF image.
            @param s the file source
            @param page the page to get. The first page is 1
            @param direct for single strip, CCITT images, generate the image
            by direct byte copying. It's faster but may not work
            every time
            @return the <CODE>Image</CODE>
        </member>
        <member name="T:iTextSharp.text.pdf.codec.TIFFLZWDecoder">
             A class for performing LZW decoding.
            
            
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFLZWDecoder.Decode(System.Byte[],System.Byte[],System.Int32)">
             Method to decode LZW compressed data.
            
             @param data            The compressed data.
             @param uncompData      Array to return the uncompressed data in.
             @param h               The number of rows the compressed data contains.
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFLZWDecoder.InitializeStringTable">
            Initialize the string table.
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFLZWDecoder.WriteString(System.Byte[])">
            Write out the string just uncompressed.
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFLZWDecoder.AddStringToTable(System.Byte[],System.Byte)">
            Add a new string to the string table.
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFLZWDecoder.AddStringToTable(System.Byte[])">
            Add a new string to the string table.
        </member>
        <member name="M:iTextSharp.text.pdf.codec.TIFFLZWDecoder.ComposeString(System.Byte[],System.Byte)">
            Append <code>newString</code> to the end of <code>oldString</code>.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.pdf.hyphenation.ByteVector" -->
        <member name="F:iTextSharp.text.pdf.hyphenation.ByteVector.DEFAULT_BLOCK_SIZE">
            Capacity increment size
        </member>
        <member name="F:iTextSharp.text.pdf.hyphenation.ByteVector.arr">
            The encapsulated array
        </member>
        <member name="F:iTextSharp.text.pdf.hyphenation.ByteVector.n">
            Points to next free item
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.ByteVector.Alloc(System.Int32)">
            This is to implement memory allocation in the array. Like Malloc().
        </member>
        <member name="P:iTextSharp.text.pdf.hyphenation.ByteVector.Length">
            return number of items in array
        </member>
        <member name="P:iTextSharp.text.pdf.hyphenation.ByteVector.Capacity">
            returns current capacity of array
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.pdf.hyphenation.CharVector" -->
        <member name="F:iTextSharp.text.pdf.hyphenation.CharVector.DEFAULT_BLOCK_SIZE">
            Capacity increment size
        </member>
        <member name="F:iTextSharp.text.pdf.hyphenation.CharVector.array">
            The encapsulated array
        </member>
        <member name="F:iTextSharp.text.pdf.hyphenation.CharVector.n">
            Points to next free item
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.CharVector.Clear">
            Reset Vector but don't resize or clear elements
        </member>
        <member name="P:iTextSharp.text.pdf.hyphenation.CharVector.Length">
            return number of items in array
        </member>
        <member name="P:iTextSharp.text.pdf.hyphenation.CharVector.Capacity">
            returns current capacity of array
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.pdf.hyphenation.Hyphen" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.pdf.hyphenation.Hyphenation" -->
        <member name="F:iTextSharp.text.pdf.hyphenation.Hyphenation.len">
            number of hyphenation points in word
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.Hyphenation.#ctor(System.String,System.Int32[])">
            rawWord as made of alternating strings and {@link Hyphen Hyphen}
            instances
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.Hyphenation.GetPreHyphenText(System.Int32)">
            @return the pre-break text, not including the hyphen character
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.Hyphenation.GetPostHyphenText(System.Int32)">
            @return the post-break text
        </member>
        <member name="P:iTextSharp.text.pdf.hyphenation.Hyphenation.Length">
            @return the number of hyphenation points in the word
        </member>
        <member name="P:iTextSharp.text.pdf.hyphenation.Hyphenation.HyphenationPoints">
            @return the hyphenation points
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.pdf.hyphenation.HyphenationException" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.pdf.hyphenation.HyphenationTree" -->
        <member name="T:iTextSharp.text.pdf.hyphenation.TernaryTree">
             <h2>Ternary Search Tree</h2>
            
             <p>A ternary search tree is a hibrid between a binary tree and
             a digital search tree (trie). Keys are limited to strings.
             A data value of type char is stored in each leaf node.
             It can be used as an index (or pointer) to the data.
             Branches that only contain one key are compressed to one node
             by storing a pointer to the trailer substring of the key.
             This class is intended to serve as base class or helper class
             to implement Dictionary collections or the like. Ternary trees
             have some nice properties as the following: the tree can be
             traversed in sorted order, partial matches (wildcard) can be
             implemented, retrieval of all keys within a given distance
             from the target, etc. The storage requirements are higher than
             a binary tree but a lot less than a trie. Performance is
             comparable with a hash table, sometimes it outperforms a hash
             function (most of the time can determine a miss faster than a hash).</p>
            
             <p>The main purpose of this java port is to serve as a base for
             implementing TeX's hyphenation algorithm (see The TeXBook,
             appendix H). Each language requires from 5000 to 15000 hyphenation
             patterns which will be keys in this tree. The strings patterns
             are usually small (from 2 to 5 characters), but each char in the
             tree is stored in a node. Thus memory usage is the main concern.
             We will sacrify 'elegance' to keep memory requirenments to the
             minimum. Using java's char type as pointer (yes, I know pointer
             it is a forbidden word in java) we can keep the size of the node
             to be just 8 bytes (3 pointers and the data char). This gives
             room for about 65000 nodes. In my tests the english patterns
             took 7694 nodes and the german patterns 10055 nodes,
             so I think we are safe.</p>
            
             <p>All said, this is a map with strings as keys and char as value.
             Pretty limited!. It can be extended to a general map by
             using the string representation of an object and using the
             char value as an index to an array that contains the object
             values.</p>
            
             @author cav@uniscope.co.jp
        </member>
        <member name="F:iTextSharp.text.pdf.hyphenation.TernaryTree.lo">
            Pointer to low branch and to rest of the key when it is
            stored directly in this node, we don't have unions in java!
        </member>
        <member name="F:iTextSharp.text.pdf.hyphenation.TernaryTree.hi">
            Pointer to high branch.
        </member>
        <member name="F:iTextSharp.text.pdf.hyphenation.TernaryTree.eq">
            Pointer to equal branch and to data when this node is a string terminator.
        </member>
        <member name="F:iTextSharp.text.pdf.hyphenation.TernaryTree.sc">
            <P>The character stored in this node: splitchar
            Two special values are reserved:</P>
            <ul><li>0x0000 as string terminator</li>
            <li>0xFFFF to indicate that the branch starting at
            this node is compressed</li></ul>
            <p>This shouldn't be a problem if we give the usual semantics to
            strings since 0xFFFF is garanteed not to be an Unicode character.</p>
        </member>
        <member name="F:iTextSharp.text.pdf.hyphenation.TernaryTree.kv">
            This vector holds the trailing of the keys when the branch is compressed.
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.TernaryTree.Insert(System.String,System.Char)">
            Branches are initially compressed, needing
            one node per key plus the size of the string
            key. They are decompressed as needed when
            another key with same prefix
            is inserted. This saves a lot of space,
            specially for long keys.
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.TernaryTree.Insert(System.Char,System.Char[],System.Int32,System.Char)">
            The actual insertion function, recursive version.
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.TernaryTree.Strcmp(System.Char[],System.Int32,System.Char[],System.Int32)">
            Compares 2 null terminated char arrays
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.TernaryTree.Strcmp(System.String,System.Char[],System.Int32)">
            Compares a string with null terminated char array
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.TernaryTree.InsertBalanced(System.String[],System.Char[],System.Int32,System.Int32)">
            Recursively insert the median first and then the median of the
            lower and upper halves, and so on in order to get a balanced
            tree. The array of keys is assumed to be sorted in ascending
            order.
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.TernaryTree.Balance">
            Balance the tree for best search performance
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.TernaryTree.TrimToSize">
             Each node stores a character (splitchar) which is part of
             some Key(s). In a compressed branch (one that only contain
             a single string key) the trailer of the key which is not
             already in nodes is stored  externally in the kv array.
             As items are inserted, key substrings decrease.
             Some substrings may completely  disappear when the whole
             branch is totally decompressed.
             The tree is traversed to find the key substrings actually
             used. In addition, duplicate substrings are removed using
             a map (implemented with a TernaryTree!).
            
        </member>
        <member name="F:iTextSharp.text.pdf.hyphenation.TernaryTree.Iterator.cur">
            current node index
        </member>
        <member name="F:iTextSharp.text.pdf.hyphenation.TernaryTree.Iterator.curkey">
            current key
        </member>
        <member name="F:iTextSharp.text.pdf.hyphenation.TernaryTree.Iterator.parent">
            TernaryTree parent
        </member>
        <member name="F:iTextSharp.text.pdf.hyphenation.TernaryTree.Iterator.ns">
            Node stack
        </member>
        <member name="F:iTextSharp.text.pdf.hyphenation.TernaryTree.Iterator.ks">
            key stack implemented with a StringBuilder
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.TernaryTree.Iterator.Up">
            traverse upwards
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.TernaryTree.Iterator.Run">
            traverse the tree to find next key
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.pdf.hyphenation.IPatternConsumer" -->
        <member name="M:iTextSharp.text.pdf.hyphenation.IPatternConsumer.AddClass(System.String)">
            Add a character class.
            A character class defines characters that are considered
            equivalent for the purpose of hyphenation (e.g. "aA"). It
            usually means to ignore case.
            @param chargroup character group
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.IPatternConsumer.AddException(System.String,System.Collections.ArrayList)">
            Add a hyphenation exception. An exception replaces the
            result obtained by the algorithm for cases for which this
            fails or the user wants to provide his own hyphenation.
            A hyphenatedword is a vector of alternating String's and
            {@link Hyphen Hyphen} instances
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.IPatternConsumer.AddPattern(System.String,System.String)">
            Add hyphenation patterns.
            @param pattern the pattern
            @param values interletter values expressed as a string of
            digit characters.
        </member>
        <member name="F:iTextSharp.text.pdf.hyphenation.HyphenationTree.vspace">
            value space: stores the inteletter values
        </member>
        <member name="F:iTextSharp.text.pdf.hyphenation.HyphenationTree.stoplist">
            This map stores hyphenation exceptions
        </member>
        <member name="F:iTextSharp.text.pdf.hyphenation.HyphenationTree.classmap">
            This map stores the character classes
        </member>
        <member name="F:iTextSharp.text.pdf.hyphenation.HyphenationTree.ivalues">
            Temporary map to store interletter values on pattern loading.
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.HyphenationTree.PackValues(System.String)">
            Packs the values by storing them in 4 bits, two values into a byte
            Values range is from 0 to 9. We use zero as terminator,
            so we'll add 1 to the value.
            @param values a string of digits from '0' to '9' representing the
            interletter values.
            @return the index into the vspace array where the packed values
            are stored.
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.HyphenationTree.Hstrcmp(System.Char[],System.Int32,System.Char[],System.Int32)">
            String compare, returns 0 if equal or
            t is a substring of s
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.hyphenation.HyphenationTree.SearchPatterns(System.Char[],System.Int32,System.Byte[])" -->
        <member name="M:iTextSharp.text.pdf.hyphenation.HyphenationTree.Hyphenate(System.String,System.Int32,System.Int32)">
            Hyphenate word and return a Hyphenation object.
            @param word the word to be hyphenated
            @param remainCharCount Minimum number of characters allowed
            before the hyphenation point.
            @param pushCharCount Minimum number of characters allowed after
            the hyphenation point.
            @return a {@link Hyphenation Hyphenation} object representing
            the hyphenated word or null if word is not hyphenated.
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.HyphenationTree.Hyphenate(System.Char[],System.Int32,System.Int32,System.Int32,System.Int32)">
            Hyphenate word and return an array of hyphenation points.
            @param w char array that contains the word
            @param offset Offset to first character in word
            @param len Length of word
            @param remainCharCount Minimum number of characters allowed
            before the hyphenation point.
            @param pushCharCount Minimum number of characters allowed after
            the hyphenation point.
            @return a {@link Hyphenation Hyphenation} object representing
            the hyphenated word or null if word is not hyphenated.
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.HyphenationTree.AddClass(System.String)">
            Add a character class to the tree. It is used by
            {@link SimplePatternParser SimplePatternParser} as callback to
            add character classes. Character classes define the
            valid word characters for hyphenation. If a word contains
            a character not defined in any of the classes, it is not hyphenated.
            It also defines a way to normalize the characters in order
            to compare them with the stored patterns. Usually pattern
            files use only lower case characters, in this case a class
            for letter 'a', for example, should be defined as "aA", the first
            character being the normalization char.
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.HyphenationTree.AddException(System.String,System.Collections.ArrayList)">
            Add an exception to the tree. It is used by
            {@link SimplePatternParser SimplePatternParser} class as callback to
            store the hyphenation exceptions.
            @param word normalized word
            @param hyphenatedword a vector of alternating strings and
            {@link Hyphen hyphen} objects.
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.HyphenationTree.AddPattern(System.String,System.String)">
            Add a pattern to the tree. Mainly, to be used by
            {@link SimplePatternParser SimplePatternParser} class as callback to
            add a pattern to the tree.
            @param pattern the hyphenation pattern
            @param ivalue interletter weight values indicating the
            desirability and priority of hyphenating at a given point
            within the pattern. It should contain only digit characters.
            (i.e. '0' to '9').
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.pdf.hyphenation.Hyphenator" -->
        <member name="F:iTextSharp.text.pdf.hyphenation.Hyphenator.hyphenTrees">
            TODO: Don't use statics 
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.Hyphenator.#ctor(System.String,System.String,System.Int32,System.Int32)">
            @param lang
            @param country
            @param leftMin
            @param rightMin
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.Hyphenator.GetHyphenationTree(System.String,System.String)">
            @param lang
            @param country
            @return the hyphenation tree
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.Hyphenator.GetResourceHyphenationTree(System.String)">
            @param key
            @return a hyphenation tree
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.Hyphenator.Hyphenate(System.String,System.String,System.String,System.Int32,System.Int32)">
            @param lang
            @param country
            @param word
            @param leftMin
            @param rightMin
            @return a hyphenation object
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.Hyphenator.Hyphenate(System.String,System.String,System.Char[],System.Int32,System.Int32,System.Int32,System.Int32)">
            @param lang
            @param country
            @param word
            @param offset
            @param len
            @param leftMin
            @param rightMin
            @return a hyphenation object
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.Hyphenator.SetMinRemainCharCount(System.Int32)">
            @param min
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.Hyphenator.SetMinPushCharCount(System.Int32)">
            @param min
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.Hyphenator.SetLanguage(System.String,System.String)">
            @param lang
            @param country
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.Hyphenator.Hyphenate(System.Char[],System.Int32,System.Int32)">
            @param word
            @param offset
            @param len
            @return a hyphenation object
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.Hyphenator.Hyphenate(System.String)">
            @param word
            @return a hyphenation object
        </member>
        <member name="T:iTextSharp.text.pdf.hyphenation.SimplePatternParser">
            Parses the xml hyphenation pattern.
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="M:iTextSharp.text.pdf.hyphenation.SimplePatternParser.#ctor">
            Creates a new instance of PatternParser2 
        </member>
        <member name="T:iTextSharp.text.pdf.AcroFields">
            Query and change fields in existing documents either by method
            calls or by FDF merging.
            @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:iTextSharp.text.pdf.AcroFields.FIELD_TYPE_NONE">
            A field type invalid or not found.
        </member>
        <member name="F:iTextSharp.text.pdf.AcroFields.FIELD_TYPE_PUSHBUTTON">
            A field type.
        </member>
        <member name="F:iTextSharp.text.pdf.AcroFields.FIELD_TYPE_CHECKBOX">
            A field type.
        </member>
        <member name="F:iTextSharp.text.pdf.AcroFields.FIELD_TYPE_RADIOBUTTON">
            A field type.
        </member>
        <member name="F:iTextSharp.text.pdf.AcroFields.FIELD_TYPE_TEXT">
            A field type.
        </member>
        <member name="F:iTextSharp.text.pdf.AcroFields.FIELD_TYPE_LIST">
            A field type.
        </member>
        <member name="F:iTextSharp.text.pdf.AcroFields.FIELD_TYPE_COMBO">
            A field type.
        </member>
        <member name="F:iTextSharp.text.pdf.AcroFields.FIELD_TYPE_SIGNATURE">
            A field type.
        </member>
        <member name="F:iTextSharp.text.pdf.AcroFields.generateAppearances">
            Holds value of property generateAppearances. 
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.GetAppearanceStates(System.String)">
            Gets the list of appearance names. Use it to get the names allowed
            with radio and checkbox fields. If the /Opt key exists the values will
            also be included. The name 'Off' may also be valid
            even if not returned in the list.
            @param fieldName the fully qualified field name
            @return the list of names or <CODE>null</CODE> if the field does not exist
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.AcroFields.GetFieldType(System.String)" -->
        <member name="M:iTextSharp.text.pdf.AcroFields.ExportAsFdf(iTextSharp.text.pdf.FdfWriter)">
            Export the fields as a FDF.
            @param writer the FDF writer
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.RenameField(System.String,System.String)">
            Renames a field. Only the last part of the name can be renamed. For example,
            if the original field is "ab.cd.ef" only the "ef" part can be renamed.
            @param oldName the old field name
            @param newName the new field name
            @return <CODE>true</CODE> if the renaming was successful, <CODE>false</CODE>
            otherwise
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.GetField(System.String)">
            Gets the field value.
            @param name the fully qualified field name
            @return the field value
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.AcroFields.SetFieldProperty(System.String,System.String,System.Object,System.Int32[])" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.AcroFields.SetFieldProperty(System.String,System.String,System.Int32,System.Int32[])" -->
        <member name="M:iTextSharp.text.pdf.AcroFields.SetFields(iTextSharp.text.pdf.FdfReader)">
            Sets the fields by FDF merging.
            @param fdf the FDF form
            @throws IOException on error
            @throws DocumentException on error
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.SetFields(iTextSharp.text.pdf.XfdfReader)">
            Sets the fields by XFDF merging.
            @param xfdf the XFDF form
            @throws IOException on error
            @throws DocumentException on error
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.SetField(System.String,System.String)">
            Sets the field value.
            @param name the fully qualified field name
            @param value the field value
            @throws IOException on error
            @throws DocumentException on error
            @return <CODE>true</CODE> if the field was found and changed,
            <CODE>false</CODE> otherwise
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.SetField(System.String,System.String,System.String)">
            Sets the field value and the display string. The display string
            is used to build the appearance in the cases where the value
            is modified by Acrobat with JavaScript and the algorithm is
            known.
            @param name the fully qualified field name
            @param value the field value
            @param display the string that is used for the appearance
            @return <CODE>true</CODE> if the field was found and changed,
            <CODE>false</CODE> otherwise
            @throws IOException on error
            @throws DocumentException on error
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.GetFieldItem(System.String)">
            Gets the field structure.
            @param name the name of the field
            @return the field structure or <CODE>null</CODE> if the field
            does not exist
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.GetFieldPositions(System.String)">
            Gets the field box positions in the document. The return is an array of <CODE>float</CODE>
            multiple of 5. For each of this groups the values are: [page, llx, lly, urx,
            ury].
            @param name the field name
            @return the positions or <CODE>null</CODE> if field does not exist
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.RemoveFieldsFromPage(System.Int32)">
            Removes all the fields from <CODE>page</CODE>.
            @param page the page to remove the fields from
            @return <CODE>true</CODE> if any field was removed, <CODE>false otherwise</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.RemoveField(System.String,System.Int32)">
            Removes a field from the document. If page equals -1 all the fields with this
            <CODE>name</CODE> are removed from the document otherwise only the fields in
            that particular page are removed.
            @param name the field name
            @param page the page to remove the field from or -1 to remove it from all the pages
            @return <CODE>true</CODE> if the field exists, <CODE>false otherwise</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.RemoveField(System.String)">
            Removes a field from the document.
            @param name the field name
            @return <CODE>true</CODE> if the field exists, <CODE>false otherwise</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.GetSignatureNames">
            Gets the field names that have signatures and are signed.
            @return the field names that have signatures and are signed
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.GetBlankSignatureNames">
            Gets the field names that have blank signatures.
            @return the field names that have blank signatures
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.GetSignatureDictionary(System.String)">
            Gets the signature dictionary, the one keyed by /V.
            @param name the field name
            @return the signature dictionary keyed by /V or <CODE>null</CODE> if the field is not
            a signature
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.SignatureCoversWholeDocument(System.String)">
            Checks is the signature covers the entire document or just part of it.
            @param name the signature field name
            @return <CODE>true</CODE> if the signature covers the entire document,
            <CODE>false</CODE> otherwise
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.AcroFields.VerifySignature(System.String)" -->
        <member name="M:iTextSharp.text.pdf.AcroFields.GetRevision(System.String)">
            Gets this <CODE>field</CODE> revision.
            @param field the signature field name
            @return the revision or zero if it's not a signature field
        </member>
        <member name="M:iTextSharp.text.pdf.AcroFields.ExtractRevision(System.String)">
            Extracts a revision from the document.
            @param field the signature field name
            @return an <CODE>Stream</CODE> covering the revision. Returns <CODE>null</CODE> if
            it's not a signature field
            @throws IOException on error
        </member>
        <member name="F:iTextSharp.text.pdf.AcroFields.fieldCache">
            Holds value of property fieldCache.
        </member>
        <member name="P:iTextSharp.text.pdf.AcroFields.Fields">
            Gets all the fields. The fields are keyed by the fully qualified field name and
            the value is an instance of <CODE>AcroFields.Item</CODE>.
            @return all the fields
        </member>
        <member name="P:iTextSharp.text.pdf.AcroFields.GenerateAppearances">
            Sets the option to generate appearances. Not generating apperances
            will speed-up form filling but the results can be
            unexpected in Acrobat. Don't use it unless your environment is well
            controlled. The default is <CODE>true</CODE>.
            @param generateAppearances the option to generate appearances
        </member>
        <member name="P:iTextSharp.text.pdf.AcroFields.TotalRevisions">
            Gets the total number of revisions this document has.
            @return the total number of revisions
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "P:iTextSharp.text.pdf.AcroFields.FieldCache" -->
        <member name="T:iTextSharp.text.pdf.AcroFields.Item">
            The field representations for retrieval and modification. 
        </member>
        <member name="F:iTextSharp.text.pdf.AcroFields.Item.values">
            An array of <CODE>PdfDictionary</CODE> where the value tag /V
            is present.
        </member>
        <member name="F:iTextSharp.text.pdf.AcroFields.Item.widgets">
            An array of <CODE>PdfDictionary</CODE> with the widgets.
        </member>
        <member name="F:iTextSharp.text.pdf.AcroFields.Item.widget_refs">
            An array of <CODE>PdfDictionary</CODE> with the widget references.
        </member>
        <member name="F:iTextSharp.text.pdf.AcroFields.Item.merged">
            An array of <CODE>PdfDictionary</CODE> with all the field
            and widget tags merged.
        </member>
        <member name="F:iTextSharp.text.pdf.AcroFields.Item.page">
            An array of <CODE>Integer</CODE> with the page numbers where
            the widgets are displayed.
        </member>
        <member name="F:iTextSharp.text.pdf.AcroFields.Item.tabOrder">
            An array of <CODE>Integer</CODE> with the tab order of the field in the page.
        </member>
        <member name="T:iTextSharp.text.pdf.ArabicLigaturizer">
            Shape arabic characters. This code was converted from a C version
             at www.pango.org.
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:iTextSharp.text.pdf.ArabicLigaturizer.DIGITS_EN2AN">
            Digit shaping option: Replace European digits (U+0030...U+0039) by Arabic-Indic digits.
        </member>
        <member name="F:iTextSharp.text.pdf.ArabicLigaturizer.DIGITS_AN2EN">
            Digit shaping option: Replace Arabic-Indic digits by European digits (U+0030...U+0039).
        </member>
        <member name="F:iTextSharp.text.pdf.ArabicLigaturizer.DIGITS_EN2AN_INIT_LR">
            Digit shaping option:
            Replace European digits (U+0030...U+0039) by Arabic-Indic digits
            if the most recent strongly directional character
            is an Arabic letter (its Bidi direction value is RIGHT_TO_LEFT_ARABIC).
            The initial state at the start of the text is assumed to be not an Arabic,
            letter, so European digits at the start of the text will not change.
            Compare to DIGITS_ALEN2AN_INIT_AL.
        </member>
        <member name="F:iTextSharp.text.pdf.ArabicLigaturizer.DIGITS_EN2AN_INIT_AL">
            Digit shaping option:
            Replace European digits (U+0030...U+0039) by Arabic-Indic digits
            if the most recent strongly directional character
            is an Arabic letter (its Bidi direction value is RIGHT_TO_LEFT_ARABIC).
            The initial state at the start of the text is assumed to be an Arabic,
            letter, so European digits at the start of the text will change.
            Compare to DIGITS_ALEN2AN_INT_LR.
        </member>
        <member name="F:iTextSharp.text.pdf.ArabicLigaturizer.DIGITS_RESERVED">
            Not a valid option value. 
        </member>
        <member name="F:iTextSharp.text.pdf.ArabicLigaturizer.DIGITS_MASK">
            Bit mask for digit shaping options.
        </member>
        <member name="F:iTextSharp.text.pdf.ArabicLigaturizer.DIGIT_TYPE_AN">
            Digit type option: Use Arabic-Indic digits (U+0660...U+0669).
        </member>
        <member name="F:iTextSharp.text.pdf.ArabicLigaturizer.DIGIT_TYPE_AN_EXTENDED">
            Digit type option: Use Eastern (Extended) Arabic-Indic digits (U+06f0...U+06f9).
        </member>
        <member name="F:iTextSharp.text.pdf.ArabicLigaturizer.DIGIT_TYPE_MASK">
            Bit mask for digit type options.
        </member>
        <member name="T:iTextSharp.text.pdf.BadPdfFormatException">
             Signals that a bad PDF format has been used to construct a <CODE>PdfObject</CODE>.
            
             @see        PdfException
             @see        PdfBoolean
             @see        PdfNumber
             @see        PdfString
             @see        PdfName
             @see        PdfDictionary
             @see        PdfFont
        </member>
        <member name="T:iTextSharp.text.pdf.Barcode">
            Base class containing properties and methods commom to all
             barcode types.
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.EAN13">
            A type of barcode 
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.EAN8">
            A type of barcode 
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.UPCA">
            A type of barcode 
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.UPCE">
            A type of barcode 
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.SUPP2">
            A type of barcode 
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.SUPP5">
            A type of barcode 
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.POSTNET">
            A type of barcode 
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.PLANET">
            A type of barcode 
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.CODE128">
            A type of barcode 
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.CODE128_UCC">
            A type of barcode 
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.CODE128_RAW">
            A type of barcode 
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.CODABAR">
            A type of barcode 
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.x">
            The minimum bar width.
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.n">
            The bar multiplier for wide bars or the distance between
            bars for Postnet and Planet.
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.font">
            The text font. <CODE>null</CODE> if no text.
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.size">
            The size of the text or the height of the shorter bar
            in Postnet.
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.baseline">
            If positive, the text distance under the bars. If zero or negative,
            the text distance above the bars.
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.barHeight">
            The height of the bars.
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.textAlignment">
            The text Element. Can be <CODE>Element.ALIGN_LEFT</CODE>,
            <CODE>Element.ALIGN_CENTER</CODE> or <CODE>Element.ALIGN_RIGHT</CODE>.
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.generateChecksum">
            The optional checksum generation.
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.checksumText">
            Shows the generated checksum in the the text.
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.startStopText">
            Show the start and stop character '*' in the text for
            the barcode 39 or 'ABCD' for codabar.
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.extended">
            Generates extended barcode 39.
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.code">
            The code to generate.
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.guardBars">
            Show the guard bars for barcode EAN.
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.codeType">
            The code type.
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode.inkSpreading">
            The ink spreading. 
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.Barcode.PlaceBarcode(iTextSharp.text.pdf.PdfContentByte,iTextSharp.text.Color,iTextSharp.text.Color)" -->
        <member name="M:iTextSharp.text.pdf.Barcode.CreateTemplateWithBarcode(iTextSharp.text.pdf.PdfContentByte,iTextSharp.text.Color,iTextSharp.text.Color)">
            Creates a template with the barcode.
            @param cb the <CODE>PdfContentByte</CODE> to create the template. It
            serves no other use
            @param barColor the color of the bars. It can be <CODE>null</CODE>
            @param textColor the color of the text. It can be <CODE>null</CODE>
            @return the template
            @see #placeBarcode(PdfContentByte cb, Color barColor, Color textColor)
        </member>
        <member name="M:iTextSharp.text.pdf.Barcode.CreateImageWithBarcode(iTextSharp.text.pdf.PdfContentByte,iTextSharp.text.Color,iTextSharp.text.Color)">
            Creates an <CODE>Image</CODE> with the barcode.
            @param cb the <CODE>PdfContentByte</CODE> to create the <CODE>Image</CODE>. It
            serves no other use
            @param barColor the color of the bars. It can be <CODE>null</CODE>
            @param textColor the color of the text. It can be <CODE>null</CODE>
            @return the <CODE>Image</CODE>
            @see #placeBarcode(PdfContentByte cb, Color barColor, Color textColor)
        </member>
        <member name="P:iTextSharp.text.pdf.Barcode.X">
            Gets the minimum bar width.
            @return the minimum bar width
        </member>
        <member name="P:iTextSharp.text.pdf.Barcode.N">
            Gets the bar multiplier for wide bars.
            @return the bar multiplier for wide bars
        </member>
        <member name="P:iTextSharp.text.pdf.Barcode.Font">
            Gets the text font. <CODE>null</CODE> if no text.
            @return the text font. <CODE>null</CODE> if no text
        </member>
        <member name="P:iTextSharp.text.pdf.Barcode.Size">
            Gets the size of the text.
            @return the size of the text
        </member>
        <member name="P:iTextSharp.text.pdf.Barcode.Baseline">
            Gets the text baseline.
            If positive, the text distance under the bars. If zero or negative,
            the text distance above the bars.
            @return the baseline.
        </member>
        <member name="P:iTextSharp.text.pdf.Barcode.BarHeight">
            Gets the height of the bars.
            @return the height of the bars
        </member>
        <member name="P:iTextSharp.text.pdf.Barcode.TextAlignment">
            Gets the text Element. Can be <CODE>Element.ALIGN_LEFT</CODE>,
            <CODE>Element.ALIGN_CENTER</CODE> or <CODE>Element.ALIGN_RIGHT</CODE>.
            @return the text alignment
        </member>
        <member name="P:iTextSharp.text.pdf.Barcode.GenerateChecksum">
            The property for the optional checksum generation.
        </member>
        <member name="P:iTextSharp.text.pdf.Barcode.ChecksumText">
            Sets the property to show the generated checksum in the the text.
            @param checksumText new value of property checksumText
        </member>
        <member name="P:iTextSharp.text.pdf.Barcode.StartStopText">
            Gets the property to show the start and stop character '*' in the text for
            the barcode 39.
            @param startStopText new value of property startStopText
        </member>
        <member name="P:iTextSharp.text.pdf.Barcode.Extended">
            Sets the property to generate extended barcode 39.
            @param extended new value of property extended
        </member>
        <member name="P:iTextSharp.text.pdf.Barcode.Code">
            Gets the code to generate.
            @return the code to generate
        </member>
        <member name="P:iTextSharp.text.pdf.Barcode.GuardBars">
            Sets the property to show the guard bars for barcode EAN.
            @param guardBars new value of property guardBars
        </member>
        <member name="P:iTextSharp.text.pdf.Barcode.CodeType">
            Gets the code type.
            @return the code type
        </member>
        <member name="P:iTextSharp.text.pdf.Barcode.BarcodeSize">
            Gets the maximum area that the barcode and the text, if
            any, will occupy. The lower left corner is always (0, 0).
            @return the size the barcode occupies.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.pdf.Barcode128" -->
        <member name="F:iTextSharp.text.pdf.Barcode128.CODE_AB_TO_C">
            The charset code change.
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode128.CODE_AC_TO_B">
            The charset code change.
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode128.CODE_BC_TO_A">
            The charset code change.
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode128.FNC1_INDEX">
            The code for UCC/EAN-128.
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode128.START_A">
            The start code.
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode128.START_B">
            The start code.
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode128.START_C">
            The start code.
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode128.BARS">
            The bars to generate the code.
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode128.BARS_STOP">
            The stop bars.
        </member>
        <member name="M:iTextSharp.text.pdf.Barcode128.#ctor">
            Creates new Barcode128 
        </member>
        <member name="M:iTextSharp.text.pdf.Barcode128.RemoveFNC1(System.String)">
            Removes the FNC1 codes in the text.
            @param code the text to clean
            @return the cleaned text
        </member>
        <member name="M:iTextSharp.text.pdf.Barcode128.GetHumanReadableUCCEAN(System.String)">
            Gets the human readable text of a sequence of AI.
            @param code the text
            @return the human readable text
        </member>
        <member name="M:iTextSharp.text.pdf.Barcode128.IsNextDigits(System.String,System.Int32,System.Int32)">
            Returns <CODE>true</CODE> if the next <CODE>numDigits</CODE>
            starting from index <CODE>textIndex</CODE> are numeric skipping any FNC1.
            @param text the text to check
            @param textIndex where to check from
            @param numDigits the number of digits to check
            @return the check result
        </member>
        <member name="M:iTextSharp.text.pdf.Barcode128.GetPackedRawDigits(System.String,System.Int32,System.Int32)">
            Packs the digits for charset C also considering FNC1. It assumes that all the parameters
            are valid.
            @param text the text to pack
            @param textIndex where to pack from
            @param numDigits the number of digits to pack. It is always an even number
            @return the packed digits, two digits per character
        </member>
        <member name="M:iTextSharp.text.pdf.Barcode128.GetRawText(System.String,System.Boolean)">
            Converts the human readable text to the characters needed to
            create a barcode. Some optimization is done to get the shortest code.
            @param text the text to convert
            @param ucc <CODE>true</CODE> if it is an UCC/EAN-128. In this case
            the character FNC1 is added
            @return the code ready to be fed to GetBarsCode128Raw()
        </member>
        <member name="M:iTextSharp.text.pdf.Barcode128.GetBarsCode128Raw(System.String)">
            Generates the bars. The input has the actual barcodes, not
            the human readable text.
            @param text the barcode
            @return the bars
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.Barcode128.PlaceBarcode(iTextSharp.text.pdf.PdfContentByte,iTextSharp.text.Color,iTextSharp.text.Color)" -->
        <member name="P:iTextSharp.text.pdf.Barcode128.BarcodeSize">
            Gets the maximum area that the barcode and the text, if
            any, will occupy. The lower left corner is always (0, 0).
            @return the size the barcode occupies.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "P:iTextSharp.text.pdf.Barcode128.Code" -->
        <member name="T:iTextSharp.text.pdf.Barcode39">
            Implements the code 39 and code 39 extended. The default parameters are:
             <pre>
            x = 0.8f;
            n = 2;
            font = BaseFont.CreateFont("Helvetica", "winansi", false);
            size = 8;
            baseline = size;
            barHeight = size * 3;
            textint= Element.ALIGN_CENTER;
            generateChecksum = false;
            checksumText = false;
            startStopText = true;
            extended = false;
             </pre>
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode39.CHARS">
            The index chars to <CODE>BARS</CODE>.
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode39.EXTENDED">
            The character combinations to make the code 39 extended.
        </member>
        <member name="F:iTextSharp.text.pdf.Barcode39.BARS">
            The bars to generate the code.
        </member>
        <member name="M:iTextSharp.text.pdf.Barcode39.#ctor">
            Creates a new Barcode39.
        </member>
        <member name="M:iTextSharp.text.pdf.Barcode39.GetBarsCode39(System.String)">
            Creates the bars.
            @param text the text to create the bars. This text does not include the start and
            stop characters
            @return the bars
        </member>
        <member name="M:iTextSharp.text.pdf.Barcode39.GetCode39Ex(System.String)">
            Converts the extended text into a normal, escaped text,
            ready to generate bars.
            @param text the extended text
            @return the escaped text
        </member>
        <member name="M:iTextSharp.text.pdf.Barcode39.GetChecksum(System.String)">
            Calculates the checksum.
            @param text the text
            @return the checksum
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.Barcode39.PlaceBarcode(iTextSharp.text.pdf.PdfContentByte,iTextSharp.text.Color,iTextSharp.text.Color)" -->
        <member name="P:iTextSharp.text.pdf.Barcode39.BarcodeSize">
            Gets the maximum area that the barcode and the text, if
            any, will occupy. The lower left corner is always (0, 0).
            @return the size the barcode occupies.
        </member>
        <member name="T:iTextSharp.text.pdf.BarcodeCodabar">
            Implements the code codabar. The default parameters are:
             <pre>
            x = 0.8f;
            n = 2;
            font = BaseFont.CreateFont("Helvetica", "winansi", false);
            size = 8;
            baseline = size;
            barHeight = size * 3;
            textAlignment = Element.ALIGN_CENTER;
            generateChecksum = false;
            checksumText = false;
            startStopText = false;
             </pre>
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeCodabar.CHARS">
            The index chars to <CODE>BARS</CODE>.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeCodabar.BARS">
            The bars to generate the code.
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodeCodabar.#ctor">
            Creates a new BarcodeCodabar.
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodeCodabar.GetBarsCodabar(System.String)">
            Creates the bars.
            @param text the text to create the bars
            @return the bars
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.BarcodeCodabar.PlaceBarcode(iTextSharp.text.pdf.PdfContentByte,iTextSharp.text.Color,iTextSharp.text.Color)" -->
        <member name="P:iTextSharp.text.pdf.BarcodeCodabar.BarcodeSize">
            Gets the maximum area that the barcode and the text, if
            any, will occupy. The lower left corner is always (0, 0).
            @return the size the barcode occupies.
        </member>
        <member name="T:iTextSharp.text.pdf.BarcodeEAN">
            Generates barcodes in several formats: EAN13, EAN8, UPCA, UPCE,
             supplemental 2 and 5. The default parameters are:
             <pre>
            x = 0.8f;
            font = BaseFont.CreateFont("Helvetica", "winansi", false);
            size = 8;
            baseline = size;
            barHeight = size * 3;
            guardBars = true;
            codeType = EAN13;
            code = "";
             </pre>
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEAN.TOTALBARS_EAN13">
            The total number of bars for EAN13.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEAN.TOTALBARS_EAN8">
            The total number of bars for EAN8.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEAN.TOTALBARS_UPCE">
            The total number of bars for UPCE.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEAN.TOTALBARS_SUPP2">
            The total number of bars for supplemental 2.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEAN.TOTALBARS_SUPP5">
            The total number of bars for supplemental 5.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEAN.ODD">
            Marker for odd parity.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEAN.EVEN">
            Marker for even parity.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEAN.GUARD_EMPTY">
            The bar positions that are guard bars.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEAN.GUARD_UPCA">
            The bar positions that are guard bars.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEAN.GUARD_EAN13">
            The bar positions that are guard bars.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEAN.GUARD_EAN8">
            The bar positions that are guard bars.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEAN.GUARD_UPCE">
            The bar positions that are guard bars.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEAN.TEXTPOS_EAN13">
            The x coordinates to place the text.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEAN.TEXTPOS_EAN8">
            The x coordinates to place the text.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEAN.BARS">
            The basic bar widths.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEAN.PARITY13">
            Sequence of parities to be used with EAN13.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEAN.PARITY2">
            Sequence of parities to be used with supplemental 2.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEAN.PARITY5">
            Sequence of parities to be used with supplemental 2.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEAN.PARITYE">
            Sequence of parities to be used with UPCE.
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodeEAN.#ctor">
            Creates new BarcodeEAN 
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodeEAN.CalculateEANParity(System.String)">
            Calculates the EAN parity character.
            @param code the code
            @return the parity character
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodeEAN.ConvertUPCAtoUPCE(System.String)">
            Converts an UPCA code into an UPCE code. If the code can not
            be converted a <CODE>null</CODE> is returned.
            @param text the code to convert. It must have 12 numeric characters
            @return the 8 converted digits or <CODE>null</CODE> if the
            code could not be converted
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodeEAN.GetBarsEAN13(System.String)">
            Creates the bars for the barcode EAN13 and UPCA.
            @param _code the text with 13 digits
            @return the barcode
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodeEAN.GetBarsEAN8(System.String)">
            Creates the bars for the barcode EAN8.
            @param _code the text with 8 digits
            @return the barcode
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodeEAN.GetBarsUPCE(System.String)">
            Creates the bars for the barcode UPCE.
            @param _code the text with 8 digits
            @return the barcode
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodeEAN.GetBarsSupplemental2(System.String)">
            Creates the bars for the barcode supplemental 2.
            @param _code the text with 2 digits
            @return the barcode
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodeEAN.GetBarsSupplemental5(System.String)">
            Creates the bars for the barcode supplemental 5.
            @param _code the text with 5 digits
            @return the barcode
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.BarcodeEAN.PlaceBarcode(iTextSharp.text.pdf.PdfContentByte,iTextSharp.text.Color,iTextSharp.text.Color)" -->
        <member name="P:iTextSharp.text.pdf.BarcodeEAN.BarcodeSize">
            Gets the maximum area that the barcode and the text, if
            any, will occupy. The lower left corner is always (0, 0).
            @return the size the barcode occupies.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.pdf.BarcodeEANSUPP" -->
        <member name="F:iTextSharp.text.pdf.BarcodeEANSUPP.ean">
            The barcode with the EAN/UPC.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeEANSUPP.supp">
            The barcode with the supplemental.
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodeEANSUPP.#ctor(iTextSharp.text.pdf.Barcode,iTextSharp.text.pdf.Barcode)">
            Creates new combined barcode.
            @param ean the EAN/UPC barcode
            @param supp the supplemental barcode
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.BarcodeEANSUPP.PlaceBarcode(iTextSharp.text.pdf.PdfContentByte,iTextSharp.text.Color,iTextSharp.text.Color)" -->
        <member name="P:iTextSharp.text.pdf.BarcodeEANSUPP.BarcodeSize">
            Gets the maximum area that the barcode and the text, if
            any, will occupy. The lower left corner is always (0, 0).
            @return the size the barcode occupies.
        </member>
        <member name="T:iTextSharp.text.pdf.BarcodeInter25">
            Implements the code interleaved 2 of 5. The text can include
             non numeric characters that are printed but do not generate bars.
             The default parameters are:
             <pre>
            x = 0.8f;
            n = 2;
            font = BaseFont.CreateFont("Helvetica", "winansi", false);
            size = 8;
            baseline = size;
            barHeight = size * 3;
            textint= Element.ALIGN_CENTER;
            generateChecksum = false;
            checksumText = false;
             </pre>
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodeInter25.BARS">
            The bars to generate the code.
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodeInter25.#ctor">
            Creates new BarcodeInter25 
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodeInter25.KeepNumbers(System.String)">
            Deletes all the non numeric characters from <CODE>text</CODE>.
            @param text the text
            @return a <CODE>string</CODE> with only numeric characters
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodeInter25.GetChecksum(System.String)">
            Calculates the checksum.
            @param text the numeric text
            @return the checksum
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodeInter25.GetBarsInter25(System.String)">
            Creates the bars for the barcode.
            @param text the text. It can contain non numeric characters
            @return the barcode
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.BarcodeInter25.PlaceBarcode(iTextSharp.text.pdf.PdfContentByte,iTextSharp.text.Color,iTextSharp.text.Color)" -->
        <member name="P:iTextSharp.text.pdf.BarcodeInter25.BarcodeSize">
            Gets the maximum area that the barcode and the text, if
            any, will occupy. The lower left corner is always (0, 0).
            @return the size the barcode occupies.
        </member>
        <member name="T:iTextSharp.text.pdf.BarcodePDF417">
            Generates the 2D barcode PDF417. Supports dimensioning auto-sizing, fixed
            and variable sizes, automatic and manual error levels, raw codeword input,
            codeword size optimization and bitmap inversion. The output can
            be a CCITT G4 <CODE>Image</CODE> or a raw bitmap.
            @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePDF417.PDF417_USE_ASPECT_RATIO">
            Auto-size is made based on <CODE>aspectRatio</CODE> and <CODE>yHeight</CODE>. 
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePDF417.PDF417_FIXED_RECTANGLE">
            The size of the barcode will be at least <CODE>codeColumns*codeRows</CODE>. 
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePDF417.PDF417_FIXED_COLUMNS">
            The size will be at least <CODE>codeColumns</CODE>
            with a variable number of <CODE>codeRows</CODE>.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePDF417.PDF417_FIXED_ROWS">
            The size will be at least <CODE>codeRows</CODE>
            with a variable number of <CODE>codeColumns</CODE>.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePDF417.PDF417_AUTO_ERROR_LEVEL">
            The error level correction is set automatically according
            to ISO 15438 recomendations.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePDF417.PDF417_USE_ERROR_LEVEL">
            The error level correction is set by the user. It can be 0 to 8. 
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePDF417.PDF417_USE_RAW_CODEWORDS">
            No <CODE>text</CODE> interpretation is done and the content of <CODE>codewords</CODE>
            is used directly.
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePDF417.PDF417_INVERT_BITMAP">
            Inverts the output bits of the raw bitmap that is normally
            bit one for black. It has only effect for the raw bitmap.
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodePDF417.#ctor">
            Creates a new <CODE>BarcodePDF417</CODE> with the default settings. 
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodePDF417.SetDefaultParameters">
            Set the default settings that correspond to <CODE>PDF417_USE_ASPECT_RATIO</CODE>
            and <CODE>PDF417_AUTO_ERROR_LEVEL</CODE>.
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodePDF417.PaintCode">
            Paints the barcode. If no exception was thrown a valid barcode is available. 
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodePDF417.GetImage">
            Gets an <CODE>Image</CODE> with the barcode. The image will have to be
            scaled in the Y direction by <CODE>yHeight</CODE>for the barcode
            to have the right printing aspect.
            @return the barcode <CODE>Image</CODE>
            @throws BadElementException on error
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodePDF417.SetText(System.String)">
            Sets the text that will form the barcode. This text is converted
            to bytes using the encoding Cp437.
            @param s the text that will form the barcode
            @throws UnsupportedEncodingException if the encoding Cp437 is not supported
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePDF417.outBits">
            Holds value of property outBits. 
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePDF417.bitColumns">
            Holds value of property bitColumns. 
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePDF417.codeRows">
            Holds value of property codeRows. 
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePDF417.codeColumns">
            Holds value of property codeColumns. 
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePDF417.codewords">
            Holds value of property codewords. 
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePDF417.lenCodewords">
            Holds value of property lenCodewords. 
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePDF417.errorLevel">
            Holds value of property errorLevel. 
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePDF417.text">
            Holds value of property text. 
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePDF417.options">
            Holds value of property options. 
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePDF417.aspectRatio">
            Holds value of property aspectRatio. 
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePDF417.yHeight">
            Holds value of property yHeight. 
        </member>
        <member name="P:iTextSharp.text.pdf.BarcodePDF417.OutBits">
            Gets the raw image bits of the barcode. The image will have to
            be scaled in the Y direction by <CODE>yHeight</CODE>.
            @return The raw barcode image
        </member>
        <member name="P:iTextSharp.text.pdf.BarcodePDF417.BitColumns">
            Gets the number of X pixels of <CODE>outBits</CODE>.
            @return the number of X pixels of <CODE>outBits</CODE>
        </member>
        <member name="P:iTextSharp.text.pdf.BarcodePDF417.CodeRows">
            Gets the number of Y pixels of <CODE>outBits</CODE>.
            It is also the number of rows in the barcode.
            @return the number of Y pixels of <CODE>outBits</CODE>
            Sets the number of barcode rows. This number may be changed
            to keep the barcode valid.
            @param codeRows the number of barcode rows
        </member>
        <member name="P:iTextSharp.text.pdf.BarcodePDF417.CodeColumns">
            Sets the number of barcode data columns.
            This number may be changed to keep the barcode valid.
            @param codeColumns the number of barcode data columns
        </member>
        <member name="P:iTextSharp.text.pdf.BarcodePDF417.Codewords">
            Gets the codeword array. This array is always 928 elements long.
            It can be writen to if the option <CODE>PDF417_USE_RAW_CODEWORDS</CODE>
            is set.
            @return the codeword array
        </member>
        <member name="P:iTextSharp.text.pdf.BarcodePDF417.LenCodewords">
            Sets the length of the codewords.
            @param lenCodewords the length of the codewords
        </member>
        <member name="P:iTextSharp.text.pdf.BarcodePDF417.ErrorLevel">
            Gets the error level correction used for the barcode. It may different
            from the previously set value.
            @return the error level correction used for the barcode
            Sets the error level correction for the barcode.
            @param errorLevel the error level correction for the barcode
        </member>
        <member name="P:iTextSharp.text.pdf.BarcodePDF417.Text">
            Sets the bytes that form the barcode. This bytes should
            be interpreted in the codepage Cp437.
            @param text the bytes that form the barcode
        </member>
        <member name="P:iTextSharp.text.pdf.BarcodePDF417.Options">
            Sets the options to generate the barcode. This can be all
            the <CODE>PDF417_*</CODE> constants.
            @param options the options to generate the barcode
        </member>
        <member name="P:iTextSharp.text.pdf.BarcodePDF417.AspectRatio">
            Sets the barcode aspect ratio. A ratio or 0.5 will make the
            barcode width twice as large as the height.
            @param aspectRatio the barcode aspect ratio
        </member>
        <member name="P:iTextSharp.text.pdf.BarcodePDF417.YHeight">
            Sets the Y pixel height relative to X. It is usually 3.
            @param yHeight the Y pixel height relative to X
        </member>
        <member name="T:iTextSharp.text.pdf.BarcodePostnet">
            Implements the Postnet and Planet barcodes. The default parameters are:
             <pre>
            n = 72f / 22f; // distance between bars
            x = 0.02f * 72f; // bar width
            barHeight = 0.125f * 72f; // height of the tall bars
            size = 0.05f * 72f; // height of the short bars
            codeType = POSTNET; // type of code
             </pre>
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:iTextSharp.text.pdf.BarcodePostnet.BARS">
            The bars for each character.
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodePostnet.#ctor">
            Creates new BarcodePostnet 
        </member>
        <member name="M:iTextSharp.text.pdf.BarcodePostnet.GetBarsPostnet(System.String)">
            Creates the bars for Postnet.
            @param text the code to be created without checksum
            @return the bars
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.BarcodePostnet.PlaceBarcode(iTextSharp.text.pdf.PdfContentByte,iTextSharp.text.Color,iTextSharp.text.Color)" -->
        <member name="P:iTextSharp.text.pdf.BarcodePostnet.BarcodeSize">
            Gets the maximum area that the barcode and the text, if
            any, will occupy. The lower left corner is always (0, 0).
            @return the size the barcode occupies.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.BORDER_WIDTH_THIN">
            A thin border with 1 point width. 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.BORDER_WIDTH_MEDIUM">
            A medium border with 2 point width. 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.BORDER_WIDTH_THICK">
            A thick border with 3 point width. 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.VISIBLE">
            The field is visible. 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.HIDDEN">
            The field is hidden. 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.VISIBLE_BUT_DOES_NOT_PRINT">
            The field is visible but does not print. 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.HIDDEN_BUT_PRINTABLE">
            The field is hidden but is printable. 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.READ_ONLY">
            The user may not change the value of the field. 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.REQUIRED">
            The field must have a value at the time it is exported by a submit-form
            action.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.MULTILINE">
            The field may contain multiple lines of text.
            This flag is only meaningful with text fields.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.DO_NOT_SCROLL">
            The field will not scroll (horizontally for single-line
            fields, vertically for multiple-line fields) to accommodate more text
            than will fit within its annotation rectangle. Once the field is full, no
            further text will be accepted.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.PASSWORD">
            The field is intended for entering a secure password that should
            not be echoed visibly to the screen.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.FILE_SELECTION">
            The text entered in the field represents the pathname of
            a file whose contents are to be submitted as the value of the field.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.DO_NOT_SPELL_CHECK">
            The text entered in the field will not be spell-checked.
            This flag is meaningful only in text fields and in combo
            fields with the <CODE>EDIT</CODE> flag set.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.EDIT">
            If set the combo box includes an editable text box as well as a drop list; if
            clear, it includes only a drop list.
            This flag is only meaningful with combo fields.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.COMB">
            combo box flag.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.rotation">
            Holds value of property rotation. 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.visibility">
            Holds value of property visibility. 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.fieldName">
            Holds value of property fieldName. 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.options">
            Holds value of property options. 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseField.maxCharacterLength">
            Holds value of property maxCharacterLength. 
        </member>
        <member name="M:iTextSharp.text.pdf.BaseField.#ctor(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Rectangle,System.String)">
            Creates a new <CODE>TextField</CODE>.
            @param writer the document <CODE>PdfWriter</CODE>
            @param box the field location and dimensions
            @param fieldName the field name. If <CODE>null</CODE> only the widget keys
            will be included in the field allowing it to be used as a kid field.
        </member>
        <member name="M:iTextSharp.text.pdf.BaseField.SetRotationFromPage(iTextSharp.text.Rectangle)">
            Convenience method to set the field rotation the same as the
            page rotation.
            @param page the page
        </member>
        <member name="M:iTextSharp.text.pdf.BaseField.MoveFields(iTextSharp.text.pdf.PdfDictionary,iTextSharp.text.pdf.PdfDictionary)">
            Moves the field keys from <CODE>from</CODE> to <CODE>to</CODE>. The moved keys
            are removed from <CODE>from</CODE>.
            @param from the source
            @param to the destination. It may be <CODE>null</CODE>
        </member>
        <member name="P:iTextSharp.text.pdf.BaseField.BorderWidth">
            Sets the border width in points. To eliminate the border
            set the border color to <CODE>null</CODE>.
            @param borderWidth the border width in points
        </member>
        <member name="P:iTextSharp.text.pdf.BaseField.BorderStyle">
            Sets the border style. The styles are found in <CODE>PdfBorderDictionary</CODE>
            and can be <CODE>STYLE_SOLID</CODE>, <CODE>STYLE_DASHED</CODE>,
            <CODE>STYLE_BEVELED</CODE>, <CODE>STYLE_INSET</CODE> and
            <CODE>STYLE_UNDERLINE</CODE>.
            @param borderStyle the border style
        </member>
        <member name="P:iTextSharp.text.pdf.BaseField.BorderColor">
            Sets the border color. Set to <CODE>null</CODE> to remove
            the border.
            @param borderColor the border color
        </member>
        <member name="P:iTextSharp.text.pdf.BaseField.BackgroundColor">
            Sets the background color. Set to <CODE>null</CODE> for
            transparent background.
            @param backgroundColor the background color
        </member>
        <member name="P:iTextSharp.text.pdf.BaseField.TextColor">
            Sets the text color. If <CODE>null</CODE> the color used
            will be black.
            @param textColor the text color
        </member>
        <member name="P:iTextSharp.text.pdf.BaseField.Font">
            Sets the text font. If <CODE>null</CODE> then Helvetica
            will be used.
            @param font the text font
        </member>
        <member name="P:iTextSharp.text.pdf.BaseField.FontSize">
            Sets the font size. If 0 then auto-sizing will be used but
            only for text fields.
            @param fontSize the font size
        </member>
        <member name="P:iTextSharp.text.pdf.BaseField.Alignment">
            Sets the text horizontal alignment. It can be <CODE>Element.ALIGN_LEFT</CODE>,
            <CODE>Element.ALIGN_CENTER</CODE> and <CODE>Element.ALIGN_RIGHT</CODE>.
            @param alignment the text horizontal alignment
        </member>
        <member name="P:iTextSharp.text.pdf.BaseField.Text">
            Sets the text for text fields.
            @param text the text
        </member>
        <member name="P:iTextSharp.text.pdf.BaseField.Box">
            Sets the field dimension and position.
            @param box the field dimension and position
        </member>
        <member name="P:iTextSharp.text.pdf.BaseField.Rotation">
            Sets the field rotation. This value should be the same as
            the page rotation where the field will be shown.
            @param rotation the field rotation
        </member>
        <member name="P:iTextSharp.text.pdf.BaseField.Visibility">
            Sets the field visibility flag. This flags can be one of
            <CODE>VISIBLE</CODE>, <CODE>HIDDEN</CODE>, <CODE>VISIBLE_BUT_DOES_NOT_PRINT</CODE>
            and <CODE>HIDDEN_BUT_PRINTABLE</CODE>.
            @param visibility field visibility flag
        </member>
        <member name="P:iTextSharp.text.pdf.BaseField.FieldName">
            Sets the field name.
            @param fieldName the field name. If <CODE>null</CODE> only the widget keys
            will be included in the field allowing it to be used as a kid field.
        </member>
        <member name="P:iTextSharp.text.pdf.BaseField.Options">
            Sets the option flags. The option flags can be a combination by oring of
            <CODE>READ_ONLY</CODE>, <CODE>REQUIRED</CODE>,
            <CODE>MULTILINE</CODE>, <CODE>DO_NOT_SCROLL</CODE>,
            <CODE>PASSWORD</CODE>, <CODE>FILE_SELECTION</CODE>,
            <CODE>DO_NOT_SPELL_CHECK</CODE> and <CODE>EDIT</CODE>.
            @param options the option flags
        </member>
        <member name="P:iTextSharp.text.pdf.BaseField.MaxCharacterLength">
            Sets the maximum length of the field’s text, in characters.
            It is only meaningful for text fields.
            @param maxCharacterLength the maximum length of the field’s text, in characters
        </member>
        <member name="T:iTextSharp.text.pdf.BaseFont">
            <summary>
            Summary description for BaseFont.
            </summary>
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.COURIER">
            This is a possible value of a base 14 type 1 font 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.COURIER_BOLD">
            This is a possible value of a base 14 type 1 font 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.COURIER_OBLIQUE">
            This is a possible value of a base 14 type 1 font 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.COURIER_BOLDOBLIQUE">
            This is a possible value of a base 14 type 1 font 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.HELVETICA">
            This is a possible value of a base 14 type 1 font 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.HELVETICA_BOLD">
            This is a possible value of a base 14 type 1 font 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.HELVETICA_OBLIQUE">
            This is a possible value of a base 14 type 1 font 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.HELVETICA_BOLDOBLIQUE">
            This is a possible value of a base 14 type 1 font 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.SYMBOL">
            This is a possible value of a base 14 type 1 font 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.TIMES_ROMAN">
            This is a possible value of a base 14 type 1 font 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.TIMES_BOLD">
            This is a possible value of a base 14 type 1 font 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.TIMES_ITALIC">
            This is a possible value of a base 14 type 1 font 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.TIMES_BOLDITALIC">
            This is a possible value of a base 14 type 1 font 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.ZAPFDINGBATS">
            This is a possible value of a base 14 type 1 font 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.ASCENT">
            The maximum height above the baseline reached by glyphs in this
            font, excluding the height of glyphs for accented characters.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.CAPHEIGHT">
            The y coordinate of the top of flat capital letters, measured from
            the baseline.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.DESCENT">
            The maximum depth below the baseline reached by glyphs in this
            font. The value is a negative number.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.ITALICANGLE">
            The angle, expressed in degrees counterclockwise from the vertical,
            of the dominant vertical strokes of the font. The value is
            negative for fonts that slope to the right, as almost all italic fonts do.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.BBOXLLX">
            The lower left x glyph coordinate.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.BBOXLLY">
            The lower left y glyph coordinate.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.BBOXURX">
            The upper right x glyph coordinate.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.BBOXURY">
            The upper right y glyph coordinate.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.FONT_TYPE_T1">
            The font is Type 1.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.FONT_TYPE_TT">
            The font is True Type with a standard encoding.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.FONT_TYPE_CJK">
            The font is CJK.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.FONT_TYPE_TTUNI">
            The font is True Type with a Unicode encoding.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.FONT_TYPE_DOCUMENT">
            A font already inside the document.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.FONT_TYPE_T3">
            A Type3 font.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.IDENTITY_H">
            The Unicode encoding with horizontal writing.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.IDENTITY_V">
            The Unicode encoding with vertical writing.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.CP1250">
            A possible encoding. 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.CP1252">
            A possible encoding. 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.CP1257">
            A possible encoding. 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.WINANSI">
            A possible encoding. 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.MACROMAN">
            A possible encoding. 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.EMBEDDED">
            if the font has to be embedded 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.NOT_EMBEDDED">
            if the font doesn't have to be embedded 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.CACHED">
            if the font has to be cached 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.NOT_CACHED">
            if the font doesn't have to be cached 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.RESOURCE_PATH">
            The path to the font resources. 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.CID_NEWLINE">
            The fake CID code that represents a newline. 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.notdef">
            a not defined character in a custom PDF encoding 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.fontType">
            The font type.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.widths">
            table of characters widths for this encoding 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.differences">
            encoding names 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.unicodeDifferences">
            same as differences but with the unicode codes 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.encoding">
            encoding used with this font 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.embedded">
            true if the font is to be embedded in the PDF 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.fontSpecific">
            true if the font must use it's built in encoding. In that case the
            <CODE>encoding</CODE> is only used to map a char to the position inside
            the font, not to the expected char name.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.fontCache">
            cache for the fonts already used. 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.BuiltinFonts14">
            list of the 14 built in fonts. 
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.forceWidthsOutput">
            Forces the output of the width array. Only matters for the 14
            built-in fonts.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.directTextToByte">
            Converts <CODE>char</CODE> directly to <CODE>byte</CODE>
            by casting.
        </member>
        <member name="F:iTextSharp.text.pdf.BaseFont.subset">
            Indicates if all the glyphs and widths for that particular
            encoding should be included in the document.
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.#ctor">
            Creates new BaseFont
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.BaseFont.CreateFont(System.String,System.String,System.Boolean)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.BaseFont.CreateFont(System.String,System.String,System.Boolean,System.Boolean,System.Byte[],System.Byte[])" -->
        <member name="M:iTextSharp.text.pdf.BaseFont.CreateFont(iTextSharp.text.pdf.PRIndirectReference)">
            Creates a font based on an existing document font. The created font font may not
            behave as expected, depending on the encoding or subset.
            @param fontRef the reference to the document font
            @return the font
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetBaseName(System.String)">
            Gets the name without the modifiers Bold, Italic or BoldItalic.
            @param name the full name of the font
            @return the name without the modifiers Bold, Italic or BoldItalic
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.NormalizeEncoding(System.String)">
            Normalize the encoding names. "winansi" is changed to "Cp1252" and
            "macroman" is changed to "MacRoman".
            @param enc the encoding to be normalized
            @return the normalized encoding
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.CreateEncoding">
            Creates the <CODE>widths</CODE> and the <CODE>differences</CODE> arrays
            @throws UnsupportedEncodingException the encoding is not supported
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetRawWidth(System.Int32,System.String)">
            Gets the width from the font according to the Unicode char <CODE>c</CODE>
            or the <CODE>name</CODE>. If the <CODE>name</CODE> is null it's a symbolic font.
            @param c the unicode char
            @param name the glyph name
            @return the width of the char
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetKerning(System.Char,System.Char)">
            Gets the kerning between two Unicode chars.
            @param char1 the first char
            @param char2 the second char
            @return the kerning to be applied
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.SetKerning(System.Char,System.Char,System.Int32)">
            Sets the kerning between two Unicode chars.
            @param char1 the first char
            @param char2 the second char
            @param kern the kerning to apply in normalized 1000 units
            @return <code>true</code> if the kerning was applied, <code>false</code> otherwise
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetWidth(System.Char)">
            Gets the width of a <CODE>char</CODE> in normalized 1000 units.
            @param char1 the unicode <CODE>char</CODE> to get the width of
            @return the width in normalized 1000 units
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetWidth(System.String)">
            Gets the width of a <CODE>string</CODE> in normalized 1000 units.
            @param text the <CODE>string</CODE> to get the witdth of
            @return the width in normalized 1000 units
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetDescent(System.String)">
            Gets the descent of a <CODE>String</CODE> in normalized 1000 units. The descent will always be
            less than or equal to zero even if all the characters have an higher descent.
            @param text the <CODE>String</CODE> to get the descent of
            @return the dexcent in normalized 1000 units
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetAscent(System.String)">
            Gets the ascent of a <CODE>String</CODE> in normalized 1000 units. The ascent will always be
            greater than or equal to zero even if all the characters have a lower ascent.
            @param text the <CODE>String</CODE> to get the ascent of
            @return the ascent in normalized 1000 units
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetDescentPoint(System.String,System.Single)">
            Gets the descent of a <CODE>String</CODE> in points. The descent will always be
            less than or equal to zero even if all the characters have an higher descent.
            @param text the <CODE>String</CODE> to get the descent of
            @param fontSize the size of the font
            @return the dexcent in points
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetAscentPoint(System.String,System.Single)">
            Gets the ascent of a <CODE>String</CODE> in points. The ascent will always be
            greater than or equal to zero even if all the characters have a lower ascent.
            @param text the <CODE>String</CODE> to get the ascent of
            @param fontSize the size of the font
            @return the ascent in points
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetWidthPointKerned(System.String,System.Single)">
            Gets the width of a <CODE>String</CODE> in points taking kerning
            into account.
            @param text the <CODE>String</CODE> to get the witdth of
            @param fontSize the font size
            @return the width in points
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetWidthPoint(System.String,System.Single)">
            Gets the width of a <CODE>string</CODE> in points.
            @param text the <CODE>string</CODE> to get the witdth of
            @param fontSize the font size
            @return the width in points
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetWidthPoint(System.Char,System.Single)">
            Gets the width of a <CODE>char</CODE> in points.
            @param char1 the <CODE>char</CODE> to get the witdth of
            @param fontSize the font size
            @return the width in points
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.BaseFont.ConvertToBytes(System.String)" -->
        <member name="M:iTextSharp.text.pdf.BaseFont.WriteFont(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.pdf.PdfIndirectReference,System.Object[])">
            Outputs to the writer the font dictionaries and streams.
            @param writer the writer for this document
            @param ref the font indirect reference
            @param params several parameters that depend on the font type
            @throws IOException on error
            @throws DocumentException error in generating the object
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetFontDescriptor(System.Int32,System.Single)">
            Gets the font parameter identified by <CODE>key</CODE>. Valid values
            for <CODE>key</CODE> are <CODE>ASCENT</CODE>, <CODE>CAPHEIGHT</CODE>, <CODE>DESCENT</CODE>,
            <CODE>ITALICANGLE</CODE>, <CODE>BBOXLLX</CODE>, <CODE>BBOXLLY</CODE>, <CODE>BBOXURX</CODE>
            and <CODE>BBOXURY</CODE>.
            @param key the parameter to be extracted
            @param fontSize the font size in points
            @return the parameter in points
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.IsEmbedded">
            Gets the embedded flag.
            @return <CODE>true</CODE> if the font is embedded.
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.IsFontSpecific">
            Gets the symbolic flag of the font.
            @return <CODE>true</CODE> if the font is symbolic
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.CreateSubsetPrefix">
            Creates a unique subset prefix to be added to the font name when the font is embedded and subset.
            @return the subset prefix
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetUnicodeDifferences(System.Int32)">
            Gets the Unicode character corresponding to the byte output to the pdf stream.
            @param index the byte index
            @return the Unicode character
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.BaseFont.GetFullFontName(System.String,System.String,System.Byte[])" -->
        <member name="M:iTextSharp.text.pdf.BaseFont.GetAllFontNames(System.String,System.String,System.Byte[])">
            Gets all the names from the font. Only the required tables are read.
            @param name the name of the font
            @param encoding the encoding of the font
            @param ttfAfm the true type font or the afm in a byte array
            @throws DocumentException on error
            @throws IOException on error
            @return an array of Object[] built with {getPostscriptFontName(), GetFamilyFontName(), GetFullFontName()}
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.EnumerateTTCNames(System.String)">
            Enumerates the postscript font names present inside a
            True Type Collection.
            @param ttcFile the file name of the font
            @throws DocumentException on error
            @throws IOException on error
            @return the postscript font names
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.EnumerateTTCNames(System.Byte[])">
            Enumerates the postscript font names present inside a
            True Type Collection.
            @param ttcArray the font as a <CODE>byte</CODE> array
            @throws DocumentException on error
            @throws IOException on error
            @return the postscript font names
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetResourceStream(System.String)">
            Gets the font resources.
            @param key the name of the resource
            @return the <CODE>Stream</CODE> to get the resource or
            <CODE>null</CODE> if not found
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.BaseFont.GetUnicodeEquivalent(System.Char)" -->
        <member name="M:iTextSharp.text.pdf.BaseFont.GetCidCode(System.Char)">
            Gets the CID code given an Unicode.
            It has only meaning with CJK fonts.
            @param c the Unicode
            @return the CID equivalent
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.HasKernPairs">
            Checks if the font has any kerning pairs.
            @return <CODE>true</CODE> if the font has any kerning pairs
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.CharExists(System.Char)">
            Checks if a character exists in this font.
            @param c the character to check
            @return <CODE>true</CODE> if the character has a glyph,
            <CODE>false</CODE> otherwise
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.SetCharAdvance(System.Char,System.Int32)">
            Sets the character advance.
            @param c the character
            @param advance the character advance normalized to 1000 units
            @return <CODE>true</CODE> if the advance was set,
            <CODE>false</CODE> otherwise
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetDocumentFonts(iTextSharp.text.pdf.PdfReader)">
            Gets a list of all document fonts. Each element of the <CODE>ArrayList</CODE>
            contains a <CODE>Object[]{String,PRIndirectReference}</CODE> with the font name
            and the indirect reference to it.
            @param reader the document where the fonts are to be listed from
            @return the list of fonts and references
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetDocumentFonts(iTextSharp.text.pdf.PdfReader,System.Int32)">
            Gets a list of the document fonts in a particular page. Each element of the <CODE>ArrayList</CODE>
            contains a <CODE>Object[]{String,PRIndirectReference}</CODE> with the font name
            and the indirect reference to it.
            @param reader the document where the fonts are to be listed from
            @param page the page to list the fonts from
            @return the list of fonts and references
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.GetCharBBox(System.Char)">
            Gets the smallest box enclosing the character contours. It will return
            <CODE>null</CODE> if the font has not the information or the character has no
            contours, as in the case of the space, for example. Characters with no contours may
            also return [0,0,0,0].
            @param c the character to get the contour bounding box from
            @return an array of four floats with the bounding box in the format [llx,lly,urx,ury] or
            <code>null</code>
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.CorrectArabicAdvance">
            iText expects Arabic Diactrics (tashkeel) to have zero advance but some fonts,
            most notably those that come with Windows, like times.ttf, have non-zero
            advance for those characters. This method makes those character to have zero
            width advance and work correctly in the iText Arabic shaping and reordering
            context.
        </member>
        <member name="P:iTextSharp.text.pdf.BaseFont.Encoding">
            Gets the encoding used to convert <CODE>string</CODE> into <CODE>byte[]</CODE>.
            @return the encoding name
        </member>
        <member name="P:iTextSharp.text.pdf.BaseFont.FontType">
            Gets the font type. The font types can be: FONT_TYPE_T1,
            FONT_TYPE_TT, FONT_TYPE_CJK and FONT_TYPE_TTUNI.
            @return the font type
        </member>
        <member name="P:iTextSharp.text.pdf.BaseFont.PostscriptFontName">
            Gets the postscript font name.
            @return the postscript font name
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "P:iTextSharp.text.pdf.BaseFont.FullFontName" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "P:iTextSharp.text.pdf.BaseFont.FamilyFontName" -->
        <member name="P:iTextSharp.text.pdf.BaseFont.CodePagesSupported">
            Gets the code pages supported by the font. This has only meaning
            with True Type fonts.
            @return the code pages supported by the font
        </member>
        <member name="P:iTextSharp.text.pdf.BaseFont.Widths">
            Gets the font width array.
            @return the font width array
        </member>
        <member name="P:iTextSharp.text.pdf.BaseFont.Differences">
            Gets the array with the names of the characters.
            @return the array with the names of the characters
        </member>
        <member name="P:iTextSharp.text.pdf.BaseFont.UnicodeDifferences">
            Gets the array with the unicode characters.
            @return the array with the unicode characters
        </member>
        <member name="P:iTextSharp.text.pdf.BaseFont.ForceWidthsOutput">
            Set to <CODE>true</CODE> to force the generation of the
            widths array.
            @param forceWidthsOutput <CODE>true</CODE> to force the generation of the
            widths array
        </member>
        <member name="P:iTextSharp.text.pdf.BaseFont.DirectTextToByte">
            Sets the conversion of <CODE>char</CODE> directly to <CODE>byte</CODE>
            by casting. This is a low level feature to put the bytes directly in
            the content stream without passing through string.GetBytes().
            @param directTextToByte New value of property directTextToByte.
        </member>
        <member name="P:iTextSharp.text.pdf.BaseFont.Subset">
            Indicates if all the glyphs and widths for that particular
            encoding should be included in the document. Set to <CODE>false</CODE>
            to include all.
            @param subset new value of property subset
        </member>
        <member name="T:iTextSharp.text.pdf.BaseFont.StreamFont">
            Generates the PDF stream with the Type1 and Truetype fonts returning
            a PdfStream.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.pdf.PdfStream" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.pdf.PdfDictionary" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.pdf.PdfObject" -->
        <member name="F:iTextSharp.text.pdf.PdfObject.BOOLEAN">
            a possible type of <CODE>PdfObject</CODE> 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfObject.NUMBER">
            a possible type of <CODE>PdfObject</CODE> 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfObject.STRING">
            a possible type of <CODE>PdfObject</CODE> 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfObject.NAME">
            a possible type of <CODE>PdfObject</CODE> 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfObject.ARRAY">
            a possible type of <CODE>PdfObject</CODE> 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfObject.DICTIONARY">
            a possible type of <CODE>PdfObject</CODE> 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfObject.STREAM">
            a possible type of <CODE>PdfObject</CODE> 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfObject.NULL">
            a possible type of <CODE>PdfObject</CODE> 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfObject.INDIRECT">
            a possible type of <CODE>PdfObject</CODE> 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfObject.NOTHING">
            This is an empty string used for the <CODE>PdfNull</CODE>-object and for an empty <CODE>PdfString</CODE>-object. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfObject.TEXT_PDFDOCENCODING">
            This is the default encoding to be used for converting strings into bytes and vice versa.
            The default encoding is PdfDocEcoding.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfObject.TEXT_UNICODE">
            This is the encoding to be used to output text in Unicode. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfObject.bytes">
            the content of this <CODE>PdfObject</CODE> 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfObject.type">
            the type of this <CODE>PdfObject</CODE> 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfObject.indRef">
            Holds value of property indRef.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfObject.#ctor(System.Int32)">
             Constructs a <CODE>PdfObject</CODE> of a certain <VAR>type</VAR> without any <VAR>content</VAR>.
            
             @param        type            type of the new <CODE>PdfObject</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfObject.#ctor(System.Int32,System.String)">
             Constructs a <CODE>PdfObject</CODE> of a certain <VAR>type</VAR> with a certain <VAR>content</VAR>.
            
             @param        type            type of the new <CODE>PdfObject</CODE>
             @param        content            content of the new <CODE>PdfObject</CODE> as a <CODE>String</CODE>.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfObject.#ctor(System.Int32,System.Byte[])">
             Constructs a <CODE>PdfObject</CODE> of a certain <VAR>type</VAR> with a certain <VAR>content</VAR>.
            
             @param        type            type of the new <CODE>PdfObject</CODE>
             @param        bytes            content of the new <CODE>PdfObject</CODE> as an array of <CODE>byte</CODE>.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfObject.ToPdf(iTextSharp.text.pdf.PdfWriter,System.IO.Stream)">
            Writes the PDF representation of this <CODE>PdfObject</CODE> as an array of <CODE>byte</CODE>s to the writer.
            @param writer for backwards compatibility
            @param os the outputstream to write the bytes to.
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.pdf.PdfObject.GetBytes">
            Gets the presentation of this object in a byte array
            @return a byte array
        </member>
        <member name="M:iTextSharp.text.pdf.PdfObject.CanBeInObjStm">
            Can this object be in an object stream?
            @return true if this object can be in an object stream.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfObject.ToString">
             Returns the <CODE>String</CODE>-representation of this <CODE>PdfObject</CODE>.
            
             @return        a <CODE>String</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfObject.IsNull">
             Checks if this <CODE>PdfObject</CODE> is of the type <CODE>PdfNull</CODE>.
            
             @return        <CODE>true</CODE> or <CODE>false</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfObject.IsBoolean">
             Checks if this <CODE>PdfObject</CODE> is of the type <CODE>PdfBoolean</CODE>.
            
             @return        <CODE>true</CODE> or <CODE>false</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfObject.IsNumber">
             Checks if this <CODE>PdfObject</CODE> is of the type <CODE>PdfNumber</CODE>.
            
             @return        <CODE>true</CODE> or <CODE>false</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfObject.IsString">
             Checks if this <CODE>PdfObject</CODE> is of the type <CODE>PdfString</CODE>.
            
             @return        <CODE>true</CODE> or <CODE>false</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfObject.IsName">
             Checks if this <CODE>PdfObject</CODE> is of the type <CODE>PdfName</CODE>.
            
             @return        <CODE>true</CODE> or <CODE>false</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfObject.IsArray">
             Checks if this <CODE>PdfObject</CODE> is of the type <CODE>PdfArray</CODE>.
            
             @return        <CODE>true</CODE> or <CODE>false</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfObject.IsDictionary">
             Checks if this <CODE>PdfObject</CODE> is of the type <CODE>PdfDictionary</CODE>.
            
             @return        <CODE>true</CODE> or <CODE>false</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfObject.IsStream">
             Checks if this <CODE>PdfObject</CODE> is of the type <CODE>PdfStream</CODE>.
            
             @return        <CODE>true</CODE> or <CODE>false</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfObject.IsIndirect">
            Checks if this is an indirect object.
            @return true if this is an indirect object
        </member>
        <member name="P:iTextSharp.text.pdf.PdfObject.Length">
             Returns the length of the actual content of the <CODE>PdfObject</CODE>.
             <P>
             In some cases, namely for <CODE>PdfString</CODE> and <CODE>PdfStream</CODE>,
             this method differs from the method <CODE>pdfLength</CODE> because <CODE>pdfLength</CODE>
             returns the length of the PDF representation of the object, not of the actual content
             as does the method <CODE>length</CODE>.</P>
             <P>
             Remark: the actual content of an object is in some cases identical to its representation.
             The following statement is always true: Length() &gt;= PdfLength().</P>
            
             @return        a length
        </member>
        <member name="P:iTextSharp.text.pdf.PdfObject.Content">
             Changes the content of this <CODE>PdfObject</CODE>.
            
             @param        content            the new content of this <CODE>PdfObject</CODE>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfObject.Type">
             Returns the type of this <CODE>PdfObject</CODE>.
            
             @return        a type
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDictionary.FONT">
            This is a possible type of dictionary 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDictionary.OUTLINES">
            This is a possible type of dictionary 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDictionary.PAGE">
            This is a possible type of dictionary 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDictionary.PAGES">
            This is a possible type of dictionary 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDictionary.CATALOG">
            This is a possible type of dictionary 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDictionary.dictionaryType">
            This is the type of this dictionary 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDictionary.hashMap">
            This is the hashmap that contains all the values and keys of the dictionary 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDictionary.#ctor">
            Constructs an empty <CODE>PdfDictionary</CODE>-object.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDictionary.#ctor(iTextSharp.text.pdf.PdfName)">
             Constructs a <CODE>PdfDictionary</CODE>-object of a certain type.
            
             @param        type    a <CODE>PdfName</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDictionary.ToPdf(iTextSharp.text.pdf.PdfWriter,System.IO.Stream)">
             Returns the PDF representation of this <CODE>PdfDictionary</CODE>.
            
             @return        an array of <CODE>byte</CODE>
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfDictionary.Put(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfObject)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfDictionary.PutEx(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfObject)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfDictionary.PutDel(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfObject)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfDictionary.Remove(iTextSharp.text.pdf.PdfName)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfDictionary.Get(iTextSharp.text.pdf.PdfName)" -->
        <member name="M:iTextSharp.text.pdf.PdfDictionary.IsDictionaryType(iTextSharp.text.pdf.PdfName)">
             Checks if a <CODE>PdfDictionary</CODE> is of a certain type.
            
             @param        type    a type of dictionary
             @return        <CODE>true</CODE> of <CODE>false</CODE>
            
             @deprecated
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDictionary.IsFont">
              Checks if a <CODE>Dictionary</CODE> is of the type FONT.
            
             @return        <CODE>true</CODE> if it is, <CODE>false</CODE> if it isn't.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDictionary.IsPage">
              Checks if a <CODE>Dictionary</CODE> is of the type PAGE.
            
             @return        <CODE>true</CODE> if it is, <CODE>false</CODE> if it isn't.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDictionary.IsPages">
              Checks if a <CODE>Dictionary</CODE> is of the type PAGES.
            
             @return        <CODE>true</CODE> if it is, <CODE>false</CODE> if it isn't.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDictionary.IsCatalog">
              Checks if a <CODE>Dictionary</CODE> is of the type CATALOG.
            
             @return        <CODE>true</CODE> if it is, <CODE>false</CODE> if it isn't.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDictionary.IsOutlineTree">
              Checks if a <CODE>Dictionary</CODE> is of the type OUTLINES.
            
             @return        <CODE>true</CODE> if it is, <CODE>false</CODE> if it isn't.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfStream.compressed">
            is the stream compressed? 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStream.#ctor(System.Byte[])">
             Constructs a <CODE>PdfStream</CODE>-object.
            
             @param        bytes            content of the new <CODE>PdfObject</CODE> as an array of <CODE>byte</CODE>.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfStream.#ctor(System.IO.Stream,iTextSharp.text.pdf.PdfWriter)" -->
        <member name="M:iTextSharp.text.pdf.PdfStream.#ctor">
            Constructs a <CODE>PdfStream</CODE>-object.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfStream.WriteLength" -->
        <member name="M:iTextSharp.text.pdf.PdfStream.FlateCompress">
             Compresses the stream.
            
             @throws PdfException if a filter is allready defined
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStream.WriteContent(System.IO.Stream)">
            Writes the data content to an <CODE>OutputStream</CODE>.
            @param os the destination to write to
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.BaseFont.StreamFont.#ctor(System.Byte[],System.Int32[])">
            Generates the PDF stream with the Type1 and Truetype fonts returning
            a PdfStream.
            @param contents the content of the stream
            @param lengths an array of int that describes the several lengths of each part of the font
        </member>
        <member name="T:iTextSharp.text.pdf.BidiLine">
            Does all the line bidirectional processing with PdfChunk assembly.
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="M:iTextSharp.text.pdf.BidiLine.#ctor">
            Creates new BidiLine 
        </member>
        <member name="M:iTextSharp.text.pdf.BidiLine.GetWidth(System.Int32,System.Int32)">
            Gets the width of a range of characters.
            @param startIdx the first index to calculate
            @param lastIdx the last inclusive index to calculate
            @return the sum of all widths
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.L">
            Left-to-right
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.LRE">
            Left-to-Right Embedding 
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.LRO">
            Left-to-Right Override 
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.R">
            Right-to-Left 
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.AL">
            Right-to-Left Arabic 
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.RLE">
            Right-to-Left Embedding 
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.RLO">
            Right-to-Left Override 
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.PDF">
            Pop Directional Format 
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.EN">
            European Number 
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.ES">
            European Number Separator 
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.ET">
            European Number Terminator 
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.AN">
            Arabic Number 
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.CS">
            Common Number Separator 
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.NSM">
            Non-Spacing Mark 
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.BN">
            Boundary Neutral 
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.B">
            Paragraph Separator 
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.S">
            Segment Separator 
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.WS">
            Whitespace 
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.ON">
            Other Neutrals 
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.TYPE_MIN">
            Minimum bidi type value. 
        </member>
        <member name="F:iTextSharp.text.pdf.BidiOrder.TYPE_MAX">
            Maximum bidi type value. 
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.#ctor(System.SByte[])">
             Initialize using an array of direction types.  Types range from TYPE_MIN to TYPE_MAX inclusive
             and represent the direction codes of the characters in the text.
            
             @param types the types array
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.#ctor(System.SByte[],System.SByte)">
             Initialize using an array of direction types and an externally supplied paragraph embedding level.
             The embedding level may be -1, 0, or 1.  -1 means to apply the default algorithm (rules P2 and P3),
             0 is for LTR paragraphs, and 1 is for RTL paragraphs.
            
             @param types the types array
             @param paragraphEmbeddingLevel the externally supplied paragraph embedding level.
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.RunAlgorithm">
            The algorithm.
            Does not include line-based processing (Rules L1, L2).
            These are applied later in the line-based phase of the algorithm.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.BidiOrder.DetermineParagraphEmbeddingLevel" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.BidiOrder.DetermineExplicitEmbeddingLevels" -->
        <member name="M:iTextSharp.text.pdf.BidiOrder.RemoveExplicitCodes">
            Rules X9.
            Remove explicit codes so that they may be ignored during the remainder
            of the main portion of the algorithm.  The length of the resulting text
            is returned.
            @return the length of the data excluding explicit codes and BN.
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.ReinsertExplicitCodes(System.Int32)">
            Reinsert levels information for explicit codes.
            This is for ease of relating the level information
            to the original input data.  Note that the levels
            assigned to these codes are arbitrary, they're
            chosen so as to avoid breaking level runs.
            @param textLength the length of the data after compression
            @return the length of the data (original length of
            types array supplied to constructor)
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.ProcessEmbeddings(System.SByte[],System.SByte)">
             2) determining explicit levels
             Rules X1 - X8
            
             The interaction of these rules makes handling them a bit complex.
             This examines resultTypes but does not modify it.  It returns embedding and
             override information in the result array.  The low 7 bits are the level, the high
             bit is set if the level is an override, and clear if it is an embedding.
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.ResolveWeakTypes(System.Int32,System.Int32,System.SByte,System.SByte,System.SByte)">
             3) resolving weak types
             Rules W1-W7.
            
             Note that some weak types (EN, AN) remain after this processing is complete.
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.ResolveNeutralTypes(System.Int32,System.Int32,System.SByte,System.SByte,System.SByte)">
            6) resolving neutral types
            Rules N1-N2.
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.ResolveImplicitLevels(System.Int32,System.Int32,System.SByte,System.SByte,System.SByte)">
            7) resolving implicit embedding levels
            Rules I1, I2.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.BidiOrder.GetLevels(System.Int32[])" -->
        <member name="M:iTextSharp.text.pdf.BidiOrder.ComputeMultilineReordering(System.SByte[],System.Int32[])">
            Return multiline reordering array for a given level array.
            Reordering does not occur across a line break.
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.ComputeReordering(System.SByte[])">
            Return reordering array for a given level array.  This reorders a single line.
            The reordering is a visual to logical map.  For example,
            the leftmost char is string.CharAt(order[0]).
            Rule L2.
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.GetBaseLevel">
            Return the base level of the paragraph.
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.IsWhitespace(System.SByte)">
            Return true if the type is considered a whitespace type for the line break rules.
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.TypeForLevel(System.Int32)">
            Return the strong type (L or R) corresponding to the level.
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.FindRunLimit(System.Int32,System.Int32,System.SByte[])">
            Return the limit of the run starting at index that includes only resultTypes in validSet.
            This checks the value at index, and will return index if that value is not in validSet.
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.FindRunStart(System.Int32,System.SByte[])">
            Return the start of the run including index that includes only resultTypes in validSet.
            This assumes the value at index is valid, and does not check it.
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.SetTypes(System.Int32,System.Int32,System.SByte)">
            Set resultTypes from start up to (but not including) limit to newType.
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.SetLevels(System.Int32,System.Int32,System.SByte)">
            Set resultLevels from start up to (but not including) limit to newLevel.
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.ValidateTypes(System.SByte[])">
            Throw exception if type array is invalid.
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.ValidateParagraphEmbeddingLevel(System.SByte)">
            Throw exception if paragraph embedding level is invalid. Special allowance for -1 so that
            default processing can still be performed when using this API.
        </member>
        <member name="M:iTextSharp.text.pdf.BidiOrder.ValidateLineBreaks(System.Int32[],System.Int32)">
            Throw exception if line breaks array is invalid.
        </member>
        <member name="T:iTextSharp.text.pdf.ByteBuffer">
            Acts like a <CODE>StringBuilder</CODE> but works with <CODE>byte</CODE> arrays.
            floating point is converted to a format suitable to the PDF.
            @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:iTextSharp.text.pdf.ByteBuffer.count">
            The count of bytes in the buffer. 
        </member>
        <member name="F:iTextSharp.text.pdf.ByteBuffer.buf">
            The buffer where the bytes are stored. 
        </member>
        <member name="M:iTextSharp.text.pdf.ByteBuffer.#ctor">
            Creates new ByteBuffer with capacity 128 
        </member>
        <member name="M:iTextSharp.text.pdf.ByteBuffer.#ctor(System.Int32)">
            Creates a byte buffer with a certain capacity.
            @param size the initial capacity
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.ByteBuffer.SetCacheSize(System.Int32)" -->
        <member name="M:iTextSharp.text.pdf.ByteBuffer.FillCache(System.Int32)">
             You can fill the cache in advance if you want to.
            
             @param   decimals
        </member>
        <member name="M:iTextSharp.text.pdf.ByteBuffer.ConvertToBytes(System.Int32)">
             Converts an double (multiplied by 100 and cast to an int) into an array of bytes.
            
             @param   i   the int
             @return  a bytearray
        </member>
        <member name="M:iTextSharp.text.pdf.ByteBuffer.Append_i(System.Int32)">
            Appends an <CODE>int</CODE>. The size of the array will grow by one.
            @param b the int to be appended
            @return a reference to this <CODE>ByteBuffer</CODE> object
        </member>
        <member name="M:iTextSharp.text.pdf.ByteBuffer.Append(System.Byte[],System.Int32,System.Int32)">
            Appends the subarray of the <CODE>byte</CODE> array. The buffer will grow by
            <CODE>len</CODE> bytes.
            @param b the array to be appended
            @param off the offset to the start of the array
            @param len the length of bytes to Append
            @return a reference to this <CODE>ByteBuffer</CODE> object
        </member>
        <member name="M:iTextSharp.text.pdf.ByteBuffer.Append(System.Byte[])">
            Appends an array of bytes.
            @param b the array to be appended
            @return a reference to this <CODE>ByteBuffer</CODE> object
        </member>
        <member name="M:iTextSharp.text.pdf.ByteBuffer.Append(System.String)">
            Appends a <CODE>string</CODE> to the buffer. The <CODE>string</CODE> is
            converted according to the encoding ISO-8859-1.
            @param str the <CODE>string</CODE> to be appended
            @return a reference to this <CODE>ByteBuffer</CODE> object
        </member>
        <member name="M:iTextSharp.text.pdf.ByteBuffer.Append(System.Char)">
            Appends a <CODE>char</CODE> to the buffer. The <CODE>char</CODE> is
            converted according to the encoding ISO-8859-1.
            @param c the <CODE>char</CODE> to be appended
            @return a reference to this <CODE>ByteBuffer</CODE> object
        </member>
        <member name="M:iTextSharp.text.pdf.ByteBuffer.Append(iTextSharp.text.pdf.ByteBuffer)">
            Appends another <CODE>ByteBuffer</CODE> to this buffer.
            @param buf the <CODE>ByteBuffer</CODE> to be appended
            @return a reference to this <CODE>ByteBuffer</CODE> object
        </member>
        <member name="M:iTextSharp.text.pdf.ByteBuffer.Append(System.Int32)">
            Appends the string representation of an <CODE>int</CODE>.
            @param i the <CODE>int</CODE> to be appended
            @return a reference to this <CODE>ByteBuffer</CODE> object
        </member>
        <member name="M:iTextSharp.text.pdf.ByteBuffer.Append(System.Single)">
            Appends a string representation of a <CODE>float</CODE> according
            to the Pdf conventions.
            @param i the <CODE>float</CODE> to be appended
            @return a reference to this <CODE>ByteBuffer</CODE> object
        </member>
        <member name="M:iTextSharp.text.pdf.ByteBuffer.Append(System.Double)">
            Appends a string representation of a <CODE>double</CODE> according
            to the Pdf conventions.
            @param d the <CODE>double</CODE> to be appended
            @return a reference to this <CODE>ByteBuffer</CODE> object
        </member>
        <member name="M:iTextSharp.text.pdf.ByteBuffer.FormatDouble(System.Double)">
            Outputs a <CODE>double</CODE> into a format suitable for the PDF.
            @param d a double
            @return the <CODE>string</CODE> representation of the <CODE>double</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.ByteBuffer.FormatDouble(System.Double,iTextSharp.text.pdf.ByteBuffer)">
            Outputs a <CODE>double</CODE> into a format suitable for the PDF.
            @param d a double
            @return the <CODE>string</CODE> representation of the <CODE>double</CODE> if
            <CODE>d</CODE> is <CODE>null</CODE>. If <CODE>d</CODE> is <B>not</B> <CODE>null</CODE>,
            then the double is appended directly to the buffer and this methods returns <CODE>null</CODE>.
        </member>
        <member name="M:iTextSharp.text.pdf.ByteBuffer.Reset">
            Sets the size to zero.
        </member>
        <member name="M:iTextSharp.text.pdf.ByteBuffer.ToByteArray">
             Creates a newly allocated byte array. Its size is the current
             size of this output stream and the valid contents of the buffer
             have been copied into it.
            
             @return  the current contents of this output stream, as a byte array.
        </member>
        <member name="M:iTextSharp.text.pdf.ByteBuffer.ToString">
             Converts the buffer's contents into a string, translating bytes into
             characters according to the platform's default character encoding.
            
             @return string translated from the buffer's contents.
        </member>
        <member name="M:iTextSharp.text.pdf.ByteBuffer.WriteTo(System.IO.Stream)">
             Writes the complete contents of this byte buffer output to
             the specified output stream argument, as if by calling the output
             stream's write method using <code>out.Write(buf, 0, count)</code>.
            
             @param      out   the output stream to which to write the data.
             @exception  IOException  if an I/O error occurs.
        </member>
        <member name="P:iTextSharp.text.pdf.ByteBuffer.Size">
             Returns the current size of the buffer.
            
             @return the value of the <code>count</code> field, which is the number of valid bytes in this byte buffer.
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFont.GetEntireIndexRange(System.Int32)">
            a utility that creates a range item for an entire index
            
             @param indexOffset where the index is
             @return a range item representing the entire index
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFont.GetCID(System.String)">
            get a single CID font. The PDF architecture (1.4)
            supports 16-bit strings only with CID CFF fonts, not
            in Type-1 CFF fonts, so we convert the font to CID if
            it is in the Type-1 format.
            Two other tasks that we need to do are to select
            only a single font from the CFF package (this again is
            a PDF restriction) and to subset the CharStrings glyph
            description.
        </member>
        <member name="F:iTextSharp.text.pdf.CFFFont.buf">
            A random Access File or an array
            (contributed by orly manor)
        </member>
        <member name="T:iTextSharp.text.pdf.CFFFont.Item">
            List items for the linked list that builds the new CID font.
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFont.Item.Increment(System.Int32[])">
            remember the current offset and increment by item's size in bytes. 
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFont.Item.Emit(System.Byte[])">
            Emit the byte stream for this item. 
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFont.Item.Xref">
            Fix up cross references to this item (applies only to markers). 
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFont.OffsetItem.Set(System.Int32)">
            set the value of an offset item that was initially unknown.
            It will be fixed up latex by a call to xref on some marker.
        </member>
        <member name="T:iTextSharp.text.pdf.CFFFont.RangeItem">
            A range item.
        </member>
        <member name="T:iTextSharp.text.pdf.CFFFont.IndexOffsetItem">
            An index-offset item for the list.
            The size denotes the required size in the CFF. A positive
            value means that we need a specific size in bytes (for offset arrays)
            and a negative value means that this is a dict item that uses a
            variable-size representation.
        </member>
        <member name="T:iTextSharp.text.pdf.CFFFont.SubrMarkerItem">
             
             @author orly manor
            
             TODO To change the template for this generated type comment go to
             Window - Preferences - Java - Code Generation - Code and Comments
        </member>
        <member name="T:iTextSharp.text.pdf.CFFFont.DictOffsetItem">
            an unknown offset in a dictionary for the list.
            We will fix up the offset later; for now, assume it's large.
        </member>
        <member name="T:iTextSharp.text.pdf.CFFFont.UInt24Item">
            Card24 item.
        </member>
        <member name="T:iTextSharp.text.pdf.CFFFont.UInt32Item">
            Card32 item.
        </member>
        <member name="T:iTextSharp.text.pdf.CFFFont.UInt16Item">
            A SID or Card16 item.
        </member>
        <member name="T:iTextSharp.text.pdf.CFFFont.UInt8Item">
            A Card8 item.
        </member>
        <member name="T:iTextSharp.text.pdf.CFFFont.DictNumberItem">
            A dictionary number on the list.
            This implementation is inefficient: it doesn't use the variable-length
            representation.
        </member>
        <member name="T:iTextSharp.text.pdf.CFFFont.MarkerItem">
            An offset-marker item for the list.
            It is used to mark an offset and to set the offset list item.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.pdf.CFFFont.Font" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.pdf.CFFFontSubset" -->
        <member name="F:iTextSharp.text.pdf.CFFFontSubset.SubrsFunctions">
            The Strings in this array represent Type1/Type2 operator names
        </member>
        <member name="F:iTextSharp.text.pdf.CFFFontSubset.SubrsEscapeFuncs">
            The Strings in this array represent Type1/Type2 escape operator names
        </member>
        <member name="F:iTextSharp.text.pdf.CFFFontSubset.GlyphsUsed">
            A HashMap containing the glyphs used in the text after being converted
            to glyph number by the CMap 
        </member>
        <member name="F:iTextSharp.text.pdf.CFFFontSubset.glyphsInList">
            The GlyphsUsed keys as an ArrayList
        </member>
        <member name="F:iTextSharp.text.pdf.CFFFontSubset.FDArrayUsed">
            A HashMap for keeping the FDArrays being used by the font
        </member>
        <member name="F:iTextSharp.text.pdf.CFFFontSubset.hSubrsUsed">
            A HashMaps array for keeping the subroutines used in each FontDict
        </member>
        <member name="F:iTextSharp.text.pdf.CFFFontSubset.lSubrsUsed">
            The SubroutinesUsed HashMaps as ArrayLists
        </member>
        <member name="F:iTextSharp.text.pdf.CFFFontSubset.hGSubrsUsed">
            A HashMap for keeping the Global subroutines used in the font
        </member>
        <member name="F:iTextSharp.text.pdf.CFFFontSubset.lGSubrsUsed">
            The Global SubroutinesUsed HashMaps as ArrayLists
        </member>
        <member name="F:iTextSharp.text.pdf.CFFFontSubset.hSubrsUsedNonCID">
            A HashMap for keeping the subroutines used in a non-cid font
        </member>
        <member name="F:iTextSharp.text.pdf.CFFFontSubset.lSubrsUsedNonCID">
            The SubroutinesUsed HashMap as ArrayList
        </member>
        <member name="F:iTextSharp.text.pdf.CFFFontSubset.NewLSubrsIndex">
            An array of the new Indexs for the local Subr. One index for each FontDict
        </member>
        <member name="F:iTextSharp.text.pdf.CFFFontSubset.NewSubrsIndexNonCID">
            The new subroutines index for a non-cid font
        </member>
        <member name="F:iTextSharp.text.pdf.CFFFontSubset.NewGSubrsIndex">
            The new global subroutines index of the font
        </member>
        <member name="F:iTextSharp.text.pdf.CFFFontSubset.NewCharStringsIndex">
            The new CharString of the font
        </member>
        <member name="F:iTextSharp.text.pdf.CFFFontSubset.GBias">
            The bias for the global subroutines
        </member>
        <member name="F:iTextSharp.text.pdf.CFFFontSubset.OutputList">
            The linked list for generating the new font stream
        </member>
        <member name="F:iTextSharp.text.pdf.CFFFontSubset.NumOfHints">
            Number of arguments to the stem operators in a subroutine calculated recursivly
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.#ctor(iTextSharp.text.pdf.RandomAccessFileOrArray,System.Collections.Hashtable)">
            C'tor for CFFFontSubset
            @param rf - The font file
            @param GlyphsUsed - a HashMap that contains the glyph used in the subset 
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.CountCharset(System.Int32,System.Int32)">
            Calculates the length of the charset according to its format
            @param Offset The Charset Offset
            @param NumofGlyphs Number of glyphs in the font
            @return the length of the Charset
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.CountRange(System.Int32,System.Int32)">
            Function calculates the number of ranges in the Charset
            @param NumofGlyphs The number of glyphs in the font
            @param Type The format of the Charset
            @return The number of ranges in the Charset data structure
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.ReadFDSelect(System.Int32)">
            Read the FDSelect of the font and compute the array and its length
            @param Font The index of the font being processed
            @return The Processed FDSelect of the font
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.BuildFDArrayUsed(System.Int32)">
            Function reads the FDSelect and builds the FDArrayUsed HashMap According to the glyphs used
            @param Font the Number of font being processed
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.ReadFDArray(System.Int32)">
            Read the FDArray count, offsize and Offset array
            @param Font
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.Process(System.String)">
            The Process function extracts one font out of the CFF file and returns a
            subset version of the original.
            @param fontName - The name of the font to be taken out of the CFF
            @return The new font stream
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.CalcBias(System.Int32,System.Int32)">
            Function calcs bias according to the CharString type and the count
            of the subrs
            @param Offset The offset to the relevent subrs index
            @param Font the font
            @return The calculated Bias
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.BuildNewCharString(System.Int32)">
            Function uses BuildNewIndex to create the new index of the subset charstrings
             @param FontIndex the font
             @throws IOException
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.CFFFontSubset.BuildNewLGSubrs(System.Int32)" -->
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.BuildFDSubrsOffsets(System.Int32,System.Int32)">
            The function finds for the FD array processed the local subr offset and its 
            offset array.  
            @param Font the font
            @param FD The FDARRAY processed
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.CFFFontSubset.BuildSubrUsed(System.Int32,System.Int32,System.Int32,System.Int32[],System.Collections.Hashtable,System.Collections.ArrayList)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.CFFFontSubset.BuildGSubrsUsed(System.Int32)" -->
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.ReadASubr(System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.Hashtable,System.Collections.ArrayList,System.Int32[])">
            The function reads a subrs (glyph info) between begin and end.
            Adds calls to a Lsubr to the hSubr and lSubrs.
            Adds calls to a Gsubr to the hGSubr and lGSubrs.
            @param begin the start point of the subr
            @param end the end point of the subr
            @param GBias the bias of the Global Subrs
            @param LBias the bias of the Local Subrs
            @param hSubr the HashMap for the lSubrs
            @param lSubr the ArrayList for the lSubrs
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.HandelStack">
            Function Checks how the current operator effects the run time stack after being run 
            An operator may increase or decrease the stack size
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.StackOpp">
            Function checks the key and return the change to the stack after the operator
            @return The change in the stack. 2-> flush the stack
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.EmptyStack">
             Empty the Type2 Stack
            
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.PopStack">
             Pop one element from the stack 
            
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.PushStack">
             Add an item to the stack
            
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.ReadCommand">
            The function reads the next command after the file pointer is set
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.CalcHints(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[])">
            The function reads the subroutine and returns the number of the hint in it.
            If a call to another subroutine is found the function calls recursively.
            @param begin the start point of the subr
            @param end the end point of the subr
            @param LBias the bias of the Local Subrs
            @param GBias the bias of the Global Subrs
            @param LSubrsOffsets The Offsets array of the subroutines
            @return The number of hints in the subroutine read.
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.BuildNewIndex(System.Int32[],System.Collections.Hashtable)">
            Function builds the new offset array, object array and assembles the index.
            used for creating the glyph and subrs subsetted index 
            @param Offsets the offset array of the original index  
            @param Used the hashmap of the used objects
            @return the new index subset version 
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.AssembleIndex(System.Int32[],System.Byte[])">
            Function creates the new index, inserting the count,offsetsize,offset array
            and object array.
            @param NewOffsets the subsetted offset array
            @param NewObjects the subsetted object array
            @return the new index created
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.BuildNewFile(System.Int32)">
            The function builds the new output stream according to the subset process
            @param Font the font
            @return the subseted font stream
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.CopyHeader">
            Function Copies the header from the original fileto the output list
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.BuildIndexHeader(System.Int32,System.Int32,System.Int32)">
            Function Build the header of an index
            @param Count the count field of the index
            @param Offsize the offsize field of the index
            @param First the first offset of the index
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.CreateKeys(iTextSharp.text.pdf.CFFFont.OffsetItem,iTextSharp.text.pdf.CFFFont.OffsetItem,iTextSharp.text.pdf.CFFFont.OffsetItem,iTextSharp.text.pdf.CFFFont.OffsetItem)">
            Function adds the keys into the TopDict
            @param fdarrayRef OffsetItem for the FDArray
            @param fdselectRef OffsetItem for the FDSelect
            @param charsetRef OffsetItem for the CharSet
            @param charstringsRef OffsetItem for the CharString
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.CreateNewStringIndex(System.Int32)">
            Function takes the original string item and adds the new strings
            to accomodate the CID rules
            @param Font the font
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.CreateFDSelect(iTextSharp.text.pdf.CFFFont.OffsetItem,System.Int32)">
            Function creates new FDSelect for non-CID fonts.
            The FDSelect built uses a single range for all glyphs
            @param fdselectRef OffsetItem for the FDSelect
            @param nglyphs the number of glyphs in the font
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.CreateCharset(iTextSharp.text.pdf.CFFFont.OffsetItem,System.Int32)">
            Function creates new CharSet for non-CID fonts.
            The CharSet built uses a single range for all glyphs
            @param charsetRef OffsetItem for the CharSet
            @param nglyphs the number of glyphs in the font
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.CreateFDArray(iTextSharp.text.pdf.CFFFont.OffsetItem,iTextSharp.text.pdf.CFFFont.OffsetItem,System.Int32)">
            Function creates new FDArray for non-CID fonts.
            The FDArray built has only the "Private" operator that points to the font's
            original private dict 
            @param fdarrayRef OffsetItem for the FDArray
            @param privateRef OffsetItem for the Private Dict
            @param Font the font
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.Reconstruct(System.Int32)">
            Function reconstructs the FDArray, PrivateDict and LSubr for CID fonts
            @param Font the font
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.ReconstructFDArray(System.Int32,iTextSharp.text.pdf.CFFFont.OffsetItem[])">
            Function subsets the FDArray and builds the new one with new offsets
            @param Font The font
            @param fdPrivate OffsetItem Array (one for each FDArray)
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.ReconstructPrivateDict(System.Int32,iTextSharp.text.pdf.CFFFont.OffsetItem[],iTextSharp.text.pdf.CFFFont.IndexBaseItem[],iTextSharp.text.pdf.CFFFont.OffsetItem[])">
            Function Adds the new private dicts (only for the FDs used) to the list
            @param Font the font
            @param fdPrivate OffsetItem array one element for each private
            @param fdPrivateBase IndexBaseItem array one element for each private
            @param fdSubrs OffsetItem array one element for each private
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.ReconstructPrivateSubrs(System.Int32,iTextSharp.text.pdf.CFFFont.IndexBaseItem[],iTextSharp.text.pdf.CFFFont.OffsetItem[])">
            Function Adds the new LSubrs dicts (only for the FDs used) to the list
            @param Font  The index of the font
            @param fdPrivateBase The IndexBaseItem array for the linked list
            @param fdSubrs OffsetItem array for the linked list
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.CalcSubrOffsetSize(System.Int32,System.Int32)">
            Calculates how many byte it took to write the offset for the subrs in a specific
            private dict.
            @param Offset The Offset for the private dict
            @param Size The size of the private dict
            @return The size of the offset of the subrs in the private dict
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.CountEntireIndexRange(System.Int32)">
            Function computes the size of an index
            @param indexOffset The offset for the computed index
            @return The size of the index
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.CreateNonCIDPrivate(System.Int32,iTextSharp.text.pdf.CFFFont.OffsetItem)">
            The function creates a private dict for a font that was not CID
            All the keys are copied as is except for the subrs key 
            @param Font the font
            @param Subr The OffsetItem for the subrs of the private 
        </member>
        <member name="M:iTextSharp.text.pdf.CFFFontSubset.CreateNonCIDSubrs(System.Int32,iTextSharp.text.pdf.CFFFont.IndexBaseItem,iTextSharp.text.pdf.CFFFont.OffsetItem)">
            the function marks the beginning of the subrs index and adds the subsetted subrs
            index to the output list. 
            @param Font the font
            @param PrivateBase IndexBaseItem for the private that's referencing to the subrs
            @param Subrs OffsetItem for the subrs
            @throws IOException
        </member>
        <member name="T:iTextSharp.text.pdf.CJKFont">
             Creates a CJK font compatible with the fonts in the Adobe Asian font Pack.
            
             @author  Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:iTextSharp.text.pdf.CJKFont.CJK_ENCODING">
            The encoding used in the PDF document for CJK fonts
        </member>
        <member name="F:iTextSharp.text.pdf.CJKFont.fontName">
            The font name 
        </member>
        <member name="F:iTextSharp.text.pdf.CJKFont.style">
            The style modifier 
        </member>
        <member name="F:iTextSharp.text.pdf.CJKFont.CMap">
            The CMap name associated with this font 
        </member>
        <member name="M:iTextSharp.text.pdf.CJKFont.#ctor(System.String,System.String,System.Boolean)">
            Creates a CJK font.
            @param fontName the name of the font
            @param enc the encoding of the font
            @param emb always <CODE>false</CODE>. CJK font and not embedded
            @throws DocumentException on error
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.CJKFont.IsCJKFont(System.String,System.String)">
            Checks if its a valid CJK font.
            @param fontName the font name
            @param enc the encoding
            @return <CODE>true</CODE> if it is CJK font
        </member>
        <member name="M:iTextSharp.text.pdf.CJKFont.GetFontDescriptor(System.Int32,System.Single)">
            Gets the font parameter identified by <CODE>key</CODE>. Valid values
            for <CODE>key</CODE> are <CODE>ASCENT</CODE>, <CODE>CAPHEIGHT</CODE>, <CODE>DESCENT</CODE>
            and <CODE>ITALICANGLE</CODE>.
            @param key the parameter to be extracted
            @param fontSize the font size in points
            @return the parameter in points
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "P:iTextSharp.text.pdf.CJKFont.FullFontName" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "P:iTextSharp.text.pdf.CJKFont.FamilyFontName" -->
        <member name="T:iTextSharp.text.pdf.CMYKColor">
            
             @author  Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="T:iTextSharp.text.pdf.ExtendedColor">
            
             @author  Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="T:iTextSharp.text.Color">
            <summary>
            Base class for Color, serves as wrapper class for <see cref="T:System.Drawing.Color"/>
            to allow extension.
            </summary>
        </member>
        <member name="M:iTextSharp.text.Color.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constuctor for Color object.
            </summary>
            <param name="red">The red component value for the new Color structure. Valid values are 0 through 255.</param>
            <param name="green">The green component value for the new Color structure. Valid values are 0 through 255.</param>
            <param name="blue">The blue component value for the new Color structure. Valid values are 0 through 255.</param>
        </member>
        <member name="M:iTextSharp.text.Color.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constuctor for Color object.
            </summary>
            <param name="red">The red component value for the new Color structure. Valid values are 0 through 255.</param>
            <param name="green">The green component value for the new Color structure. Valid values are 0 through 255.</param>
            <param name="blue">The blue component value for the new Color structure. Valid values are 0 through 255.</param>
            <param name="alpha">The transparency component value for the new Color structure. Valid values are 0 through 255.</param>
        </member>
        <member name="M:iTextSharp.text.Color.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructor for Color object
            </summary>
            <param name="red">The red component value for the new Color structure. Valid values are 0 through 1.</param>
            <param name="green">The green component value for the new Color structure. Valid values are 0 through 1.</param>
            <param name="blue">The blue component value for the new Color structure. Valid values are 0 through 1.</param>
        </member>
        <member name="M:iTextSharp.text.Color.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructor for Color object
            </summary>
            <param name="red">The red component value for the new Color structure. Valid values are 0 through 1.</param>
            <param name="green">The green component value for the new Color structure. Valid values are 0 through 1.</param>
            <param name="blue">The blue component value for the new Color structure. Valid values are 0 through 1.</param>
            <param name="alpha">The transparency component value for the new Color structure. Valid values are 0 through 1.</param>
        </member>
        <member name="M:iTextSharp.text.Color.#ctor(System.Drawing.Color)">
            <summary>
            Constructor for Color object
            </summary>
            <param name="color">a Color object</param>
            <overloads>
            Has three overloads.
            </overloads>
        </member>
        <member name="P:iTextSharp.text.Color.R">
            <summary>
            Gets the red component value of this <see cref="T:System.Drawing.Color"/> structure.
            </summary>
            <value>The red component value of this <see cref="T:System.Drawing.Color"/> structure.</value>
        </member>
        <member name="P:iTextSharp.text.Color.G">
            <summary>
            Gets the green component value of this <see cref="T:System.Drawing.Color"/> structure.
            </summary>
            <value>The green component value of this <see cref="T:System.Drawing.Color"/> structure.</value>
        </member>
        <member name="P:iTextSharp.text.Color.B">
            <summary>
            Gets the blue component value of this <see cref="T:System.Drawing.Color"/> structure.
            </summary>
            <value>The blue component value of this <see cref="T:System.Drawing.Color"/> structure.</value>
        </member>
        <member name="T:iTextSharp.text.pdf.ColorDetails">
            Each spotcolor in the document will have an instance of this class
            
             @author Phillip Pan (phillip@formstar.com)
        </member>
        <member name="F:iTextSharp.text.pdf.ColorDetails.indirectReference">
            The indirect reference to this color
        </member>
        <member name="F:iTextSharp.text.pdf.ColorDetails.colorName">
            The color name that appears in the document body stream
        </member>
        <member name="F:iTextSharp.text.pdf.ColorDetails.spotcolor">
            The color
        </member>
        <member name="M:iTextSharp.text.pdf.ColorDetails.#ctor(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfIndirectReference,iTextSharp.text.pdf.PdfSpotColor)">
            Each spot color used in a document has an instance of this class.
            @param colorName the color name
            @param indirectReference the indirect reference to the font
            @param scolor the <CODE>PDfSpotColor</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.ColorDetails.GetSpotColor(iTextSharp.text.pdf.PdfWriter)">
            Gets the <CODE>SpotColor</CODE> object.
            @return the <CODE>PdfSpotColor</CODE>
        </member>
        <member name="P:iTextSharp.text.pdf.ColorDetails.IndirectReference">
            Gets the indirect reference to this color.
            @return the indirect reference to this color
        </member>
        <member name="P:iTextSharp.text.pdf.ColorDetails.ColorName">
            Gets the color name as it appears in the document body.
            @return the color name
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.pdf.ColumnText" -->
        <member name="F:iTextSharp.text.pdf.ColumnText.AR_COMPOSEDTASHKEEL">
            Compose the tashkeel in the ligatures. 
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.AR_LIG">
            Do some extra double ligatures. 
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.DIGITS_EN2AN">
            Digit shaping option: Replace European digits (U+0030...U+0039) by Arabic-Indic digits.
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.DIGITS_AN2EN">
            Digit shaping option: Replace Arabic-Indic digits by European digits (U+0030...U+0039).
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.DIGITS_EN2AN_INIT_LR">
            Digit shaping option:
            Replace European digits (U+0030...U+0039) by Arabic-Indic digits
            if the most recent strongly directional character
            is an Arabic letter (its Bidi direction value is RIGHT_TO_LEFT_ARABIC).
            The initial state at the start of the text is assumed to be not an Arabic,
            letter, so European digits at the start of the text will not change.
            Compare to DIGITS_ALEN2AN_INIT_AL.
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.DIGITS_EN2AN_INIT_AL">
            Digit shaping option:
            Replace European digits (U+0030...U+0039) by Arabic-Indic digits
            if the most recent strongly directional character
            is an Arabic letter (its Bidi direction value is RIGHT_TO_LEFT_ARABIC).
            The initial state at the start of the text is assumed to be an Arabic,
            letter, so European digits at the start of the text will change.
            Compare to DIGITS_ALEN2AN_INT_LR.
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.DIGIT_TYPE_AN">
            Digit type option: Use Arabic-Indic digits (U+0660...U+0669).
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.DIGIT_TYPE_AN_EXTENDED">
            Digit type option: Use Eastern (Extended) Arabic-Indic digits (U+06f0...U+06f9).
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.NO_MORE_TEXT">
            Signals that there is no more text available. 
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.NO_MORE_COLUMN">
            Signals that there is no more column. 
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.LINE_STATUS_OK">
            The column is valid. 
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.LINE_STATUS_OFFLIMITS">
            The line is out the column limits. 
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.LINE_STATUS_NOLINE">
            The line cannot fit this column position. 
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.AR_NOVOWEL">
            Eliminate the arabic vowels 
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.maxY">
            Upper bound of the column. 
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.minY">
            Lower bound of the column. 
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.alignment">
            The column Element. Default is left Element. 
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.leftWall">
            The left column bound. 
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.rightWall">
            The right column bound. 
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.bidiLine">
            The chunks that form the text. 
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.yLine">
            The current y line location. Text will be written at this line minus the leading. 
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.currentLeading">
            The leading for the current line. 
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.fixedLeading">
            The fixed text leading. 
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.multipliedLeading">
            The text leading that is multiplied by the biggest font size in the line. 
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.canvas">
            The <CODE>PdfContent</CODE> where the text will be written to. 
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.lineStatus">
            The line status when trying to fit a line to a column. 
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.indent">
            The first paragraph line indent. 
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.followingIndent">
            The following paragraph lines indent. 
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.rightIndent">
            The right paragraph lines indent. 
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.extraParagraphSpace">
            The extra space between paragraphs. 
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.rectangularWidth">
            The width of the line when the column is defined as a simple rectangle. 
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.spaceCharRatio">
            Holds value of property spaceCharRatio. 
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.linesWritten">
            Holds value of property linesWritten. 
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.arabicOptions">
            Holds value of property arabicOptions. 
        </member>
        <member name="F:iTextSharp.text.pdf.ColumnText.useAscender">
            if true, first line height is adjusted so that the max ascender touches the top 
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.#ctor(iTextSharp.text.pdf.PdfContentByte)">
            Creates a <CODE>ColumnText</CODE>.
            @param text the place where the text will be written to. Can
            be a template.
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.Duplicate(iTextSharp.text.pdf.ColumnText)">
            Creates an independent duplicated of the instance <CODE>org</CODE>.
            @param org the original <CODE>ColumnText</CODE>
            @return the duplicated
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.SetACopy(iTextSharp.text.pdf.ColumnText)">
            Makes this instance an independent copy of <CODE>org</CODE>.
            @param org the original <CODE>ColumnText</CODE>
            @return itself
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.AddText(iTextSharp.text.Phrase)">
            Adds a <CODE>Phrase</CODE> to the current text array.
            @param phrase the text
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.SetText(iTextSharp.text.Phrase)">
            Replaces the current text array with this <CODE>Phrase</CODE>.
            Anything added previously with AddElement() is lost.
            @param phrase the text
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.AddText(iTextSharp.text.Chunk)">
            Adds a <CODE>Chunk</CODE> to the current text array.
            Will not have any effect if AddElement() was called before.
            @param chunk the text
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.ColumnText.AddElement(iTextSharp.text.IElement)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.ColumnText.ConvertColumn(System.Single[])" -->
        <member name="M:iTextSharp.text.pdf.ColumnText.FindLimitsPoint(System.Collections.ArrayList)">
            Finds the intersection between the <CODE>yLine</CODE> and the column. It will
            set the <CODE>lineStatus</CODE> apropriatly.
            @param wall the column to intersect
            @return the x coordinate of the intersection
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.FindLimitsOneLine">
            Finds the intersection between the <CODE>yLine</CODE> and the two
            column bounds. It will set the <CODE>lineStatus</CODE> apropriatly.
            @return a <CODE>float[2]</CODE>with the x coordinates of the intersection
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.FindLimitsTwoLines">
            Finds the intersection between the <CODE>yLine</CODE>,
            the <CODE>yLine-leading</CODE>and the two
            column bounds. It will set the <CODE>lineStatus</CODE> apropriatly.
            @return a <CODE>float[4]</CODE>with the x coordinates of the intersection
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.SetColumns(System.Single[],System.Single[])">
            Sets the columns bounds. Each column bound is described by a
            <CODE>float[]</CODE> with the line points [x1,y1,x2,y2,...].
            The array must have at least 4 elements.
            @param leftLine the left column bound
            @param rightLine the right column bound
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.SetSimpleColumn(iTextSharp.text.Phrase,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32)">
            Simplified method for rectangular columns.
            @param phrase a <CODE>Phrase</CODE>
            @param llx the lower left x corner
            @param lly the lower left y corner
            @param urx the upper right x corner
            @param ury the upper right y corner
            @param leading the leading
            @param alignment the column alignment
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.SetSimpleColumn(System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32)">
            Simplified method for rectangular columns.
            @param llx the lower left x corner
            @param lly the lower left y corner
            @param urx the upper right x corner
            @param ury the upper right y corner
            @param leading the leading
            @param alignment the column alignment
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.SetSimpleColumn(System.Single,System.Single,System.Single,System.Single)">
            Simplified method for rectangular columns.
            @param llx
            @param lly
            @param urx
            @param ury
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.SetLeading(System.Single,System.Single)">
            Sets the leading fixed and variable. The resultant leading will be
            fixedLeading+multipliedLeading*maxFontSize where maxFontSize is the
            size of the bigest font in the line.
            @param fixedLeading the fixed leading
            @param multipliedLeading the variable leading
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.Go">
            Outputs the lines to the document. It is equivalent to <CODE>go(false)</CODE>.
            @return returns the result of the operation. It can be <CODE>NO_MORE_TEXT</CODE>
            and/or <CODE>NO_MORE_COLUMN</CODE>
            @throws DocumentException on error
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.Go(System.Boolean)">
            Outputs the lines to the document. The output can be simulated.
            @param simulate <CODE>true</CODE> to simulate the writting to the document
            @return returns the result of the operation. It can be <CODE>NO_MORE_TEXT</CODE>
            and/or <CODE>NO_MORE_COLUMN</CODE>
            @throws DocumentException on error
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.ClearChunks">
            Clears the chunk array. A call to <CODE>go()</CODE> will always return
            NO_MORE_TEXT.
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.GetWidth(iTextSharp.text.Phrase,System.Int32,System.Int32)">
            Gets the width that the line will occupy after writing.
            Only the width of the first line is returned.
            @param phrase the <CODE>Phrase</CODE> containing the line
            @param runDirection the run direction
            @param arabicOptions the options for the arabic shaping
            @return the width of the line
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.GetWidth(iTextSharp.text.Phrase)">
            Gets the width that the line will occupy after writing.
            Only the width of the first line is returned.
            @param phrase the <CODE>Phrase</CODE> containing the line
            @return the width of the line
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.ShowTextAligned(iTextSharp.text.pdf.PdfContentByte,System.Int32,iTextSharp.text.Phrase,System.Single,System.Single,System.Single,System.Int32,System.Int32)">
            Shows a line of text. Only the first line is written.
            @param canvas where the text is to be written to
            @param alignment the alignment. It is not influenced by the run direction
            @param phrase the <CODE>Phrase</CODE> with the text
            @param x the x reference position
            @param y the y reference position
            @param rotation the rotation to be applied in degrees counterclockwise
            @param runDirection the run direction
            @param arabicOptions the options for the arabic shaping
        </member>
        <member name="M:iTextSharp.text.pdf.ColumnText.ShowTextAligned(iTextSharp.text.pdf.PdfContentByte,System.Int32,iTextSharp.text.Phrase,System.Single,System.Single,System.Single)">
            Shows a line of text. Only the first line is written.
            @param canvas where the text is to be written to
            @param alignment the alignment
            @param phrase the <CODE>Phrase</CODE> with the text
            @param x the x reference position
            @param y the y reference position
            @param rotation the rotation to be applied in degrees counterclockwise
        </member>
        <member name="P:iTextSharp.text.pdf.ColumnText.Leading">
            Gets the fixed leading
            @return the leading
        </member>
        <member name="P:iTextSharp.text.pdf.ColumnText.MultipliedLeading">
            Gets the variable leading
            @return the leading
        </member>
        <member name="P:iTextSharp.text.pdf.ColumnText.YLine">
            Gets the yLine.
            @return the yLine
        </member>
        <member name="P:iTextSharp.text.pdf.ColumnText.Alignment">
            Gets the Element.
            @return the alignment
        </member>
        <member name="P:iTextSharp.text.pdf.ColumnText.Indent">
            Gets the first paragraph line indent.
            @return the indent
        </member>
        <member name="P:iTextSharp.text.pdf.ColumnText.FollowingIndent">
            Gets the following paragraph lines indent.
            @return the indent
        </member>
        <member name="P:iTextSharp.text.pdf.ColumnText.RightIndent">
            Gets the right paragraph lines indent.
            @return the indent
        </member>
        <member name="P:iTextSharp.text.pdf.ColumnText.ExtraParagraphSpace">
            Sets the extra space between paragraphs.
            @return the extra space between paragraphs
        </member>
        <member name="P:iTextSharp.text.pdf.ColumnText.SpaceCharRatio">
            Gets the space/character extra spacing ratio for
            fully justified text.
            @return the space/character extra spacing ratio
        </member>
        <member name="P:iTextSharp.text.pdf.ColumnText.RunDirection">
            Gets the run direction.
            @return the run direction
        </member>
        <member name="P:iTextSharp.text.pdf.ColumnText.LinesWritten">
            Gets the number of lines written.
            @return the number of lines written
        </member>
        <member name="P:iTextSharp.text.pdf.ColumnText.ArabicOptions">
            Sets the arabic shaping options. The option can be AR_NOVOWEL,
            AR_COMPOSEDTASHKEEL and AR_LIG.
            @param arabicOptions the arabic shaping options
        </member>
        <member name="P:iTextSharp.text.pdf.ColumnText.Descender">
            Gets the biggest descender value of the last line written.
            @return the biggest descender value of the last line written
        </member>
        <member name="P:iTextSharp.text.pdf.ColumnText.Canvas">
            Sets the canvas.
            @param canvas
        </member>
        <member name="P:iTextSharp.text.pdf.ColumnText.ZeroHeightElement">
            Checks if the element has a height of 0.
            @return true or false
        </member>
        <member name="P:iTextSharp.text.pdf.ColumnText.UseAscender">
            Enables/Disables adjustment of first line height based on max ascender.
            @param use enable adjustment if true
        </member>
        <member name="M:iTextSharp.text.pdf.DocumentFont.#ctor(iTextSharp.text.pdf.PRIndirectReference)">
            Creates a new instance of DocumentFont 
        </member>
        <member name="M:iTextSharp.text.pdf.DocumentFont.GetFontDescriptor(System.Int32,System.Single)">
            Gets the font parameter identified by <CODE>key</CODE>. Valid values
             for <CODE>key</CODE> are <CODE>ASCENT</CODE>, <CODE>CAPHEIGHT</CODE>, <CODE>DESCENT</CODE>,
             <CODE>ITALICANGLE</CODE>, <CODE>BBOXLLX</CODE>, <CODE>BBOXLLY</CODE>, <CODE>BBOXURX</CODE>
             and <CODE>BBOXURY</CODE>.
             @param key the parameter to be extracted
             @param fontSize the font size in points
             @return the parameter in points
            
        </member>
        <member name="M:iTextSharp.text.pdf.DocumentFont.GetKerning(System.Char,System.Char)">
            Gets the kerning between two Unicode chars.
             @param char1 the first char
             @param char2 the second char
             @return the kerning to be applied
            
        </member>
        <member name="M:iTextSharp.text.pdf.DocumentFont.GetRawWidth(System.Int32,System.String)">
            Gets the width from the font according to the Unicode char <CODE>c</CODE>
             or the <CODE>name</CODE>. If the <CODE>name</CODE> is null it's a symbolic font.
             @param c the unicode char
             @param name the glyph name
             @return the width of the char
            
        </member>
        <member name="M:iTextSharp.text.pdf.DocumentFont.HasKernPairs">
            Checks if the font has any kerning pairs.
             @return <CODE>true</CODE> if the font has any kerning pairs
            
        </member>
        <member name="M:iTextSharp.text.pdf.DocumentFont.WriteFont(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.pdf.PdfIndirectReference,System.Object[])">
            Outputs to the writer the font dictionaries and streams.
             @param writer the writer for this document
             @param ref the font indirect reference
             @param params several parameters that depend on the font type
             @throws IOException on error
             @throws DocumentException error in generating the object
            
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "P:iTextSharp.text.pdf.DocumentFont.FamilyFontName" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "P:iTextSharp.text.pdf.DocumentFont.FullFontName" -->
        <member name="P:iTextSharp.text.pdf.DocumentFont.PostscriptFontName">
            Gets the postscript font name.
             @return the postscript font name
            
        </member>
        <member name="T:iTextSharp.text.pdf.EnumerateTTC">
            Enumerates all the fonts inside a True Type Collection.
            
             @author  Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="T:iTextSharp.text.pdf.TrueTypeFont">
            Reads a Truetype font
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.codePages">
            The code pages possible for a True Type font.
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.tables">
            Contains the location of the several tables. The key is the name of
            the table and the value is an <CODE>int[2]</CODE> where position 0
            is the offset from the start of the file and position 1 is the length
            of the table.
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.rf">
            The file in use.
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.fileName">
            The file name.
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.directoryOffset">
            The offset from the start of the file to the table directory.
            It is 0 for TTF and may vary for TTC depending on the chosen font.
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.ttcIndex">
            The index for the TTC font. It is an empty <CODE>string</CODE> for a
            TTF file.
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.style">
            The style modifier 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.head">
            The content of table 'head'.
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.hhea">
            The content of table 'hhea'.
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.os_2">
            The content of table 'OS/2'.
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.GlyphWidths">
            The width of the glyphs. This is essentially the content of table
            'hmtx' normalized to 1000 units.
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.cmap10">
            The map containing the code information for the table 'cmap', encoding 1.0.
            The key is the code and the value is an <CODE>int[2]</CODE> where position 0
            is the glyph number and position 1 is the glyph width normalized to 1000
            units.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "F:iTextSharp.text.pdf.TrueTypeFont.cmap31" -->
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.kerning">
            The map containing the kerning information. It represents the content of
            table 'kern'. The key is an <CODE>Integer</CODE> where the top 16 bits
            are the glyph number for the first character and the lower 16 bits are the
            glyph number for the second character. The value is the amount of kerning in
            normalized 1000 units as an <CODE>Integer</CODE>. This value is usually negative.
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.fontName">
            The font name.
            This name is usually extracted from the table 'name' with
            the 'Name ID' 6.
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.fullName">
            The full name of the font
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.familyName">
            The family name of the font
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "F:iTextSharp.text.pdf.TrueTypeFont.italicAngle" -->
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.isFixedPitch">
            <CODE>true</CODE> if all the glyphs have the same width.
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.#ctor">
            This constructor is present to allow extending the class.
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.#ctor(System.String,System.String,System.Boolean,System.Byte[],System.Boolean)">
            Creates a new TrueType font.
            @param ttFile the location of the font on file. The file must end in '.ttf' or
            '.ttc' but can have modifiers after the name
            @param enc the encoding to be applied to this font
            @param emb true if the font is to be embedded in the PDF
            @param ttfAfm the font as a <CODE>byte</CODE> array
            @throws DocumentException the font is invalid
            @throws IOException the font file could not be read
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.GetTTCName(System.String)">
            Gets the name from a composed TTC file name.
            If I have for input "myfont.ttc,2" the return will
            be "myfont.ttc".
            @param name the full name
            @return the simple file name
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.FillTables">
            Reads the tables 'head', 'hhea', 'OS/2' and 'post' filling several variables.
            @throws DocumentException the font is invalid
            @throws IOException the font file could not be read
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.GetNames(System.Int32)">
            Extracts the names of the font in all the languages available.
            @param id the name id to retrieve
            @throws DocumentException on error
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.Process(System.Byte[])">
            Reads the font data.
            @param ttfAfm the font as a <CODE>byte</CODE> array, possibly <CODE>null</CODE>
            @throws DocumentException the font is invalid
            @throws IOException the font file could not be read
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.ReadStandardString(System.Int32)">
            Reads a <CODE>string</CODE> from the font file as bytes using the Cp1252
             encoding.
            @param length the length of bytes to read
            @return the <CODE>string</CODE> read
            @throws IOException the font file could not be read
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.ReadUnicodeString(System.Int32)">
            Reads a Unicode <CODE>string</CODE> from the font file. Each character is
             represented by two bytes.
            @param length the length of bytes to read. The <CODE>string</CODE> will have <CODE>length</CODE>/2
            characters
            @return the <CODE>string</CODE> read
            @throws IOException the font file could not be read
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.ReadGlyphWidths">
            Reads the glyphs widths. The widths are extracted from the table 'hmtx'.
             The glyphs are normalized to 1000 units.
            @throws DocumentException the font is invalid
            @throws IOException the font file could not be read
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.GetGlyphWidth(System.Int32)">
            Gets a glyph width.
            @param glyph the glyph to get the width of
            @return the width of the glyph in normalized 1000 units
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.ReadCMaps">
            Reads the several maps from the table 'cmap'. The maps of interest are 1.0 for symbolic
             fonts and 3.1 for all others. A symbolic font is defined as having the map 3.0.
            @throws DocumentException the font is invalid
            @throws IOException the font file could not be read
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.ReadFormat0">
            The information in the maps of the table 'cmap' is coded in several formats.
             Format 0 is the Apple standard character to glyph index mapping table.
            @return a <CODE>Hashtable</CODE> representing this map
            @throws IOException the font file could not be read
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.ReadFormat4">
            The information in the maps of the table 'cmap' is coded in several formats.
             Format 4 is the Microsoft standard character to glyph index mapping table.
            @return a <CODE>Hashtable</CODE> representing this map
            @throws IOException the font file could not be read
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.ReadFormat6">
            The information in the maps of the table 'cmap' is coded in several formats.
             Format 6 is a trimmed table mapping. It is similar to format 0 but can have
             less than 256 entries.
            @return a <CODE>Hashtable</CODE> representing this map
            @throws IOException the font file could not be read
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.ReadKerning">
            Reads the kerning information from the 'kern' table.
            @throws IOException the font file could not be read
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.GetKerning(System.Char,System.Char)">
            Gets the kerning between two Unicode chars.
            @param char1 the first char
            @param char2 the second char
            @return the kerning to be applied
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.GetRawWidth(System.Int32,System.String)">
            Gets the width from the font according to the unicode char <CODE>c</CODE>.
            If the <CODE>name</CODE> is null it's a symbolic font.
            @param c the unicode char
            @param name the glyph name
            @return the width of the char
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.GetFontDescriptor(iTextSharp.text.pdf.PdfIndirectReference,System.String)">
            Generates the font descriptor for this font.
            @return the PdfDictionary containing the font descriptor or <CODE>null</CODE>
            @param subsetPrefix the subset prefix
            @param fontStream the indirect reference to a PdfStream containing the font or <CODE>null</CODE>
            @throws DocumentException if there is an error
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.GetFontBaseType(iTextSharp.text.pdf.PdfIndirectReference,System.String,System.Int32,System.Int32,System.Byte[])">
            Generates the font dictionary for this font.
            @return the PdfDictionary containing the font dictionary
            @param subsetPrefix the subset prefx
            @param firstChar the first valid character
            @param lastChar the last valid character
            @param shortTag a 256 bytes long <CODE>byte</CODE> array where each unused byte is represented by 0
            @param fontDescriptor the indirect reference to a PdfDictionary containing the font descriptor or <CODE>null</CODE>
            @throws DocumentException if there is an error
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.WriteFont(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.pdf.PdfIndirectReference,System.Object[])">
            Outputs to the writer the font dictionaries and streams.
            @param writer the writer for this document
            @param ref the font indirect reference
            @param params several parameters that depend on the font type
            @throws IOException on error
            @throws DocumentException error in generating the object
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.GetFontDescriptor(System.Int32,System.Single)">
            Gets the font parameter identified by <CODE>key</CODE>. Valid values
            for <CODE>key</CODE> are <CODE>ASCENT</CODE>, <CODE>CAPHEIGHT</CODE>, <CODE>DESCENT</CODE>
            and <CODE>ITALICANGLE</CODE>.
            @param key the parameter to be extracted
            @param fontSize the font size in points
            @return the parameter in points
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.GetMetricsTT(System.Int32)">
            Gets the glyph index and metrics for a character.
            @param c the character
            @return an <CODE>int</CODE> array with {glyph index, width}
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.HasKernPairs">
            Checks if the font has any kerning pairs.
            @return <CODE>true</CODE> if the font has any kerning pairs
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFont.SetKerning(System.Char,System.Char,System.Int32)">
            Sets the kerning between two Unicode chars.
            @param char1 the first char
            @param char2 the second char
            @param kern the kerning to apply in normalized 1000 units
            @return <code>true</code> if the kerning was applied, <code>false</code> otherwise
        </member>
        <member name="P:iTextSharp.text.pdf.TrueTypeFont.BaseFont">
            Gets the Postscript font name.
            @throws DocumentException the font is invalid
            @throws IOException the font file could not be read
            @return the Postscript font name
        </member>
        <member name="P:iTextSharp.text.pdf.TrueTypeFont.PostscriptFontName">
            Gets the postscript font name.
            @return the postscript font name
        </member>
        <member name="P:iTextSharp.text.pdf.TrueTypeFont.CodePagesSupported">
            Gets the code pages supported by the font.
            @return the code pages supported by the font
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "P:iTextSharp.text.pdf.TrueTypeFont.FullFontName" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "P:iTextSharp.text.pdf.TrueTypeFont.FamilyFontName" -->
        <member name="T:iTextSharp.text.pdf.TrueTypeFont.FontHeader">
            The components of table 'head'.
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.FontHeader.flags">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.FontHeader.unitsPerEm">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.FontHeader.xMin">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.FontHeader.yMin">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.FontHeader.xMax">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.FontHeader.yMax">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.FontHeader.macStyle">
            A variable. 
        </member>
        <member name="T:iTextSharp.text.pdf.TrueTypeFont.HorizontalHeader">
            The components of table 'hhea'.
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.HorizontalHeader.Ascender">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.HorizontalHeader.Descender">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.HorizontalHeader.LineGap">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.HorizontalHeader.advanceWidthMax">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.HorizontalHeader.minLeftSideBearing">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.HorizontalHeader.minRightSideBearing">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.HorizontalHeader.xMaxExtent">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.HorizontalHeader.caretSlopeRise">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.HorizontalHeader.caretSlopeRun">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.HorizontalHeader.numberOfHMetrics">
            A variable. 
        </member>
        <member name="T:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics">
            The components of table 'OS/2'.
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.xAvgCharWidth">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.usWeightClass">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.usWidthClass">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.fsType">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.ySubscriptXSize">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.ySubscriptYSize">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.ySubscriptXOffset">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.ySubscriptYOffset">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.ySuperscriptXSize">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.ySuperscriptYSize">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.ySuperscriptXOffset">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.ySuperscriptYOffset">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.yStrikeoutSize">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.yStrikeoutPosition">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.sFamilyClass">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.panose">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.achVendID">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.fsSelection">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.usFirstCharIndex">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.usLastCharIndex">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.sTypoAscender">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.sTypoDescender">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.sTypoLineGap">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.usWinAscent">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.usWinDescent">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.ulCodePageRange1">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.ulCodePageRange2">
            A variable. 
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFont.WindowsMetrics.sCapHeight">
            A variable. 
        </member>
        <member name="T:iTextSharp.text.pdf.FdfReader">
            Reads an FDF form and makes the fields available
            @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="T:iTextSharp.text.pdf.PdfReader">
            Reads a PDF document.
            @author Paulo Soares (psoares@consiste.pt)
            @author Kazuya Ujihara
        </member>
        <member name="F:iTextSharp.text.pdf.PdfReader.appendable">
            Holds value of property appendable.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.#ctor(System.String)">
            Reads and parses a PDF document.
            @param filename the file name of the document
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.#ctor(System.String,System.Byte[])">
            Reads and parses a PDF document.
            @param filename the file name of the document
            @param ownerPassword the password to read the document
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.#ctor(System.Byte[])">
            Reads and parses a PDF document.
            @param pdfIn the byte array with the document
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.#ctor(System.Byte[],System.Byte[])">
            Reads and parses a PDF document.
            @param pdfIn the byte array with the document
            @param ownerPassword the password to read the document
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.#ctor(System.Uri)">
            Reads and parses a PDF document.
            @param url the Uri of the document
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.#ctor(System.Uri,System.Byte[])">
            Reads and parses a PDF document.
            @param url the Uri of the document
            @param ownerPassword the password to read the document
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.#ctor(System.IO.Stream,System.Byte[])">
            Reads and parses a PDF document.
            @param is the <CODE>InputStream</CODE> containing the document. The stream is read to the
            end but is not closed
            @param ownerPassword the password to read the document
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.#ctor(System.IO.Stream)">
            Reads and parses a PDF document.
            @param isp the <CODE>InputStream</CODE> containing the document. The stream is read to the
            end but is not closed
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.#ctor(iTextSharp.text.pdf.RandomAccessFileOrArray,System.Byte[])">
            Reads and parses a pdf document. Contrary to the other constructors only the xref is read
            into memory. The reader is said to be working in "partial" mode as only parts of the pdf
            are read as needed. The pdf is left open but may be closed at any time with
            <CODE>PdfReader.Close()</CODE>, reopen is automatic.
            @param raf the document location
            @param ownerPassword the password or <CODE>null</CODE> for no password
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.#ctor(iTextSharp.text.pdf.PdfReader)">
            Creates an independent duplicate.
            @param reader the <CODE>PdfReader</CODE> to duplicate
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetPageRotation(System.Int32)">
            Gets the page rotation. This value can be 0, 90, 180 or 270.
            @param index the page number. The first page is 1
            @return the page rotation
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetPageSizeWithRotation(System.Int32)">
            Gets the page size, taking rotation into account. This
            is a <CODE>Rectangle</CODE> with the value of the /MediaBox and the /Rotate key.
            @param index the page number. The first page is 1
            @return a <CODE>Rectangle</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetPageSizeWithRotation(iTextSharp.text.pdf.PdfDictionary)">
            Gets the rotated page from a page dictionary.
            @param page the page dictionary
            @return the rotated page
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetPageSize(System.Int32)">
            Gets the page size without taking rotation into account. This
            is the value of the /MediaBox key.
            @param index the page number. The first page is 1
            @return the page size
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetPageSize(iTextSharp.text.pdf.PdfDictionary)">
            Gets the page from a page dictionary
            @param page the page dictionary
            @return the page
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetCropBox(System.Int32)">
            Gets the crop box without taking rotation into account. This
            is the value of the /CropBox key. The crop box is the part
            of the document to be displayed or printed. It usually is the same
            as the media box but may be smaller. If the page doesn't have a crop
            box the page size will be returned.
            @param index the page number. The first page is 1
            @return the crop box
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetBoxSize(System.Int32,System.String)">
            Gets the box size. Allowed names are: "crop", "trim", "art", "bleed" and "media".
            @param index the page number. The first page is 1
            @param boxName the box name
            @return the box rectangle or null
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetNormalizedRectangle(iTextSharp.text.pdf.PdfArray)">
            Normalizes a <CODE>Rectangle</CODE> so that llx and lly are smaller than urx and ury.
            @param box the original rectangle
            @return a normalized <CODE>Rectangle</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.ReadDecryptedDocObj">
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetPdfObjectRelease(iTextSharp.text.pdf.PdfObject)">
            @param obj
            @return a PdfObject
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetPdfObject(iTextSharp.text.pdf.PdfObject)">
            Reads a <CODE>PdfObject</CODE> resolving an indirect reference
            if needed.
            @param obj the <CODE>PdfObject</CODE> to read
            @return the resolved <CODE>PdfObject</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetPdfObjectRelease(iTextSharp.text.pdf.PdfObject,iTextSharp.text.pdf.PdfObject)">
            Reads a <CODE>PdfObject</CODE> resolving an indirect reference
            if needed. If the reader was opened in partial mode the object will be released
            to save memory.
            @param obj the <CODE>PdfObject</CODE> to read
            @param parent
            @return a PdfObject
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetPdfObject(iTextSharp.text.pdf.PdfObject,iTextSharp.text.pdf.PdfObject)">
            @param obj
            @param parent
            @return a PdfObject
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetPdfObjectRelease(System.Int32)">
            @param idx
            @return a PdfObject
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetPdfObject(System.Int32)">
            @param idx
            @return aPdfObject
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.ResetLastXrefPartial">
            
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.ReleaseLastXrefPartial">
            
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.ReleaseLastXrefPartial(iTextSharp.text.pdf.PdfObject)">
            @param obj
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.AddPdfObject(iTextSharp.text.pdf.PdfObject)">
            @param obj
            @return an indirect reference
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.DumpPerc">
            @return the percentage of the cross reference table that has been read
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.FlateDecode(System.Byte[])">
            Decodes a stream that has the FlateDecode filter.
            @param in the input data
            @return the decoded data
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.DecodePredictor(System.Byte[],iTextSharp.text.pdf.PdfObject)">
            @param in
            @param dicPar
            @return a byte array
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.FlateDecode(System.Byte[],System.Boolean)">
            A helper to FlateDecode.
            @param in the input data
            @param strict <CODE>true</CODE> to read a correct stream. <CODE>false</CODE>
            to try to read a corrupted stream
            @return the decoded data
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.ASCIIHexDecode(System.Byte[])">
            Decodes a stream that has the ASCIIHexDecode filter.
            @param in the input data
            @return the decoded data
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.ASCII85Decode(System.Byte[])">
            Decodes a stream that has the ASCII85Decode filter.
            @param in the input data
            @return the decoded data
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.LZWDecode(System.Byte[])">
            Decodes a stream that has the LZWDecode filter.
            @param in the input data
            @return the decoded data
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.IsRebuilt">
            Checks if the document had errors and was rebuilt.
             @return true if rebuilt.
            
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetPageN(System.Int32)">
            Gets the dictionary that represents a page.
            @param pageNum the page number. 1 is the first
            @return the page dictionary
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetPageNRelease(System.Int32)">
            @param pageNum
            @return a Dictionary object
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.ReleasePage(System.Int32)">
            @param pageNum
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.ResetReleasePage">
            
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetPageOrigRef(System.Int32)">
            Gets the page reference to this page.
            @param pageNum the page number. 1 is the first
            @return the page reference
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetPageContent(System.Int32,iTextSharp.text.pdf.RandomAccessFileOrArray)">
            Gets the contents of the page.
            @param pageNum the page number. 1 is the first
            @param file the location of the PDF document
            @throws IOException on error
            @return the content
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetPageContent(System.Int32)">
            Gets the contents of the page.
            @param pageNum the page number. 1 is the first
            @throws IOException on error
            @return the content
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.SetPageContent(System.Int32,System.Byte[])">
            Sets the contents of the page.
            @param content the new page content
            @param pageNum the page number. 1 is the first
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetStreamBytes(iTextSharp.text.pdf.PRStream,iTextSharp.text.pdf.RandomAccessFileOrArray)">
            Get the content from a stream.
            @param stream the stream
            @param file the location where the stream is
            @throws IOException on error
            @return the stream content
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetStreamBytes(iTextSharp.text.pdf.PRStream)">
            Get the content from a stream.
            @param stream the stream
            @throws IOException on error
            @return the stream content
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.EliminateSharedStreams">
            Eliminates shared streams if they exist. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.IsEncrypted">
            Returns <CODE>true</CODE> if the PDF is encrypted.
            @return <CODE>true</CODE> if the PDF is encrypted
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.Is128Key">
            Returns <CODE>true</CODE> if the PDF has a 128 bit key encryption.
            @return <CODE>true</CODE> if the PDF has a 128 bit key encryption
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.ShuffleSubsetNames">
            Finds all the font subsets and changes the prefixes to some
            random values.
            @return the number of font subsets altered
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.CreateFakeFontSubsets">
            Finds all the fonts not subset but embedded and marks them as subset.
            @return the number of fonts altered
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetNamedDestination">
            Gets all the named destinations as an <CODE>Hashtable</CODE>. The key is the name
            and the value is the destinations array.
            @return gets all the named destinations
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetNamedDestinationFromNames">
            Gets the named destinations from the /Dests key in the catalog as an <CODE>Hashtable</CODE>. The key is the name
            and the value is the destinations array.
            @return gets the named destinations
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetNamedDestinationFromStrings">
            Gets the named destinations from the /Names key in the catalog as an <CODE>Hashtable</CODE>. The key is the name
            and the value is the destinations array.
            @return gets the named destinations
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.RemoveFields">
            Removes all the fields from the document.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.RemoveAnnotations">
            Removes all the annotations and fields from the document.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.ConsolidateNamedDestinations">
            Replaces all the local named links with the actual destinations. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.Close">
            Closes the reader
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.RemoveUnusedObjects">
            Removes all the unreachable objects.
            @return the number of indirect objects removed
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.GetJavaScript(iTextSharp.text.pdf.RandomAccessFileOrArray)">
            Gets the global document JavaScript.
            @param file the document file
            @throws IOException on error
            @return the global document JavaScript
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.SelectPages(System.String)">
            Selects the pages to keep in the document. The pages are described as
            ranges. The page ordering can be changed but
            no page repetitions are allowed. Note that it may be very slow in partial mode.
            @param ranges the comma separated ranges as described in {@link SequenceList}
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.SelectPages(System.Collections.ArrayList)">
            Selects the pages to keep in the document. The pages are described as a
            <CODE>List</CODE> of <CODE>Integer</CODE>. The page ordering can be changed but
            no page repetitions are allowed. Note that it may be very slow in partial mode.
            @param pagesToKeep the pages to keep in the document
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.SetViewerPreferences(System.Int32,iTextSharp.text.pdf.PdfDictionary)">
            @param preferences
            @param catalog
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.IsNewXrefType">
            Getter for property newXrefType.
            @return Value of property newXrefType.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.IsHybridXref">
            Getter for property hybridXref.
            @return Value of property hybridXref.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfReader.SafeFile">
            Gets a new file instance of the original PDF
            document.
            @return a new file instance of the original PDF document
        </member>
        <member name="P:iTextSharp.text.pdf.PdfReader.NumberOfPages">
            Gets the number of pages in the document.
            @return the number of pages in the document
        </member>
        <member name="P:iTextSharp.text.pdf.PdfReader.Catalog">
            Returns the document's catalog. This dictionary is not a copy,
            any changes will be reflected in the catalog.
            @return the document's catalog
        </member>
        <member name="P:iTextSharp.text.pdf.PdfReader.AcroForm">
            Returns the document's acroform, if it has one.
            @return the document's acroform
        </member>
        <member name="P:iTextSharp.text.pdf.PdfReader.Info">
            Returns the content of the document information dictionary as a <CODE>Hashtable</CODE>
            of <CODE>String</CODE>.
            @return content of the document information dictionary
        </member>
        <member name="P:iTextSharp.text.pdf.PdfReader.Tampered">
            Sets the tampered state. A tampered PdfReader cannot be reused in PdfStamper.
            @param tampered the tampered state
        </member>
        <member name="P:iTextSharp.text.pdf.PdfReader.Metadata">
            Gets the XML metadata.
            @throws IOException on error
            @return the XML metadata
        </member>
        <member name="P:iTextSharp.text.pdf.PdfReader.LastXref">
            Gets the byte address of the last xref table.
            @return the byte address of the last xref table
        </member>
        <member name="P:iTextSharp.text.pdf.PdfReader.XrefSize">
            Gets the number of xref objects.
            @return the number of xref objects
        </member>
        <member name="P:iTextSharp.text.pdf.PdfReader.EofPos">
            Gets the byte address of the %%EOF marker.
            @return the byte address of the %%EOF marker
        </member>
        <member name="P:iTextSharp.text.pdf.PdfReader.PdfVersion">
            Gets the PDF version. Only the last version char is returned. For example
            version 1.4 is returned as '4'.
            @return the PDF version
        </member>
        <member name="P:iTextSharp.text.pdf.PdfReader.Permissions">
            Gets the encryption permissions. It can be used directly in
            <CODE>PdfWriter.SetEncryption()</CODE>.
            @return the encryption permissions
        </member>
        <member name="P:iTextSharp.text.pdf.PdfReader.Trailer">
            Gets the trailer dictionary
            @return the trailer dictionary
        </member>
        <member name="P:iTextSharp.text.pdf.PdfReader.AcroFields">
            Gets a read-only version of <CODE>AcroFields</CODE>.
            @return a read-only version of <CODE>AcroFields</CODE>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfReader.JavaScript">
            Gets the global document JavaScript.
            @throws IOException on error
            @return the global document JavaScript
        </member>
        <member name="P:iTextSharp.text.pdf.PdfReader.ViewerPreferences">
            @return an int that contains the Viewer Preferences.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfReader.FileLength">
            Getter for property fileLength.
            @return Value of property fileLength.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.PageRefs.GetPageN(System.Int32)">
            Gets the dictionary that represents a page.
            @param pageNum the page number. 1 is the first
            @return the page dictionary
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.PageRefs.GetPageNRelease(System.Int32)">
            @param pageNum
            @return a dictionary object
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.PageRefs.GetPageOrigRefRelease(System.Int32)">
            @param pageNum
            @return an indirect reference
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.PageRefs.GetPageOrigRef(System.Int32)">
            Gets the page reference to this page.
            @param pageNum the page number. 1 is the first
            @return the page reference
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.PageRefs.ReleasePage(System.Int32)">
            @param pageNum
        </member>
        <member name="M:iTextSharp.text.pdf.PdfReader.PageRefs.ResetReleasePage">
            
        </member>
        <member name="M:iTextSharp.text.pdf.FdfReader.#ctor(System.String)">
            Reads an FDF form.
            @param filename the file name of the form
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.FdfReader.#ctor(System.Byte[])">
            Reads an FDF form.
            @param pdfIn the byte array with the form
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.FdfReader.#ctor(System.Uri)">
            Reads an FDF form.
            @param url the URL of the document
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.FdfReader.#ctor(System.IO.Stream)">
            Reads an FDF form.
            @param is the <CODE>InputStream</CODE> containing the document. The stream is read to the
            end but is not closed
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.FdfReader.GetField(System.String)">
            Gets the field dictionary.
            @param name the fully qualified field name
            @return the field dictionary
        </member>
        <member name="M:iTextSharp.text.pdf.FdfReader.GetFieldValue(System.String)">
            Gets the field value or <CODE>null</CODE> if the field does not
            exist or has no value defined.
            @param name the fully qualified field name
            @return the field value or <CODE>null</CODE>
        </member>
        <member name="P:iTextSharp.text.pdf.FdfReader.Fields">
            Gets all the fields. The map is keyed by the fully qualified
            field name and the value is a merged <CODE>PdfDictionary</CODE>
            with the field content.
            @return all the fields
        </member>
        <member name="P:iTextSharp.text.pdf.FdfReader.FileSpec">
            Gets the PDF file specification contained in the FDF.
            @return the PDF file specification contained in the FDF
        </member>
        <member name="T:iTextSharp.text.pdf.FdfWriter">
            Writes an FDF form.
            @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:iTextSharp.text.pdf.FdfWriter.file">
            The PDF file associated with the FDF. 
        </member>
        <member name="M:iTextSharp.text.pdf.FdfWriter.#ctor">
            Creates a new FdfWriter. 
        </member>
        <member name="M:iTextSharp.text.pdf.FdfWriter.WriteTo(System.IO.Stream)">
            Writes the content to a stream.
            @param os the stream
            @throws DocumentException on error
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.FdfWriter.RemoveField(System.String)">
            Removes the field value.
            @param field the field name
            @return <CODE>true</CODE> if the field was found and removed,
            <CODE>false</CODE> otherwise
        </member>
        <member name="M:iTextSharp.text.pdf.FdfWriter.GetFields">
            Gets all the fields. The map is keyed by the fully qualified
            field name and the values are <CODE>PdfObject</CODE>.
            @return a map with all the fields
        </member>
        <member name="M:iTextSharp.text.pdf.FdfWriter.GetField(System.String)">
            Gets the field value.
            @param field the field name
            @return the field value or <CODE>null</CODE> if not found
        </member>
        <member name="M:iTextSharp.text.pdf.FdfWriter.SetFieldAsName(System.String,System.String)">
            Sets the field value as a name.
            @param field the fully qualified field name
            @param value the value
            @return <CODE>true</CODE> if the value was inserted,
            <CODE>false</CODE> if the name is incompatible with
            an existing field
        </member>
        <member name="M:iTextSharp.text.pdf.FdfWriter.SetFieldAsString(System.String,System.String)">
            Sets the field value as a string.
            @param field the fully qualified field name
            @param value the value
            @return <CODE>true</CODE> if the value was inserted,
            <CODE>false</CODE> if the name is incompatible with
            an existing field
        </member>
        <member name="M:iTextSharp.text.pdf.FdfWriter.SetFields(iTextSharp.text.pdf.FdfReader)">
            Sets all the fields from this <CODE>FdfReader</CODE>
            @param fdf the <CODE>FdfReader</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.FdfWriter.SetFields(iTextSharp.text.pdf.PdfReader)">
            Sets all the fields from this <CODE>PdfReader</CODE>
            @param pdf the <CODE>PdfReader</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.FdfWriter.SetFields(iTextSharp.text.pdf.AcroFields)">
            Sets all the fields from this <CODE>AcroFields</CODE>
            @param acro the <CODE>AcroFields</CODE>
        </member>
        <member name="P:iTextSharp.text.pdf.FdfWriter.File">
            Gets the PDF file name associated with the FDF.
            @return the PDF file name associated with the FDF
        </member>
        <member name="T:iTextSharp.text.pdf.PdfWriter">
            A <CODE>DocWriter</CODE> class for PDF.
            <P>
            When this <CODE>PdfWriter</CODE> is added
            to a certain <CODE>PdfDocument</CODE>, the PDF representation of every Element
            added to this Document will be written to the outputstream.</P>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PageLayoutSinglePage">
            A viewer preference 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PageLayoutOneColumn">
            A viewer preference 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PageLayoutTwoColumnLeft">
            A viewer preference 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PageLayoutTwoColumnRight">
            A viewer preference 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PageModeUseNone">
            A viewer preference 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PageModeUseOutlines">
            A viewer preference 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PageModeUseThumbs">
            A viewer preference 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PageModeFullScreen">
            A viewer preference 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PageModeUseOC">
            A viewer preference 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.HideToolbar">
            A viewer preference 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.HideMenubar">
            A viewer preference 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.HideWindowUI">
            A viewer preference 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.FitWindow">
            A viewer preference 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.CenterWindow">
            A viewer preference 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.NonFullScreenPageModeUseNone">
            A viewer preference 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.NonFullScreenPageModeUseOutlines">
            A viewer preference 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.NonFullScreenPageModeUseThumbs">
            A viewer preference 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.NonFullScreenPageModeUseOC">
            A viewer preference 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.DirectionL2R">
            A viewer preference 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.DirectionR2L">
            A viewer preference 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.DisplayDocTitle">
            A viewer preference 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PrintScalingNone">
            A viewer preference 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.ViewerPreferencesMask">
            The mask to decide if a ViewerPreferences dictionary is needed 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.AllowPrinting">
            The operation permitted when the document is opened with the user password 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.AllowModifyContents">
            The operation permitted when the document is opened with the user password 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.AllowCopy">
            The operation permitted when the document is opened with the user password 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.AllowModifyAnnotations">
            The operation permitted when the document is opened with the user password 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.AllowFillIn">
            The operation permitted when the document is opened with the user password 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.AllowScreenReaders">
            The operation permitted when the document is opened with the user password 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.AllowAssembly">
            The operation permitted when the document is opened with the user password 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.AllowDegradedPrinting">
            The operation permitted when the document is opened with the user password 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.STRENGTH40BITS">
            Type of encryption 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.STRENGTH128BITS">
            Type of encryption 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.SIGNATURE_EXISTS">
            signature value 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.SIGNATURE_APPEND_ONLY">
            signature value 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.VERSION_1_2">
            possible PDF version 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.VERSION_1_3">
            possible PDF version 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.VERSION_1_4">
            possible PDF version 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.VERSION_1_5">
            possible PDF version 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.VERSION_1_6">
            possible PDF version 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PDFXNONE">
            PDF/X value 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PDFX1A2001">
            PDF/X value 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PDFX32002">
            PDF/X value 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.SPACE_CHAR_RATIO_DEFAULT">
            The default space-char ratio. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.NO_SPACE_CHAR_RATIO">
            Disable the inter-character spacing. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.RUN_DIRECTION_DEFAULT">
            Use the default run direction. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.RUN_DIRECTION_NO_BIDI">
            Do not use bidirectional reordering. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.RUN_DIRECTION_LTR">
            Use bidirectional reordering with left-to-right
            preferential run direction.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.RUN_DIRECTION_RTL">
            Use bidirectional reordering with right-to-left
            preferential run direction.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.DOCUMENT_CLOSE">
            action value 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.WILL_SAVE">
            action value 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.DID_SAVE">
            action value 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.WILL_PRINT">
            action value 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.DID_PRINT">
            action value 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PAGE_OPEN">
            action value 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PAGE_CLOSE">
            action value 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.HEADER">
            this is the header of a PDF document 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.imageDictionary">
            Dictionary, containing all the images of the PDF document 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.images">
            This is the list with all the images in the document. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.formXObjects">
            The form XObjects in this document. The key is the xref and the value
                        is Object[]{PdfName, template}.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.formXObjectsCounter">
            The name counter for the form XObjects name. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.fontNumber">
            The font number counter for the fonts in the document. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.colorNumber">
            The color number counter for the colors in the document. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.patternNumber">
            The patten number counter for the colors in the document. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.directContent">
            The direct content in this document. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.directContentUnder">
            The direct content under in this document. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.documentFonts">
            The fonts of this document 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.documentColors">
            The colors of this document 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.documentPatterns">
            The patterns of this document 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.body">
            body of the PDF document 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.pdf">
            the pdfdocument object. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.pageEvent">
            The <CODE>PdfPageEvent</CODE> for this document. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.pageReferences">
            The PdfIndirectReference to the pages. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.spaceCharRatio">
            The ratio between the extra word spacing and the extra character spacing.
            Extra word spacing will grow <CODE>ratio</CODE> times more than extra character spacing.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.extraCatalog">
            Holds value of property extraCatalog. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.fullCompression">
            Holds value of property fullCompression.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfWriter.#ctor(iTextSharp.text.pdf.PdfDocument,System.IO.Stream)" -->
        <member name="M:iTextSharp.text.pdf.PdfWriter.GetInstance(iTextSharp.text.Document,System.IO.Stream)">
             Gets an instance of the <CODE>PdfWriter</CODE>.
            
             @param    document    The <CODE>Document</CODE> that has to be written
             @param    os  The <CODE>Stream</CODE> the writer has to write to.
             @return   a new <CODE>PdfWriter</CODE>
            
             @throws   DocumentException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.GetInstance(iTextSharp.text.Document,System.IO.Stream,iTextSharp.text.IDocListener)">
            Gets an instance of the <CODE>PdfWriter</CODE>.
            
             @return a new <CODE>PdfWriter</CODE>
             @param document The <CODE>Document</CODE> that has to be written
             @param os The <CODE>Stream</CODE> the writer has to write to.
             @param listener A <CODE>DocListener</CODE> to pass to the PdfDocument.
             @throws DocumentException on error
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfWriter.Add(iTextSharp.text.pdf.PdfPage,iTextSharp.text.pdf.PdfContents)" -->
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddDirectImageSimple(iTextSharp.text.Image)">
            Adds an image to the document but not to the page resources. It is used with
            templates and <CODE>Document.Add(Image)</CODE>.
            @param image the <CODE>Image</CODE> to add
            @return the name of the image added
            @throws PdfException on error
            @throws DocumentException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.Add(iTextSharp.text.pdf.PdfImage)">
             Writes a <CODE>PdfImage</CODE> to the outputstream.
            
             @param pdfImage the image to be added
             @return a <CODE>PdfIndirectReference</CODE> to the encapsulated image
             @throws PdfException when a document isn't open yet, or has been closed
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.GetImageReference(iTextSharp.text.pdf.PdfName)">
             return the <CODE>PdfIndirectReference</CODE> to the image with a given name.
            
             @param name the name of the image
             @return a <CODE>PdfIndirectReference</CODE>
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfWriter.Open" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfWriter.Close" -->
        <member name="M:iTextSharp.text.pdf.PdfWriter.GetTableBottom(iTextSharp.text.Table)">
             Sometimes it is necessary to know where the just added <CODE>Table</CODE> ends.
            
             For instance to avoid to add another table in a page that is ending up, because
             the new table will be probably splitted just after the header (it is an
             unpleasant effect, isn't it?).
            
             Added on September 8th, 2001
             by Francesco De Milato
             francesco.demilato@tiscalinet.it
             @param table the <CODE>Table</CODE>
             @return the bottom height of the just added table
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.GetPdfTable(iTextSharp.text.Table)">
            Gets a pre-rendered table.
            (Contributed by dperezcar@fcc.es) 
            @param table      Contains the table definition.  Its contents are deleted, after being pre-rendered.
            @return a PdfTable
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.BreakTableIfDoesntFit(iTextSharp.text.pdf.PdfTable)">
             Row additions to the original {@link Table} used to build the {@link PdfTable} are processed and pre-rendered,
             and then the contents are deleted. 
             If the pre-rendered table doesn't fit, then it is fully rendered and its data discarded.  
             There shouldn't be any column change in the underlying {@link Table} object.
             (Contributed by dperezcar@fcc.es) 
            
             @param    table       The pre-rendered table obtained from {@link #getPdfTable(Table)} 
             @return   true if the table is rendered and emptied.
             @throws DocumentException
             @see #getPdfTable(Table)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.FitsPage(iTextSharp.text.Table,System.Single)">
             Checks if a <CODE>Table</CODE> fits the current page of the <CODE>PdfDocument</CODE>.
            
             @param    table   the table that has to be checked
             @param    margin  a certain margin
             @return   <CODE>true</CODE> if the <CODE>Table</CODE> fits the page, <CODE>false</CODE> otherwise.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.FitsPage(iTextSharp.text.Table)">
             Checks if a <CODE>Table</CODE> fits the current page of the <CODE>PdfDocument</CODE>.
            
             @param    table   the table that has to be checked
             @return   <CODE>true</CODE> if the <CODE>Table</CODE> fits the page, <CODE>false</CODE> otherwise.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.FitsPage(iTextSharp.text.pdf.PdfPTable,System.Single)">
             Checks if a <CODE>PdfPTable</CODE> fits the current page of the <CODE>PdfDocument</CODE>.
            
             @param    table   the table that has to be checked
             @param    margin  a certain margin
             @return   <CODE>true</CODE> if the <CODE>PdfPTable</CODE> fits the page, <CODE>false</CODE> otherwise.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.FitsPage(iTextSharp.text.pdf.PdfPTable)">
             Checks if a <CODE>PdfPTable</CODE> fits the current page of the <CODE>PdfDocument</CODE>.
            
             @param    table   the table that has to be checked
             @return   <CODE>true</CODE> if the <CODE>PdfPTable</CODE> fits the page, <CODE>false</CODE> otherwise.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.GetVerticalPosition(System.Boolean)">
            Gets the current vertical page position.
            @param ensureNewLine Tells whether a new line shall be enforced. This may cause side effects 
              for elements that do not terminate the lines they've started because those lines will get
              terminated. 
            @return The current vertical page position.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.IsPaused">
             Checks if writing is paused.
            
             @return       <CODE>true</CODE> if writing temporarely has to be paused, <CODE>false</CODE> otherwise.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.ResetContent">
            Resets all the direct contents to empty. This happens when a new page is started.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddSimple(iTextSharp.text.pdf.BaseFont)">
            Adds a <CODE>BaseFont</CODE> to the document but not to the page resources.
            It is used for templates.
            @param bf the <CODE>BaseFont</CODE> to add
            @return an <CODE>Object[]</CODE> where position 0 is a <CODE>PdfName</CODE>
            and position 1 is an <CODE>PdfIndirectReference</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddSimple(iTextSharp.text.pdf.PdfSpotColor)">
            Adds a <CODE>SpotColor</CODE> to the document but not to the page resources.
            @param spc the <CODE>SpotColor</CODE> to add
            @return an <CODE>Object[]</CODE> where position 0 is a <CODE>PdfName</CODE>
            and position 1 is an <CODE>PdfIndirectReference</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddDirectTemplateSimple(iTextSharp.text.pdf.PdfTemplate,iTextSharp.text.pdf.PdfName)">
            Adds a template to the document but not to the page resources.
            @param template the template to add
            @param forcedName the template name, rather than a generated one. Can be null
            @return the <CODE>PdfName</CODE> for this template
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddLocalDestinations(System.util.collections.k_Tree)">
            Adds the local destinations to the body of the document.
            @param dest the <CODE>Hashtable</CODE> containing the destinations
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.SetEncryption(System.Byte[],System.Byte[],System.Int32,System.Boolean)">
            Sets the encryption options for this document. The userPassword and the
             ownerPassword can be null or have zero length. In this case the ownerPassword
             is replaced by a random string. The open permissions for the document can be
             AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
             AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
             The permissions can be combined by ORing them.
            @param userPassword the user password. Can be null or empty
            @param ownerPassword the owner password. Can be null or empty
            @param permissions the user permissions
            @param strength128Bits <code>true</code> for 128 bit key length, <code>false</code> for 40 bit key length
            @throws DocumentException if the document is already open
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.SetEncryption(System.Boolean,System.String,System.String,System.Int32)">
            Sets the encryption options for this document. The userPassword and the
             ownerPassword can be null or have zero length. In this case the ownerPassword
             is replaced by a random string. The open permissions for the document can be
             AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
             AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
             The permissions can be combined by ORing them.
            @param strength <code>true</code> for 128 bit key length, <code>false</code> for 40 bit key length
            @param userPassword the user password. Can be null or empty
            @param ownerPassword the owner password. Can be null or empty
            @param permissions the user permissions
            @throws DocumentException if the document is already open
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddToBody(iTextSharp.text.pdf.PdfObject)">
            Adds an object to the PDF body.
            @param object
            @return a PdfIndirectObject
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddToBody(iTextSharp.text.pdf.PdfObject,System.Boolean)">
            Adds an object to the PDF body.
            @param object
            @param inObjStm
            @return a PdfIndirectObject
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddToBody(iTextSharp.text.pdf.PdfObject,iTextSharp.text.pdf.PdfIndirectReference)">
            Adds an object to the PDF body.
            @param object
            @param ref
            @return a PdfIndirectObject
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddToBody(iTextSharp.text.pdf.PdfObject,iTextSharp.text.pdf.PdfIndirectReference,System.Boolean)">
            Adds an object to the PDF body.
            @param object
            @param ref
            @param inObjStm
            @return a PdfIndirectObject
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddToBody(iTextSharp.text.pdf.PdfObject,System.Int32)">
            Adds an object to the PDF body.
            @param object
            @param refNumber
            @return a PdfIndirectObject
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddToBody(iTextSharp.text.pdf.PdfObject,System.Int32,System.Boolean)">
            Adds an object to the PDF body.
            @param object
            @param refNumber
            @param inObjStm
            @return a PdfIndirectObject
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.SetOpenAction(System.String)">
            When the document opens it will jump to the destination with
            this name.
            @param name the name of the destination to jump to
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.SetAdditionalAction(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfAction)">
            Additional-actions defining the actions to be taken in
             response to various trigger events affecting the document
             as a whole. The actions types allowed are: <CODE>DOCUMENT_CLOSE</CODE>,
             <CODE>WILL_SAVE</CODE>, <CODE>DID_SAVE</CODE>, <CODE>WILL_PRINT</CODE>
             and <CODE>DID_PRINT</CODE>.
            
             @param actionType the action type
             @param action the action to execute in response to the trigger
             @throws PdfException on invalid action type
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.SetOpenAction(iTextSharp.text.pdf.PdfAction)">
            When the document opens this <CODE>action</CODE> will be
            invoked.
            @param action the action to be invoked
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.GetImportedPage(iTextSharp.text.pdf.PdfReader,System.Int32)">
            Gets a page from other PDF document. The page can be used as
            any other PdfTemplate. Note that calling this method more than
            once with the same parameters will retrieve the same object.
            @param reader the PDF document where the page is
            @param pageNumber the page number. The first page is 1
            @return the template representing the imported page
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddJavaScript(iTextSharp.text.pdf.PdfAction)">
            Adds a JavaScript action at the document level. When the document
            opens all this JavaScript runs.
            @param js The JavaScrip action
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddJavaScript(System.String,System.Boolean)">
            Adds a JavaScript action at the document level. When the document
            opens all this JavaScript runs.
            @param code the JavaScript code
            @param unicode select JavaScript unicode. Note that the internal
            Acrobat JavaScript engine does not support unicode,
            so this may or may not work for you
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddJavaScript(System.String)">
            Adds a JavaScript action at the document level. When the document
            opens all this JavaScript runs.
            @param code the JavaScript code
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.GetPageReference(System.Int32)">
            Gets a reference to a page existing or not. If the page does not exist
            yet the reference will be created in advance. If on closing the document, a
            page number greater than the total number of pages was requested, an
            exception is thrown.
            @param page the page number. The first page is 1
            @return the reference to the page
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddCalculationOrder(iTextSharp.text.pdf.PdfFormField)">
            Adds the <CODE>PdfAnnotation</CODE> to the calculation order
            array.
            @param annot the <CODE>PdfAnnotation</CODE> to be added
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddAnnotation(iTextSharp.text.pdf.PdfAnnotation)">
            Adds a <CODE>PdfAnnotation</CODE> or a <CODE>PdfFormField</CODE>
            to the document. Only the top parent of a <CODE>PdfFormField</CODE>
            needs to be added.
            @param annot the <CODE>PdfAnnotation</CODE> or the <CODE>PdfFormField</CODE> to add
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.ReorderPages(System.Int32[])">
            Reorder the pages in the document. A <CODE>null</CODE> argument value
            only returns the number of pages to process. It is
            advisable to issue a <CODE>Document.NewPage()</CODE>
            before using this method.
            @return the total number of pages
            @param order an array with the new page sequence. It must have the
            same size as the number of pages.
            @throws DocumentException if all the pages are not present in the array
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.FreeReader(iTextSharp.text.pdf.PdfReader)">
            Writes the reader to the document and frees the memory used by it.
            The main use is when concatenating multiple documents to keep the
            memory usage restricted to the current appending document.
            @param reader the <CODE>PdfReader</CODE> to free
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.SetPageAction(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfAction)">
            Sets the open and close page additional action.
            @param actionType the action type. It can be <CODE>PdfWriter.PAGE_OPEN</CODE>
            or <CODE>PdfWriter.PAGE_CLOSE</CODE>
            @param action the action to perform
            @throws PdfException if the action type is invalid
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.SetLinearPageMode">
            Sets the document in a suitable way to do page reordering.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.SetOutputIntents(System.String,System.String,System.String,System.String,System.Byte[])">
            Sets the values of the output intent dictionary. Null values are allowed to
            suppress any key.
            @param outputConditionIdentifier a value
            @param outputCondition a value
            @param registryName a value
            @param info a value
            @param destOutputProfile a value
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.SetOutputIntents(iTextSharp.text.pdf.PdfReader,System.Boolean)">
            Copies the output intent dictionary from other document to this one.
            @param reader the other document
            @param checkExistence <CODE>true</CODE> to just check for the existence of a valid output intent
            dictionary, <CODE>false</CODE> to insert the dictionary if it exists
            @throws IOException on error
            @return <CODE>true</CODE> if the output intent dictionary exists, <CODE>false</CODE>
            otherwise
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.SetBoxSize(System.String,iTextSharp.text.Rectangle)">
            Sets the page box sizes. Allowed names are: "crop", "trim", "art" and "bleed".
            @param boxName the box size
            @param size the size
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfWriter.SetDefaultColorspace(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfObject)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfWriter.SetFullCompression" -->
        <member name="M:iTextSharp.text.pdf.PdfWriter.AddOCGRadioGroup(System.Collections.ArrayList)">
            Sets a collection of optional content groups whose states are intended to follow
            a "radio button" paradigm. That is, the state of at most one optional
            content group in the array should be ON at a time: if one group is turned
            ON, all others must be turned OFF.
            @param group the radio group
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.DirectContent">
            Gets the direct content for this document. There is only one direct content,
            multiple calls to this method will allways retrieve the same.
            @return the direct content
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.DirectContentUnder">
            Gets the direct content under for this document. There is only one direct content,
            multiple calls to this method will allways retrieve the same.
            @return the direct content
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.AcroForm">
            Gets the AcroForm object.
            @return the <CODE>PdfAcroForm</CODE>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.RootOutline">
            Gets the root outline.
            @return the root outline
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.Os">
            Returns the outputStreamCounter.
            @return the outputStreamCounter
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.PdfDocument">
            Gets the <CODE>PdfDocument</CODE> associated with this writer.
            @return the <CODE>PdfDocument</CODE>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.PdfIndirectReference">
            Gets a <CODE>PdfIndirectReference</CODE> for an object that
            will be created in the future.
            @return the <CODE>PdfIndirectReference</CODE>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.PageEvent">
            Gets the <CODE>PdfPageEvent</CODE> for this document or <CODE>null</CODE>
            if none is set.
            @return the <CODE>PdfPageEvent</CODE> for this document or <CODE>null</CODE>
            if none is set
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.PageNumber">
             Gets the current pagenumber of this document.
            
             @return a page number
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "P:iTextSharp.text.pdf.PdfWriter.ViewerPreferences" -->
        <member name="P:iTextSharp.text.pdf.PdfWriter.PageLabels">
            Sets the page labels
            @param pageLabels the page labels
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.CropBoxSize">
            Sets the crop box. The crop box should not be rotated even if the
            page is rotated. This change only takes effect in the next
            page.
            @param crop the crop box
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.SigFlags">
            Set the signature flags.
            @param f the flags. This flags are ORed with current ones
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.PdfVersion">
            Sets the PDF version. Must be used right before the document
            is opened. Valid options are VERSION_1_2, VERSION_1_3,
            VERSION_1_4, VERSION_1_5 and VERSION_1_6. VERSION_1_4 is the default.
            @param version the version number
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.SpaceCharRatio">
            Sets the ratio between the extra word spacing and the extra character spacing
            when the text is fully justified.
            Extra word spacing will grow <CODE>spaceCharRatio</CODE> times more than extra character spacing.
            If the ratio is <CODE>PdfWriter.NO_SPACE_CHAR_RATIO</CODE> then the extra character spacing
            will be zero.
            @param spaceCharRatio the ratio between the extra word spacing and the extra character spacing
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.RunDirection">
            Sets the run direction. This is only used as a placeholder
            as it does not affect anything.
            @param runDirection the run direction
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.Duration">
            Sets the display duration for the page (for presentations)
            @param seconds   the number of seconds to display the page
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.Transition">
            Sets the transition for the page
            @param transition   the Transition object
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.CurrentDocumentSize">
            Gets the current document size. This size only includes
            the data already writen to the output stream, it does not
            include templates or fonts. It is usefull if used with
            <CODE>freeReader()</CODE> when concatenating many documents
            and an idea of the current size is needed.
            @return the approximate size without fonts or templates
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.StrictImageSequence">
            Sets the image sequence to follow the text in strict order.
             @param strictImageSequence new value of property strictImageSequence
            
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.PageEmpty">
            If you use SetPageEmpty(false), invoking NewPage() after a blank page will add a newPage.
            @param pageEmpty the state
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.Info">
            Gets the info dictionary for changing.
            @return the info dictionary
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.ExtraCatalog">
            Sets extra keys to the catalog.
            @return the catalog to change
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.PDFXConformance">
            Sets the PDFX conformance level. Allowed values are PDFX1A2001 and PDFX32002. It
            must be called before opening the document.
            @param pdfxConformance the conformance level
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.DefaultColorspace">
            Gets the default colorspaces.
            @return the default colorspaces
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.FullCompression">
            Gets the 1.5 compression status.
            @return <code>true</code> if the 1.5 compression is on
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.OCProperties">
            Gets the <B>Optional Content Properties Dictionary</B>. Each call fills the dictionary with the current layer
            state. It's advisable to only call this method right before close and do any modifications
            at that time.
            @return the Optional Content Properties Dictionary
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.Thumbnail">
            Sets the the thumbnail image for the current page.
            @param image the image
            @throws PdfException on error
            @throws DocumentException or error
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.Userunit">
            A UserUnit is a value that defines the default user space unit.
            The minimum UserUnit is 1 (1 unit = 1/72 inch).
            The maximum UserUnit is 75,000.
            Remark that this userunit only works starting with PDF1.6!
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.pdf.PdfWriter.PdfBody" -->
        <member name="F:iTextSharp.text.pdf.PdfWriter.PdfBody.xrefs">
            array containing the cross-reference table of the normal objects. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PdfBody.position">
            the current byteposition in the body. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.PdfBody.#ctor(iTextSharp.text.pdf.PdfWriter)">
            Constructs a new <CODE>PdfBody</CODE>.
            @param writer
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfWriter.PdfBody.Add(iTextSharp.text.pdf.PdfObject)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfWriter.PdfBody.Add(iTextSharp.text.pdf.PdfObject,iTextSharp.text.pdf.PdfIndirectReference)" -->
        <member name="M:iTextSharp.text.pdf.PdfWriter.PdfBody.WriteCrossReferenceTable(System.IO.Stream,iTextSharp.text.pdf.PdfIndirectReference,iTextSharp.text.pdf.PdfIndirectReference,iTextSharp.text.pdf.PdfIndirectReference,iTextSharp.text.pdf.PdfObject,System.Int32)">
            Returns the CrossReferenceTable of the <CODE>Body</CODE>.
            @param os
            @param root
            @param info
            @param encryption
            @param fileID
            @param prevxref
            @throws IOException
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.PdfBody.PdfIndirectReference">
            Gets a PdfIndirectReference for an object that will be created in the future.
            @return a PdfIndirectReference
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.PdfBody.Offset">
             Returns the offset of the Cross-Reference table.
            
             @return       an offset
        </member>
        <member name="P:iTextSharp.text.pdf.PdfWriter.PdfBody.Size">
             Returns the total number of objects contained in the CrossReferenceTable of this <CODE>Body</CODE>.
            
             @return   a number of objects
        </member>
        <member name="T:iTextSharp.text.pdf.PdfWriter.PdfBody.PdfCrossReference">
            <CODE>PdfCrossReference</CODE> is an entry in the PDF Cross-Reference table.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PdfBody.PdfCrossReference.offset">
            Byte offset in the PDF file. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfWriter.PdfBody.PdfCrossReference.generation">
            generation of the object. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.PdfBody.PdfCrossReference.#ctor(System.Int32,System.Int32,System.Int32)">
            Constructs a cross-reference element for a PdfIndirectObject.
            @param refnum
            @param    offset      byte offset of the object
            @param    generation  generationnumber of the object
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.PdfBody.PdfCrossReference.#ctor(System.Int32,System.Int32)">
            Constructs a cross-reference element for a PdfIndirectObject.
            @param refnum
            @param    offset      byte offset of the object
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.PdfBody.PdfCrossReference.ToPdf(System.IO.Stream)">
            Returns the PDF representation of this <CODE>PdfObject</CODE>.
            @param os
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.PdfBody.PdfCrossReference.ToPdf(System.Int32,System.IO.Stream)">
            Writes PDF syntax to the Stream
            @param midSize
            @param os
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.PdfBody.PdfCrossReference.CompareTo(System.Object)">
            @see java.lang.Comparable#compareTo(java.lang.Object)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.PdfBody.PdfCrossReference.Equals(System.Object)">
            @see java.lang.Object#equals(java.lang.Object)
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.pdf.PdfWriter.PdfTrailer" -->
        <member name="M:iTextSharp.text.pdf.PdfWriter.PdfTrailer.#ctor(System.Int32,System.Int32,iTextSharp.text.pdf.PdfIndirectReference,iTextSharp.text.pdf.PdfIndirectReference,iTextSharp.text.pdf.PdfIndirectReference,iTextSharp.text.pdf.PdfObject,System.Int32)">
             Constructs a PDF-Trailer.
            
             @param        size        the number of entries in the <CODE>PdfCrossReferenceTable</CODE>
             @param        offset      offset of the <CODE>PdfCrossReferenceTable</CODE>
             @param        root        an indirect reference to the root of the PDF document
             @param        info        an indirect reference to the info object of the PDF document
             @param encryption
             @param fileID
             @param prevxref
        </member>
        <member name="M:iTextSharp.text.pdf.PdfWriter.PdfTrailer.ToPdf(iTextSharp.text.pdf.PdfWriter,System.IO.Stream)">
            Returns the PDF representation of this <CODE>PdfObject</CODE>.
            @param writer
            @param os
            @throws IOException
        </member>
        <member name="T:iTextSharp.text.pdf.FontDetails">
            Each font in the document will have an instance of this class
             where the characters used will be represented.
            
             @author  Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:iTextSharp.text.pdf.FontDetails.indirectReference">
            The indirect reference to this font
        </member>
        <member name="F:iTextSharp.text.pdf.FontDetails.fontName">
            The font name that appears in the document body stream
        </member>
        <member name="F:iTextSharp.text.pdf.FontDetails.baseFont">
            The font
        </member>
        <member name="F:iTextSharp.text.pdf.FontDetails.ttu">
            The font if its an instance of <CODE>TrueTypeFontUnicode</CODE>
        </member>
        <member name="F:iTextSharp.text.pdf.FontDetails.shortTag">
            The array used with single byte encodings
        </member>
        <member name="F:iTextSharp.text.pdf.FontDetails.longTag">
            The map used with double byte encodings. The key is Int(glyph) and the
            value is int[]{glyph, width, Unicode code}
        </member>
        <member name="F:iTextSharp.text.pdf.FontDetails.fontType">
            The font type
        </member>
        <member name="F:iTextSharp.text.pdf.FontDetails.symbolic">
            <CODE>true</CODE> if the font is symbolic
        </member>
        <member name="F:iTextSharp.text.pdf.FontDetails.subset">
            Indicates if all the glyphs and widths for that particular
            encoding should be included in the document.
        </member>
        <member name="M:iTextSharp.text.pdf.FontDetails.#ctor(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfIndirectReference,iTextSharp.text.pdf.BaseFont)">
            Each font used in a document has an instance of this class.
            This class stores the characters used in the document and other
            specifics unique to the current working document.
            @param fontName the font name
            @param indirectReference the indirect reference to the font
            @param baseFont the <CODE>BaseFont</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.FontDetails.ConvertToBytes(System.String)">
            Converts the text into bytes to be placed in the document.
            The conversion is done according to the font and the encoding and the characters
            used are stored.
            @param text the text to convert
            @return the conversion
        </member>
        <member name="M:iTextSharp.text.pdf.FontDetails.WriteFont(iTextSharp.text.pdf.PdfWriter)">
            Writes the font definition to the document.
            @param writer the <CODE>PdfWriter</CODE> of this document
        </member>
        <member name="P:iTextSharp.text.pdf.FontDetails.IndirectReference">
            Gets the indirect reference to this font.
            @return the indirect reference to this font
        </member>
        <member name="P:iTextSharp.text.pdf.FontDetails.FontName">
            Gets the font name as it appears in the document body.
            @return the font name
        </member>
        <member name="P:iTextSharp.text.pdf.FontDetails.BaseFont">
            Gets the <CODE>BaseFont</CODE> of this font.
            @return the <CODE>BaseFont</CODE> of this font
        </member>
        <member name="P:iTextSharp.text.pdf.FontDetails.Subset">
            Indicates if all the glyphs and widths for that particular
            encoding should be included in the document. Set to <CODE>false</CODE>
            to include all.
            @param subset new value of property subset
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.pdf.FontSelector" -->
        <member name="M:iTextSharp.text.pdf.FontSelector.AddFont(iTextSharp.text.Font)">
            Adds a <CODE>Font</CODE> to be searched for valid characters.
            @param font the <CODE>Font</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.FontSelector.Process(System.String)">
            Process the text so that it will render with a combination of fonts
            if needed.
            @param text the text
            @return a <CODE>Phrase</CODE> with one or more chunks
        </member>
        <member name="T:iTextSharp.text.pdf.GrayColor">
            
             @author  Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="T:iTextSharp.text.pdf.HyphenationAuto">
            Hyphenates words automatically accordingly to the language and country.
             The hyphenator engine was taken from FOP and uses the TEX patterns. If a language
             is not provided and a TEX pattern for it exists, it can be easily adapted.
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="T:iTextSharp.text.pdf.IHyphenationEvent">
            Called by <code>Chunk</code> to hyphenate a word.
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="M:iTextSharp.text.pdf.IHyphenationEvent.GetHyphenatedWordPre(System.String,iTextSharp.text.pdf.BaseFont,System.Single,System.Single)">
            Hyphenates a word and returns the first part of it. To get
            the second part of the hyphenated word call <CODE>getHyphenatedWordPost()</CODE>.
            @param word the word to hyphenate
            @param font the font used by this word
            @param fontSize the font size used by this word
            @param remainingWidth the width available to fit this word in
            @return the first part of the hyphenated word including
            the hyphen symbol, if any
        </member>
        <member name="P:iTextSharp.text.pdf.IHyphenationEvent.HyphenSymbol">
            Gets the hyphen symbol.
            @return the hyphen symbol
        </member>
        <member name="P:iTextSharp.text.pdf.IHyphenationEvent.HyphenatedWordPost">
            Gets the second part of the hyphenated word. Must be called
            after <CODE>getHyphenatedWordPre()</CODE>.
            @return the second part of the hyphenated word
        </member>
        <member name="F:iTextSharp.text.pdf.HyphenationAuto.hyphenator">
            The hyphenator engine.
        </member>
        <member name="F:iTextSharp.text.pdf.HyphenationAuto.post">
            The second part of the hyphenated word.
        </member>
        <member name="M:iTextSharp.text.pdf.HyphenationAuto.#ctor(System.String,System.String,System.Int32,System.Int32)">
            Creates a new hyphenation instance usable in <CODE>Chunk</CODE>.
            @param lang the language ("en" for english, for example)
            @param country the country ("GB" for Great-Britain or "none" for no country, for example)
            @param leftMin the minimun number of letters before the hyphen
            @param rightMin the minimun number of letters after the hyphen
        </member>
        <member name="M:iTextSharp.text.pdf.HyphenationAuto.GetHyphenatedWordPre(System.String,iTextSharp.text.pdf.BaseFont,System.Single,System.Single)">
            Hyphenates a word and returns the first part of it. To get
            the second part of the hyphenated word call <CODE>getHyphenatedWordPost()</CODE>.
            @param word the word to hyphenate
            @param font the font used by this word
            @param fontSize the font size used by this word
            @param remainingWidth the width available to fit this word in
            @return the first part of the hyphenated word including
            the hyphen symbol, if any
        </member>
        <member name="P:iTextSharp.text.pdf.HyphenationAuto.HyphenSymbol">
            Gets the hyphen symbol.
            @return the hyphen symbol
        </member>
        <member name="P:iTextSharp.text.pdf.HyphenationAuto.HyphenatedWordPost">
            Gets the second part of the hyphenated word. Must be called
            after <CODE>getHyphenatedWordPre()</CODE>.
            @return the second part of the hyphenated word
        </member>
        <member name="T:iTextSharp.text.pdf.ICC_Profile">
            <summary>
            Summary description for ICC_Profile.
            </summary>
        </member>
        <member name="T:iTextSharp.text.pdf.IExtraEncoding">
            Classes implementing this interface can create custom encodings or
            replace existing ones. It is used in the context of <code>PdfEncoding</code>.
            @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="M:iTextSharp.text.pdf.IExtraEncoding.CharToByte(System.String,System.String)">
            Converts an Unicode string to a byte array according to some encoding.
            @param text the Unicode string
            @param encoding the requested encoding. It's mainly of use if the same class
            supports more than one encoding.
            @return the conversion or <CODE>null</CODE> if no conversion is supported
        </member>
        <member name="M:iTextSharp.text.pdf.IExtraEncoding.ByteToChar(System.Byte[],System.String)">
            Converts a byte array to an Unicode string according to some encoding.
            @param b the input byte array
            @param encoding the requested encoding. It's mainly of use if the same class
            supports more than one encoding.
            @return the conversion or <CODE>null</CODE> if no conversion is supported
        </member>
        <member name="T:iTextSharp.text.pdf.IntHashtable">
            A Hashtable that uses ints as the keys.
        </member>
        <member name="F:iTextSharp.text.pdf.IntHashtable.table">
            The hash table data.
        </member>
        <member name="F:iTextSharp.text.pdf.IntHashtable.count">
            The total number of entries in the hash table.
        </member>
        <member name="F:iTextSharp.text.pdf.IntHashtable.threshold">
            Rehashes the table when count exceeds this threshold.
        </member>
        <member name="F:iTextSharp.text.pdf.IntHashtable.loadFactor">
            The load factor for the hashtable.
        </member>
        <member name="M:iTextSharp.text.pdf.IntHashtable.#ctor(System.Int32,System.Single)">
            Constructs a new, empty hashtable with the specified initial
        </member>
        <member name="M:iTextSharp.text.pdf.IntHashtable.#ctor(System.Int32)">
            Constructs a new, empty hashtable with the specified initial
        </member>
        <member name="M:iTextSharp.text.pdf.IntHashtable.#ctor">
            Constructs a new, empty hashtable. A default capacity and load factor
        </member>
        <member name="M:iTextSharp.text.pdf.IntHashtable.IsEmpty">
            Returns true if the hashtable contains no elements.
        </member>
        <member name="M:iTextSharp.text.pdf.IntHashtable.Contains(System.Int32)">
            Returns true if the specified object is an element of the hashtable.
        </member>
        <member name="M:iTextSharp.text.pdf.IntHashtable.ContainsKey(System.Int32)">
            Returns true if the collection contains an element for the key.
        </member>
        <member name="M:iTextSharp.text.pdf.IntHashtable.Rehash">
            Rehashes the content of the table into a bigger table.
        </member>
        <member name="M:iTextSharp.text.pdf.IntHashtable.Remove(System.Int32)">
            Removes the element corresponding to the key. Does nothing if the
        </member>
        <member name="M:iTextSharp.text.pdf.IntHashtable.Clear">
            Clears the hash table so that it has no more elements in it.
        </member>
        <member name="P:iTextSharp.text.pdf.IntHashtable.Size">
            Returns the number of elements contained in the hashtable.
        </member>
        <member name="P:iTextSharp.text.pdf.IntHashtable.Item(System.Int32)">
            Gets the object associated with the specified key in the
        </member>
        <member name="T:iTextSharp.text.pdf.IPdfOCG">
             The interface common to all layer types.
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="P:iTextSharp.text.pdf.IPdfOCG.Ref">
            Gets the <CODE>PdfIndirectReference</CODE> that represents this layer.
            @return the <CODE>PdfIndirectReference</CODE> that represents this layer
        </member>
        <member name="P:iTextSharp.text.pdf.IPdfOCG.PdfObject">
            Gets the object representing the layer.
            @return the object representing the layer
        </member>
        <member name="T:iTextSharp.text.pdf.IPdfPageEvent">
             Allows a class to catch several document events.
            
             @author  Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="M:iTextSharp.text.pdf.IPdfPageEvent.OnOpenDocument(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document)">
             Called when the document is opened.
            
             @param writer the <CODE>PdfWriter</CODE> for this document
             @param document the document
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.IPdfPageEvent.OnStartPage(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document)" -->
        <member name="M:iTextSharp.text.pdf.IPdfPageEvent.OnEndPage(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document)">
             Called when a page is finished, just before being written to the document.
            
             @param writer the <CODE>PdfWriter</CODE> for this document
             @param document the document
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.IPdfPageEvent.OnCloseDocument(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.IPdfPageEvent.OnParagraph(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,System.Single)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.IPdfPageEvent.OnParagraphEnd(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,System.Single)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.IPdfPageEvent.OnChapter(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,System.Single,iTextSharp.text.Paragraph)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.IPdfPageEvent.OnChapterEnd(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,System.Single)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.IPdfPageEvent.OnSection(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,System.Single,System.Int32,iTextSharp.text.Paragraph)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.IPdfPageEvent.OnSectionEnd(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,System.Single)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.IPdfPageEvent.OnGenericTag(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,iTextSharp.text.Rectangle,System.String)" -->
        <member name="T:iTextSharp.text.pdf.IPdfPCellEvent">
            <summary>
            Summary description for IPdfPCellEvent.
            </summary>
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.IPdfPCellEvent.CellLayout(iTextSharp.text.pdf.PdfPCell,iTextSharp.text.Rectangle,iTextSharp.text.pdf.PdfContentByte[])" -->
        <member name="T:iTextSharp.text.pdf.IPdfPTableEvent">
            An interface that can be used to retrieve the position of cells in <CODE>PdfPTable</CODE>.
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.IPdfPTableEvent.TableLayout(iTextSharp.text.pdf.PdfPTable,System.Single[][],System.Single[],System.Int32,System.Int32,iTextSharp.text.pdf.PdfContentByte[])" -->
        <member name="T:iTextSharp.text.pdf.ISimpleXMLDocHandlerComment">
            The handler for the events fired by <CODE>SimpleXMLParser</CODE>.
            @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="M:iTextSharp.text.pdf.ISimpleXMLDocHandlerComment.Comment(System.String)">
            Called when a comment is found.
            @param text the comment text
        </member>
        <member name="T:iTextSharp.text.pdf.LZWDecoder">
             A class for performing LZW decoding.
            
            
        </member>
        <member name="M:iTextSharp.text.pdf.LZWDecoder.Decode(System.Byte[],System.IO.Stream)">
             Method to decode LZW compressed data.
            
             @param data            The compressed data.
             @param uncompData      Array to return the uncompressed data in.
        </member>
        <member name="M:iTextSharp.text.pdf.LZWDecoder.InitializeStringTable">
            Initialize the string table.
        </member>
        <member name="M:iTextSharp.text.pdf.LZWDecoder.WriteString(System.Byte[])">
            Write out the string just uncompressed.
        </member>
        <member name="M:iTextSharp.text.pdf.LZWDecoder.AddStringToTable(System.Byte[],System.Byte)">
            Add a new string to the string table.
        </member>
        <member name="M:iTextSharp.text.pdf.LZWDecoder.AddStringToTable(System.Byte[])">
            Add a new string to the string table.
        </member>
        <member name="M:iTextSharp.text.pdf.LZWDecoder.ComposeString(System.Byte[],System.Byte)">
            Append <code>newstring</code> to the end of <code>oldstring</code>.
        </member>
        <member name="T:iTextSharp.text.pdf.MultiColumnText">
            Formats content into one or more columns bounded by a
            rectangle.  The columns may be simple rectangles or
            more complicated shapes. Add all of the columns before
            adding content. Column continuation is supported. A MultiColumnText object may be added to
            a document using <CODE>Document.add</CODE>.
            @author Steve Appling
        </member>
        <member name="F:iTextSharp.text.pdf.MultiColumnText.AUTOMATIC">
            special constant for automatic calculation of height 
        </member>
        <member name="F:iTextSharp.text.pdf.MultiColumnText.desiredHeight">
            total desiredHeight of columns.  If <CODE>AUTOMATIC</CODE>, this means fill pages until done.
            This may be larger than one page
        </member>
        <member name="F:iTextSharp.text.pdf.MultiColumnText.totalHeight">
            total height of element written out so far
        </member>
        <member name="F:iTextSharp.text.pdf.MultiColumnText.overflow">
            true if all the text could not be written out due to height restriction
        </member>
        <member name="F:iTextSharp.text.pdf.MultiColumnText.top">
            Top of the columns - y position on starting page.
            If <CODE>AUTOMATIC</CODE>, it means current y position when added to document
        </member>
        <member name="F:iTextSharp.text.pdf.MultiColumnText.pageBottom">
            used to store the y position of the bottom of the page
        </member>
        <member name="F:iTextSharp.text.pdf.MultiColumnText.columnText">
            ColumnText object used to do all the real work.  This same object is used for all columns
        </member>
        <member name="F:iTextSharp.text.pdf.MultiColumnText.columnDefs">
            Array of <CODE>ColumnDef</CODE> objects used to define the columns
        </member>
        <member name="F:iTextSharp.text.pdf.MultiColumnText.simple">
            true if all columns are simple (rectangular)
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.#ctor">
            Default constructor.  Sets height to <CODE>AUTOMATIC</CODE>.
            Columns will repeat on each page as necessary to accomodate content length.
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.#ctor(System.Single)">
             Construct a MultiColumnText container of the specified height.
             If height is <CODE>AUTOMATIC</CODE>, fill complete pages until done.
             If a specific height is used, it may span one or more pages.
            
             @param height
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.IsOverflow">
             Indicates that all of the text did not fit in the
             specified height. Note that isOverflow will return
             false before the MultiColumnText object has been
             added to the document.  It will always be false if
             the height is AUTOMATIC.
            
             @return true if there is still space left in the column
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.UseColumnParams(iTextSharp.text.pdf.ColumnText)">
             Copy the parameters from the specified ColumnText to use
             when rendering.  Parameters like <CODE>setArabicOptions</CODE>
             must be set in this way.
            
             @param sourceColumn
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.AddColumn(System.Single[],System.Single[])">
             Add a new column.  The parameters are limits for each column
             wall in the format of a sequence of points (x1,y1,x2,y2,...).
            
             @param left  limits for left column
             @param right limits for right column
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.AddSimpleColumn(System.Single,System.Single)">
             Add a simple rectangular column with specified left
             and right x position boundaries.
            
             @param left  left boundary
             @param right right boundary
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.AddRegularColumns(System.Single,System.Single,System.Single,System.Int32)">
             Add the specified number of evenly spaced rectangular columns.
             Columns will be seperated by the specified gutterWidth.
            
             @param left        left boundary of first column
             @param right       right boundary of last column
             @param gutterWidth width of gutter spacing between columns
             @param numColumns  number of columns to add
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.AddElement(iTextSharp.text.IElement)">
             Add an element to be rendered in a column.
             Note that you can only add a <CODE>Phrase</CODE>
             or a <CODE>Chunk</CODE> if the columns are
             not all simple.  This is an underlying restriction in
             {@link com.lowagie.text.pdf.ColumnText}
            
             @param element element to add
             @throws DocumentException if element can't be added
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.Write(iTextSharp.text.pdf.PdfContentByte,iTextSharp.text.pdf.PdfDocument,System.Single)">
            Write out the columns.  After writing, use
            {@link #isOverflow()} to see if all text was written.
            @param canvas PdfContentByte to write with
            @param document document to write to (only used to get page limit info)
            @param documentY starting y position to begin writing at
            @return the current height (y position) after writing the columns
            @throws DocumentException on error
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.GetHeight(System.Single[],System.Single[])">
             Figure out the height of a column from the border extents
            
             @param left  left border
             @param right right border
             @return height
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.Process(iTextSharp.text.IElementListener)">
             Processes the element by adding it to an
             <CODE>ElementListener</CODE>.
            
             @param   listener    an <CODE>ElementListener</CODE>
             @return  <CODE>true</CODE> if the element was processed successfully
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.GetColumnBottom">
             Calculates the appropriate y position for the bottom
             of the columns on this page.
            
             @return the y position of the bottom of the columns
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.NextColumn">
            Moves the text insertion point to the beginning of the next column, issuing a page break if
            needed.
            @throws DocumentException on error
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.ResetCurrentColumn">
            Resets the current column.
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.ShiftCurrentColumn">
            Shifts the current column.
            @return true if the currentcolumn has changed
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.SetColumnsRightToLeft(System.Boolean)">
            Sets the direction of the columns.
            @param direction true = right2left; false = left2right
        </member>
        <member name="P:iTextSharp.text.pdf.MultiColumnText.Type">
             Gets the type of the text element.
            
             @return  a type
        </member>
        <member name="P:iTextSharp.text.pdf.MultiColumnText.Chunks">
             Returns null - not used
            
             @return  null
        </member>
        <member name="P:iTextSharp.text.pdf.MultiColumnText.CurrentColumn">
            Gets the current column.
            @return the current column
        </member>
        <member name="P:iTextSharp.text.pdf.MultiColumnText.SpaceCharRatio">
            Sets the ratio between the extra word spacing and the extra character spacing
            when the text is fully justified.
            Extra word spacing will grow <CODE>spaceCharRatio</CODE> times more than extra character spacing.
            If the ratio is <CODE>PdfWriter.NO_SPACE_CHAR_RATIO</CODE> then the extra character spacing
            will be zero.
            @param spaceCharRatio the ratio between the extra word spacing and the extra character spacing
        </member>
        <member name="P:iTextSharp.text.pdf.MultiColumnText.RunDirection">
            Sets the run direction. 
            @param runDirection the run direction
        </member>
        <member name="P:iTextSharp.text.pdf.MultiColumnText.ArabicOptions">
            Sets the arabic shaping options. The option can be AR_NOVOWEL,
            AR_COMPOSEDTASHKEEL and AR_LIG.
            @param arabicOptions the arabic shaping options
        </member>
        <member name="T:iTextSharp.text.pdf.MultiColumnText.ColumnDef">
            Inner class used to define a column
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.ColumnDef.ResolvePositions(System.Int32)">
             Resolves the positions for the specified side of the column
             into real numbers once the top of the column is known.
            
             @param side either <CODE>Rectangle.LEFT_BORDER</CODE>
                         or <CODE>Rectangle.RIGHT_BORDER</CODE>
             @return the array of floats for the side
        </member>
        <member name="M:iTextSharp.text.pdf.MultiColumnText.ColumnDef.IsSimple">
            Checks if column definition is a simple rectangle
            @return true if it is a simple column 
        </member>
        <member name="T:iTextSharp.text.pdf.PatternColor">
            Represents a pattern. Can be used in high-level constructs (Paragraph, Cell, etc.).
        </member>
        <member name="F:iTextSharp.text.pdf.PatternColor.painter">
            The actual pattern.
        </member>
        <member name="M:iTextSharp.text.pdf.PatternColor.#ctor(iTextSharp.text.pdf.PdfPatternPainter)">
            Creates a color representing a pattern.
            @param painter the actual pattern
        </member>
        <member name="P:iTextSharp.text.pdf.PatternColor.Painter">
            Gets the pattern.
            @return the pattern
        </member>
        <member name="T:iTextSharp.text.pdf.PdfAcroForm">
            Each PDF document can contain maximum 1 AcroForm.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAcroForm.fieldTemplates">
            This is a map containing FieldTemplates. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAcroForm.documentFields">
            This is an array containing DocumentFields. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAcroForm.calculationOrder">
            This is an array containing the calculationorder of the fields. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAcroForm.sigFlags">
            Contains the signature flags. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAcroForm.#ctor(iTextSharp.text.pdf.PdfWriter)">
            Creates new PdfAcroForm 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAcroForm.AddFieldTemplates(System.Collections.Hashtable)">
            Adds fieldTemplates.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAcroForm.AddDocumentField(iTextSharp.text.pdf.PdfIndirectReference)">
            Adds documentFields.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAcroForm.IsValid">
            Closes the AcroForm.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAcroForm.AddCalculationOrder(iTextSharp.text.pdf.PdfFormField)">
            Adds an object to the calculationOrder.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAcroForm.AddFormField(iTextSharp.text.pdf.PdfFormField)">
            Adds a formfield to the AcroForm.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAcroForm.SetSignatureParams(iTextSharp.text.pdf.PdfFormField,System.String,System.Single,System.Single,System.Single,System.Single)">
            @param field
            @param name
            @param llx
            @param lly
            @param urx
            @param ury
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAcroForm.DrawSignatureAppearences(iTextSharp.text.pdf.PdfFormField,System.Single,System.Single,System.Single,System.Single)">
            @param field
            @param llx
            @param lly
            @param urx
            @param ury
        </member>
        <member name="P:iTextSharp.text.pdf.PdfAcroForm.SigFlags">
            Sets the signature flags.
        </member>
        <member name="T:iTextSharp.text.pdf.PdfAction">
             A <CODE>PdfAction</CODE> defines an action that can be triggered from a PDF file.
            
             @see     PdfDictionary
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAction.FIRSTPAGE">
            A named action to go to the first page.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAction.PREVPAGE">
            A named action to go to the previous page.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAction.NEXTPAGE">
            A named action to go to the next page.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAction.LASTPAGE">
            A named action to go to the last page.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAction.PRINTDIALOG">
            A named action to open a print dialog.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAction.SUBMIT_XFDF">
            a possible submitvalue 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAction.SUBMIT_INCLUDE_APPEND_SAVES">
            a possible submitvalue 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAction.SUBMIT_INCLUDE_ANNOTATIONS">
            a possible submitvalue 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAction.SUBMIT_PDF">
            a possible submitvalue 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAction.SUBMIT_CANONICAL_FORMAT">
            a possible submitvalue 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAction.SUBMIT_EXCL_NON_USER_ANNOTS">
            a possible submitvalue 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAction.SUBMIT_EXCL_F_KEY">
            a possible submitvalue 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAction.SUBMIT_EMBED_FORM">
            a possible submitvalue 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAction.RESET_EXCLUDE">
            a possible submitvalue 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAction.#ctor">
            Create an empty action.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAction.#ctor(System.Uri)">
             Constructs a new <CODE>PdfAction</CODE> of Subtype URI.
            
             @param url the Url to go to
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAction.#ctor(System.String)">
             Constructs a new <CODE>PdfAction</CODE> of Subtype URI.
            
             @param url the url to go to
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAction.#ctor(iTextSharp.text.pdf.PdfIndirectReference)">
            Constructs a new <CODE>PdfAction</CODE> of Subtype GoTo.
            @param destination the destination to go to
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAction.#ctor(System.String,System.String)">
            Constructs a new <CODE>PdfAction</CODE> of Subtype GoToR.
            @param filename the file name to go to
            @param name the named destination to go to
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAction.#ctor(System.String,System.Int32)">
            Constructs a new <CODE>PdfAction</CODE> of Subtype GoToR.
            @param filename the file name to go to
            @param page the page destination to go to
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAction.#ctor(System.Int32)">
            Implements name actions. The action can be FIRSTPAGE, LASTPAGE,
            NEXTPAGE and PREVPAGE.
            @param named the named action
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAction.#ctor(System.String,System.String,System.String,System.String)">
            Launchs an application or a document.
            @param application the application to be launched or the document to be opened or printed.
            @param parameters (Windows-specific) A parameter string to be passed to the application.
            It can be <CODE>null</CODE>.
            @param operation (Windows-specific) the operation to perform: "open" - Open a document,
            "print" - Print a document.
            It can be <CODE>null</CODE>.
            @param defaultDir (Windows-specific) the default directory in standard DOS syntax.
            It can be <CODE>null</CODE>.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAction.CreateLaunch(System.String,System.String,System.String,System.String)">
            Launchs an application or a document.
            @param application the application to be launched or the document to be opened or printed.
            @param parameters (Windows-specific) A parameter string to be passed to the application.
            It can be <CODE>null</CODE>.
            @param operation (Windows-specific) the operation to perform: "open" - Open a document,
            "print" - Print a document.
            It can be <CODE>null</CODE>.
            @param defaultDir (Windows-specific) the default directory in standard DOS syntax.
            It can be <CODE>null</CODE>.
            @return a Launch action
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAction.Rendition(System.String,iTextSharp.text.pdf.PdfFileSpecification,System.String,iTextSharp.text.pdf.PdfIndirectReference)">
            Creates a Rendition action
            @param file
            @param fs
            @param mimeType
            @param ref
            @return a Media Clip action
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAction.JavaScript(System.String,iTextSharp.text.pdf.PdfWriter,System.Boolean)">
            Creates a JavaScript action. If the JavaScript is smaller than
            50 characters it will be placed as a string, otherwise it will
            be placed as a compressed stream.
            @param code the JavaScript code
            @param writer the writer for this action
            @param unicode select JavaScript unicode. Note that the internal
            Acrobat JavaScript engine does not support unicode,
            so this may or may not work for you
            @return the JavaScript action
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAction.JavaScript(System.String,iTextSharp.text.pdf.PdfWriter)">
            Creates a JavaScript action. If the JavaScript is smaller than
            50 characters it will be place as a string, otherwise it will
            be placed as a compressed stream.
            @param code the JavaScript code
            @param writer the writer for this action
            @return the JavaScript action
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAction.Next(iTextSharp.text.pdf.PdfAction)">
            Add a chained action.
            @param na the next action
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAction.GotoLocalPage(System.Int32,iTextSharp.text.pdf.PdfDestination,iTextSharp.text.pdf.PdfWriter)">
            Creates a GoTo action to an internal page.
            @param page the page to go. First page is 1
            @param dest the destination for the page
            @param writer the writer for this action
            @return a GoTo action
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAction.GotoLocalPage(System.String,System.Boolean)">
            Creates a GoTo action to a named destination.
            @param dest the named destination
            @param isName if true sets the destination as a name, if false sets it as a String
            @return a GoToR action
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAction.GotoRemotePage(System.String,System.String,System.Boolean,System.Boolean)">
            Creates a GoToR action to a named destination.
            @param filename the file name to go to
            @param dest the destination name
            @param isName if true sets the destination as a name, if false sets it as a String
            @param newWindow open the document in a new window if <CODE>true</CODE>, if false the current document is replaced by the new document.
            @return a GoToR action
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfAction.SetOCGstate(System.Collections.ArrayList,System.Boolean)" -->
        <member name="T:iTextSharp.text.pdf.PdfAnnotation">
             A <CODE>PdfAnnotation</CODE> is a note that is associated with a page.
            
             @see     PdfDictionary
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAnnotation.used">
            Holds value of property used. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfAnnotation.placeInPage">
            Holds value of property placeInPage. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAnnotation.#ctor(iTextSharp.text.pdf.PdfWriter,System.Single,System.Single,System.Single,System.Single,iTextSharp.text.pdf.PdfString,iTextSharp.text.pdf.PdfString)">
            Constructs a new <CODE>PdfAnnotation</CODE> of subtype text.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAnnotation.#ctor(iTextSharp.text.pdf.PdfWriter,System.Single,System.Single,System.Single,System.Single,iTextSharp.text.pdf.PdfAction)">
            Constructs a new <CODE>PdfAnnotation</CODE> of subtype link (Action).
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAnnotation.CreateScreen(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Rectangle,System.String,iTextSharp.text.pdf.PdfFileSpecification,System.String,System.Boolean)">
            Creates a screen PdfAnnotation
            @param writer
            @param rect
            @param clipTitle
            @param fs
            @param mimeType
            @param playOnDisplay
            @return a screen PdfAnnotation
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAnnotation.CreateFileAttachment(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Rectangle,System.String,System.Byte[],System.String,System.String)">
            Creates a file attachment annotation.
            @param writer the <CODE>PdfWriter</CODE>
            @param rect the dimensions in the page of the annotation
            @param contents the file description
            @param fileStore an array with the file. If it's <CODE>null</CODE>
            the file will be read from the disk
            @param file the path to the file. It will only be used if
            <CODE>fileStore</CODE> is not <CODE>null</CODE>
            @param fileDisplay the actual file name stored in the pdf
            @throws IOException on error
            @return the annotation
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAnnotation.CreateFileAttachment(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Rectangle,System.String,iTextSharp.text.pdf.PdfFileSpecification)">
            Creates a file attachment annotation
            @param writer
            @param rect
            @param contents
            @param fs
            @return the annotation
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAnnotation.SetHighlighting(iTextSharp.text.pdf.PdfName)">
            Sets the annotation's highlighting mode. The values can be
            <CODE>HIGHLIGHT_NONE</CODE>, <CODE>HIGHLIGHT_INVERT</CODE>,
            <CODE>HIGHLIGHT_OUTLINE</CODE> and <CODE>HIGHLIGHT_PUSH</CODE>;
            @param highlight the annotation's highlighting mode
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAnnotation.IsForm">
            Getter for property form.
            @return Value of property form.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAnnotation.IsAnnotation">
            Getter for property annotation.
            @return Value of property annotation.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfAnnotation.PlaceInPage">
            Getter for property placeInPage.
            @return Value of property placeInPage.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfAnnotation.Layer">
            Sets the layer this annotation belongs to.
            @param layer the layer this annotation belongs to
        </member>
        <member name="T:iTextSharp.text.pdf.PdfAppearance">
            Implements the appearance stream to be used with form fields..
        </member>
        <member name="T:iTextSharp.text.pdf.PdfTemplate">
            Implements the form XObject.
        </member>
        <member name="T:iTextSharp.text.pdf.PdfContentByte">
            <CODE>PdfContentByte</CODE> is an object containing the user positioned
            text and graphic contents of a page. It knows how to apply the proper
            font encoding.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.ALIGN_CENTER">
            The alignement is center 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.ALIGN_LEFT">
            The alignement is left 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.ALIGN_RIGHT">
            The alignement is right 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.LINE_CAP_BUTT">
            A possible line cap value 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.LINE_CAP_ROUND">
            A possible line cap value 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.LINE_CAP_PROJECTING_SQUARE">
            A possible line cap value 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.LINE_JOIN_MITER">
            A possible line join value 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.LINE_JOIN_ROUND">
            A possible line join value 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.LINE_JOIN_BEVEL">
            A possible line join value 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.TEXT_RENDER_MODE_FILL">
            A possible text rendering value 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.TEXT_RENDER_MODE_STROKE">
            A possible text rendering value 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.TEXT_RENDER_MODE_FILL_STROKE">
            A possible text rendering value 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.TEXT_RENDER_MODE_INVISIBLE">
            A possible text rendering value 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.TEXT_RENDER_MODE_FILL_CLIP">
            A possible text rendering value 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.TEXT_RENDER_MODE_STROKE_CLIP">
            A possible text rendering value 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.TEXT_RENDER_MODE_FILL_STROKE_CLIP">
            A possible text rendering value 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.TEXT_RENDER_MODE_CLIP">
            A possible text rendering value 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.content">
            This is the actual content 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.writer">
            This is the writer 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.pdf">
            This is the PdfDocument 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.state">
            This is the GraphicState in use 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.layerDepth">
            The list were we save/restore the layer depth 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.stateList">
            The list were we save/restore the state 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.separator">
            The separator between commands.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.#ctor(iTextSharp.text.pdf.PdfWriter)">
             Constructs a new <CODE>PdfContentByte</CODE>-object.
            
             @param wr the writer associated to this content
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.ToString">
             Returns the <CODE>string</CODE> representation of this <CODE>PdfContentByte</CODE>-object.
            
             @return      a <CODE>string</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.ToPdf(iTextSharp.text.pdf.PdfWriter)">
            Returns the PDF representation of this <CODE>PdfContentByte</CODE>-object.
            
             @param writer the <CODE>PdfWriter</CODE>
             @return a <CODE>byte</CODE> array with the representation
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.Add(iTextSharp.text.pdf.PdfContentByte)">
             Adds the content of another <CODE>PdfContent</CODE>-object to this object.
            
             @param       other       another <CODE>PdfByteContent</CODE>-object
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfContentByte.SetFlatness(System.Single)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfContentByte.SetLineCap(System.Int32)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfContentByte.SetLineDash(System.Single)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfContentByte.SetLineDash(System.Single,System.Single)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfContentByte.SetLineDash(System.Single,System.Single,System.Single)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfContentByte.SetLineDash(System.Single[],System.Single)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfContentByte.SetLineJoin(System.Int32)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfContentByte.SetLineWidth(System.Single)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfContentByte.SetMiterLimit(System.Single)" -->
        <member name="M:iTextSharp.text.pdf.PdfContentByte.Clip">
            Modify the current clipping path by intersecting it with the current path, using the
            nonzero winding number rule to determine which regions lie inside the clipping
            path.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.EoClip">
            Modify the current clipping path by intersecting it with the current path, using the
            even-odd rule to determine which regions lie inside the clipping path.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetGrayFill(System.Single)">
             Changes the currentgray tint for filling paths (device dependent colors!).
             <P>
             Sets the color space to <B>DeviceGray</B> (or the <B>DefaultGray</B> color space),
             and sets the gray tint to use for filling paths.</P>
            
             @param   gray    a value between 0 (black) and 1 (white)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.ResetGrayFill">
            Changes the current gray tint for filling paths to black.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetGrayStroke(System.Single)">
             Changes the currentgray tint for stroking paths (device dependent colors!).
             <P>
             Sets the color space to <B>DeviceGray</B> (or the <B>DefaultGray</B> color space),
             and sets the gray tint to use for stroking paths.</P>
            
             @param   gray    a value between 0 (black) and 1 (white)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.ResetGrayStroke">
            Changes the current gray tint for stroking paths to black.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.HelperRGB(System.Single,System.Single,System.Single)">
            Helper to validate and write the RGB color components
            @param   red     the intensity of red. A value between 0 and 1
            @param   green   the intensity of green. A value between 0 and 1
            @param   blue    the intensity of blue. A value between 0 and 1
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetRGBColorFillF(System.Single,System.Single,System.Single)">
             Changes the current color for filling paths (device dependent colors!).
             <P>
             Sets the color space to <B>DeviceRGB</B> (or the <B>DefaultRGB</B> color space),
             and sets the color to use for filling paths.</P>
             <P>
             Following the PDF manual, each operand must be a number between 0 (minimum intensity) and
             1 (maximum intensity).</P>
            
             @param   red     the intensity of red. A value between 0 and 1
             @param   green   the intensity of green. A value between 0 and 1
             @param   blue    the intensity of blue. A value between 0 and 1
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.ResetRGBColorFill">
            Changes the current color for filling paths to black.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfContentByte.SetRGBColorStrokeF(System.Single,System.Single,System.Single)" -->
        <member name="M:iTextSharp.text.pdf.PdfContentByte.ResetRGBColorStroke">
             Changes the current color for stroking paths to black.
            
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.HelperCMYK(System.Single,System.Single,System.Single,System.Single)">
             Helper to validate and write the CMYK color components.
            
             @param   cyan    the intensity of cyan. A value between 0 and 1
             @param   magenta the intensity of magenta. A value between 0 and 1
             @param   yellow  the intensity of yellow. A value between 0 and 1
             @param   black   the intensity of black. A value between 0 and 1
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetCMYKColorFillF(System.Single,System.Single,System.Single,System.Single)">
             Changes the current color for filling paths (device dependent colors!).
             <P>
             Sets the color space to <B>DeviceCMYK</B> (or the <B>DefaultCMYK</B> color space),
             and sets the color to use for filling paths.</P>
             <P>
             Following the PDF manual, each operand must be a number between 0 (no ink) and
             1 (maximum ink).</P>
            
             @param   cyan    the intensity of cyan. A value between 0 and 1
             @param   magenta the intensity of magenta. A value between 0 and 1
             @param   yellow  the intensity of yellow. A value between 0 and 1
             @param   black   the intensity of black. A value between 0 and 1
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.ResetCMYKColorFill">
             Changes the current color for filling paths to black.
            
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfContentByte.SetCMYKColorStrokeF(System.Single,System.Single,System.Single,System.Single)" -->
        <member name="M:iTextSharp.text.pdf.PdfContentByte.ResetCMYKColorStroke">
             Changes the current color for stroking paths to black.
            
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.MoveTo(System.Single,System.Single)">
             Move the current point <I>(x, y)</I>, omitting any connecting line segment.
            
             @param       x               new x-coordinate
             @param       y               new y-coordinate
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.LineTo(System.Single,System.Single)">
             Appends a straight line segment from the current point <I>(x, y)</I>. The new current
             point is <I>(x, y)</I>.
            
             @param       x               new x-coordinate
             @param       y               new y-coordinate
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.CurveTo(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
             Appends a Bêzier curve to the path, starting from the current point.
            
             @param       x1      x-coordinate of the first control point
             @param       y1      y-coordinate of the first control point
             @param       x2      x-coordinate of the second control point
             @param       y2      y-coordinate of the second control point
             @param       x3      x-coordinaat of the ending point (= new current point)
             @param       y3      y-coordinaat of the ending point (= new current point)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.CurveTo(System.Single,System.Single,System.Single,System.Single)">
             Appends a Bêzier curve to the path, starting from the current point.
            
             @param       x2      x-coordinate of the second control point
             @param       y2      y-coordinate of the second control point
             @param       x3      x-coordinaat of the ending point (= new current point)
             @param       y3      y-coordinaat of the ending point (= new current point)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.CurveFromTo(System.Single,System.Single,System.Single,System.Single)">
             Appends a Bêzier curve to the path, starting from the current point.
            
             @param       x1      x-coordinate of the first control point
             @param       y1      y-coordinate of the first control point
             @param       x3      x-coordinaat of the ending point (= new current point)
             @param       y3      y-coordinaat of the ending point (= new current point)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.Circle(System.Single,System.Single,System.Single)">
            Draws a circle. The endpoint will (x+r, y).
            
             @param x x center of circle
             @param y y center of circle
             @param r radius of circle
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.Rectangle(System.Single,System.Single,System.Single,System.Single)">
             Adds a rectangle to the current path.
            
             @param       x       x-coordinate of the starting point
             @param       y       y-coordinate of the starting point
             @param       w       width
             @param       h       height
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.VariableRectangle(iTextSharp.text.Rectangle)">
            Adds a variable width border to the current path.
            Only use if {@link com.lowagie.text.Rectangle#isUseVariableBorders() Rectangle.isUseVariableBorders}
            = true.
            @param        rect        a <CODE>Rectangle</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.Rectangle(iTextSharp.text.Rectangle)">
             Adds a border (complete or partially) to the current path..
            
             @param        rectangle        a <CODE>Rectangle</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.ClosePath">
            Closes the current subpath by appending a straight line segment from the current point
            to the starting point of the subpath.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.NewPath">
            Ends the path without filling or stroking it.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.Stroke">
            Strokes the path.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.ClosePathStroke">
            Closes the path and strokes it.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.Fill">
            Fills the path, using the non-zero winding number rule to determine the region to fill.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.EoFill">
            Fills the path, using the even-odd rule to determine the region to fill.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.FillStroke">
            Fills the path using the non-zero winding number rule to determine the region to fill and strokes it.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.ClosePathFillStroke">
            Closes the path, fills it using the non-zero winding number rule to determine the region to fill and strokes it.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.EoFillStroke">
            Fills the path, using the even-odd rule to determine the region to fill and strokes it.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.ClosePathEoFillStroke">
            Closes the path, fills it using the even-odd rule to determine the region to fill and strokes it.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.AddImage(iTextSharp.text.Image)">
            Adds an <CODE>Image</CODE> to the page. The <CODE>Image</CODE> must have
            absolute positioning.
            @param image the <CODE>Image</CODE> object
            @throws DocumentException if the <CODE>Image</CODE> does not have absolute positioning
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.AddImage(iTextSharp.text.Image,System.Boolean)">
            Adds an <CODE>Image</CODE> to the page. The <CODE>Image</CODE> must have
            absolute positioning. The image can be placed inline.
            @param image the <CODE>Image</CODE> object
            @param inlineImage <CODE>true</CODE> to place this image inline, <CODE>false</CODE> otherwise
            @throws DocumentException if the <CODE>Image</CODE> does not have absolute positioning
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.AddImage(iTextSharp.text.Image,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            Adds an <CODE>Image</CODE> to the page. The positioning of the <CODE>Image</CODE>
            is done with the transformation matrix. To position an <CODE>image</CODE> at (x,y)
            use AddImage(image, image_width, 0, 0, image_height, x, y).
            @param image the <CODE>Image</CODE> object
            @param a an element of the transformation matrix
            @param b an element of the transformation matrix
            @param c an element of the transformation matrix
            @param d an element of the transformation matrix
            @param e an element of the transformation matrix
            @param f an element of the transformation matrix
            @throws DocumentException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.AddImage(iTextSharp.text.Image,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            Adds an <CODE>Image</CODE> to the page. The positioning of the <CODE>Image</CODE>
            is done with the transformation matrix. To position an <CODE>image</CODE> at (x,y)
            use AddImage(image, image_width, 0, 0, image_height, x, y). The image can be placed inline.
            @param image the <CODE>Image</CODE> object
            @param a an element of the transformation matrix
            @param b an element of the transformation matrix
            @param c an element of the transformation matrix
            @param d an element of the transformation matrix
            @param e an element of the transformation matrix
            @param f an element of the transformation matrix
            @param inlineImage <CODE>true</CODE> to place this image inline, <CODE>false</CODE> otherwise
            @throws DocumentException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.Reset">
            Makes this <CODE>PdfContentByte</CODE> empty.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.BeginText">
            Starts the writing of text.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.EndText">
            Ends the writing of text and makes the current font invalid.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SaveState">
            Saves the graphic state. <CODE>saveState</CODE> and
            <CODE>restoreState</CODE> must be balanced.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.RestoreState">
            Restores the graphic state. <CODE>saveState</CODE> and
            <CODE>restoreState</CODE> must be balanced.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetCharacterSpacing(System.Single)">
             Sets the character spacing parameter.
            
             @param       charSpace           a parameter
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetWordSpacing(System.Single)">
             Sets the word spacing parameter.
            
             @param       wordSpace           a parameter
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetHorizontalScaling(System.Single)">
             Sets the horizontal scaling parameter.
            
             @param       scale               a parameter
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetFontAndSize(iTextSharp.text.pdf.BaseFont,System.Single)">
             Set the font and the size for the subsequent text writing.
            
             @param bf the font
             @param size the font size in points
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetTextRenderingMode(System.Int32)">
             Sets the text rendering parameter.
            
             @param       rendering               a parameter
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetTextRise(System.Single)">
             Sets the text rise parameter.
             <P>
             This allows to write text in subscript or basescript mode.</P>
            
             @param       rise                a parameter
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.ShowText2(System.String)">
             A helper to insert into the content stream the <CODE>text</CODE>
             converted to bytes according to the font's encoding.
            
             @param text the text to write
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.ShowText(System.String)">
             Shows the <CODE>text</CODE>.
            
             @param text the text to write
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.GetKernArray(System.String,iTextSharp.text.pdf.BaseFont)">
            Constructs a kern array for a text in a certain font
            @param text the text
            @param font the font
            @return a PdfTextArray
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.ShowTextKerned(System.String)">
             Shows the <CODE>text</CODE> kerned.
            
             @param text the text to write
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.NewlineShowText(System.String)">
             Moves to the next line and shows <CODE>text</CODE>.
            
             @param text the text to write
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.NewlineShowText(System.Single,System.Single,System.String)">
             Moves to the next line and shows text string, using the given values of the character and word spacing parameters.
            
             @param       wordSpacing     a parameter
             @param       charSpacing     a parameter
             @param text the text to write
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetTextMatrix(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
             Changes the text matrix.
             <P>
             Remark: this operation also initializes the current point position.</P>
            
             @param       a           operand 1,1 in the matrix
             @param       b           operand 1,2 in the matrix
             @param       c           operand 2,1 in the matrix
             @param       d           operand 2,2 in the matrix
             @param       x           operand 3,1 in the matrix
             @param       y           operand 3,2 in the matrix
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetTextMatrix(System.Single,System.Single)">
             Changes the text matrix. The first four parameters are {1,0,0,1}.
             <P>
             Remark: this operation also initializes the current point position.</P>
            
             @param       x           operand 3,1 in the matrix
             @param       y           operand 3,2 in the matrix
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.MoveText(System.Single,System.Single)">
             Moves to the start of the next line, offset from the start of the current line.
            
             @param       x           x-coordinate of the new current point
             @param       y           y-coordinate of the new current point
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.MoveTextWithLeading(System.Single,System.Single)">
             Moves to the start of the next line, offset from the start of the current line.
             <P>
             As a side effect, this sets the leading parameter in the text state.</P>
            
             @param       x           offset of the new current point
             @param       y           y-coordinate of the new current point
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.NewlineText">
            Moves to the start of the next line.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.EscapeString(System.Byte[])">
             Escapes a <CODE>byte</CODE> array according to the PDF conventions.
            
             @param b the <CODE>byte</CODE> array to escape
             @return an escaped <CODE>byte</CODE> array
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.EscapeString(System.Byte[],iTextSharp.text.pdf.ByteBuffer)">
             Escapes a <CODE>byte</CODE> array according to the PDF conventions.
            
             @param b the <CODE>byte</CODE> array to escape
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.AddOutline(iTextSharp.text.pdf.PdfOutline)">
             Adds an outline to the document.
            
             @param outline the outline
             @deprecated not needed anymore. The outlines are extracted
             from the root outline
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.AddOutline(iTextSharp.text.pdf.PdfOutline,System.String)">
             Adds a named outline to the document.
            
             @param outline the outline
             @param name the name for the local destination
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.ShowTextAligned(System.Int32,System.String,System.Single,System.Single,System.Single)">
            Shows text right, left or center aligned with rotation.
            @param alignment the alignment can be ALIGN_CENTER, ALIGN_RIGHT or ALIGN_LEFT
            @param text the text to show
            @param x the x pivot position
            @param y the y pivot position
            @param rotation the rotation to be applied in degrees counterclockwise
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.ShowTextAlignedKerned(System.Int32,System.String,System.Single,System.Single,System.Single)">
            Shows text kerned right, left or center aligned with rotation.
            @param alignment the alignment can be ALIGN_CENTER, ALIGN_RIGHT or ALIGN_LEFT
            @param text the text to show
            @param x the x pivot position
            @param y the y pivot position
            @param rotation the rotation to be applied in degrees counterclockwise
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.ConcatCTM(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
             Concatenate a matrix to the current transformation matrix.
             @param a an element of the transformation matrix
             @param b an element of the transformation matrix
             @param c an element of the transformation matrix
             @param d an element of the transformation matrix
             @param e an element of the transformation matrix
             @param f an element of the transformation matrix
            
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfContentByte.BezierArc(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)" -->
        <member name="M:iTextSharp.text.pdf.PdfContentByte.Arc(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
             Draws a partial ellipse inscribed within the rectangle x1,y1,x2,y2,
             starting at startAng degrees and covering extent degrees. Angles
             start with 0 to the right (+x) and increase counter-clockwise.
            
             @param x1 a corner of the enclosing rectangle
             @param y1 a corner of the enclosing rectangle
             @param x2 a corner of the enclosing rectangle
             @param y2 a corner of the enclosing rectangle
             @param startAng starting angle in degrees
             @param extent angle extent in degrees
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.Ellipse(System.Single,System.Single,System.Single,System.Single)">
             Draws an ellipse inscribed within the rectangle x1,y1,x2,y2.
            
             @param x1 a corner of the enclosing rectangle
             @param y1 a corner of the enclosing rectangle
             @param x2 a corner of the enclosing rectangle
             @param y2 a corner of the enclosing rectangle
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.CreatePattern(System.Single,System.Single,System.Single,System.Single)">
             Create a new colored tiling pattern.
            
             @param width the width of the pattern
             @param height the height of the pattern
             @param xstep the desired horizontal spacing between pattern cells.
             May be either positive or negative, but not zero.
             @param ystep the desired vertical spacing between pattern cells.
             May be either positive or negative, but not zero.
             @return the <CODE>PdfPatternPainter</CODE> where the pattern will be created
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.CreatePattern(System.Single,System.Single)">
            Create a new colored tiling pattern. Variables xstep and ystep are set to the same values
            of width and height.
            @param width the width of the pattern
            @param height the height of the pattern
            @return the <CODE>PdfPatternPainter</CODE> where the pattern will be created
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.CreatePattern(System.Single,System.Single,System.Single,System.Single,iTextSharp.text.Color)">
             Create a new uncolored tiling pattern.
            
             @param width the width of the pattern
             @param height the height of the pattern
             @param xstep the desired horizontal spacing between pattern cells.
             May be either positive or negative, but not zero.
             @param ystep the desired vertical spacing between pattern cells.
             May be either positive or negative, but not zero.
             @param color the default color. Can be <CODE>null</CODE>
             @return the <CODE>PdfPatternPainter</CODE> where the pattern will be created
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.CreatePattern(System.Single,System.Single,iTextSharp.text.Color)">
            Create a new uncolored tiling pattern.
            Variables xstep and ystep are set to the same values
            of width and height.
            @param width the width of the pattern
            @param height the height of the pattern
            @param color the default color. Can be <CODE>null</CODE>
            @return the <CODE>PdfPatternPainter</CODE> where the pattern will be created
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfContentByte.CreateTemplate(System.Single,System.Single)" -->
        <member name="M:iTextSharp.text.pdf.PdfContentByte.CreateAppearance(System.Single,System.Single)">
             Creates a new appearance to be used with form fields.
            
             @param width the bounding box width
             @param height the bounding box height
             @return the appearance created
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.AddPSXObject(iTextSharp.text.pdf.PdfPSXObject)">
             Adds a PostScript XObject to this content.
            
             @param psobject the object
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.AddTemplate(iTextSharp.text.pdf.PdfTemplate,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
             Adds a template to this content.
            
             @param template the template
             @param a an element of the transformation matrix
             @param b an element of the transformation matrix
             @param c an element of the transformation matrix
             @param d an element of the transformation matrix
             @param e an element of the transformation matrix
             @param f an element of the transformation matrix
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.AddTemplate(iTextSharp.text.pdf.PdfTemplate,System.Single,System.Single)">
             Adds a template to this content.
            
             @param template the template
             @param x the x location of this template
             @param y the y location of this template
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetCMYKColorFill(System.Int32,System.Int32,System.Int32,System.Int32)">
             Changes the current color for filling paths (device dependent colors!).
             <P>
             Sets the color space to <B>DeviceCMYK</B> (or the <B>DefaultCMYK</B> color space),
             and sets the color to use for filling paths.</P>
             <P>
             This method is described in the 'Portable Document Format Reference Manual version 1.3'
             section 8.5.2.1 (page 331).</P>
             <P>
             Following the PDF manual, each operand must be a number between 0 (no ink) and
             1 (maximum ink). This method however accepts only ints between 0x00 and 0xFF.</P>
            
             @param cyan the intensity of cyan
             @param magenta the intensity of magenta
             @param yellow the intensity of yellow
             @param black the intensity of black
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetCMYKColorStroke(System.Int32,System.Int32,System.Int32,System.Int32)">
             Changes the current color for stroking paths (device dependent colors!).
             <P>
             Sets the color space to <B>DeviceCMYK</B> (or the <B>DefaultCMYK</B> color space),
             and sets the color to use for stroking paths.</P>
             <P>
             This method is described in the 'Portable Document Format Reference Manual version 1.3'
             section 8.5.2.1 (page 331).</P>
             Following the PDF manual, each operand must be a number between 0 (miniumum intensity) and
             1 (maximum intensity). This method however accepts only ints between 0x00 and 0xFF.
            
             @param cyan the intensity of red
             @param magenta the intensity of green
             @param yellow the intensity of blue
             @param black the intensity of black
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetRGBColorFill(System.Int32,System.Int32,System.Int32)">
             Changes the current color for filling paths (device dependent colors!).
             <P>
             Sets the color space to <B>DeviceRGB</B> (or the <B>DefaultRGB</B> color space),
             and sets the color to use for filling paths.</P>
             <P>
             This method is described in the 'Portable Document Format Reference Manual version 1.3'
             section 8.5.2.1 (page 331).</P>
             <P>
             Following the PDF manual, each operand must be a number between 0 (miniumum intensity) and
             1 (maximum intensity). This method however accepts only ints between 0x00 and 0xFF.</P>
            
             @param red the intensity of red
             @param green the intensity of green
             @param blue the intensity of blue
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetRGBColorStroke(System.Int32,System.Int32,System.Int32)">
             Changes the current color for stroking paths (device dependent colors!).
             <P>
             Sets the color space to <B>DeviceRGB</B> (or the <B>DefaultRGB</B> color space),
             and sets the color to use for stroking paths.</P>
             <P>
             This method is described in the 'Portable Document Format Reference Manual version 1.3'
             section 8.5.2.1 (page 331).</P>
             Following the PDF manual, each operand must be a number between 0 (miniumum intensity) and
             1 (maximum intensity). This method however accepts only ints between 0x00 and 0xFF.
            
             @param red the intensity of red
             @param green the intensity of green
             @param blue the intensity of blue
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetColorStroke(iTextSharp.text.Color)">
            Sets the stroke color. <CODE>color</CODE> can be an
            <CODE>ExtendedColor</CODE>.
            @param color the color
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetColorFill(iTextSharp.text.Color)">
            Sets the fill color. <CODE>color</CODE> can be an
            <CODE>ExtendedColor</CODE>.
            @param color the color
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetColorFill(iTextSharp.text.pdf.PdfSpotColor,System.Single)">
            Sets the fill color to a spot color.
            @param sp the spot color
            @param tint the tint for the spot color. 0 is no color and 1
            is 100% color
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetColorStroke(iTextSharp.text.pdf.PdfSpotColor,System.Single)">
            Sets the stroke color to a spot color.
            @param sp the spot color
            @param tint the tint for the spot color. 0 is no color and 1
            is 100% color
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetPatternFill(iTextSharp.text.pdf.PdfPatternPainter)">
            Sets the fill color to a pattern. The pattern can be
            colored or uncolored.
            @param p the pattern
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.OutputColorNumbers(iTextSharp.text.Color,System.Single)">
            Outputs the color values to the content.
            @param color The color
            @param tint the tint if it is a spot color, ignored otherwise
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetPatternFill(iTextSharp.text.pdf.PdfPatternPainter,iTextSharp.text.Color)">
            Sets the fill color to an uncolored pattern.
            @param p the pattern
            @param color the color of the pattern
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetPatternFill(iTextSharp.text.pdf.PdfPatternPainter,iTextSharp.text.Color,System.Single)">
            Sets the fill color to an uncolored pattern.
            @param p the pattern
            @param color the color of the pattern
            @param tint the tint if the color is a spot color, ignored otherwise
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetPatternStroke(iTextSharp.text.pdf.PdfPatternPainter,iTextSharp.text.Color)">
            Sets the stroke color to an uncolored pattern.
            @param p the pattern
            @param color the color of the pattern
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetPatternStroke(iTextSharp.text.pdf.PdfPatternPainter,iTextSharp.text.Color,System.Single)">
            Sets the stroke color to an uncolored pattern.
            @param p the pattern
            @param color the color of the pattern
            @param tint the tint if the color is a spot color, ignored otherwise
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetPatternStroke(iTextSharp.text.pdf.PdfPatternPainter)">
            Sets the stroke color to a pattern. The pattern can be
            colored or uncolored.
            @param p the pattern
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.PaintShading(iTextSharp.text.pdf.PdfShading)">
            Paints using a shading object. 
            @param shading the shading object
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.PaintShading(iTextSharp.text.pdf.PdfShadingPattern)">
            Paints using a shading pattern. 
            @param shading the shading pattern
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetShadingFill(iTextSharp.text.pdf.PdfShadingPattern)">
            Sets the shading fill pattern.
            @param shading the shading pattern
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetShadingStroke(iTextSharp.text.pdf.PdfShadingPattern)">
            Sets the shading stroke pattern
            @param shading the shading pattern
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.CheckWriter">
            Check if we have a valid PdfWriter.
            
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.ShowText(iTextSharp.text.pdf.PdfTextArray)">
            Show an array of text.
            @param text array of text
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.LocalGoto(System.String,System.Single,System.Single,System.Single,System.Single)">
            Implements a link to other part of the document. The jump will
            be made to a local destination with the same name, that must exist.
            @param name the name for this link
            @param llx the lower left x corner of the activation area
            @param lly the lower left y corner of the activation area
            @param urx the upper right x corner of the activation area
            @param ury the upper right y corner of the activation area
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.LocalDestination(System.String,iTextSharp.text.pdf.PdfDestination)">
            The local destination to where a local goto with the same
            name will jump.
            @param name the name of this local destination
            @param destination the <CODE>PdfDestination</CODE> with the jump coordinates
            @return <CODE>true</CODE> if the local destination was added,
            <CODE>false</CODE> if a local destination with the same name
            already exists
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.RemoteGoto(System.String,System.String,System.Single,System.Single,System.Single,System.Single)">
            Implements a link to another document.
            @param filename the filename for the remote document
            @param name the name to jump to
            @param llx the lower left x corner of the activation area
            @param lly the lower left y corner of the activation area
            @param urx the upper right x corner of the activation area
            @param ury the upper right y corner of the activation area
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.RemoteGoto(System.String,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            Implements a link to another document.
            @param filename the filename for the remote document
            @param page the page to jump to
            @param llx the lower left x corner of the activation area
            @param lly the lower left y corner of the activation area
            @param urx the upper right x corner of the activation area
            @param ury the upper right y corner of the activation area
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.RoundRectangle(System.Single,System.Single,System.Single,System.Single,System.Single)">
             Adds a round rectangle to the current path.
            
             @param x x-coordinate of the starting point
             @param y y-coordinate of the starting point
             @param w width
             @param h height
             @param r radius of the arc corner
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetAction(iTextSharp.text.pdf.PdfAction,System.Single,System.Single,System.Single,System.Single)">
            Implements an action in an area.
            @param action the <CODE>PdfAction</CODE>
            @param llx the lower left x corner of the activation area
            @param lly the lower left y corner of the activation area
            @param urx the upper right x corner of the activation area
            @param ury the upper right y corner of the activation area
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetLiteral(System.String)">
            Outputs a <CODE>string</CODE> directly to the content.
            @param s the <CODE>string</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetLiteral(System.Char)">
            Outputs a <CODE>char</CODE> directly to the content.
            @param c the <CODE>char</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetLiteral(System.Single)">
            Outputs a <CODE>float</CODE> directly to the content.
            @param n the <CODE>float</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.CheckNoPattern(iTextSharp.text.pdf.PdfTemplate)">
            Throws an error if it is a pattern.
            @param t the object to check
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.DrawRadioField(System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            Draws a TextField.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.DrawTextField(System.Single,System.Single,System.Single,System.Single)">
            Draws a TextField.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.DrawButton(System.Single,System.Single,System.Single,System.Single,System.String,iTextSharp.text.pdf.BaseFont,System.Single)">
            Draws a button.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetGState(iTextSharp.text.pdf.PdfGState)">
            Sets the graphic state
            @param gstate the graphic state
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfContentByte.BeginLayer(iTextSharp.text.pdf.IPdfOCG)" -->
        <member name="M:iTextSharp.text.pdf.PdfContentByte.EndLayer">
            Ends a layer controled graphic block. It will end the most recent open block.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContentByte.SetDefaultColorspace(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfObject)">
            Sets the default colorspace.
            @param name the name of the colorspace. It can be <CODE>PdfName.DEFAULTGRAY</CODE>, <CODE>PdfName.DEFAULTRGB</CODE>
            or <CODE>PdfName.DEFAULTCMYK</CODE>
            @param obj the colorspace. A <CODE>null</CODE> or <CODE>PdfNull</CODE> removes any colorspace with the same name
        </member>
        <member name="P:iTextSharp.text.pdf.PdfContentByte.InternalBuffer">
            Gets the internal buffer.
            @return the internal buffer
        </member>
        <member name="P:iTextSharp.text.pdf.PdfContentByte.XTLM">
             Gets the x position of the text line matrix.
            
             @return the x position of the text line matrix
        </member>
        <member name="P:iTextSharp.text.pdf.PdfContentByte.YTLM">
             Gets the y position of the text line matrix.
            
             @return the y position of the text line matrix
        </member>
        <member name="P:iTextSharp.text.pdf.PdfContentByte.Leading">
             Gets the current text leading.
            
             @return the current text leading
        </member>
        <member name="P:iTextSharp.text.pdf.PdfContentByte.Size">
             Gets the size of this content.
            
             @return the size of the content
        </member>
        <member name="P:iTextSharp.text.pdf.PdfContentByte.RootOutline">
             Gets the root outline.
            
             @return the root outline
        </member>
        <member name="P:iTextSharp.text.pdf.PdfContentByte.PdfWriter">
            Gets the <CODE>PdfWriter</CODE> in use by this object.
            @return the <CODE>PdfWriter</CODE> in use by this object
        </member>
        <member name="P:iTextSharp.text.pdf.PdfContentByte.PdfDocument">
            Gets the <CODE>PdfDocument</CODE> in use by this object.
            @return the <CODE>PdfDocument</CODE> in use by this object
        </member>
        <member name="P:iTextSharp.text.pdf.PdfContentByte.Duplicate">
             Gets a duplicate of this <CODE>PdfContentByte</CODE>. All
             the members are copied by reference but the buffer stays different.
            
             @return a copy of this <CODE>PdfContentByte</CODE>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfContentByte.GraphicState">
            This class keeps the graphic state of the current page
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.GraphicState.fontDetails">
            This is the font in use 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.GraphicState.colorDetails">
            This is the color in use 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.GraphicState.size">
            This is the font size in use 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.GraphicState.xTLM">
            The x position of the text line matrix. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.GraphicState.yTLM">
            The y position of the text line matrix. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfContentByte.GraphicState.leading">
            The current text leading. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTemplate.thisReference">
            The indirect reference to this template 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTemplate.pageResources">
            The resources used by this template 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTemplate.bBox">
            The bounding box of this template 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfTemplate.#ctor">
            Creates a <CODE>PdfTemplate</CODE>.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfTemplate.#ctor(iTextSharp.text.pdf.PdfWriter)">
             Creates new PdfTemplate
            
             @param wr the <CODE>PdfWriter</CODE>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfTemplate.Width">
             Gets the bounding width of this template.
            
             @return width the bounding width
        </member>
        <member name="P:iTextSharp.text.pdf.PdfTemplate.Height">
             Gets the bounding heigth of this template.
            
             @return heigth the bounding height
        </member>
        <member name="P:iTextSharp.text.pdf.PdfTemplate.Layer">
            Gets the layer this template belongs to.
            @return the layer this template belongs to or <code>null</code> for no layer defined
        </member>
        <member name="P:iTextSharp.text.pdf.PdfTemplate.IndirectReference">
             Gets the indirect reference to this template.
            
             @return the indirect reference to this template
        </member>
        <member name="P:iTextSharp.text.pdf.PdfTemplate.Resources">
             Constructs the resources used by this template.
            
             @return the resources used by this template
        </member>
        <member name="P:iTextSharp.text.pdf.PdfTemplate.FormXObject">
             Gets the stream representing this template.
            
             @return the stream representing this template
        </member>
        <member name="P:iTextSharp.text.pdf.PdfTemplate.Duplicate">
            Gets a duplicate of this <CODE>PdfTemplate</CODE>. All
            the members are copied by reference but the buffer stays different.
            @return a copy of this <CODE>PdfTemplate</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAppearance.#ctor">
            Creates a <CODE>PdfAppearance</CODE>.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAppearance.#ctor(iTextSharp.text.pdf.PdfWriter)">
             Creates new PdfTemplate
            
             @param wr the <CODE>PdfWriter</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfAppearance.SetFontAndSize(iTextSharp.text.pdf.BaseFont,System.Single)">
             Set the font and the size for the subsequent text writing.
            
             @param bf the font
             @param size the font size in points
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.pdf.PdfArray" -->
        <member name="F:iTextSharp.text.pdf.PdfArray.arrayList">
            this is the actual array of PdfObjects 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfArray.#ctor">
            Constructs an empty <CODE>PdfArray</CODE>-object.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfArray.#ctor(iTextSharp.text.pdf.PdfObject)">
             Constructs an <CODE>PdfArray</CODE>-object, containing 1 <CODE>PdfObject</CODE>.
            
             @param    object        a <CODE>PdfObject</CODE> that has to be added to the array
        </member>
        <member name="M:iTextSharp.text.pdf.PdfArray.#ctor(iTextSharp.text.pdf.PdfArray)">
             Constructs an <CODE>PdfArray</CODE>-object, containing all the <CODE>PdfObject</CODE>s in a given <CODE>PdfArray</CODE>.
            
             @param    array        a <CODE>PdfArray</CODE> that has to be added to the array
        </member>
        <member name="M:iTextSharp.text.pdf.PdfArray.ToPdf(iTextSharp.text.pdf.PdfWriter,System.IO.Stream)">
             Returns the PDF representation of this <CODE>PdfArray</CODE>.
            
             @return        an array of <CODE>byte</CODE>s
        </member>
        <member name="M:iTextSharp.text.pdf.PdfArray.Add(iTextSharp.text.pdf.PdfObject)">
             Adds a <CODE>PdfObject</CODE> to the <CODE>PdfArray</CODE>.
            
             @param        object            <CODE>PdfObject</CODE> to add
             @return        <CODE>true</CODE>
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfArray.AddFirst(iTextSharp.text.pdf.PdfObject)" -->
        <member name="M:iTextSharp.text.pdf.PdfArray.Contains(iTextSharp.text.pdf.PdfObject)">
             Checks if the <CODE>PdfArray</CODE> allready contains a certain <CODE>PdfObject</CODE>.
            
             @param        object            <CODE>PdfObject</CODE> to check
             @return        <CODE>true</CODE>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfArray.ArrayList">
             Returns an ArrayList containing <CODE>PdfObject</CODE>s.
            
             @return        an ArrayList
        </member>
        <member name="P:iTextSharp.text.pdf.PdfArray.Size">
             Returns the number of entries in the array.
            
             @return        the size of the ArrayList
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.pdf.PdfBoolean" -->
        <member name="F:iTextSharp.text.pdf.PdfBoolean.TRUE">
            A possible value of <CODE>PdfBoolean</CODE> 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfBoolean.FALSE">
            A possible value of <CODE>PdfBoolean</CODE> 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfBoolean.value">
            the bool value of this object 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfBoolean.#ctor(System.Boolean)">
             Constructs a <CODE>PdfBoolean</CODE>-object.
            
             @param        value            the value of the new <CODE>PdfObject</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfBoolean.#ctor(System.String)">
             Constructs a <CODE>PdfBoolean</CODE>-object.
            
             @param        value            the value of the new <CODE>PdfObject</CODE>, represented as a <CODE>string</CODE>
            
             @throws        BadPdfFormatException    thrown if the <VAR>value</VAR> isn't '<CODE>true</CODE>' or '<CODE>false</CODE>'
        </member>
        <member name="P:iTextSharp.text.pdf.PdfBoolean.BooleanValue">
             Returns the primitive value of the <CODE>PdfBoolean</CODE>-object.
            
             @return        the actual value of the object.
        </member>
        <member name="T:iTextSharp.text.pdf.PdfBorderArray">
             A <CODE>PdfBorderArray</CODE> defines the border of a <CODE>PdfAnnotation</CODE>.
            
             @see        PdfArray
        </member>
        <member name="M:iTextSharp.text.pdf.PdfBorderArray.#ctor(System.Single,System.Single,System.Single)">
            Constructs a new <CODE>PdfBorderArray</CODE>.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfBorderArray.#ctor(System.Single,System.Single,System.Single,iTextSharp.text.pdf.PdfDashPattern)">
            Constructs a new <CODE>PdfBorderArray</CODE>.
        </member>
        <member name="T:iTextSharp.text.pdf.PdfBorderDictionary">
             A <CODE>PdfBorderDictionary</CODE> define the appearance of a Border (Annotations).
            
             @see     PdfDictionary
        </member>
        <member name="M:iTextSharp.text.pdf.PdfBorderDictionary.#ctor(System.Single,System.Int32,iTextSharp.text.pdf.PdfDashPattern)">
            Constructs a <CODE>PdfBorderDictionary</CODE>.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.pdf.PdfCell" -->
        <member name="T:iTextSharp.text.Rectangle">
            <summary>
            A Rectangle is the representation of a geometric figure.
            </summary>
            <seealso cref="T:iTextSharp.text.Element"/>
            <seealso cref="T:iTextSharp.text.Table"/>
            <seealso cref="T:iTextSharp.text.Cell"/>
            <seealso cref="T:iTextSharp.text.HeaderFooter"/>
        </member>
        <member name="T:iTextSharp.text.Element">
            <summary>
            Interface for a text element.
            </summary>
            <seealso cref="T:iTextSharp.text.Anchor"/>
            <seealso cref="T:iTextSharp.text.Cell"/>
            <seealso cref="T:iTextSharp.text.Chapter"/>
            <seealso cref="T:iTextSharp.text.Chunk"/>
            <seealso cref="T:iTextSharp.text.Gif"/>
            <seealso cref="T:iTextSharp.text.Graphic"/>
            <seealso cref="T:iTextSharp.text.Header"/>
            <seealso cref="T:iTextSharp.text.Image"/>
            <seealso cref="T:iTextSharp.text.Jpeg"/>
            <seealso cref="T:iTextSharp.text.List"/>
            <seealso cref="T:iTextSharp.text.ListItem"/>
            <seealso cref="T:iTextSharp.text.Meta"/>
            <seealso cref="T:iTextSharp.text.Paragraph"/>
            <seealso cref="T:iTextSharp.text.Phrase"/>
            <seealso cref="T:iTextSharp.text.Rectangle"/>
            <seealso cref="T:iTextSharp.text.Row"/>
            <seealso cref="T:iTextSharp.text.Section"/>
            <seealso cref="T:iTextSharp.text.Table"/>
        </member>
        <member name="F:iTextSharp.text.Element.HEADER">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.TITLE">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.SUBJECT">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.KEYWORDS">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.AUTHOR">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.PRODUCER">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.CREATIONDATE">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.CREATOR">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.CHUNK">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.PHRASE">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.PARAGRAPH">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.SECTION">
            <summary> This is a possible type of Element </summary>
        </member>
        <member name="F:iTextSharp.text.Element.LIST">
            <summary> This is a possible type of Element </summary>
        </member>
        <member name="F:iTextSharp.text.Element.LISTITEM">
            <summary> This is a possible type of Element </summary>
        </member>
        <member name="F:iTextSharp.text.Element.CHAPTER">
            <summary> This is a possible type of Element </summary>
        </member>
        <member name="F:iTextSharp.text.Element.ANCHOR">
            <summary> This is a possible type of Element </summary>
        </member>
        <member name="F:iTextSharp.text.Element.CELL">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.ROW">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.TABLE">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.PTABLE">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.ANNOTATION">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.RECTANGLE">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.JPEG">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.IMGRAW">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.IMGTEMPLATE">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.GRAPHIC">
            <summary> This is a possible type of Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.MULTI_COLUMN_TEXT">
            <summary> This is a possible type of <CODE>Element</CODE>. </summary>
        </member>
        <member name="F:iTextSharp.text.Element.ALIGN_UNDEFINED">
            <summary>
            A possible value for paragraph Element.  This
            specifies that the text is aligned to the left
            indent and extra whitespace should be placed on
            the right.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Element.ALIGN_LEFT">
            <summary>
            A possible value for paragraph Element.  This
            specifies that the text is aligned to the left
            indent and extra whitespace should be placed on
            the right.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Element.ALIGN_CENTER">
            <summary>
            A possible value for paragraph Element.  This
            specifies that the text is aligned to the center
            and extra whitespace should be placed equally on
            the left and right.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Element.ALIGN_RIGHT">
            <summary>
            A possible value for paragraph Element.  This
            specifies that the text is aligned to the right
            indent and extra whitespace should be placed on
            the left.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Element.ALIGN_JUSTIFIED">
            <summary>
            A possible value for paragraph Element.  This
            specifies that extra whitespace should be spread
            out through the rows of the paragraph with the
            text lined up with the left and right indent
            except on the last line which should be aligned
            to the left.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Element.ALIGN_TOP">
            <summary>
            A possible value for vertical Element.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Element.ALIGN_MIDDLE">
            <summary>
            A possible value for vertical Element.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Element.ALIGN_BOTTOM">
            <summary>
            A possible value for vertical Element.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Element.ALIGN_BASELINE">
            <summary>
            A possible value for vertical Element.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Element.ALIGN_JUSTIFIED_ALL">
            <summary>
            Does the same as ALIGN_JUSTIFIED but the last line is also spread out.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Element.CCITTG4">
            <summary>
            Pure two-dimensional encoding (Group 4)
            </summary>
        </member>
        <member name="F:iTextSharp.text.Element.CCITTG3_1D">
            <summary>
            Pure one-dimensional encoding (Group 3, 1-D)
            </summary>
        </member>
        <member name="F:iTextSharp.text.Element.CCITTG3_2D">
            <summary>
            Mixed one- and two-dimensional encoding (Group 3, 2-D)
            </summary>
        </member>
        <member name="F:iTextSharp.text.Element.CCITT_BLACKIS1">
            <summary>
            A flag indicating whether 1-bits are to be interpreted as black pixels
            and 0-bits as white pixels,
            </summary>
        </member>
        <member name="F:iTextSharp.text.Element.CCITT_ENCODEDBYTEALIGN">
            <summary>
            A flag indicating whether the filter expects extra 0-bits before each
            encoded line so that the line begins on a byte boundary.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Element.CCITT_ENDOFLINE">
            <summary>
            A flag indicating whether end-of-line bit patterns are required to be
             present in the encoding.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Element.CCITT_ENDOFBLOCK">
            <summary>
            A flag indicating whether the filter expects the encoded data to be
            terminated by an end-of-block pattern, overriding the Rows
            parameter. The use of this flag will set the key /EndOfBlock to false.
            </summary>
        </member>
        <member name="T:iTextSharp.text.IMarkupAttributes">
            <summary>
            Defines the interface for an Element with markup attributes--
            that is, random String-to-String properties for representation in markup
            languages such as HTML and XML.
            </summary>
        </member>
        <member name="M:iTextSharp.text.IMarkupAttributes.SetMarkupAttribute(System.String,System.String)">
            <summary>
            Sets the specified attribute.
            </summary>
            <param name="name">attribute name</param>
            <param name="value">attribute value</param>
        </member>
        <member name="M:iTextSharp.text.IMarkupAttributes.GetMarkupAttribute(System.String)">
            <summary>
            Returns the value of the specified attribute.
            </summary>
            <param name="name">attribute name</param>
            <returns>attribute value</returns>
        </member>
        <member name="P:iTextSharp.text.IMarkupAttributes.MarkupAttributeNames">
            <summary>
            Returns a collection of string attribute names for the
            IMarkupAttributes implementor.
            </summary>
        </member>
        <member name="P:iTextSharp.text.IMarkupAttributes.MarkupAttributes">
            <summary>
            a Properties-object containing all the markupAttributes.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Rectangle.UNDEFINED">
            <summary> This is the value that will be used as <VAR>undefined</VAR>. </summary>
        </member>
        <member name="F:iTextSharp.text.Rectangle.TOP_BORDER">
            <summary> This represents one side of the border of the Rectangle. </summary>
        </member>
        <member name="F:iTextSharp.text.Rectangle.BOTTOM_BORDER">
            <summary> This represents one side of the border of the Rectangle. </summary>
        </member>
        <member name="F:iTextSharp.text.Rectangle.LEFT_BORDER">
            <summary> This represents one side of the border of the Rectangle. </summary>
        </member>
        <member name="F:iTextSharp.text.Rectangle.RIGHT_BORDER">
            <summary> This represents one side of the border of the Rectangle. </summary>
        </member>
        <member name="F:iTextSharp.text.Rectangle.NO_BORDER">
            <summary> This represents a rectangle without borders. </summary>
        </member>
        <member name="F:iTextSharp.text.Rectangle.BOX">
            <summary> This represents a type of border. </summary>
        </member>
        <member name="F:iTextSharp.text.Rectangle.llx">
            <summary> the lower left x-coordinate. </summary>
        </member>
        <member name="F:iTextSharp.text.Rectangle.lly">
            <summary> the lower left y-coordinate. </summary>
        </member>
        <member name="F:iTextSharp.text.Rectangle.urx">
            <summary> the upper right x-coordinate. </summary>
        </member>
        <member name="F:iTextSharp.text.Rectangle.ury">
            <summary> the upper right y-coordinate. </summary>
        </member>
        <member name="F:iTextSharp.text.Rectangle.border">
            <summary> This represents the status of the 4 sides of the rectangle. </summary>
        </member>
        <member name="F:iTextSharp.text.Rectangle.borderWidth">
            <summary> This is the width of the border around this rectangle. </summary>
        </member>
        <member name="F:iTextSharp.text.Rectangle.color">
            <summary> This is the color of the border of this rectangle. </summary>
        </member>
        <member name="F:iTextSharp.text.Rectangle.borderColorLeft">
            The color of the left border of this rectangle. 
        </member>
        <member name="F:iTextSharp.text.Rectangle.borderColorRight">
            The color of the right border of this rectangle. 
        </member>
        <member name="F:iTextSharp.text.Rectangle.borderColorTop">
            The color of the top border of this rectangle. 
        </member>
        <member name="F:iTextSharp.text.Rectangle.borderColorBottom">
            The color of the bottom border of this rectangle. 
        </member>
        <member name="F:iTextSharp.text.Rectangle.borderWidthLeft">
            The width of the left border of this rectangle. 
        </member>
        <member name="F:iTextSharp.text.Rectangle.borderWidthRight">
            The width of the right border of this rectangle. 
        </member>
        <member name="F:iTextSharp.text.Rectangle.borderWidthTop">
            The width of the top border of this rectangle. 
        </member>
        <member name="F:iTextSharp.text.Rectangle.borderWidthBottom">
            The width of the bottom border of this rectangle. 
        </member>
        <member name="F:iTextSharp.text.Rectangle.useVariableBorders">
            Whether variable width borders are used. 
        </member>
        <member name="F:iTextSharp.text.Rectangle.background">
            <summary> This is the color of the background of this rectangle. </summary>
        </member>
        <member name="F:iTextSharp.text.Rectangle.grayFill">
            <summary> This is the grayscale value of the background of this rectangle. </summary>
        </member>
        <member name="F:iTextSharp.text.Rectangle.rotation">
            <summary> This is the rotation value of this rectangle. </summary>
        </member>
        <member name="F:iTextSharp.text.Rectangle.markupAttributes">
            <summary> Contains extra markupAttributes </summary>
        </member>
        <member name="M:iTextSharp.text.Rectangle.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a Rectangle-object.
            </summary>
            <param name="llx">lower left x</param>
            <param name="lly">lower left y</param>
            <param name="urx">upper right x</param>
            <param name="ury">upper right y</param>
        </member>
        <member name="M:iTextSharp.text.Rectangle.#ctor(System.Single,System.Single)">
            <summary>
            Constructs a Rectangle-object starting from the origin (0, 0).
            </summary>
            <param name="urx">upper right x</param>
            <param name="ury">upper right y</param>
        </member>
        <member name="M:iTextSharp.text.Rectangle.#ctor(iTextSharp.text.Rectangle)">
            <summary>
            Constructs a Rectangle-object.
            </summary>
            <param name="rect">another Rectangle</param>
        </member>
        <member name="M:iTextSharp.text.Rectangle.CloneNonPositionParameters(iTextSharp.text.Rectangle)">
            Copies all of the parameters from a <CODE>Rectangle</CODE> object
            except the position.
            
            @param rect
                       <CODE>Rectangle</CODE> to copy from
        </member>
        <member name="M:iTextSharp.text.Rectangle.SoftCloneNonPositionParameters(iTextSharp.text.Rectangle)">
            Copies all of the parameters from a <CODE>Rectangle</CODE> object
            except the position.
            
            @param rect
                       <CODE>Rectangle</CODE> to copy from
        </member>
        <member name="M:iTextSharp.text.Rectangle.Process(iTextSharp.text.IElementListener)">
            <summary>
            Processes the element by adding it (or the different parts) to an
            IElementListener.
            </summary>
            <param name="listener">an IElementListener</param>
            <returns>true if the element was processed successfully</returns>
        </member>
        <member name="M:iTextSharp.text.Rectangle.Normalize">
            Switches lowerleft with upperright
        </member>
        <member name="M:iTextSharp.text.Rectangle.GetRectangle(System.Single,System.Single)">
            <summary>
            Gets a Rectangle that is altered to fit on the page.
            </summary>
            <param name="top">the top position</param>
            <param name="bottom">the bottom position</param>
            <returns>a Rectangle</returns>
        </member>
        <member name="M:iTextSharp.text.Rectangle.Rotate">
            <summary>
            Swaps the values of urx and ury and of lly and llx in order to rotate the rectangle.
            </summary>
            <returns>a Rectangle</returns>
        </member>
        <member name="M:iTextSharp.text.Rectangle.EnableBorderSide(System.Int32)">
            Enables the border on the specified side.
            
            @param side
                       the side to enable. One of <CODE>LEFT, RIGHT, TOP, BOTTOM
                       </CODE>
        </member>
        <member name="M:iTextSharp.text.Rectangle.DisableBorderSide(System.Int32)">
            Disables the border on the specified side.
            
            @param side
                       the side to disable. One of <CODE>LEFT, RIGHT, TOP, BOTTOM
                       </CODE>
        </member>
        <member name="M:iTextSharp.text.Rectangle.GetLeft(System.Single)">
            <summary>
            Returns the lower left x-coordinate, considering a given margin.
            </summary>
            <param name="margin">a margin</param>
            <returns>the lower left x-coordinate</returns>
        </member>
        <member name="M:iTextSharp.text.Rectangle.GetRight(System.Single)">
            <summary>
            Returns the upper right x-coordinate, considering a given margin.
            </summary>
            <param name="margin">a margin</param>
            <returns>the upper right x-coordinate</returns>
        </member>
        <member name="M:iTextSharp.text.Rectangle.GetTop(System.Single)">
            <summary>
            Returns the upper right y-coordinate, considering a given margin.
            </summary>
            <param name="margin">a margin</param>
            <returns>the upper right y-coordinate</returns>
        </member>
        <member name="M:iTextSharp.text.Rectangle.GetBottom(System.Single)">
            <summary>
            Returns the lower left y-coordinate, considering a given margin.
            </summary>
            <param name="margin">a margin</param>
            <returns>the lower left y-coordinate</returns>
        </member>
        <member name="M:iTextSharp.text.Rectangle.HasBorders">
            <summary>
            Indicates if the table has borders.
            </summary>
            <returns>a bool</returns>
        </member>
        <member name="M:iTextSharp.text.Rectangle.HasBorder(System.Int32)">
            <summary>
            Indicates if the table has a some type of border.
            </summary>
            <param name="type">the type of border</param>
            <returns>a bool</returns>
        </member>
        <member name="M:iTextSharp.text.Rectangle.SetMarkupAttribute(System.String,System.String)">
            <summary>
            See <see cref="M:iTextSharp.text.IMarkupAttributes.SetMarkupAttribute(System.String,System.String)"/>
            </summary>
            <param name="name">attribute name</param>
            <param name="value">attribute value</param>
        </member>
        <member name="M:iTextSharp.text.Rectangle.GetMarkupAttribute(System.String)">
            <summary>
            See <see cref="M:iTextSharp.text.IMarkupAttributes.GetMarkupAttribute(System.String)"/>
            </summary>
            <param name="name">attribute name</param>
            <returns>attribute value</returns>
        </member>
        <member name="M:iTextSharp.text.Rectangle.UpdateBorderBasedOnWidth(System.Single,System.Int32)">
            Updates the border flag for a side based on the specified width. A width
            of 0 will disable the border on that side. Any other width enables it.
            
            @param width
                       width of border
            @param side
                       border side constant
        </member>
        <member name="P:iTextSharp.text.Rectangle.Type">
            <summary>
            Gets the type of the text element.
            </summary>
            <value>a type</value>
        </member>
        <member name="P:iTextSharp.text.Rectangle.Chunks">
            <summary>
            Gets all the chunks in this element.
            </summary>
            <value>an ArrayList</value>
        </member>
        <member name="P:iTextSharp.text.Rectangle.Top">
            <summary>
            Get/set the upper right y-coordinate. 
            </summary>
            <value>a float</value>
        </member>
        <member name="P:iTextSharp.text.Rectangle.Border">
            <summary>
            Get/set the border
            </summary>
            <value>a int</value>
        </member>
        <member name="P:iTextSharp.text.Rectangle.GrayFill">
            <summary>
            Get/set the grayscale of the rectangle.
            </summary>
            <value>a float</value>
        </member>
        <member name="P:iTextSharp.text.Rectangle.Left">
            <summary>
            Get/set the lower left x-coordinate.
            </summary>
            <value>a float</value>
        </member>
        <member name="P:iTextSharp.text.Rectangle.Right">
            <summary>
            Get/set the upper right x-coordinate.
            </summary>
            <value>a float</value>
        </member>
        <member name="P:iTextSharp.text.Rectangle.Bottom">
            <summary>
            Get/set the lower left y-coordinate.
            </summary>
            <value>a float</value>
        </member>
        <member name="P:iTextSharp.text.Rectangle.Width">
            <summary>
            Returns the width of the rectangle.
            </summary>
            <value>a width</value>
        </member>
        <member name="P:iTextSharp.text.Rectangle.Height">
            <summary>
            Returns the height of the rectangle.
            </summary>
            <value>a height</value>
        </member>
        <member name="P:iTextSharp.text.Rectangle.BorderWidth">
            <summary>
            Get/set the borderwidth.
            </summary>
            <value>a float</value>
        </member>
        <member name="P:iTextSharp.text.Rectangle.BorderColor">
             Gets the color of the border.
            
             @return    a value
            <summary>
            Get/set the color of the border.
            </summary>
            <value>a Color</value>
        </member>
        <member name="P:iTextSharp.text.Rectangle.BackgroundColor">
             Gets the backgroundcolor.
            
             @return    a value
            <summary>
            Get/set the backgroundcolor.
            </summary>
            <value>a Color</value>
        </member>
        <member name="P:iTextSharp.text.Rectangle.Rotation">
            <summary>
            Returns the rotation
            </summary>
            <value>a int</value>    
        </member>
        <member name="P:iTextSharp.text.Rectangle.MarkupAttributeNames">
            <summary>
            See <see cref="P:iTextSharp.text.IMarkupAttributes.MarkupAttributeNames"/>
            </summary>
            <value>a collection of string attribute names</value>
        </member>
        <member name="P:iTextSharp.text.Rectangle.MarkupAttributes">
            <summary>
            See <see cref="P:iTextSharp.text.IMarkupAttributes.MarkupAttributes"/>
            </summary>
            <value>a Properties-object containing all the markupAttributes.</value>
        </member>
        <member name="P:iTextSharp.text.Rectangle.UseVariableBorders">
            Sets a parameter indicating if the rectangle has variable borders
            
            @param useVariableBorders
                       indication if the rectangle has variable borders
        </member>
        <member name="F:iTextSharp.text.pdf.PdfCell.lines">
            These are the PdfLines in the Cell. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfCell.line">
            These are the PdfLines in the Cell. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfCell.images">
            These are the Images in the Cell. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfCell.leading">
            This is the leading of the lines. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfCell.rownumber">
            This is the number of the row the cell is in. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfCell.rowspan">
            This is the rowspan of the cell. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfCell.cellspacing">
            This is the cellspacing of the cell. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfCell.cellpadding">
            This is the cellpadding of the cell. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfCell.header">
            Indicates if this cell belongs to the header of a <CODE>PdfTable</CODE> 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfCell.contentHeight">
            This is the total height of the content of the cell.  Note that the actual cell
            height may be larger due to another cell on the row *
        </member>
        <member name="F:iTextSharp.text.pdf.PdfCell.useAscender">
            Indicates that the largest ascender height should be used to
            determine the height of the first line. Setting this to true can help
            with vertical alignment problems. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfCell.useDescender">
            Indicates that the largest descender height should be added to the height of
            the last line (so characters like y don't dip into the border). 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfCell.useBorderPadding">
            Adjusts the cell contents to compensate for border widths.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCell.#ctor(iTextSharp.text.Cell,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
             Constructs a <CODE>PdfCell</CODE>-object.
            
             @param   cell        the original <CODE>Cell</CODE>
             @param   rownumber   the number of the <CODE>Row</CODE> the <CODE>Cell</CODE> was in.
             @param   left        the left border of the <CODE>PdfCell</CODE>
             @param   right       the right border of the <CODE>PdfCell</CODE>
             @param   top         the top border of the <CODE>PdfCell</CODE>
             @param   cellspacing the cellspacing of the <CODE>Table</CODE>
             @param   cellpadding the cellpadding of the <CODE>Table</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCell.GetBorderWidthInside(System.Int32)">
            Gets the amount of the border for the specified side that is inside the Rectangle.
            For non-variable width borders this is only 1/2 the border width on that side.  This
            always returns 0 if {@link #useBorderPadding} is false;
            @param side the side to check.  One of the side constants in {@link com.lowagie.text.Rectangle}
            @return the borderwidth inside the cell
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCell.AddImage(iTextSharp.text.Image,System.Single,System.Single,System.Single,System.Int32)">
             Adds an image to this Cell.
            
             @param i           the image to add
             @param left        the left border
             @param right       the right border
             @param extraHeight extra height to add above image
             @param alignment   horizontal alignment (constant from Element class)
             @return the height of the image
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfCell.GetLines(System.Single,System.Single)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfCell.GetImages(System.Single,System.Single)" -->
        <member name="M:iTextSharp.text.pdf.PdfCell.SetHeader">
             Checks if this cell belongs to the header of a <CODE>PdfTable</CODE>.
            
             @return  <CODE>void</CODE>
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfCell.MayBeRemoved" -->
        <member name="M:iTextSharp.text.pdf.PdfCell.ProcessActions(iTextSharp.text.IElement,iTextSharp.text.pdf.PdfAction,System.Collections.ArrayList)">
            Processes all actions contained in the cell.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfCell.groupNumber">
            This is the number of the group the cell is in.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCell.Rectangle(System.Single,System.Single)">
             Gets a Rectangle that is altered to fit on the page.
            
             @param    top     the top position
             @param    bottom  the bottom position
             @return   a <CODE>Rectangle</CODE>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCell.Left">
             Returns the lower left x-coordinaat.
            
             @return      the lower left x-coordinaat
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCell.Right">
             Returns the upper right x-coordinate.
            
             @return      the upper right x-coordinate
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCell.Top">
             Returns the upper right y-coordinate.
            
             @return      the upper right y-coordinate
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCell.Bottom">
             Returns the lower left y-coordinate.
            
             @return      the lower left y-coordinate
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCell.FirstLineRealHeight">
            Calculates what the height of the first line should be so that the content will be
            flush with the top.  For text, this is the height of the ascender.  For an image,
            it is the actual height of the image.
            @return the real height of the first line
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCell.Header">
            Indicates that this cell belongs to the header of a <CODE>PdfTable</CODE>.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCell.Size">
             Returns the number of lines in the cell.
            
             @return  a value
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCell.RemainingLines">
             Returns the number of lines in the cell that are not empty.
            
             @return  a value
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCell.RemainingHeight">
             Returns the height needed to draw the remaining text.
            
             @return  a height
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCell.Leading">
             Gets the leading of a cell.
            
             @return  the leading of the lines is the cell.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCell.Rownumber">
             Gets the number of the row this cell is in..
            
             @return  a number
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCell.Rowspan">
             Gets the rowspan of a cell.
            
             @return  the rowspan of the cell
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCell.Cellspacing">
             Gets the cellspacing of a cell.
            
             @return  a value
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCell.Cellpadding">
             Gets the cellpadding of a cell..
            
             @return  a value
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCell.GroupNumber">
             Gets the number of the group this cell is in..
            
             @return   a number
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCell.UseAscender">
            Gets the value of {@link #useAscender}
            @return useAscender
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCell.UseDescender">
            Gets the value of {@link #useDescender}
            @return useDescender
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCell.UseBorderPadding">
            Sets the value of {@link #useBorderPadding}.
            @param use adjust layour for borders if true
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.pdf.PdfChunk" -->
        <member name="T:iTextSharp.text.ISplitCharacter">
            <summary>
            Interface for customizing the split character.
            </summary>
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.ISplitCharacter.IsSplitCharacter(System.Int32,System.Int32,System.Int32,System.Char[],iTextSharp.text.pdf.PdfChunk[])" -->
        <member name="F:iTextSharp.text.pdf.PdfChunk.keysAttributes">
            The allowed attributes in variable <CODE>attributes</CODE>. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfChunk.keysNoStroke">
            The allowed attributes in variable <CODE>noStroke</CODE>. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfChunk.value">
            The value of this object. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfChunk.encoding">
            The encoding. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfChunk.font">
            The font for this <CODE>PdfChunk</CODE>. 
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "F:iTextSharp.text.pdf.PdfChunk.attributes" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "F:iTextSharp.text.pdf.PdfChunk.noStroke" -->
        <member name="F:iTextSharp.text.pdf.PdfChunk.newlineSplit">
            <CODE>true</CODE> if the chunk split was cause by a newline. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfChunk.image">
            The image in this <CODE>PdfChunk</CODE>, if it has one 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfChunk.offsetX">
            The offset in the x direction for the image 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfChunk.offsetY">
            The offset in the y direction for the image 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfChunk.changeLeading">
            Indicates if the height and offset of the Image has to be taken into account 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfChunk.#ctor(System.String,iTextSharp.text.pdf.PdfChunk)">
             Constructs a <CODE>PdfChunk</CODE>-object.
            
             @param string the content of the <CODE>PdfChunk</CODE>-object
             @param font the <CODE>PdfFont</CODE>
             @param attributes the metrics attributes
             @param noStroke the non metric attributes
        </member>
        <member name="M:iTextSharp.text.pdf.PdfChunk.#ctor(iTextSharp.text.Chunk,iTextSharp.text.pdf.PdfAction)">
             Constructs a <CODE>PdfChunk</CODE>-object.
            
             @param chunk the original <CODE>Chunk</CODE>-object
             @param action the <CODE>PdfAction</CODE> if the <CODE>Chunk</CODE> comes from an <CODE>Anchor</CODE>
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfChunk.GetUnicodeEquivalent(System.Char)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfChunk.Split(System.Single)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfChunk.Truncate(System.Single)" -->
        <member name="M:iTextSharp.text.pdf.PdfChunk.IsNewlineSplit">
            Checks if the <CODE>PdfChunk</CODE> split was caused by a newline.
            @return <CODE>true</CODE> if the <CODE>PdfChunk</CODE> split was caused by a newline.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfChunk.GetWidthCorrected(System.Single,System.Single)">
            Gets the width of the <CODE>PdfChunk</CODE> taking into account the
            extra character and word spacing.
            @param charSpacing the extra character spacing
            @param wordSpacing the extra word spacing
            @return the calculated width
        </member>
        <member name="M:iTextSharp.text.pdf.PdfChunk.TrimLastSpace">
            Trims the last space.
            @return the width of the space trimmed, otherwise 0
        </member>
        <member name="M:iTextSharp.text.pdf.PdfChunk.GetAttribute(System.String)">
            Gets an attribute. The search is made in <CODE>attributes</CODE>
            and <CODE>noStroke</CODE>.
            @param name the attribute key
            @return the attribute value or null if not found
        </member>
        <member name="M:iTextSharp.text.pdf.PdfChunk.IsAttribute(System.String)">
            Checks if the attribute exists.
             @param name the attribute key
             @return <CODE>true</CODE> if the attribute exists
        </member>
        <member name="M:iTextSharp.text.pdf.PdfChunk.IsStroked">
            Checks if this <CODE>PdfChunk</CODE> needs some special metrics handling.
            @return <CODE>true</CODE> if this <CODE>PdfChunk</CODE> needs some special metrics handling.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfChunk.IsImage">
            Checks if there is an image in the <CODE>PdfChunk</CODE>.
            @return <CODE>true</CODE> if an image is present
        </member>
        <member name="M:iTextSharp.text.pdf.PdfChunk.IsSpecialEncoding">
            Tells you if this string is in Chinese, Japanese, Korean or Identity-H.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfChunk.IsSplitCharacter(System.Int32,System.Int32,System.Int32,System.Char[],iTextSharp.text.pdf.PdfChunk[])" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfChunk.Trim(System.String)" -->
        <member name="P:iTextSharp.text.pdf.PdfChunk.Font">
             Returns the font of this <CODE>Chunk</CODE>.
            
             @return  a <CODE>PdfFont</CODE>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfChunk.Color">
             Returns the color of this <CODE>Chunk</CODE>.
            
             @return  a <CODE>Color</CODE>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfChunk.Width">
             Returns the width of this <CODE>PdfChunk</CODE>.
            
             @return  a width
        </member>
        <member name="P:iTextSharp.text.pdf.PdfChunk.TextRise">
            Gets the text displacement relatiev to the baseline.
            @return a displacement in points
        </member>
        <member name="P:iTextSharp.text.pdf.PdfChunk.Image">
            Gets the image in the <CODE>PdfChunk</CODE>.
            @return the image or <CODE>null</CODE>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfChunk.ImageOffsetX">
            Gets the image offset in the x direction
            @return the image offset in the x direction
        </member>
        <member name="P:iTextSharp.text.pdf.PdfChunk.ImageOffsetY">
            Gets the image offset in the y direction
            @return Gets the image offset in the y direction
        </member>
        <member name="P:iTextSharp.text.pdf.PdfChunk.Value">
            sets the value.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfChunk.Encoding">
             Gets the encoding of this string.
            
             @return      a <CODE>string</CODE>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfColor">
             A <CODE>PdfColor</CODE> defines a Color (it's a <CODE>PdfArray</CODE> containing 3 values).
            
             @see        PdfDictionary
        </member>
        <member name="M:iTextSharp.text.pdf.PdfColor.#ctor(System.Int32,System.Int32,System.Int32)">
             Constructs a new <CODE>PdfColor</CODE>.
            
             @param        red            a value between 0 and 255
             @param        green        a value between 0 and 255
             @param        blue        a value between 0 and 255
        </member>
        <member name="T:iTextSharp.text.pdf.PdfContents">
            <CODE>PdfContents</CODE> is a <CODE>PdfStream</CODE> containing the contents (text + graphics) of a <CODE>PdfPage</CODE>.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfContents.#ctor(iTextSharp.text.pdf.PdfContentByte,iTextSharp.text.pdf.PdfContentByte,iTextSharp.text.pdf.PdfContentByte,iTextSharp.text.pdf.PdfContentByte,iTextSharp.text.Rectangle)">
             Constructs a <CODE>PdfContents</CODE>-object, containing text and general graphics.
            
             @param under the direct content that is under all others
             @param content the graphics in a page
             @param text the text in a page
             @param secondContent the direct content that is over all others
             @throws BadPdfFormatException on error
        </member>
        <member name="T:iTextSharp.text.pdf.PdfCopy">
            Make copies of PDF documents. Documents can be edited after reading and
            before writing them out.
            @author Mark Thompson
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopy.#ctor(iTextSharp.text.Document,System.IO.Stream)">
            Constructor
            @param document
            @param os outputstream
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopy.GetImportedPage(iTextSharp.text.pdf.PdfReader,System.Int32)">
            Grabs a page from the input document
            @param reader the reader of the document
            @param pageNumber which page to get
            @return the page
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopy.CopyIndirect(iTextSharp.text.pdf.PRIndirectReference)">
            Translate a PRIndirectReference to a PdfIndirectReference
            In addition, translates the object numbers, and copies the
            referenced object to the output file.
            NB: PRIndirectReferences (and PRIndirectObjects) really need to know what
            file they came from, because each file has its own namespace. The translation
            we do from their namespace to ours is *at best* heuristic, and guaranteed to
            fail under some circumstances.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopy.CopyDictionary(iTextSharp.text.pdf.PdfDictionary)">
            Translate a PRDictionary to a PdfDictionary. Also translate all of the
            objects contained in it.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopy.CopyStream(iTextSharp.text.pdf.PRStream)">
            Translate a PRStream to a PdfStream. The data part copies itself.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopy.CopyArray(iTextSharp.text.pdf.PdfArray)">
            Translate a PRArray to a PdfArray. Also translate all of the objects contained
            in it
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopy.CopyObject(iTextSharp.text.pdf.PdfObject)">
            Translate a PR-object to a Pdf-object
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopy.SetFromIPage(iTextSharp.text.pdf.PdfImportedPage)">
            convenience method. Given an importedpage, set our "globals"
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopy.SetFromReader(iTextSharp.text.pdf.PdfReader)">
            convenience method. Given a reader, set our "globals"
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopy.AddPage(iTextSharp.text.pdf.PdfImportedPage)">
            Add an imported page to our output
            @param iPage an imported page
            @throws IOException, BadPdfFormatException
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopy.CopyAcroForm(iTextSharp.text.pdf.PdfReader)">
            Copy the acroform for an input document. Note that you can only have one,
            we make no effort to merge them.
            @param reader The reader of the input file that is being copied
            @throws IOException, BadPdfFormatException
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopy.SetOutlines(System.Collections.ArrayList)">
            Sets the bookmarks. The list structure is defined in
            <CODE>SimpleBookmark#</CODE>.
            @param outlines the bookmarks or <CODE>null</CODE> to remove any
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfCopy.Close" -->
        <member name="T:iTextSharp.text.pdf.PdfCopy.IndirectReferences">
            This class holds information about indirect references, since they are
            renumbered by iText.
        </member>
        <member name="T:iTextSharp.text.pdf.PdfCopy.RefKey">
            A key to allow us to hash indirect references
        </member>
        <member name="T:iTextSharp.text.pdf.PdfCopyFields">
            Concatenates PDF documents including form fields. The rules for the form field
            concatenation are the same as in Acrobat. All the documents are kept in memory unlike
            PdfCopy.
            @author  Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyFields.#ctor(System.IO.Stream)">
            Creates a new instance.
            @param os the output stream
            @throws DocumentException on error
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyFields.#ctor(System.IO.Stream,System.Char)">
            Creates a new instance.
            @param os the output stream
            @param pdfVersion the pdf version the output will have
            @throws DocumentException on error
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyFields.AddDocument(iTextSharp.text.pdf.PdfReader)">
            Concatenates a PDF document.
            @param reader the PDF document
            @throws DocumentException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyFields.AddDocument(iTextSharp.text.pdf.PdfReader,System.Collections.ArrayList)">
            Concatenates a PDF document selecting the pages to keep. The pages are described as a
            <CODE>List</CODE> of <CODE>Integer</CODE>. The page ordering can be changed but
            no page repetitions are allowed.
            @param reader the PDF document
            @param pagesToKeep the pages to keep
            @throws DocumentException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyFields.AddDocument(iTextSharp.text.pdf.PdfReader,System.String)">
            Concatenates a PDF document selecting the pages to keep. The pages are described as
            ranges. The page ordering can be changed but
            no page repetitions are allowed.
            @param reader the PDF document
            @param ranges the comma separated ranges as described in {@link SequenceList}
            @throws DocumentException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyFields.SetEncryption(System.Byte[],System.Byte[],System.Int32,System.Boolean)">
            Sets the encryption options for this document. The userPassword and the
             ownerPassword can be null or have zero length. In this case the ownerPassword
             is replaced by a random string. The open permissions for the document can be
             AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
             AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
             The permissions can be combined by ORing them.
            @param userPassword the user password. Can be null or empty
            @param ownerPassword the owner password. Can be null or empty
            @param permissions the user permissions
            @param strength128Bits <code>true</code> for 128 bit key length, <code>false</code> for 40 bit key length
            @throws DocumentException if the document is already open
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyFields.SetEncryption(System.Boolean,System.String,System.String,System.Int32)">
            Sets the encryption options for this document. The userPassword and the
             ownerPassword can be null or have zero length. In this case the ownerPassword
             is replaced by a random string. The open permissions for the document can be
             AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
             AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
             The permissions can be combined by ORing them.
            @param strength true for 128 bit key length. false for 40 bit key length
            @param userPassword the user password. Can be null or empty
            @param ownerPassword the owner password. Can be null or empty
            @param permissions the user permissions
            @throws DocumentException if the document is already open
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyFields.Close">
            Closes the output document.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyFields.Open">
            Opens the document. This is usually not needed as AddDocument() will do it
            automatically.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyFields.AddJavaScript(System.String)">
            Adds JavaScript to the global document
            @param js the JavaScript
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyFields.SetOutlines(System.Collections.ArrayList)">
            Sets the bookmarks. The list structure is defined in
            <CODE>SimpleBookmark#</CODE>.
            @param outlines the bookmarks or <CODE>null</CODE> to remove any
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfCopyFields.SetFullCompression" -->
        <member name="P:iTextSharp.text.pdf.PdfCopyFields.Writer">
            Gets the underlying PdfWriter.
            @return the underlying PdfWriter
        </member>
        <member name="P:iTextSharp.text.pdf.PdfCopyFields.FullCompression">
            Gets the 1.5 compression status.
            @return <code>true</code> if the 1.5 compression is on
        </member>
        <member name="T:iTextSharp.text.pdf.PdfCopyFieldsImp">
            
             @author  psoares
        </member>
        <member name="M:iTextSharp.text.pdf.PdfCopyFieldsImp.SetOutlines(System.Collections.ArrayList)">
            Sets the bookmarks. The list structure is defined in
            <CODE>SimpleBookmark#</CODE>.
            @param outlines the bookmarks or <CODE>null</CODE> to remove any
        </member>
        <member name="T:iTextSharp.text.pdf.PdfDashPattern">
             A <CODE>PdfDashPattern</CODE> defines a dash pattern as described in
             the PDF Reference Manual version 1.3 p 325 (section 8.4.3).
            
             @see        PdfArray
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDashPattern.dash">
            This is the length of a dash. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDashPattern.gap">
            This is the length of a gap. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDashPattern.phase">
            This is the phase. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDashPattern.#ctor">
            Constructs a new <CODE>PdfDashPattern</CODE>.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDashPattern.#ctor(System.Single)">
            Constructs a new <CODE>PdfDashPattern</CODE>.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDashPattern.#ctor(System.Single,System.Single)">
            Constructs a new <CODE>PdfDashPattern</CODE>.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDashPattern.#ctor(System.Single,System.Single,System.Single)">
            Constructs a new <CODE>PdfDashPattern</CODE>.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDashPattern.ToPdf(iTextSharp.text.pdf.PdfWriter,System.IO.Stream)">
             Returns the PDF representation of this <CODE>PdfArray</CODE>.
            
             @return        an array of <CODE>byte</CODE>s
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.pdf.PdfDate" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.pdf.PdfString" -->
        <member name="F:iTextSharp.text.pdf.PdfString.value">
            The value of this object. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfString.encoding">
            The encoding. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfString.#ctor">
            Constructs an empty <CODE>PdfString</CODE>-object.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfString.#ctor(System.String)">
             Constructs a <CODE>PdfString</CODE>-object.
            
             @param        value        the content of the string
        </member>
        <member name="M:iTextSharp.text.pdf.PdfString.#ctor(System.String,System.String)">
             Constructs a <CODE>PdfString</CODE>-object.
            
             @param        value        the content of the string
             @param        encoding    an encoding
        </member>
        <member name="M:iTextSharp.text.pdf.PdfString.#ctor(System.Byte[])">
             Constructs a <CODE>PdfString</CODE>-object.
            
             @param        bytes    an array of <CODE>byte</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfString.ToPdf(iTextSharp.text.pdf.PdfWriter,System.IO.Stream)">
             Returns the PDF representation of this <CODE>PdfString</CODE>.
            
             @return        an array of <CODE>byte</CODE>s
        </member>
        <member name="M:iTextSharp.text.pdf.PdfString.ToString">
             Returns the <CODE>string</CODE> value of the <CODE>PdfString</CODE>-object.
            
             @return        a <CODE>string</CODE>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfString.Encoding">
             Gets the encoding of this string.
            
             @return        a <CODE>string</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDate.#ctor(System.DateTime)">
             Constructs a <CODE>PdfDate</CODE>-object.
            
             @param       d           the date that has to be turned into a <CODE>PdfDate</CODE>-object
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDate.#ctor">
            Constructs a <CODE>PdfDate</CODE>-object, representing the current day and time.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDate.SetLength(System.Int32,System.Int32)">
             Adds a number of leading zeros to a given <CODE>string</CODE> in order to get a <CODE>string</CODE>
             of a certain length.
            
             @param       i           a given number
             @param       length      the length of the resulting <CODE>string</CODE>
             @return      the resulting <CODE>string</CODE>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfDestination">
             A <CODE>PdfColor</CODE> defines a Color (it's a <CODE>PdfArray</CODE> containing 3 values).
            
             @see        PdfDictionary
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDestination.XYZ">
            This is a possible destination type 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDestination.FIT">
            This is a possible destination type 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDestination.FITH">
            This is a possible destination type 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDestination.FITV">
            This is a possible destination type 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDestination.FITR">
            This is a possible destination type 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDestination.FITB">
            This is a possible destination type 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDestination.FITBH">
            This is a possible destination type 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDestination.FITBV">
            This is a possible destination type 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDestination.status">
            Is the indirect reference to a page already added? 
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfDestination.#ctor(System.Int32)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfDestination.#ctor(System.Int32,System.Single)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfDestination.#ctor(System.Int32,System.Single,System.Single,System.Single)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfDestination.#ctor(System.Int32,System.Single,System.Single,System.Single,System.Single)" -->
        <member name="M:iTextSharp.text.pdf.PdfDestination.HasPage">
             Checks if an indirect reference to a page has been added.
            
             @return    <CODE>true</CODE> or <CODE>false</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDestination.AddPage(iTextSharp.text.pdf.PdfIndirectReference)">
            Adds the indirect reference of the destination page.
            
             @param page    an indirect reference
             @return true if the page reference was added
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.pdf.PdfDocument" -->
        <member name="T:iTextSharp.text.Document">
            <summary>
            A generic Document class.
            </summary>
            <remarks>
            All kinds of Text-elements can be added to a HTMLDocument.
            The Document signals all the listeners when an element
            has been added.<p/>
            <OL>
                <LI/>Once a document is created you can add some meta information.
                <LI/>You can also set the headers/footers.
                <LI/>You have to open the document before you can write content.
                <LI/>You can only write content (no more meta-formation!) once a document is opened.
                <LI/>When you change the header/footer on a certain page, this will be effective starting on the next page.
                <LI/>Ater closing the document, every listener (as well as its OutputStream) is closed too.
            </OL>
            </remarks>
            <example>
            <code>
            // creation of the document with a certain size and certain margins
            <strong>Document document = new Document(PageSize.A4, 50, 50, 50, 50);</strong>
            try {
                // creation of the different writers
                HtmlWriter.GetInstance(<strong>document</strong>, System.out);
                PdfWriter.GetInstance(<strong>document</strong>, new FileOutputStream("text.pdf"));
                // we add some meta information to the document
                <strong>document.AddAuthor("Bruno Lowagie");
                document.AddSubject("This is the result of a Test.");</strong>
                
                // we define a header and a footer
                HeaderFooter header = new HeaderFooter(new Phrase("This is a header."), false);
                HeaderFooter footer = new HeaderFooter(new Phrase("This is page "), new Phrase("."));
                footer.SetAlignment(Element.ALIGN_CENTER);
                <strong>document.SetHeader(header);
                document.SetFooter(footer);</strong>
                // we open the document for writing
                <strong>document.Open();
                document.Add(new Paragraph("Hello world"));</strong>
            }
            catch (DocumentException de) {
                Console.Error.WriteLine(de.Message);
            }
            <strong>document.Close();</strong>
            </code>
            </example>
        </member>
        <member name="F:iTextSharp.text.Document.ITEXT_VERSION">
            <summary> This constant may only be changed by Paulo Soares and/or Bruno Lowagie. </summary>
        </member>
        <member name="F:iTextSharp.text.Document.Compress">
            <summary> Allows the pdf documents to be produced without compression for debugging purposes. </summary>
        </member>
        <member name="F:iTextSharp.text.Document.listeners">
            <summary> The IDocListener. </summary>
        </member>
        <member name="F:iTextSharp.text.Document.open">
            <summary> Is the document open or not? </summary>
        </member>
        <member name="F:iTextSharp.text.Document.close">
            <summary> Has the document allready been closed? </summary>
        </member>
        <member name="F:iTextSharp.text.Document.pageSize">
            <summary> The size of the page. </summary>
        </member>
        <member name="F:iTextSharp.text.Document.watermark">
            <summary> The watermark on the pages. </summary>
        </member>
        <member name="F:iTextSharp.text.Document.marginLeft">
            <summary> margin in x direction starting from the left </summary>
        </member>
        <member name="F:iTextSharp.text.Document.marginRight">
            <summary> margin in x direction starting from the right </summary>
        </member>
        <member name="F:iTextSharp.text.Document.marginTop">
            <summary> margin in y direction starting from the top </summary>
        </member>
        <member name="F:iTextSharp.text.Document.marginBottom">
            <summary> margin in y direction starting from the bottom </summary>
        </member>
        <member name="F:iTextSharp.text.Document.javaScript_onLoad">
            <summary> Content of JavaScript onLoad function </summary>
        </member>
        <member name="F:iTextSharp.text.Document.javaScript_onUnLoad">
            <summary> Content of JavaScript onUnLoad function  </summary>
        </member>
        <member name="F:iTextSharp.text.Document.htmlStyleClass">
            <summary> Style class in HTML body tag </summary>
        </member>
        <member name="F:iTextSharp.text.Document.pageN">
            <summary> Current pagenumber </summary>
        </member>
        <member name="F:iTextSharp.text.Document.header">
            <summary> This is the textual part of a Page; it can contain a header </summary>
        </member>
        <member name="F:iTextSharp.text.Document.footer">
            <summary> This is the textual part of the footer </summary>
        </member>
        <member name="M:iTextSharp.text.Document.#ctor">
            <summary>
            Constructs a new Document-object.
            </summary>
            <overloads>
            Has three overloads.
            </overloads>
        </member>
        <member name="M:iTextSharp.text.Document.#ctor(iTextSharp.text.Rectangle)">
            <summary>
            Constructs a new Document-object.
            </summary>
            <param name="pageSize">the pageSize</param>
        </member>
        <member name="M:iTextSharp.text.Document.#ctor(iTextSharp.text.Rectangle,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new Document-object.
            </summary>
            <param name="pageSize">the pageSize</param>
            <param name="marginLeft">the margin on the left</param>
            <param name="marginRight">the margin on the right</param>
            <param name="marginTop">the margin on the top</param>
            <param name="marginBottom">the margin on the bottom</param>
        </member>
        <member name="M:iTextSharp.text.Document.AddDocListener(iTextSharp.text.IDocListener)">
            <summary>
            Adds a IDocListener to the Document.
            </summary>
            <param name="listener">the new IDocListener</param>
        </member>
        <member name="M:iTextSharp.text.Document.RemoveIDocListener(iTextSharp.text.IDocListener)">
            <summary>
            Removes a IDocListener from the Document.
            </summary>
            <param name="listener">the IDocListener that has to be removed.</param>
        </member>
        <member name="M:iTextSharp.text.Document.Add(iTextSharp.text.IElement)">
            <summary>
            Adds an Element to the Document.
            </summary>
            <param name="element">the Element to add</param>
            <returns>true if the element was added, false if not</returns>
        </member>
        <member name="M:iTextSharp.text.Document.Open">
            <summary>
            Opens the document.
            </summary>
            <remarks>
            Once the document is opened, you can't write any Header- or Meta-information
            anymore. You have to open the document before you can begin to add content
            to the body of the document.
            </remarks>
        </member>
        <member name="M:iTextSharp.text.Document.SetPageSize(iTextSharp.text.Rectangle)">
            <summary>
            Sets the pagesize.
            </summary>
            <param name="pageSize">the new pagesize</param>
            <returns>a bool</returns>
        </member>
        <member name="M:iTextSharp.text.Document.Add(iTextSharp.text.Watermark)">
            <summary>
            Sets the Watermark.
            </summary>
            <param name="watermark">the watermark to add</param>
            <returns>true if the element was added, false if not.</returns>
        </member>
        <member name="M:iTextSharp.text.Document.RemoveWatermark">
            <summary>
            Removes the Watermark.
            </summary>
        </member>
        <member name="M:iTextSharp.text.Document.SetMargins(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the margins.
            </summary>
            <param name="marginLeft">the margin on the left</param>
            <param name="marginRight">the margin on the right</param>
            <param name="marginTop">the margin on the top</param>
            <param name="marginBottom">the margin on the bottom</param>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.Document.NewPage">
            <summary>
            Signals that an new page has to be started.
            </summary>
            <returns>true if the page was added, false if not.</returns>
        </member>
        <member name="M:iTextSharp.text.Document.ResetHeader">
            <summary>
            Resets the header of this document.
            </summary>
        </member>
        <member name="M:iTextSharp.text.Document.ResetFooter">
            <summary>
            Resets the footer of this document.
            </summary>
        </member>
        <member name="M:iTextSharp.text.Document.ResetPageCount">
            <summary>
            Sets the page number to 0.
            </summary>
        </member>
        <member name="M:iTextSharp.text.Document.Close">
            <summary>
            Closes the document.
            </summary>
            <remarks>
            Once all the content has been written in the body, you have to close
            the body. After that nothing can be written to the body anymore.
            </remarks>
        </member>
        <member name="M:iTextSharp.text.Document.AddHeader(System.String,System.String)">
            <summary>
            Adds a user defined header to the document.
            </summary>
            <param name="name">the name of the header</param>
            <param name="content">the content of the header</param>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="M:iTextSharp.text.Document.AddTitle(System.String)">
            <summary>
            Adds the title to a Document.
            </summary>
            <param name="title">the title</param>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="M:iTextSharp.text.Document.AddSubject(System.String)">
            <summary>
            Adds the subject to a Document.
            </summary>
            <param name="subject">the subject</param>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="M:iTextSharp.text.Document.AddKeywords(System.String)">
            <summary>
            Adds the keywords to a Document.
            </summary>
            <param name="keywords">keywords to add</param>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="M:iTextSharp.text.Document.AddAuthor(System.String)">
            <summary>
            Adds the author to a Document.
            </summary>
            <param name="author">the name of the author</param>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="M:iTextSharp.text.Document.AddCreator(System.String)">
            <summary>
            Adds the creator to a Document.
            </summary>
            <param name="creator">the name of the creator</param>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="M:iTextSharp.text.Document.AddProducer">
            <summary>
            Adds the producer to a Document.
            </summary>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="M:iTextSharp.text.Document.AddCreationDate">
            <summary>
            Adds the current date and time to a Document.
            </summary>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="M:iTextSharp.text.Document.GetLeft(System.Single)">
            <summary>
            Returns the lower left x-coordinate considering a given margin.
            </summary>
            <param name="margin">a margin</param>
            <returns>the lower left x-coordinate</returns>
        </member>
        <member name="M:iTextSharp.text.Document.GetRight(System.Single)">
            <summary>
            Returns the upper right x-coordinate, considering a given margin.
            </summary>
            <param name="margin">a margin</param>
            <returns>the upper right x-coordinate</returns>
        </member>
        <member name="M:iTextSharp.text.Document.GetTop(System.Single)">
            <summary>
            Returns the upper right y-coordinate, considering a given margin.
            </summary>
            <param name="margin">a margin</param>
            <returns>the upper right y-coordinate</returns>
        </member>
        <member name="M:iTextSharp.text.Document.GetBottom(System.Single)">
            <summary>
            Returns the lower left y-coordinate, considering a given margin.
            </summary>
            <param name="margin">a margin</param>
            <returns>the lower left y-coordinate</returns>
        </member>
        <member name="M:iTextSharp.text.Document.IsOpen">
            <summary>
            Checks if the document is open.
            </summary>
            <returns>true if the document is open</returns>
        </member>
        <member name="M:iTextSharp.text.Document.ClearTextWrap">
            @see com.lowagie.text.DocListener#clearTextWrap()
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.Document.SetMarginMirroring(System.Boolean)" -->
        <member name="M:iTextSharp.text.Document.IsMarginMirroring">
            Gets the margin mirroring flag.
            
            @return the margin mirroring flag
        </member>
        <member name="P:iTextSharp.text.Document.Header">
            <summary>
            Changes the header of this document.
            </summary>
            <value>a HeaderFooter</value>
        </member>
        <member name="P:iTextSharp.text.Document.Footer">
            <summary>
            Changes the footer of this document.
            </summary>
            <value>a HeaderFooter</value>
        </member>
        <member name="P:iTextSharp.text.Document.PageCount">
            <summary>
            Sets the page number.
            </summary>
            <value>an int</value>
        </member>
        <member name="P:iTextSharp.text.Document.PageNumber">
            <summary>
            Returns the current page number.
            </summary>
            <value>an int</value>
        </member>
        <member name="P:iTextSharp.text.Document.LeftMargin">
            <summary>
            Returns the left margin.
            </summary>
            <value>the left margin</value>
        </member>
        <member name="P:iTextSharp.text.Document.RightMargin">
            <summary>
            Return the right margin.
            </summary>
            <value>the right margin</value>
        </member>
        <member name="P:iTextSharp.text.Document.TopMargin">
            <summary>
            Returns the top margin.
            </summary>
            <value>the top margin</value>
        </member>
        <member name="P:iTextSharp.text.Document.BottomMargin">
            <summary>
            Returns the bottom margin.
            </summary>
            <value>the bottom margin</value>
        </member>
        <member name="P:iTextSharp.text.Document.Left">
            <summary>
            Returns the lower left x-coordinate.
            </summary>
            <value>the lower left x-coordinate</value>
        </member>
        <member name="P:iTextSharp.text.Document.Right">
            <summary>
            Returns the upper right x-coordinate.
            </summary>
            <value>the upper right x-coordinate.</value>
        </member>
        <member name="P:iTextSharp.text.Document.Top">
            <summary>
            Returns the upper right y-coordinate.
            </summary>
            <value>the upper right y-coordinate.</value>
        </member>
        <member name="P:iTextSharp.text.Document.Bottom">
            <summary>
            Returns the lower left y-coordinate.
            </summary>
            <value>the lower left y-coordinate.</value>
        </member>
        <member name="P:iTextSharp.text.Document.PageSize">
            <summary>
            Gets the pagesize.
            </summary>
            <value>the page size</value>
        </member>
        <member name="P:iTextSharp.text.Document.Version">
            <summary>
            Gets the iText version.
            </summary>
            <value>iText version</value>
        </member>
        <member name="P:iTextSharp.text.Document.JavaScript_onLoad">
            <summary>
            Gets the JavaScript onLoad command.
            </summary>
            <value>the JavaScript onLoad command.</value>
        </member>
        <member name="P:iTextSharp.text.Document.JavaScript_onUnLoad">
            <summary>
            Gets the JavaScript onUnLoad command.
            </summary>
            <value>the JavaScript onUnLoad command</value>
        </member>
        <member name="P:iTextSharp.text.Document.HtmlStyleClass">
            <summary>
            Gets the style class of the HTML body tag
            </summary>
            <value>the style class of the HTML body tag</value>
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.hangingPunctuation">
            The characters to be applied the hanging ponctuation. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.writer">
            The <CODE>PdfWriter</CODE>. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.info">
            some meta information about the Document. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.firstPageEvent">
            Signals that OnOpenDocument should be called. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.isParagraph">
            Signals that onParagraph is valid. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.line">
            The line that is currently being written. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.indentLeft">
            This represents the current indentation of the PDF Elements on the left side. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.indentRight">
            This represents the current indentation of the PDF Elements on the right side. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.listIndentLeft">
            This represents the current indentation of the PDF Elements on the left side. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.alignment">
            This represents the current alignment of the PDF Elements. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.text">
            This is the PdfContentByte object, containing the text. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.graphics">
            This is the PdfContentByte object, containing the borders and other Graphics. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.lines">
            The lines that are written until now. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.leading">
            This represents the leading of the lines. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.currentHeight">
            This is the current height of the document. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.indentTop">
            This represents the current indentation of the PDF Elements on the top side. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.indentBottom">
            This represents the current indentation of the PDF Elements on the bottom side. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.pageEmpty">
            This checks if the page is empty. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.nextPageSize">
            This is the size of the next page. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.thisBoxSize">
            This is the size of the several boxes of the current Page. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.boxSize">
            This is the size of the several boxes that will be used in
            the next page. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.pageResources">
            This are the page resources of the current Page. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.imageWait">
            This is the image that could not be shown on a previous page. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.imageEnd">
            This is the position where the image ends. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.imageIndentLeft">
            This is the indentation caused by an image on the left. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.imageIndentRight">
            This is the indentation caused by an image on the right. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.annotations">
            This is the array containing the references to the annotations. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.delayedAnnotations">
            This is an array containg references to some delayed annotations. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.acroForm">
            This is the AcroForm object. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.rootOutline">
            This is the root outline of the document. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.currentOutline">
            This is the current <CODE>PdfOutline</CODE> in the hierarchy of outlines. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.currentAction">
            The current active <CODE>PdfAction</CODE> when processing an <CODE>Anchor</CODE>. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.localDestinations">
            Stores the destinations keyed by name. Value is
            <CODE>Object[]{PdfAction,PdfIndirectReference,PdfDestintion}</CODE>.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.viewerPreferences">
            these are the viewerpreferences of the document 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.nextMarginLeft">
            margin in x direction starting from the left. Will be valid in the next page 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.nextMarginRight">
            margin in x direction starting from the right. Will be valid in the next page 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.nextMarginTop">
            margin in y direction starting from the top. Will be valid in the next page 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.nextMarginBottom">
            margin in y direction starting from the bottom. Will be valid in the next page 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.duration">
            The duration of the page 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.transition">
            The page transition 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.strictImageSequence">
            Holds value of property strictImageSequence. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfDocument.lastElementType">
            Holds the type of the last element, that has been added to the document. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.#ctor">
            Constructs a new PDF document.
            @throws DocumentException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.AddWriter(iTextSharp.text.pdf.PdfWriter)">
             Adds a <CODE>PdfWriter</CODE> to the <CODE>PdfDocument</CODE>.
            
             @param writer the <CODE>PdfWriter</CODE> that writes everything
                                 what is added to this document to an outputstream.
             @throws DocumentException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.SetPageSize(iTextSharp.text.Rectangle)">
             Sets the pagesize.
            
             @param pageSize the new pagesize
             @return <CODE>true</CODE> if the page size was set
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.ResetHeader">
            Resets the header of this document.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.ResetFooter">
            Resets the footer of this document.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.ResetPageCount">
            Sets the page number to 0.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.Add(iTextSharp.text.Watermark)">
             Sets the <CODE>Watermark</CODE>.
            
             @param watermark the watermark to add
             @return <CODE>true</CODE> if the element was added, <CODE>false</CODE> if not.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.RemoveWatermark">
            Removes the <CODE>Watermark</CODE>.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.SetMargins(System.Single,System.Single,System.Single,System.Single)">
             Sets the margins.
            
             @param    marginLeft      the margin on the left
             @param    marginRight     the margin on the right
             @param    marginTop       the margin on the top
             @param    marginBottom    the margin on the bottom
             @return   a <CODE>bool</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.NewPage">
             Makes a new page and sends it to the <CODE>PdfWriter</CODE>.
            
             @return a <CODE>bool</CODE>
             @throws DocumentException on error
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfDocument.Open" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfDocument.Close" -->
        <member name="M:iTextSharp.text.pdf.PdfDocument.AddPTable(iTextSharp.text.pdf.PdfPTable)">
            Adds a <CODE>PdfPTable</CODE> to the document.
            @param ptable the <CODE>PdfPTable</CODE> to be added to the document.
            @throws DocumentException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.GetPdfTable(iTextSharp.text.Table,System.Boolean)">
            Gets a PdfTable object
            (contributed by dperezcar@fcc.es)
            @param table a high level table object
            @param supportRowAdditions
            @return returns a PdfTable object
            @see PdfWriter#getPdfTable(Table)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.BreakTableIfDoesntFit(iTextSharp.text.pdf.PdfTable)">
            @see PdfWriter#breakTableIfDoesntFit(PdfTable)
            (contributed by dperezcar@fcc.es)
            @param table              Table to add
            @return true if the table will be broken
            @throws DocumentException
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.Add(iTextSharp.text.pdf.PdfTable,System.Boolean)">
            Adds a new table to 
            @param table              Table to add.  Rendered rows will be deleted after processing.
            @param onlyFirstPage      Render only the first full page
            @throws DocumentException
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.Add(iTextSharp.text.IElement)">
             Signals that an <CODE>Element</CODE> was added to the <CODE>Document</CODE>.
            
             @param element the element to add
             @return <CODE>true</CODE> if the element was added, <CODE>false</CODE> if not.
             @throws DocumentException when a document isn't open yet, or has been closed
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.Add(iTextSharp.text.Image)">
            Adds an image to the document.
            @param image the <CODE>Image</CODE> to add
            @throws PdfException on error
            @throws DocumentException on error
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfDocument.InitPage" -->
        <member name="M:iTextSharp.text.pdf.PdfDocument.CarriageReturn">
            If the current line is not empty or null, it is added to the arraylist
            of lines and a new empty line is added.
            @throws DocumentException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.NewLine">
            Adds the current line to the list of lines and also adds an empty line.
            @throws DocumentException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.FlushLines">
             Writes all the lines to the text-object.
            
             @return the displacement that was caused
             @throws DocumentException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.GetCatalog(iTextSharp.text.pdf.PdfIndirectReference)">
             Gets the <CODE>PdfCatalog</CODE>-object.
            
             @param pages an indirect reference to this document pages
             @return <CODE>PdfCatalog</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.GetBottom(iTextSharp.text.Table)">
             Returns the bottomvalue of a <CODE>Table</CODE> if it were added to this document.
            
             @param    table   the table that may or may not be added to this document
             @return   a bottom value
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.FitsPage(iTextSharp.text.pdf.PdfPTable,System.Single)">
             Checks if a <CODE>PdfPTable</CODE> fits the current page of the <CODE>PdfDocument</CODE>.
            
             @param    table   the table that has to be checked
             @param    margin  a certain margin
             @return   <CODE>true</CODE> if the <CODE>PdfPTable</CODE> fits the page, <CODE>false</CODE> otherwise.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.GetVerticalPosition(System.Boolean)">
            Gets the current vertical page position.
            @param ensureNewLine Tells whether a new line shall be enforced. This may cause side effects 
              for elements that do not terminate the lines they've started because those lines will get
              terminated. 
            @return The current vertical page position.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.EnsureNewLine">
            Ensures that a new line has been started. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.AddOutline(iTextSharp.text.pdf.PdfOutline,System.String)">
            Adds a named outline to the document .
            @param outline the outline to be added
            @param name the name of this local destination
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfDocument.WriteLineToContent(iTextSharp.text.pdf.PdfLine,iTextSharp.text.pdf.PdfContentByte,iTextSharp.text.pdf.PdfContentByte,System.Object[],System.Single)" -->
        <member name="M:iTextSharp.text.pdf.PdfDocument.LocalGoto(System.String,System.Single,System.Single,System.Single,System.Single)">
            Implements a link to other part of the document. The jump will
            be made to a local destination with the same name, that must exist.
            @param name the name for this link
            @param llx the lower left x corner of the activation area
            @param lly the lower left y corner of the activation area
            @param urx the upper right x corner of the activation area
            @param ury the upper right y corner of the activation area
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.LocalDestination(System.String,iTextSharp.text.pdf.PdfDestination)">
            The local destination to where a local goto with the same
            name will jump to.
            @param name the name of this local destination
            @param destination the <CODE>PdfDestination</CODE> with the jump coordinates
            @return <CODE>true</CODE> if the local destination was added,
            <CODE>false</CODE> if a local destination with the same name
            already existed
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.RemoteGoto(System.String,System.String,System.Single,System.Single,System.Single,System.Single)">
            Implements a link to another document.
            @param filename the filename for the remote document
            @param name the name to jump to
            @param llx the lower left x corner of the activation area
            @param lly the lower left y corner of the activation area
            @param urx the upper right x corner of the activation area
            @param ury the upper right y corner of the activation area
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.RemoteGoto(System.String,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            Implements a link to another document.
            @param filename the filename for the remote document
            @param page the page to jump to
            @param llx the lower left x corner of the activation area
            @param lly the lower left y corner of the activation area
            @param urx the upper right x corner of the activation area
            @param ury the upper right y corner of the activation area
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.SetAction(iTextSharp.text.pdf.PdfAction,System.Single,System.Single,System.Single,System.Single)">
            Implements an action in an area.
            @param action the <CODE>PdfAction</CODE>
            @param llx the lower left x corner of the activation area
            @param lly the lower left y corner of the activation area
            @param urx the upper right x corner of the activation area
            @param ury the upper right y corner of the activation area
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.ClearTextWrap">
            Method added by Pelikan Stephan
            @see com.lowagie.text.DocListener#clearTextWrap()
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.SetMarginMirroring(System.Boolean)">
            @see com.lowagie.text.DocListener#setMarginMirroring(bool)
        </member>
        <member name="P:iTextSharp.text.pdf.PdfDocument.Header">
             Changes the header of this document.
            
             @param header the new header
        </member>
        <member name="P:iTextSharp.text.pdf.PdfDocument.Footer">
             Changes the footer of this document.
            
             @param    footer      the new footer
        </member>
        <member name="P:iTextSharp.text.pdf.PdfDocument.PageCount">
             Sets the page number.
            
             @param    pageN       the new page number
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "P:iTextSharp.text.pdf.PdfDocument.Info" -->
        <member name="P:iTextSharp.text.pdf.PdfDocument.IndentLeft">
             Gets the indentation on the left side.
            
             @return   a margin
        </member>
        <member name="P:iTextSharp.text.pdf.PdfDocument.IndentRight">
             Gets the indentation on the right side.
            
             @return   a margin
        </member>
        <member name="P:iTextSharp.text.pdf.PdfDocument.IndentTop">
             Gets the indentation on the top side.
            
             @return   a margin
        </member>
        <member name="P:iTextSharp.text.pdf.PdfDocument.IndentBottom">
             Gets the indentation on the bottom side.
            
             @return   a margin
        </member>
        <member name="P:iTextSharp.text.pdf.PdfDocument.AcroForm">
            Gets the AcroForm object.
            @return the PdfAcroform object of the PdfDocument
        </member>
        <member name="P:iTextSharp.text.pdf.PdfDocument.RootOutline">
            Gets the root outline. All the outlines must be created with a parent.
            The first level is created with this outline.
            @return the root outline
        </member>
        <member name="P:iTextSharp.text.pdf.PdfDocument.ViewerPreferences">
            Sets the viewer preferences as the sum of several constants.
            @param preferences the viewer preferences
            @see PdfWriter#setViewerPreferences
        </member>
        <member name="P:iTextSharp.text.pdf.PdfDocument.Duration">
            Sets the display duration for the page (for presentations)
            @param seconds   the number of seconds to display the page
        </member>
        <member name="P:iTextSharp.text.pdf.PdfDocument.Transition">
            Sets the transition for the page
            @param transition   the PdfTransition object
        </member>
        <member name="P:iTextSharp.text.pdf.PdfDocument.StrictImageSequence">
            Setter for property strictImageSequence.
             @param strictImageSequence New value of property strictImageSequence.
            
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.pdf.PdfDocument.PdfInfo" -->
        <member name="M:iTextSharp.text.pdf.PdfDocument.PdfInfo.#ctor">
            Construct a <CODE>PdfInfo</CODE>-object.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.PdfInfo.#ctor(System.String,System.String,System.String)">
             Constructs a <CODE>PdfInfo</CODE>-object.
            
             @param        author      name of the author of the document
             @param        title       title of the document
             @param        subject     subject of the document
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.PdfInfo.AddTitle(System.String)">
             Adds the title of the document.
            
             @param    title       the title of the document
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.PdfInfo.AddSubject(System.String)">
             Adds the subject to the document.
            
             @param    subject     the subject of the document
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.PdfInfo.AddKeywords(System.String)">
             Adds some keywords to the document.
            
             @param    keywords        the keywords of the document
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.PdfInfo.AddAuthor(System.String)">
             Adds the name of the author to the document.
            
             @param    author      the name of the author
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.PdfInfo.AddCreator(System.String)">
             Adds the name of the creator to the document.
            
             @param    creator     the name of the creator
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.PdfInfo.AddProducer">
            Adds the name of the producer to the document.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.PdfInfo.AddCreationDate">
            Adds the date of creation to the document.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.pdf.PdfDocument.PdfCatalog" -->
        <member name="M:iTextSharp.text.pdf.PdfDocument.PdfCatalog.#ctor(iTextSharp.text.pdf.PdfIndirectReference,iTextSharp.text.pdf.PdfWriter)">
             Constructs a <CODE>PdfCatalog</CODE>.
            
             @param        pages       an indirect reference to the root of the document's Pages tree.
             @param writer the writer the catalog applies to
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.PdfCatalog.#ctor(iTextSharp.text.pdf.PdfIndirectReference,iTextSharp.text.pdf.PdfIndirectReference,iTextSharp.text.pdf.PdfWriter)">
             Constructs a <CODE>PdfCatalog</CODE>.
            
             @param        pages       an indirect reference to the root of the document's Pages tree.
             @param        outlines    an indirect reference to the outline tree.
             @param writer the writer the catalog applies to
        </member>
        <member name="M:iTextSharp.text.pdf.PdfDocument.PdfCatalog.AddNames(System.util.collections.k_Tree,System.Collections.ArrayList,iTextSharp.text.pdf.PdfWriter)">
            Adds the names of the named destinations to the catalog.
            @param localDestinations the local destinations
            @param documentJavaScript the javascript used in the document
            @param writer the writer the catalog applies to
        </member>
        <member name="P:iTextSharp.text.pdf.PdfDocument.PdfCatalog.ViewerPreferences">
            Sets the viewer preferences as the sum of several constants.
            @param preferences the viewer preferences
            @see PdfWriter#setViewerPreferences
        </member>
        <member name="P:iTextSharp.text.pdf.PdfDocument.PdfCatalog.AdditionalActions">
            Sets the document level additional actions.
            @param actions   dictionary of actions
        </member>
        <member name="T:iTextSharp.text.pdf.PdfEncodings">
            Supports fast encodings for winansi and PDFDocEncoding.
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfEncodings.ConvertToBytes(System.String,System.String)" -->
        <member name="M:iTextSharp.text.pdf.PdfEncodings.IsPdfDocEncoding(System.String)">
            Checks is <CODE>text</CODE> only has PdfDocEncoding characters.
            @param text the <CODE>String</CODE> to test
            @return <CODE>true</CODE> if only PdfDocEncoding characters are present
        </member>
        <member name="F:iTextSharp.text.pdf.PdfEncodings.CRLF_CID_NEWLINE">
            Assumes that '\\n' and '\\r\\n' are the newline sequences. It may not work for
            all CJK encodings. To be used with LoadCmap().
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncodings.ClearCmap(System.String)">
            Clears the CJK cmaps from the cache. If <CODE>name</CODE> is the
            empty string then all the cache is cleared. Calling this method
            has no consequences other than the need to reload the cmap
            if needed.
            @param name the name of the cmap to clear or all the cmaps if the empty string
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncodings.LoadCmap(System.String,System.Byte[][])">
            Loads a CJK cmap to the cache with the option of associating
            sequences to the newline.
            @param name the CJK cmap name
            @param newline the sequences to be replaced bi a newline in the resulting CID. See <CODE>CRLF_CID_NEWLINE</CODE>
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfEncodings.ConvertCmap(System.String,System.Byte[])" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfEncodings.ConvertCmap(System.String,System.Byte[],System.Int32,System.Int32)" -->
        <member name="M:iTextSharp.text.pdf.PdfEncodings.AddExtraEncoding(System.String,iTextSharp.text.pdf.IExtraEncoding)">
            Adds an extra encoding.
            @param name the name of the encoding. The encoding recognition is case insensitive
            @param enc the conversion class
        </member>
        <member name="T:iTextSharp.text.pdf.PdfEncryption">
            
             @author  Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:iTextSharp.text.pdf.PdfEncryption.key">
            The encryption key for a particular object/generation 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfEncryption.keySize">
            The encryption key length for a particular object/generation 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfEncryption.mkey">
            The global encryption key 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfEncryption.extra">
            Work area to prepare the object/generation bytes 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfEncryption.md5">
            The message digest algorithm MD5 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfEncryption.ownerKey">
            The encryption key for the owner 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfEncryption.userKey">
            The encryption key for the user 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncryption.ComputeOwnerKey(System.Byte[],System.Byte[],System.Boolean)">
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncryption.SetupGlobalEncryptionKey(System.Byte[],System.Byte[],System.Byte[],System.Int32,System.Boolean)">
            
             ownerKey, documentID must be setuped
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncryption.SetupUserKey">
            
             mkey must be setuped
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncryption.SetupByUserPassword(System.Byte[],System.Byte[],System.Byte[],System.Int32,System.Boolean)">
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncryption.SetupByUserPad(System.Byte[],System.Byte[],System.Byte[],System.Int32,System.Boolean)">
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncryption.SetupByOwnerPassword(System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Int32,System.Boolean)">
        </member>
        <member name="T:iTextSharp.text.pdf.PdfEncryptor">
            This class takes any PDF and returns exactly the same but
            encrypted. All the content, links, outlines, etc, are kept.
            It is also possible to change the info dictionary.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncryptor.Encrypt(iTextSharp.text.pdf.PdfReader,System.IO.Stream,System.Byte[],System.Byte[],System.Int32,System.Boolean)">
            Entry point to encrypt a PDF document. The encryption parameters are the same as in
            <code>PdfWriter</code>. The userPassword and the
             ownerPassword can be null or have zero length. In this case the ownerPassword
             is replaced by a random string. The open permissions for the document can be
             AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
             AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
             The permissions can be combined by ORing them.
            @param reader the read PDF
            @param os the output destination
            @param userPassword the user password. Can be null or empty
            @param ownerPassword the owner password. Can be null or empty
            @param permissions the user permissions
            @param strength128Bits <code>true</code> for 128 bit key length, <code>false</code> for 40 bit key length
            @throws DocumentException on error
            @throws IOException on error 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncryptor.Encrypt(iTextSharp.text.pdf.PdfReader,System.IO.Stream,System.Byte[],System.Byte[],System.Int32,System.Boolean,System.Collections.Hashtable)">
            Entry point to encrypt a PDF document. The encryption parameters are the same as in
            <code>PdfWriter</code>. The userPassword and the
             ownerPassword can be null or have zero length. In this case the ownerPassword
             is replaced by a random string. The open permissions for the document can be
             AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
             AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
             The permissions can be combined by ORing them.
            @param reader the read PDF
            @param os the output destination
            @param userPassword the user password. Can be null or empty
            @param ownerPassword the owner password. Can be null or empty
            @param permissions the user permissions
            @param strength128Bits <code>true</code> for 128 bit key length, <code>false</code> for 40 bit key length
            @param newInfo an optional <CODE>String</CODE> map to add or change
            the info dictionary. Entries with <CODE>null</CODE>
            values delete the key in the original info dictionary
            @throws DocumentException on error
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncryptor.Encrypt(iTextSharp.text.pdf.PdfReader,System.IO.Stream,System.Boolean,System.String,System.String,System.Int32)">
            Entry point to encrypt a PDF document. The encryption parameters are the same as in
            <code>PdfWriter</code>. The userPassword and the
             ownerPassword can be null or have zero length. In this case the ownerPassword
             is replaced by a random string. The open permissions for the document can be
             AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
             AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
             The permissions can be combined by ORing them.
            @param reader the read PDF
            @param os the output destination
            @param strength <code>true</code> for 128 bit key length, <code>false</code> for 40 bit key length
            @param userPassword the user password. Can be null or empty
            @param ownerPassword the owner password. Can be null or empty
            @param permissions the user permissions
            @throws DocumentException on error
            @throws IOException on error 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncryptor.Encrypt(iTextSharp.text.pdf.PdfReader,System.IO.Stream,System.Boolean,System.String,System.String,System.Int32,System.Collections.Hashtable)">
            Entry point to encrypt a PDF document. The encryption parameters are the same as in
            <code>PdfWriter</code>. The userPassword and the
             ownerPassword can be null or have zero length. In this case the ownerPassword
             is replaced by a random string. The open permissions for the document can be
             AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
             AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
             The permissions can be combined by ORing them.
            @param reader the read PDF
            @param os the output destination
            @param strength <code>true</code> for 128 bit key length, <code>false</code> for 40 bit key length
            @param userPassword the user password. Can be null or empty
            @param ownerPassword the owner password. Can be null or empty
            @param permissions the user permissions
            @param newInfo an optional <CODE>String</CODE> map to add or change
            the info dictionary. Entries with <CODE>null</CODE>
            values delete the key in the original info dictionary
            @throws DocumentException on error
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfEncryptor.GetPermissionsVerbose(System.Int32)">
            Give you a verbose analysis of the permissions.
            @param permissions the permissions value of a PDF file
            @return a String that explains the meaning of the permissions value
        </member>
        <member name="T:iTextSharp.text.pdf.PdfException">
             Signals that an unspecified problem while constructing a PDF document.
            
             @see        BadPdfFormatException
        </member>
        <member name="T:iTextSharp.text.DocumentException">
            <summary>
            Signals that an error has occurred in a Document.
            </summary>
            <seealso cref="T:iTextSharp.text.BadElementException"/>
            <seealso cref="T:iTextSharp.text.Document"/>
            <seealso cref="T:iTextSharp.text.DocWriter"/>
            <seealso cref="T:iTextSharp.text.IDocListener"/>
        </member>
        <member name="M:iTextSharp.text.DocumentException.#ctor">
            <summary>
            Constructs a new DocumentException
            </summary>
            <overloads>
            Has two overloads.
            </overloads>
        </member>
        <member name="M:iTextSharp.text.DocumentException.#ctor(System.String)">
            <summary>
            Construct a new DocumentException
            </summary>
            <param name="message">error message</param>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfFileSpecification">
            Specifies a file or an URL. The file can be extern or embedded.
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfFileSpecification.#ctor">
            Creates a new instance of PdfFileSpecification. The static methods are preferred. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfFileSpecification.Url(iTextSharp.text.pdf.PdfWriter,System.String)">
            Creates a file specification of type URL.
            @param writer the <CODE>PdfWriter</CODE>
            @param url the URL
            @return the file specification
        </member>
        <member name="M:iTextSharp.text.pdf.PdfFileSpecification.FileEmbedded(iTextSharp.text.pdf.PdfWriter,System.String,System.String,System.Byte[])">
            Creates a file specification with the file embedded. The file may
            come from the file system or from a byte array. The data is flate compressed.
            @param writer the <CODE>PdfWriter</CODE>
            @param filePath the file path
            @param fileDisplay the file information that is presented to the user
            @param fileStore the byte array with the file. If it is not <CODE>null</CODE>
            it takes precedence over <CODE>filePath</CODE>
            @throws IOException on error
            @return the file specification
        </member>
        <member name="M:iTextSharp.text.pdf.PdfFileSpecification.FileEmbedded(iTextSharp.text.pdf.PdfWriter,System.String,System.String,System.Byte[],System.Boolean)">
            Creates a file specification with the file embedded. The file may
            come from the file system or from a byte array.
            @param writer the <CODE>PdfWriter</CODE>
            @param filePath the file path
            @param fileDisplay the file information that is presented to the user
            @param fileStore the byte array with the file. If it is not <CODE>null</CODE>
            it takes precedence over <CODE>filePath</CODE>
            @param compress sets the compression on the data. Multimedia content will benefit little
            from compression
            @throws IOException on error
            @return the file specification
        </member>
        <member name="M:iTextSharp.text.pdf.PdfFileSpecification.FileExtern(iTextSharp.text.pdf.PdfWriter,System.String)">
            Creates a file specification for an external file.
            @param writer the <CODE>PdfWriter</CODE>
            @param filePath the file path
            @return the file specification
        </member>
        <member name="P:iTextSharp.text.pdf.PdfFileSpecification.Reference">
            Gets the indirect reference to this file specification.
            Multiple invocations will retrieve the same value.
            @throws IOException on error
            @return the indirect reference
        </member>
        <member name="P:iTextSharp.text.pdf.PdfFileSpecification.MultiByteFileName">
            Sets the file name (the key /F) string as an hex representation
            to support multi byte file names. The name must heve th slash and
            backslash escaped according to the file specification rules
            @param fileName the file name as a byte array
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.pdf.PdfFont" -->
        <member name="F:iTextSharp.text.pdf.PdfFont.font">
            the font metrics. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfFont.size">
            the size. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfFont.image">
            an image. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfFont.CompareTo(System.Object)">
             Compares this <CODE>PdfFont</CODE> with another
            
             @param    object    the other <CODE>PdfFont</CODE>
             @return    a value
        </member>
        <member name="M:iTextSharp.text.pdf.PdfFont.Width">
             Returns the approximative width of 1 character of this font.
            
             @return        a width in Text Space
        </member>
        <member name="M:iTextSharp.text.pdf.PdfFont.Width(System.Char)">
             Returns the width of a certain character of this font.
            
             @param        character    a certain character
             @return        a width in Text Space
        </member>
        <member name="P:iTextSharp.text.pdf.PdfFont.Size">
             Returns the size of this font.
            
             @return        a size
        </member>
        <member name="T:iTextSharp.text.pdf.PdfFormField">
            Implements form fields.
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:iTextSharp.text.pdf.PdfFormField.parent">
            Holds value of property parent. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfFormField.#ctor(iTextSharp.text.pdf.PdfWriter,System.Single,System.Single,System.Single,System.Single,iTextSharp.text.pdf.PdfAction)">
            Constructs a new <CODE>PdfAnnotation</CODE> of subtype link (Action).
        </member>
        <member name="M:iTextSharp.text.pdf.PdfFormField.#ctor(iTextSharp.text.pdf.PdfWriter)">
            Creates new PdfFormField 
        </member>
        <member name="P:iTextSharp.text.pdf.PdfFormField.Parent">
            Getter for property parent.
            @return Value of property parent.
        </member>
        <member name="T:iTextSharp.text.pdf.PdfFormXObject">
            <CODE>PdfFormObject</CODE> is a type of XObject containing a template-object.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfFormXObject.ZERO">
            This is a PdfNumber representing 0. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfFormXObject.ONE">
            This is a PdfNumber representing 1. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfFormXObject.MATRIX">
            This is the 1 - matrix. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfFormXObject.#ctor(iTextSharp.text.pdf.PdfTemplate)">
             Constructs a <CODE>PdfFormXObject</CODE>-object.
            
             @param        template        the template
        </member>
        <member name="T:iTextSharp.text.pdf.PdfFunction">
            Implements PDF functions.
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfFunction.#ctor(iTextSharp.text.pdf.PdfWriter)">
            Creates new PdfFunction 
        </member>
        <member name="T:iTextSharp.text.pdf.PdfGState">
            The graphic state dictionary.
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:iTextSharp.text.pdf.PdfGState.BM_NORMAL">
            A possible blend mode 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfGState.BM_COMPATIBLE">
            A possible blend mode 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfGState.BM_MULTIPLY">
            A possible blend mode 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfGState.BM_SCREEN">
            A possible blend mode 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfGState.BM_OVERLAY">
            A possible blend mode 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfGState.BM_DARKEN">
            A possible blend mode 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfGState.BM_LIGHTEN">
            A possible blend mode 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfGState.BM_COLORDODGE">
            A possible blend mode 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfGState.BM_COLORBURN">
            A possible blend mode 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfGState.BM_HARDLIGHT">
            A possible blend mode 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfGState.BM_SOFTLIGHT">
            A possible blend mode 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfGState.BM_DIFFERENCE">
            A possible blend mode 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfGState.BM_EXCLUSION">
            A possible blend mode 
        </member>
        <member name="P:iTextSharp.text.pdf.PdfGState.OverPrintStroking">
            Sets the flag whether to apply overprint for stroking.
            @param ov
        </member>
        <member name="P:iTextSharp.text.pdf.PdfGState.OverPrintNonStroking">
            Sets the flag whether to apply overprint for non stroking painting operations.
            @param ov
        </member>
        <member name="P:iTextSharp.text.pdf.PdfGState.StrokeOpacity">
            Sets the current stroking alpha constant, specifying the constant shape or
            constant opacity value to be used for stroking operations in the transparent
            imaging model.
            @param n
        </member>
        <member name="P:iTextSharp.text.pdf.PdfGState.FillOpacity">
            Sets the current stroking alpha constant, specifying the constant shape or
            constant opacity value to be used for nonstroking operations in the transparent
            imaging model.
            @param n
        </member>
        <member name="P:iTextSharp.text.pdf.PdfGState.AlphaIsShape">
            The alpha source flag specifying whether the current soft mask
            and alpha constant are to be interpreted as shape values (true)
            or opacity values (false). 
            @param v
        </member>
        <member name="P:iTextSharp.text.pdf.PdfGState.TextKnockout">
            Determines the behaviour of overlapping glyphs within a text object
            in the transparent imaging model.
            @param v
        </member>
        <member name="P:iTextSharp.text.pdf.PdfGState.BlendMode">
            The current blend mode to be used in the transparent imaging model.
            @param bm
        </member>
        <member name="T:iTextSharp.text.pdf.PdfICCBased">
             A <CODE>PdfICCBased</CODE> defines a ColorSpace
            
             @see        PdfStream
        </member>
        <member name="T:iTextSharp.text.pdf.PdfImage">
            <CODE>PdfImage</CODE> is a <CODE>PdfStream</CODE> containing an image-<CODE>Dictionary</CODE> and -stream.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfImage.name">
            This is the <CODE>PdfName</CODE> of the image. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfImage.#ctor(iTextSharp.text.Image,System.String,iTextSharp.text.pdf.PdfIndirectReference)">
             Constructs a <CODE>PdfImage</CODE>-object.
            
             @param image the <CODE>Image</CODE>-object
             @param name the <CODE>PdfName</CODE> for this image
             @throws BadPdfFormatException on error
        </member>
        <member name="P:iTextSharp.text.pdf.PdfImage.Name">
             Returns the <CODE>PdfName</CODE> of the image.
            
             @return        the name
        </member>
        <member name="T:iTextSharp.text.pdf.PdfImportedPage">
            Represents an imported page.
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfImportedPage.AddImage(iTextSharp.text.Image,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            Always throws an error. This operation is not allowed.
            @param image dummy
            @param a dummy
            @param b dummy
            @param c dummy
            @param d dummy
            @param e dummy
            @param f dummy
            @throws DocumentException  dummy 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfImportedPage.AddTemplate(iTextSharp.text.pdf.PdfTemplate,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            Always throws an error. This operation is not allowed.
            @param template dummy
            @param a dummy
            @param b dummy
            @param c dummy
            @param d dummy
            @param e dummy
            @param f  dummy 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfImportedPage.SetFontAndSize(iTextSharp.text.pdf.BaseFont,System.Single)">
            Always throws an error. This operation is not allowed.
            @param bf dummy
            @param size dummy 
        </member>
        <member name="P:iTextSharp.text.pdf.PdfImportedPage.FromReader">
            Reads the content from this <CODE>PdfImportedPage</CODE>-object from a reader.
            
             @return self
            
        </member>
        <member name="P:iTextSharp.text.pdf.PdfImportedPage.Duplicate">
            Always throws an error. This operation is not allowed.
            @return  dummy 
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.pdf.PdfIndirectObject" -->
        <member name="F:iTextSharp.text.pdf.PdfIndirectObject.number">
            The object number 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfIndirectObject.generation">
            the generation number 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfIndirectObject.#ctor(System.Int32,iTextSharp.text.pdf.PdfObject,iTextSharp.text.pdf.PdfWriter)">
             Constructs a <CODE>PdfIndirectObject</CODE>.
            
             @param        number            the objecti number
             @param        objecti            the direct objecti
        </member>
        <member name="M:iTextSharp.text.pdf.PdfIndirectObject.#ctor(System.Int32,System.Int32,iTextSharp.text.pdf.PdfObject,iTextSharp.text.pdf.PdfWriter)">
             Constructs a <CODE>PdfIndirectObject</CODE>.
            
             @param        number            the objecti number
             @param        generation        the generation number
             @param        objecti            the direct objecti
        </member>
        <member name="M:iTextSharp.text.pdf.PdfIndirectObject.WriteTo(System.IO.Stream)">
             Writes eficiently to a stream
            
             @param os the stream to write to
             @throws IOException on write error
        </member>
        <member name="P:iTextSharp.text.pdf.PdfIndirectObject.IndirectReference">
             Returns a <CODE>PdfIndirectReference</CODE> to this <CODE>PdfIndirectObject</CODE>.
            
             @return        a <CODE>PdfIndirectReference</CODE>
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.pdf.PdfIndirectReference" -->
        <member name="F:iTextSharp.text.pdf.PdfIndirectReference.number">
            the object number 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfIndirectReference.generation">
            the generation number 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfIndirectReference.#ctor(System.Int32,System.Int32,System.Int32)">
             Constructs a <CODE>PdfIndirectReference</CODE>.
            
             @param        type            the type of the <CODE>PdfObject</CODE> that is referenced to
             @param        number            the object number.
             @param        generation        the generation number.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfIndirectReference.#ctor(System.Int32,System.Int32)">
             Constructs a <CODE>PdfIndirectReference</CODE>.
            
             @param        type            the type of the <CODE>PdfObject</CODE> that is referenced to
             @param        number            the object number.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfIndirectReference.Number">
             Returns the number of the object.
            
             @return        a number.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfIndirectReference.Generation">
             Returns the generation of the object.
            
             @return        a number.
        </member>
        <member name="T:iTextSharp.text.pdf.PdfLayer">
             An optional content group is a dictionary representing a collection of graphics
             that can be made visible or invisible dynamically by users of viewer applications.
             In iText they are referenced as layers.
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:iTextSharp.text.pdf.PdfLayer.on">
            Holds value of property on.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfLayer.onPanel">
            Holds value of property onPanel.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfLayer.CreateTitle(System.String,iTextSharp.text.pdf.PdfWriter)">
            Creates a title layer. A title layer is not really a layer but a collection of layers
            under the same title heading.
            @param title the title text
            @param writer the <CODE>PdfWriter</CODE>
            @return the title layer
        </member>
        <member name="M:iTextSharp.text.pdf.PdfLayer.#ctor(System.String,iTextSharp.text.pdf.PdfWriter)">
            Creates a new layer.
            @param name the name of the layer
            @param writer the writer
        </member>
        <member name="M:iTextSharp.text.pdf.PdfLayer.AddChild(iTextSharp.text.pdf.PdfLayer)">
            Adds a child layer. Nested layers can only have one parent.
            @param child the child layer
        </member>
        <member name="M:iTextSharp.text.pdf.PdfLayer.SetCreatorInfo(System.String,System.String)">
            Used by the creating application to store application-specific
            data associated with this optional content group.
            @param creator a text string specifying the application that created the group
            @param subtype a string defining the type of content controlled by the group. Suggested
            values include but are not limited to <B>Artwork</B>, for graphic-design or publishing
            applications, and <B>Technical</B>, for technical designs such as building plans or
            schematics
        </member>
        <member name="M:iTextSharp.text.pdf.PdfLayer.SetLanguage(System.String,System.Boolean)">
            Specifies the language of the content controlled by this
            optional content group
            @param lang a language string which specifies a language and possibly a locale
            (for example, <B>es-MX</B> represents Mexican Spanish)
            @param preferred used by viewer applications when there is a partial match but no exact
            match between the system language and the language strings in all usage dictionaries
        </member>
        <member name="M:iTextSharp.text.pdf.PdfLayer.SetZoom(System.Single,System.Single)">
            Specifies a range of magnifications at which the content
            in this optional content group is best viewed.
            @param min the minimum recommended magnification factors at which the group
            should be ON. A negative value will set the default to 0
            @param max the maximum recommended magnification factor at which the group
            should be ON. A negative value will set the largest possible magnification supported by the
            viewer application
        </member>
        <member name="M:iTextSharp.text.pdf.PdfLayer.SetPrint(System.String,System.Boolean)">
            Specifies that the content in this group is intended for
            use in printing
            @param subtype a name specifying the kind of content controlled by the group;
            for example, <B>Trapping</B>, <B>PrintersMarks</B> and <B>Watermark</B>
            @param printstate indicates that the group should be
            set to that state when the document is printed from a viewer application
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLayer.Parent">
            Gets the parent layer.
            @return the parent layer or <CODE>null</CODE> if the layer has no parent
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLayer.Children">
            Gets the children layers.
            @return the children layers or <CODE>null</CODE> if the layer has no children
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLayer.Ref">
            Gets the <CODE>PdfIndirectReference</CODE> that represents this layer.
            @return the <CODE>PdfIndirectReference</CODE> that represents this layer
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLayer.Name">
            Sets the name of this layer.
            @param name the name of this layer
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLayer.PdfObject">
            Gets the dictionary representing the layer. It just returns <CODE>this</CODE>.
            @return the dictionary representing the layer
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLayer.On">
            Gets the initial visibility of the layer.
            @return the initial visibility of the layer
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLayer.Export">
            Specifies the recommended state for content in this
            group when the document (or part of it) is saved by a viewer application to a format
            that does not support optional content (for example, an earlier version of
            PDF or a raster image format).
            @param export the export state
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLayer.View">
            Indicates that the group should be set to that state when the
            document is opened in a viewer application.
            @param view the view state
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLayer.OnPanel">
            Gets the layer visibility in Acrobat's layer panel
            @return the layer visibility in Acrobat's layer panel
            Sets the visibility of the layer in Acrobat's layer panel. If <CODE>false</CODE>
            the layer cannot be directly manipulated by the user. Note that any children layers will
            also be absent from the panel.
            @param onPanel the visibility of the layer in Acrobat's layer panel
        </member>
        <member name="T:iTextSharp.text.pdf.PdfLayerMembership">
             Content typically belongs to a single optional content group,
             and is visible when the group is <B>ON</B> and invisible when it is <B>OFF</B>. To express more
             complex visibility policies, content should not declare itself to belong to an optional
             content group directly, but rather to an optional content membership dictionary
             represented by this class.
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:iTextSharp.text.pdf.PdfLayerMembership.ALLON">
            Visible only if all of the entries are <B>ON</B>.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfLayerMembership.ANYON">
            Visible if any of the entries are <B>ON</B>.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfLayerMembership.ANYOFF">
            Visible if any of the entries are <B>OFF</B>.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfLayerMembership.ALLOFF">
            Visible only if all of the entries are <B>OFF</B>.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfLayerMembership.#ctor(iTextSharp.text.pdf.PdfWriter)">
            Creates a new, empty, membership layer.
            @param writer the writer
        </member>
        <member name="M:iTextSharp.text.pdf.PdfLayerMembership.AddMember(iTextSharp.text.pdf.PdfLayer)">
            Adds a new member to the layer.
            @param layer the new member to the layer
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLayerMembership.Ref">
            Gets the <CODE>PdfIndirectReference</CODE> that represents this membership layer.
            @return the <CODE>PdfIndirectReference</CODE> that represents this layer
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLayerMembership.Layers">
            Gets the member layers.
            @return the member layers
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLayerMembership.VisibilityPolicy">
            Sets the visibility policy for content belonging to this
            membership dictionary. Possible values are ALLON, ANYON, ANYOFF and ALLOFF.
            The default value is ANYON.
            @param type the visibility policy
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLayerMembership.PdfObject">
            Gets the dictionary representing the membership layer. It just returns <CODE>this</CODE>.
            @return the dictionary representing the layer
        </member>
        <member name="T:iTextSharp.text.pdf.PdfLine">
            <CODE>PdfLine</CODE> defines an array with <CODE>PdfChunk</CODE>-objects
            that fit into 1 line.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfLine.line">
            The arraylist containing the chunks. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfLine.left">
            The left indentation of the line. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfLine.width">
            The width of the line. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfLine.alignment">
            The alignment of the line. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfLine.height">
            The heigth of the line. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfLine.listSymbol">
            The listsymbol (if necessary). 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfLine.symbolIndent">
            The listsymbol (if necessary). 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfLine.newlineSplit">
            <CODE>true</CODE> if the chunk splitting was caused by a newline. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfLine.originalWidth">
            The original width. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfLine.#ctor(System.Single,System.Single,System.Int32,System.Single)">
             Constructs a new <CODE>PdfLine</CODE>-object.
            
             @param    left        the limit of the line at the left
             @param    right        the limit of the line at the right
             @param    alignment    the alignment of the line
             @param    height        the height of the line
        </member>
        <member name="M:iTextSharp.text.pdf.PdfLine.Add(iTextSharp.text.pdf.PdfChunk)">
             Adds a <CODE>PdfChunk</CODE> to the <CODE>PdfLine</CODE>.
            
             @param        chunk        the <CODE>PdfChunk</CODE> to add
             @return        <CODE>null</CODE> if the chunk could be added completely; if not
                            a <CODE>PdfChunk</CODE> containing the part of the chunk that could
                            not be added is returned
        </member>
        <member name="M:iTextSharp.text.pdf.PdfLine.GetEnumerator">
             Returns an iterator of <CODE>PdfChunk</CODE>s.
            
             @return    an <CODE>Iterator</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfLine.HasToBeJustified">
             Checks if this line has to be justified.
            
             @return    <CODE>true</CODE> if the alignment equals <VAR>ALIGN_JUSTIFIED</VAR> and there is some width left.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfLine.ResetAlignment" -->
        <member name="M:iTextSharp.text.pdf.PdfLine.ToString">
             Get the string representation of what is in this line.
            
             @return    a <CODE>string</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfLine.GetChunk(System.Int32)">
            Gets a <CODE>PdfChunk</CODE> by index.
            @param idx the index
            @return the <CODE>PdfChunk</CODE> or null if beyond the array
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLine.Size">
             Returns the number of chunks in the line.
            
             @return    a value
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLine.Height">
             Returns the height of the line.
            
             @return    a value
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLine.IndentLeft">
             Returns the left indentation of the line taking the alignment of the line into account.
            
             @return    a value
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLine.WidthLeft">
             Returns the width that is left, after a maximum of characters is added to the line.
            
             @return    a value
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLine.NumberOfSpaces">
             Returns the number of space-characters in this line.
            
             @return    a value
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "P:iTextSharp.text.pdf.PdfLine.ListItem" -->
        <member name="P:iTextSharp.text.pdf.PdfLine.ListSymbol">
             Returns the listsymbol of this line.
            
             @return    a <CODE>PdfChunk</CODE> if the line has a listsymbol; <CODE>null</CODE> otherwise
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLine.ListIndent">
             Return the indentation needed to show the listsymbol.
            
             @return    a value
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLine.NewlineSplit">
            Checks if a newline caused the line split.
            @return <CODE>true</CODE> if a newline caused the line split
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLine.LastStrokeChunk">
            Gets the index of the last <CODE>PdfChunk</CODE> with metric attributes
            @return the last <CODE>PdfChunk</CODE> with metric attributes
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLine.OriginalWidth">
            Gets the original width of the line.
            @return the original width of the line
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLine.MaxSize">
            Gets the maximum size of all the fonts used in this line
            including images (if there are images in the line and if
            the leading has to be changed).
            @return maximum size of all the fonts used in this line
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLine.MaxSizeSimple">
            Gets the maximum size of all the fonts used in this line
            including images.
            @return maximum size of all the fonts used in this line
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLine.Ascender">
            Gets the maximum size of the ascender for all the fonts used
            in this line.
            @return maximum size of all the ascenders used in this line
        </member>
        <member name="P:iTextSharp.text.pdf.PdfLine.Descender">
            Gets the biggest descender for all the fonts used 
            in this line.  Note that this is a negative number.
            @return maximum size of all the ascenders used in this line
        </member>
        <member name="T:iTextSharp.text.pdf.PdfLiteral">
            a Literal
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.pdf.PdfName" -->
        <member name="F:iTextSharp.text.pdf.PdfName.A">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.AA">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ABSOLUTECALORIMETRIC">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.AC">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ACROFORM">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ACTION">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ADBE_PKCS7_DETACHED">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ADBE_PKCS7_SHA1">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ADBE_X509_RSA_SHA1">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ADOBE_PPKLITE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ADOBE_PPKMS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.AIS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ALLPAGES">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ALTERNATE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ANNOT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ANTIALIAS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ANNOTS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.AP">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ARTBOX">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ASCENT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.AS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ASCII85DECODE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ASCIIHEXDECODE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.AUTHOR">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.B">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.BASEENCODING">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.BASEFONT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.BBOX">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.BC">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.BG">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.BIGFIVE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.BITSPERCOMPONENT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.BITSPERSAMPLE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.BL">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.BLACKIS1">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.BLACKPOINT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.BLEEDBOX">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.BLINDS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.BM">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.BORDER">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.BOUNDS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.BOX">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.BS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.BTN">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.BYTERANGE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.C">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.C0">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.C1">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CA">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ca_">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CALGRAY">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CALRGB">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CAPHEIGHT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CATALOG">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CATEGORY">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CCITTFAXDECODE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CENTERWINDOW">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CERT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CH">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CHARPROCS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CIDFONTTYPE0">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CIDFONTTYPE2">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CIDSYSTEMINFO">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CIDTOGIDMAP">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CIRCLE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CO">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.COLORS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.COLORSPACE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.COLUMNS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CONTACTINFO">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CONTENT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CONTENTS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.COORDS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.COUNT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.COURIER">
            A name of a base 14 type 1 font 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.COURIER_BOLD">
            A name of a base 14 type 1 font 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.COURIER_OBLIQUE">
            A name of a base 14 type 1 font 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.COURIER_BOLDOBLIQUE">
            A name of a base 14 type 1 font 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CREATIONDATE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CREATOR">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CREATORINFO">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CROPBOX">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.CS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.D">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DA">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DC">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DCTDECODE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DECODE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DECODEPARMS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DEFAULTCMYK">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DEFAULTGRAY">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DEFAULTRGB">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DESCENDANTFONTS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DESCENT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DEST">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DESTOUTPUTPROFILE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DESTS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DEVICEGRAY">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DEVICERGB">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DEVICECMYK">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DI">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DIFFERENCES">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DISSOLVE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DIRECTION">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DISPLAYDOCTITLE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DM">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DOMAIN">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DP">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DR">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DUR">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DV">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.DW">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.E">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.EARLYCHANGE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.EF">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.EMBEDDEDFILE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ENCODE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ENCODEDBYTEALIGN">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ENCODING">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ENCRYPT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ENDOFBLOCK">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ENDOFLINE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.EXTEND">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.EXTGSTATE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.EXPORT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.EXPORTSTATE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.EVENT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.F">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FB">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FDECODEPARMS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FDF">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FF">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FFILTER">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FIELDS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FILEATTACHMENT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FILESPEC">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FILTER">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FIRST">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FIRSTCHAR">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FIRSTPAGE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FIT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FITH">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FITV">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FITR">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FITB">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FITBH">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FITBV">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FITWINDOW">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FLAGS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FLATEDECODE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FO">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FONT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FONTBBOX">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FONTDESCRIPTOR">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FONTFILE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FONTFILE2">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FONTFILE3">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FONTMATRIX">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FONTNAME">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FORM">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FORMTYPE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FREETEXT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FRM">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FULLSCREEN">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FUNCTION">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FUNCTIONS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.FUNCTIONTYPE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.GAMMA">
            A name of an attribute. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.GBK">
            A name of an attribute. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.GLITTER">
            A name of an attribute. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.GOTO">
            A name of an attribute. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.GOTOR">
            A name of an attribute. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.GROUP">
            A name of an attribute. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.GTS_PDFX">
            A name of an attribute. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.GTS_PDFXVERSION">
            A name of an attribute. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.H">
            A name of an attribute. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.HEIGHT">
            A name of an attribute. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.HELVETICA">
            A name of a base 14 type 1 font 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.HELVETICA_BOLD">
            A name of a base 14 type 1 font 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.HELVETICA_OBLIQUE">
            This is a static PdfName PdfName of a base 14 type 1 font 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.HELVETICA_BOLDOBLIQUE">
            This is a static PdfName PdfName of a base 14 type 1 font 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.HID">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.HIDE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.HIDEMENUBAR">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.HIDETOOLBAR">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.HIDEWINDOWUI">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.HIGHLIGHT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.I">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ICCBASED">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ID">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.IDENTITY">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.IF">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.IMAGE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.IMAGEB">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.IMAGEC">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.IMAGEI">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.IMAGEMASK">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.INDEX">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.INDEXED">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.INFO">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.INK">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.INKLIST">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.IMPORTDATA">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.INTENT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.INTERPOLATE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ISMAP">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.IRT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ITALICANGLE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.IX">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.JAVASCRIPT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.JS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.K">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.KEYWORDS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.KIDS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.L">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.L2R">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.LANG">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.LANGUAGE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.LAST">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.LASTCHAR">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.LASTPAGE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.LAUNCH">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.LENGTH">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.LENGTH1">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.LIMITS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.LINE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.LINK">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.LISTMODE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.LOCATION">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.LOCK">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.LZWDECODE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.M">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.MATRIX">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.MAC_EXPERT_ENCODING">
            A name of an encoding 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.MAC_ROMAN_ENCODING">
            A name of an encoding 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.MASK">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.MAX">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.MAXLEN">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.MEDIABOX">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.METADATA">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.MIN">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.MK">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.MMTYPE1">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.MODDATE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.N">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.N0">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.N1">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.N2">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.N3">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.N4">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.NAME">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.NAMED">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.NAMES">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.NEEDAPPEARANCES">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.NEWWINDOW">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.NEXT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.NEXTPAGE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.NM">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.NONE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.NONFULLSCREENPAGEMODE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.NUMS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.O">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.OBJSTM">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.OC">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.OCG">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.OCGS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.OCMD">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.OCPROPERTIES">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Off_">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.OFF">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ON">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ONECOLUMN">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.OPEN">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.OPENACTION">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.OP">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.op_">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.OPM">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.OPT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ORDER">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ORDERING">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.OUTLINES">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.OUTPUTCONDITION">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.OUTPUTCONDITIONIDENTIFIER">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.OUTPUTINTENT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.OUTPUTINTENTS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.P">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PAGE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PAGELABELS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PAGELAYOUT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PAGEMODE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PAGES">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PAINTTYPE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PANOSE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PARAMS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PARENT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PATTERN">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PATTERNTYPE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PDF">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PERCEPTUAL">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.POPUP">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PREDICTOR">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PREFERRED">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PRESERVERB">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PREV">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PREVPAGE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PRINT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PRINTSCALING">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PRINTSTATE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PROCSET">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PRODUCER">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PROPERTIES">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.PS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.Q">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.QUADPOINTS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.R">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.R2L">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.RANGE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.RC">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.RBGROUPS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.REASON">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.RECT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.REGISTRY">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.REGISTRYNAME">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.RELATIVECALORIMETRIC">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.RENDITION">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.RESETFORM">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.RESOURCES">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.RI">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ROOT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ROTATE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ROWS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.RUNLENGTHDECODE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.RV">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.S">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.SATURATION">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.SCREEN">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.SEPARATION">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.SETOCGSTATE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.SHADING">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.SHADINGTYPE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.SHIFT_JIS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.SIG">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.SIGFLAGS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.SINGLEPAGE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.SIZE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.SMASK">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.SPLIT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.SQUARE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ST">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.STAMP">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.STANDARD">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.STATE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.STRIKEOUT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.STRUCTPARENT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.STYLE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.STEMV">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.SUBFILTER">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.SUBJECT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.SUBMITFORM">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.SUBTYPE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.SUPPLEMENT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.SV">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.SW">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.SYMBOL">
            A name of a base 14 type 1 font 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.T">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TEXT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.THUMB">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.THREADS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TI">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TILINGTYPE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TIMES_ROMAN">
            A name of a base 14 type 1 font 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TIMES_BOLD">
            A name of a base 14 type 1 font 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TIMES_ITALIC">
            A name of a base 14 type 1 font 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TIMES_BOLDITALIC">
            A name of a base 14 type 1 font 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TITLE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TK">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TM">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TOGGLE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TOUNICODE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TP">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TRANS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TRANSPARENCY">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TRAPPED">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TRIMBOX">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TRUETYPE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TU">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TWOCOLUMNLEFT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TWOCOLUMNRIGHT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TX">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TYPE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TYPE0">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TYPE1">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.TYPE3">
            A name of an attribute. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.U">
            A name of an attribute. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.UHC">
            A name of an attribute. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.UNDERLINE">
            A name of an attribute. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.URI">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.URL">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.USAGE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.USENONE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.USEOC">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.USEOUTLINES">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.USER">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.USERUNIT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.USETHUMBS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.V">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.VERISIGN_PPKVS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.VIEW">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.VIEWERPREFERENCES">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.VIEWSTATE">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.VISIBLEPAGES">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.W">
            A name of an attribute. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.W2">
            A name of an attribute. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.WC">
            A name of an attribute. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.WIDGET">
            A name of an attribute. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.WIDTH">
            A name of an attribute. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.WIDTHS">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.WIN">
            A name of an encoding 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.WIN_ANSI_ENCODING">
            A name of an encoding 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.WIPE">
            A name of an encoding 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.WHITEPOINT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.WP">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.WS">
            A name of an encoding 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.X">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.XOBJECT">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.XSTEP">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.XREF">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.XREFSTM">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.XYZ">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.YSTEP">
            A name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ZAPFDINGBATS">
            A name of a base 14 type 1 font 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfName.ZOOM">
            A name 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfName.#ctor(System.String)">
             Constructs a <CODE>PdfName</CODE>-object.
            
             @param        name        the new Name.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfName.CompareTo(System.Object)" -->
        <member name="M:iTextSharp.text.pdf.PdfName.Equals(System.Object)">
             Indicates whether some other object is "equal to" this one.
            
             @param   obj   the reference object with which to compare.
             @return  <code>true</code> if this object is the same as the obj
                      argument; <code>false</code> otherwise.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfName.GetHashCode">
             Returns a hash code value for the object. This method is
             supported for the benefit of hashtables such as those provided by
             <code>java.util.Hashtable</code>.
            
             @return  a hash code value for this object.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfName.DecodeName(System.String)">
            Decodes an escaped name in the form "/AB#20CD" into "AB CD".
            @param name the name to decode
            @return the decoded name
        </member>
        <member name="T:iTextSharp.text.pdf.PdfNameTree">
            Creates a name tree.
            @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfNameTree.WriteTree(System.Collections.Hashtable,iTextSharp.text.pdf.PdfWriter)">
            Creates a name tree.
            @param items the item of the name tree. The key is a <CODE>String</CODE>
            and the value is a <CODE>PdfIndirectReference</CODE>. Note that although the
            keys are strings only the lower byte is used and no check is made for chars
            with the same lower byte and different upper byte. This will generate a wrong
            tree name.
            @param writer the writer
            @throws IOException on error
            @return the dictionary with the name tree. This dictionary is the one
            generally pointed to by the key /Dests
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.pdf.PdfNull" -->
        <member name="F:iTextSharp.text.pdf.PdfNull.PDFNULL">
            This is an instance of the <CODE>PdfNull</CODE>-object. 
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfNull.#ctor" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.pdf.PdfNumber" -->
        <member name="F:iTextSharp.text.pdf.PdfNumber.value">
            actual value of this <CODE>PdfNumber</CODE>, represented as a <CODE>double</CODE> 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfNumber.#ctor(System.String)">
             Constructs a <CODE>PdfNumber</CODE>-object.
            
             @param        content            value of the new <CODE>PdfNumber</CODE>-object
        </member>
        <member name="M:iTextSharp.text.pdf.PdfNumber.#ctor(System.Int32)">
             Constructs a new int <CODE>PdfNumber</CODE>-object.
            
             @param        value                value of the new <CODE>PdfNumber</CODE>-object
        </member>
        <member name="M:iTextSharp.text.pdf.PdfNumber.#ctor(System.Double)">
             Constructs a new REAL <CODE>PdfNumber</CODE>-object.
            
             @param        value                value of the new <CODE>PdfNumber</CODE>-object
        </member>
        <member name="M:iTextSharp.text.pdf.PdfNumber.#ctor(System.Single)">
             Constructs a new REAL <CODE>PdfNumber</CODE>-object.
            
             @param        value                value of the new <CODE>PdfNumber</CODE>-object
        </member>
        <member name="M:iTextSharp.text.pdf.PdfNumber.Increment">
            Increments the value of the <CODE>PdfNumber</CODE>-object with 1.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfNumber.IntValue">
             Returns the primitive <CODE>int</CODE> value of this object.
            
             @return        a value
        </member>
        <member name="P:iTextSharp.text.pdf.PdfNumber.DoubleValue">
             Returns the primitive <CODE>double</CODE> value of this object.
            
             @return        a value
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.pdf.PdfOutline" -->
        <member name="F:iTextSharp.text.pdf.PdfOutline.reference">
            the <CODE>PdfIndirectReference</CODE> of this object 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfOutline.count">
            value of the <B>Count</B>-key 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfOutline.parent">
            value of the <B>Parent</B>-key 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfOutline.destination">
            value of the <B>Destination</B>-key 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfOutline.action">
            The <CODE>PdfAction</CODE> for this outline.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfOutline.tag">
            Holds value of property tag. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfOutline.open">
            Holds value of property open. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfOutline.color">
            Holds value of property color. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfOutline.style">
            Holds value of property style. 
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfOutline.#ctor(iTextSharp.text.pdf.PdfWriter)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfOutline.#ctor(iTextSharp.text.pdf.PdfOutline,iTextSharp.text.pdf.PdfAction,System.String)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfOutline.#ctor(iTextSharp.text.pdf.PdfOutline,iTextSharp.text.pdf.PdfAction,System.String,System.Boolean)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfOutline.#ctor(iTextSharp.text.pdf.PdfOutline,iTextSharp.text.pdf.PdfDestination,System.String)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfOutline.#ctor(iTextSharp.text.pdf.PdfOutline,iTextSharp.text.pdf.PdfDestination,System.String,System.Boolean)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfOutline.#ctor(iTextSharp.text.pdf.PdfOutline,iTextSharp.text.pdf.PdfAction,iTextSharp.text.pdf.PdfString)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfOutline.#ctor(iTextSharp.text.pdf.PdfOutline,iTextSharp.text.pdf.PdfAction,iTextSharp.text.pdf.PdfString,System.Boolean)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfOutline.#ctor(iTextSharp.text.pdf.PdfOutline,iTextSharp.text.pdf.PdfDestination,iTextSharp.text.pdf.PdfString)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfOutline.#ctor(iTextSharp.text.pdf.PdfOutline,iTextSharp.text.pdf.PdfDestination,iTextSharp.text.pdf.PdfString,System.Boolean)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfOutline.#ctor(iTextSharp.text.pdf.PdfOutline,iTextSharp.text.pdf.PdfAction,iTextSharp.text.Paragraph)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfOutline.#ctor(iTextSharp.text.pdf.PdfOutline,iTextSharp.text.pdf.PdfAction,iTextSharp.text.Paragraph,System.Boolean)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfOutline.#ctor(iTextSharp.text.pdf.PdfOutline,iTextSharp.text.pdf.PdfDestination,iTextSharp.text.Paragraph)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfOutline.#ctor(iTextSharp.text.pdf.PdfOutline,iTextSharp.text.pdf.PdfDestination,iTextSharp.text.Paragraph,System.Boolean)" -->
        <member name="M:iTextSharp.text.pdf.PdfOutline.InitOutline(iTextSharp.text.pdf.PdfOutline,System.String,System.Boolean)">
            Helper for the constructors.
            @param parent the parent outline
            @param title the title for this outline
            @param open <CODE>true</CODE> if the children are visible
        </member>
        <member name="M:iTextSharp.text.pdf.PdfOutline.SetDestinationPage(iTextSharp.text.pdf.PdfIndirectReference)">
             Set the page of the <CODE>PdfDestination</CODE>-object.
            
             @param pageReference indirect reference to the page
             @return <CODE>true</CODE> if this page was set as the <CODE>PdfDestination</CODE>-page.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfOutline.ToPdf(iTextSharp.text.pdf.PdfWriter,System.IO.Stream)">
             Returns the PDF representation of this <CODE>PdfOutline</CODE>.
            
             @param writer the encryption information
             @param os
             @throws IOException
        </member>
        <member name="P:iTextSharp.text.pdf.PdfOutline.IndirectReference">
             Gets the indirect reference of this <CODE>PdfOutline</CODE>.
            
             @return      the <CODE>PdfIndirectReference</CODE> to this outline.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfOutline.Parent">
             Gets the parent of this <CODE>PdfOutline</CODE>.
            
             @return      the <CODE>PdfOutline</CODE> that is the parent of this outline.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfOutline.PdfDestination">
            Gets the destination for this outline.
            @return the destination
        </member>
        <member name="P:iTextSharp.text.pdf.PdfOutline.Level">
             returns the level of this outline.
            
             @return      a level
        </member>
        <member name="P:iTextSharp.text.pdf.PdfOutline.Tag">
            Getter for property tag.
            @return Value of property tag.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfOutline.Open">
            Setter for property open.
            @param open New value of property open.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.pdf.PdfPage" -->
        <member name="F:iTextSharp.text.pdf.PdfPage.PORTRAIT">
            value of the <B>Rotate</B> key for a page in PORTRAIT 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPage.LANDSCAPE">
            value of the <B>Rotate</B> key for a page in LANDSCAPE 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPage.INVERTEDPORTRAIT">
            value of the <B>Rotate</B> key for a page in INVERTEDPORTRAIT 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPage.SEASCAPE">
            value of the <B>Rotate</B> key for a page in SEASCAPE 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPage.mediaBox">
            value of the <B>MediaBox</B> key 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPage.#ctor(iTextSharp.text.pdf.PdfRectangle,System.Collections.Hashtable,iTextSharp.text.pdf.PdfDictionary,System.Int32)">
             Constructs a <CODE>PdfPage</CODE>.
            
             @param       mediaBox        a value for the <B>MediaBox</B> key
             @param       resources       an indirect reference to a <CODE>PdfResources</CODE>-object
             @param       rotate          a value for the <B>Rotate</B> key
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPage.#ctor(iTextSharp.text.pdf.PdfRectangle,System.Collections.Hashtable,iTextSharp.text.pdf.PdfDictionary)">
             Constructs a <CODE>PdfPage</CODE>.
            
             @param       mediaBox        a value for the <B>MediaBox</B> key
             @param       resources       an indirect reference to a <CODE>PdfResources</CODE>-object
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfPage.IsParent" -->
        <member name="M:iTextSharp.text.pdf.PdfPage.Add(iTextSharp.text.pdf.PdfIndirectReference)">
             Adds an indirect reference pointing to a <CODE>PdfContents</CODE>-object.
            
             @param       contents        an indirect reference to a <CODE>PdfContents</CODE>-object
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPage.RotateMediaBox">
             Rotates the mediabox, but not the text in it.
            
             @return      a <CODE>PdfRectangle</CODE>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPage.MediaBox">
             Returns the MediaBox of this Page.
            
             @return      a <CODE>PdfRectangle</CODE>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfPageEventHelper">
             Helps the use of <CODE>PdfPageEvent</CODE> by implementing all the interface methods.
             A class can extend <CODE>PdfPageEventHelper</CODE> and only implement the
             needed methods.
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPageEventHelper.OnOpenDocument(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document)">
             Called when the document is opened.
            
             @param writer the <CODE>PdfWriter</CODE> for this document
             @param document the document
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfPageEventHelper.OnStartPage(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document)" -->
        <member name="M:iTextSharp.text.pdf.PdfPageEventHelper.OnEndPage(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document)">
             Called when a page is finished, just before being written to the document.
            
             @param writer the <CODE>PdfWriter</CODE> for this document
             @param document the document
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfPageEventHelper.OnCloseDocument(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfPageEventHelper.OnParagraph(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,System.Single)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfPageEventHelper.OnParagraphEnd(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,System.Single)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfPageEventHelper.OnChapter(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,System.Single,iTextSharp.text.Paragraph)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfPageEventHelper.OnChapterEnd(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,System.Single)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfPageEventHelper.OnSection(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,System.Single,System.Int32,iTextSharp.text.Paragraph)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfPageEventHelper.OnSectionEnd(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,System.Single)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfPageEventHelper.OnGenericTag(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Document,iTextSharp.text.Rectangle,System.String)" -->
        <member name="T:iTextSharp.text.pdf.PdfPageLabels">
            Page labels are used to identify each
            page visually on the screen or in print.
            @author  Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPageLabels.DECIMAL_ARABIC_NUMERALS">
            Logical pages will have the form 1,2,3,...
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPageLabels.UPPERCASE_ROMAN_NUMERALS">
            Logical pages will have the form I,II,III,IV,...
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPageLabels.LOWERCASE_ROMAN_NUMERALS">
            Logical pages will have the form i,ii,iii,iv,...
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPageLabels.UPPERCASE_LETTERS">
            Logical pages will have the form of uppercase letters
            (A to Z for the first 26 pages, AA to ZZ for the next 26, and so on)
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPageLabels.LOWERCASE_LETTERS">
            Logical pages will have the form of uppercase letters
            (a to z for the first 26 pages, aa to zz for the next 26, and so on)
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPageLabels.EMPTY">
            No logical page numbers are generated but fixed text may
            still exist
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPageLabels.numberingStyle">
            Dictionary values to set the logical page styles
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPageLabels.map">
            The sequence of logical pages. Will contain at least a value for page 1
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPageLabels.#ctor">
            Creates a new PdfPageLabel with a default logical page 1
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPageLabels.Compare(System.Object,System.Object)">
            Compares two <CODE>int</CODE>.
            @param obj the first <CODE>int</CODE>
            @param obj1 the second <CODE>int</CODE>
            @return a negative int, zero, or a positive int as the first argument is less than, equal to, or greater than the second
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPageLabels.Equals(System.Object)">
            Not used
            @param obj not used
            @return always <CODE>true</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPageLabels.AddPageLabel(System.Int32,System.Int32,System.String,System.Int32)">
            Adds or replaces a page label.
            @param page the real page to start the numbering. First page is 1
            @param numberStyle the numbering style such as LOWERCASE_ROMAN_NUMERALS
            @param text the text to prefix the number. Can be <CODE>null</CODE> or empty
            @param firstPage the first logical page number
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPageLabels.AddPageLabel(System.Int32,System.Int32,System.String)">
            Adds or replaces a page label. The first logical page has the default
            of 1.
            @param page the real page to start the numbering. First page is 1
            @param numberStyle the numbering style such as LOWERCASE_ROMAN_NUMERALS
            @param text the text to prefix the number. Can be <CODE>null</CODE> or empty
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPageLabels.AddPageLabel(System.Int32,System.Int32)">
            Adds or replaces a page label. There is no text prefix and the first
            logical page has the default of 1.
            @param page the real page to start the numbering. First page is 1
            @param numberStyle the numbering style such as LOWERCASE_ROMAN_NUMERALS
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPageLabels.RemovePageLabel(System.Int32)">
            Removes a page label. The first page lagel can not be removed, only changed.
            @param page the real page to remove
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPageLabels.Dictionary">
            Gets the page label dictionary to insert into the document.
            @return the page label dictionary
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.pdf.PdfPages" -->
        <member name="M:iTextSharp.text.pdf.PdfPages.#ctor(iTextSharp.text.pdf.PdfWriter)">
            Constructs a <CODE>PdfPages</CODE>-object.
        </member>
        <member name="T:iTextSharp.text.pdf.PdfPattern">
             A <CODE>PdfPattern</CODE> defines a ColorSpace
            
             @see     PdfStream
        </member>
        <member name="T:iTextSharp.text.pdf.PdfPatternPainter">
            Implements the pattern.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.#ctor">
            Creates a <CODE>PdfPattern</CODE>.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.#ctor(iTextSharp.text.pdf.PdfWriter)">
             Creates new PdfPattern
            
             @param wr the <CODE>PdfWriter</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.SetGrayFill(System.Single)">
            @see com.lowagie.text.pdf.PdfContentByte#setGrayFill(float)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.ResetGrayFill">
            @see com.lowagie.text.pdf.PdfContentByte#resetGrayFill()
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.SetGrayStroke(System.Single)">
            @see com.lowagie.text.pdf.PdfContentByte#setGrayStroke(float)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.ResetGrayStroke">
            @see com.lowagie.text.pdf.PdfContentByte#resetGrayStroke()
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.SetRGBColorFillF(System.Single,System.Single,System.Single)">
            @see com.lowagie.text.pdf.PdfContentByte#setRGBColorFillF(float, float, float)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.ResetRGBColorFill">
            @see com.lowagie.text.pdf.PdfContentByte#resetRGBColorFill()
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.SetRGBColorStrokeF(System.Single,System.Single,System.Single)">
            @see com.lowagie.text.pdf.PdfContentByte#setRGBColorStrokeF(float, float, float)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.ResetRGBColorStroke">
            @see com.lowagie.text.pdf.PdfContentByte#resetRGBColorStroke()
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.SetCMYKColorFillF(System.Single,System.Single,System.Single,System.Single)">
            @see com.lowagie.text.pdf.PdfContentByte#setCMYKColorFillF(float, float, float, float)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.ResetCMYKColorFill">
            @see com.lowagie.text.pdf.PdfContentByte#resetCMYKColorFill()
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.SetCMYKColorStrokeF(System.Single,System.Single,System.Single,System.Single)">
            @see com.lowagie.text.pdf.PdfContentByte#setCMYKColorStrokeF(float, float, float, float)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.ResetCMYKColorStroke">
            @see com.lowagie.text.pdf.PdfContentByte#resetCMYKColorStroke()
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.AddImage(iTextSharp.text.Image,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            @see com.lowagie.text.pdf.PdfContentByte#addImage(com.lowagie.text.Image, float, float, float, float, float, float)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.SetCMYKColorFill(System.Int32,System.Int32,System.Int32,System.Int32)">
            @see com.lowagie.text.pdf.PdfContentByte#setCMYKColorFill(int, int, int, int)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.SetCMYKColorStroke(System.Int32,System.Int32,System.Int32,System.Int32)">
            @see com.lowagie.text.pdf.PdfContentByte#setCMYKColorStroke(int, int, int, int)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.SetRGBColorFill(System.Int32,System.Int32,System.Int32)">
            @see com.lowagie.text.pdf.PdfContentByte#setRGBColorFill(int, int, int)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.SetRGBColorStroke(System.Int32,System.Int32,System.Int32)">
            @see com.lowagie.text.pdf.PdfContentByte#setRGBColorStroke(int, int, int)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.SetColorStroke(iTextSharp.text.Color)">
            @see com.lowagie.text.pdf.PdfContentByte#setColorStroke(java.awt.Color)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.SetColorFill(iTextSharp.text.Color)">
            @see com.lowagie.text.pdf.PdfContentByte#setColorFill(java.awt.Color)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.SetColorFill(iTextSharp.text.pdf.PdfSpotColor,System.Single)">
            @see com.lowagie.text.pdf.PdfContentByte#setColorFill(com.lowagie.text.pdf.PdfSpotColor, float)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.SetColorStroke(iTextSharp.text.pdf.PdfSpotColor,System.Single)">
            @see com.lowagie.text.pdf.PdfContentByte#setColorStroke(com.lowagie.text.pdf.PdfSpotColor, float)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.SetPatternFill(iTextSharp.text.pdf.PdfPatternPainter)">
            @see com.lowagie.text.pdf.PdfContentByte#setPatternFill(com.lowagie.text.pdf.PdfPatternPainter)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.SetPatternFill(iTextSharp.text.pdf.PdfPatternPainter,iTextSharp.text.Color,System.Single)">
            @see com.lowagie.text.pdf.PdfContentByte#setPatternFill(com.lowagie.text.pdf.PdfPatternPainter, java.awt.Color, float)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.SetPatternStroke(iTextSharp.text.pdf.PdfPatternPainter,iTextSharp.text.Color,System.Single)">
            @see com.lowagie.text.pdf.PdfContentByte#setPatternStroke(com.lowagie.text.pdf.PdfPatternPainter, java.awt.Color, float)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPatternPainter.SetPatternStroke(iTextSharp.text.pdf.PdfPatternPainter)">
            @see com.lowagie.text.pdf.PdfContentByte#setPatternStroke(com.lowagie.text.pdf.PdfPatternPainter)
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPatternPainter.Pattern">
             Gets the stream representing this pattern
            
             @return the stream representing this pattern
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPatternPainter.Duplicate">
            Gets a duplicate of this <CODE>PdfPatternPainter</CODE>. All
            the members are copied by reference but the buffer stays different.
            @return a copy of this <CODE>PdfPatternPainter</CODE>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfPCell">
            A cell in a PdfPTable.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPCell.verticalAlignment">
            Holds value of property verticalAlignment. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPCell.paddingLeft">
            Holds value of property paddingLeft. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPCell.paddingRight">
            Holds value of property paddingLeft. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPCell.paddingTop">
            Holds value of property paddingTop. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPCell.paddingBottom">
            Holds value of property paddingBottom. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPCell.fixedHeight">
            Holds value of property fixedHeight. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPCell.noWrap">
            Holds value of property noWrap. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPCell.table">
            Holds value of property table. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPCell.minimumHeight">
            Holds value of property minimumHeight. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPCell.colspan">
            Holds value of property colspan. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPCell.image">
            Holds value of property image. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPCell.cellEvent">
            Holds value of property cellEvent. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPCell.useDescender">
            Holds value of property useDescender. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPCell.useBorderPadding">
            Increases padding to include border if true 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPCell.phrase">
            The text in the cell. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPCell.#ctor">
            Constructs an empty <CODE>PdfPCell</CODE>.
            The default padding is 2.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPCell.#ctor(iTextSharp.text.Phrase)">
            Constructs a <CODE>PdfPCell</CODE> with a <CODE>Phrase</CODE>.
            The default padding is 2.
            @param phrase the text
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPCell.#ctor(iTextSharp.text.Image)">
            Constructs a <CODE>PdfPCell</CODE> with an <CODE>Image</CODE>.
            The default padding is 0.
            @param image the <CODE>Image</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPCell.#ctor(iTextSharp.text.Image,System.Boolean)">
            Constructs a <CODE>PdfPCell</CODE> with an <CODE>Image</CODE>.
            The default padding is 0.25 for a border width of 0.5.
            @param image the <CODE>Image</CODE>
            @param fit <CODE>true</CODE> to fit the image to the cell
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPCell.#ctor(iTextSharp.text.pdf.PdfPTable)">
            Constructs a <CODE>PdfPCell</CODE> with a <CODE>PdfPtable</CODE>.
            This constructor allows nested tables.
            The default padding is 0.
            @param table The <CODE>PdfPTable</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPCell.#ctor(iTextSharp.text.pdf.PdfPCell)">
            Constructs a deep copy of a <CODE>PdfPCell</CODE>.
            @param cell the <CODE>PdfPCell</CODE> to duplicate
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPCell.AddElement(iTextSharp.text.IElement)">
            Adds an iText element to the cell.
            @param element
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPCell.SetLeading(System.Single,System.Single)">
            Sets the leading fixed and variable. The resultant leading will be
            fixedLeading+multipliedLeading*maxFontSize where maxFontSize is the
            size of the bigest font in the line.
            @param fixedLeading the fixed leading
            @param multipliedLeading the variable leading
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.Phrase">
            Gets the <CODE>Phrase</CODE> from this cell.
            @return the <CODE>Phrase</CODE>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.HorizontalAlignment">
            Gets the horizontal alignment for the cell.
            @return the horizontal alignment for the cell
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.VerticalAlignment">
            Gets the vertical alignment for the cell.
            @return the vertical alignment for the cell
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.EffectivePaddingLeft">
            Gets the effective left padding.  This will include
             the left border width if {@link #UseBorderPadding} is true.
            @return effective value of property paddingLeft.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.PaddingLeft">
            @return Value of property paddingLeft.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.EffectivePaddingRight">
            Gets the effective right padding.  This will include
             the right border width if {@link #UseBorderPadding} is true.
            @return effective value of property paddingRight.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.PaddingRight">
            Getter for property paddingRight.
            @return Value of property paddingRight.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.EffectivePaddingTop">
            Gets the effective top padding.  This will include
             the top border width if {@link #isUseBorderPadding()} is true.
            @return effective value of property paddingTop.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.PaddingTop">
            Getter for property paddingTop.
            @return Value of property paddingTop.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.EffectivePaddingBottom">
                    /** Gets the effective bottom padding.  This will include
                    *  the bottom border width if {@link #UseBorderPadding} is true.
                    * @return effective value of property paddingBottom.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.PaddingBottom">
            Getter for property paddingBottom.
            @return Value of property paddingBottom.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.Padding">
            Sets the padding of the contents in the cell (space between content and border).
            @param padding
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.UseBorderPadding">
            Adjusts effective padding to include border widths.
            @param use adjust effective padding if true
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.Leading">
            Gets the fixed leading
            @return the leading
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.MultipliedLeading">
            Gets the variable leading
            @return the leading
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.Indent">
            Gets the first paragraph line indent.
            @return the indent
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.ExtraParagraphSpace">
            Gets the extra space between paragraphs.
            @return the extra space between paragraphs
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.FixedHeight">
            Getter for property fixedHeight.
            @return Value of property fixedHeight.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.NoWrap">
            Setter for property noWrap.
            @param noWrap New value of property noWrap.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.Table">
            Getter for property table.
            @return Value of property table.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.MinimumHeight">
            Getter for property minimumHeight.
            @return Value of property minimumHeight.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.Colspan">
            Getter for property colspan.
            @return Value of property colspan.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.FollowingIndent">
            Gets the following paragraph lines indent.
            @return the indent
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.RightIndent">
            Gets the right paragraph lines indent.
            @return the indent
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.SpaceCharRatio">
            Gets the space/character extra spacing ratio for
            fully justified text.
            @return the space/character extra spacing ratio
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.RunDirection">
            Gets the run direction of the text content in the cell
            @return One of the following values: PdfWriter.RUN_DIRECTION_DEFAULT, PdfWriter.RUN_DIRECTION_NO_BIDI, PdfWriter.RUN_DIRECTION_LTR or PdfWriter.RUN_DIRECTION_RTL.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.Image">
            Getter for property image.
             @return Value of property image.
            
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.CellEvent">
            Gets the cell event for this cell.
             @return the cell event
            
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.ArabicOptions">
            Gets the arabic shaping options.
            @return the arabic shaping options
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.UseAscender">
            Gets state of first line height based on max ascender
            @return true if an ascender is to be used.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.UseDescender">
            Getter for property useDescender.
             @return Value of property useDescender.
            
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPCell.Column">
            Gets the ColumnText with the content of the cell.
            @return a columntext object
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.pdf.PdfPKCS7" -->
        <member name="F:iTextSharp.text.pdf.PdfPKCS7.reason">
            Holds value of property reason.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPKCS7.location">
            Holds value of property location.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPKCS7.signDate">
            Holds value of property signDate.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPKCS7.signName">
            Holds value of property signName.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPKCS7.#ctor(System.Byte[],System.Byte[])">
            Verifies a signature using the sub-filter adbe.x509.rsa_sha1.
            @param contentsKey the /Contents key
            @param certsKey the /Cert key
            @param provider the provider or <code>null</code> for the default provider
            @throws SecurityException on error
            @throws CRLException on error
            @throws InvalidKeyException on error
            @throws CertificateException on error
            @throws NoSuchProviderException on error
            @throws NoSuchAlgorithmException on error
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPKCS7.#ctor(System.Byte[])">
            Verifies a signature using the sub-filter adbe.pkcs7.detached or
            adbe.pkcs7.sha1.
            @param contentsKey the /Contents key
            @param provider the provider or <code>null</code> for the default provider
            @throws SecurityException on error
            @throws CRLException on error
            @throws InvalidKeyException on error
            @throws CertificateException on error
            @throws NoSuchProviderException on error
            @throws NoSuchAlgorithmException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPKCS7.#ctor(org.bouncycastle.crypto.CipherParameters,org.bouncycastle.x509.X509Certificate[],System.Object[],System.String,System.Boolean)">
            Generates a signature.
            @param privKey the private key
            @param certChain the certificate chain
            @param crlList the certificate revocation list
            @param hashAlgorithm the hash algorithm
            @param provider the provider or <code>null</code> for the default provider
            @param hasRSAdata <CODE>true</CODE> if the sub-filter is adbe.pkcs7.sha1
            @throws SecurityException on error
            @throws InvalidKeyException on error
            @throws NoSuchProviderException on error
            @throws NoSuchAlgorithmException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPKCS7.Update(System.Byte[],System.Int32,System.Int32)">
            Update the digest with the specified bytes. This method is used both for signing and verifying
            @param buf the data buffer
            @param off the offset in the data buffer
            @param len the data length
            @throws SignatureException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPKCS7.Verify">
            Verify the digest.
            @throws SignatureException on error
            @return <CODE>true</CODE> if the signature checks out, <CODE>false</CODE> otherwise
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPKCS7.GetDigestAlgorithm">
            Get the algorithm used to calculate the message digest
            @return the algorithm used to calculate the message digest
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPKCS7.GetHashAlgorithm">
            Returns the algorithm.
            @return the digest algorithm
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPKCS7.VerifyCertificate(org.bouncycastle.x509.X509Certificate,System.Object[],System.DateTime)">
            Verifies a single certificate.
            @param cert the certificate to verify
            @param crls the certificate revocation list or <CODE>null</CODE>
            @param calendar the date or <CODE>null</CODE> for the current date
            @return a <CODE>String</CODE> with the error description or <CODE>null</CODE>
            if no error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPKCS7.VerifyCertificates(org.bouncycastle.x509.X509Certificate[],System.Collections.ArrayList,System.Object[],System.DateTime)">
            Verifies a certificate chain against a KeyStore.
            @param certs the certificate chain
            @param keystore the <CODE>KeyStore</CODE>
            @param crls the certificate revocation list or <CODE>null</CODE>
            @param calendar the date or <CODE>null</CODE> for the current date
            @return <CODE>null</CODE> if the certificate chain could be validade or a
            <CODE>Object[]{cert,error}</CODE> where <CODE>cert</CODE> is the
            failed certificate and <CODE>error</CODE> is the error message
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPKCS7.GetIssuer(System.Byte[])">
            Get the "issuer" from the TBSCertificate bytes that are passed in
            @param enc a TBSCertificate in a byte array
            @return a DERObject
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPKCS7.GetSubject(System.Byte[])">
            Get the "subject" from the TBSCertificate bytes that are passed in
            @param enc A TBSCertificate in a byte array
            @return a DERObject
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPKCS7.GetIssuerFields(org.bouncycastle.x509.X509Certificate)">
            Get the issuer fields from an X509 Certificate
            @param cert an X509Certificate
            @return an X509Name
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPKCS7.GetSubjectFields(org.bouncycastle.x509.X509Certificate)">
            Get the subject fields from an X509 Certificate
            @param cert an X509Certificate
            @return an X509Name
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPKCS7.GetEncodedPKCS1">
            Gets the bytes for the PKCS#1 object.
            @return a byte array
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPKCS7.SetExternalDigest(System.Byte[],System.Byte[],System.String)">
            Sets the digest/signature to an external calculated value.
            @param digest the digest. This is the actual signature
            @param RSAdata the extra data that goes into the data tag in PKCS#7
            @param digestEncryptionAlgorithm the encryption algorithm. It may must be <CODE>null</CODE> if the <CODE>digest</CODE>
            is also <CODE>null</CODE>. If the <CODE>digest</CODE> is not <CODE>null</CODE>
            then it may be "RSA" or "DSA"
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPKCS7.GetEncodedPKCS7">
            Gets the bytes for the PKCS7SignedData object.
            @return the bytes for the PKCS7SignedData object
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPKCS7.GetEncodedPKCS7(System.Byte[],System.DateTime)">
            Gets the bytes for the PKCS7SignedData object. Optionally the authenticatedAttributes
            in the signerInfo can also be set. If either of the parameters is <CODE>null</CODE>, none will be used.
            @param secondDigest the digest in the authenticatedAttributes
            @param signingTime the signing time in the authenticatedAttributes
            @return the bytes for the PKCS7SignedData object
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfPKCS7.GetAuthenticatedAttributeBytes(System.Byte[],System.DateTime)" -->
        <member name="P:iTextSharp.text.pdf.PdfPKCS7.Certificates">
            Get the X.509 certificates associated with this PKCS#7 object
            @return the X.509 certificates associated with this PKCS#7 object
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPKCS7.CRLs">
            Get the X.509 certificate revocation lists associated with this PKCS#7 object
            @return the X.509 certificate revocation lists associated with this PKCS#7 object
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPKCS7.SigningCertificate">
            Get the X.509 certificate actually used to sign the digest.
            @return the X.509 certificate actually used to sign the digest
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPKCS7.Version">
            Get the version of the PKCS#7 object. Always 1
            @return the version of the PKCS#7 object. Always 1
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPKCS7.SigningInfoVersion">
            Get the version of the PKCS#7 "SignerInfo" object. Always 1
            @return the version of the PKCS#7 "SignerInfo" object. Always 1
        </member>
        <member name="T:iTextSharp.text.pdf.PdfPKCS7.X509Name">
            a class that holds an X509 name
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPKCS7.X509Name.C">
            country code - StringType(SIZE(2))
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPKCS7.X509Name.O">
            organization - StringType(SIZE(1..64))
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPKCS7.X509Name.OU">
            organizational unit name - StringType(SIZE(1..64))
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPKCS7.X509Name.T">
            Title
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPKCS7.X509Name.CN">
            common name - StringType(SIZE(1..64))
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPKCS7.X509Name.SN">
            device serial number name - StringType(SIZE(1..64))
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPKCS7.X509Name.L">
            locality name - StringType(SIZE(1..64))
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPKCS7.X509Name.ST">
            state, or province name - StringType(SIZE(1..64))
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPKCS7.X509Name.SURNAME">
            Naming attribute of type X520name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPKCS7.X509Name.GIVENNAME">
            Naming attribute of type X520name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPKCS7.X509Name.INITIALS">
            Naming attribute of type X520name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPKCS7.X509Name.GENERATION">
            Naming attribute of type X520name 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPKCS7.X509Name.UNIQUE_IDENTIFIER">
            Naming attribute of type X520name 
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "F:iTextSharp.text.pdf.PdfPKCS7.X509Name.EmailAddress" -->
        <member name="F:iTextSharp.text.pdf.PdfPKCS7.X509Name.E">
            email address in Verisign certificates
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPKCS7.X509Name.DC">
            object identifier 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPKCS7.X509Name.UID">
            LDAP User id. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPKCS7.X509Name.DefaultSymbols">
            A Hashtable with default symbols 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPKCS7.X509Name.values">
            A Hashtable with values 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPKCS7.X509Name.#ctor(org.bouncycastle.asn1.ASN1Sequence)">
            Constructs an X509 name
            @param seq an ASN1 Sequence
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPKCS7.X509Name.#ctor(System.String)">
            Constructs an X509 name
            @param dirName a directory name
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPKCS7.X509Name.GetFieldArray(System.String)">
            gets a field array from the values Hashmap
            @param name
            @return an ArrayList
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPKCS7.X509Name.GetFields">
            getter for values
            @return a Hashtable with the fields of the X509 name
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPKCS7.X509Name.ToString">
            @see java.lang.Object#toString()
        </member>
        <member name="T:iTextSharp.text.pdf.PdfPKCS7.X509NameTokenizer">
            class for breaking up an X500 Name into it's component tokens, ala
            java.util.StringTokenizer. We need this class as some of the
            lightweight Java environment don't support classes like
            StringTokenizer.
        </member>
        <member name="T:iTextSharp.text.pdf.PdfPRow">
            A row in a PdfPTable.
            
            @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPRow.BOTTOM_LIMIT">
            the bottom limit (bottom right y) 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPRow.#ctor(iTextSharp.text.pdf.PdfPCell[])">
            Constructs a new PdfPRow with the cells in the array that was passed as a parameter.
            @param cells
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPRow.#ctor(iTextSharp.text.pdf.PdfPRow)">
            Makes a copy of an existing row.
            @param row
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPRow.SetWidths(System.Single[])">
            Sets the widths of the columns in the row.
            @param widths
            @return true if everything went right
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPRow.CalculateHeights">
            Calculates the heights of each cell in the row.
            @return the maximum height of the row.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPRow.WriteBorderAndBackground(System.Single,System.Single,iTextSharp.text.pdf.PdfPCell,iTextSharp.text.pdf.PdfContentByte[])">
            Writes the border and background of one cell in the row.
            @param xPos
            @param yPos
            @param cell
            @param canvases
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPRow.WriteCells(System.Int32,System.Int32,System.Single,System.Single,iTextSharp.text.pdf.PdfContentByte[])">
            Writes a number of cells (not necessarily all cells).
            @param colStart
            @param colEnd
            @param xPos
            @param yPos
            @param canvases
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPRow.IsCalculated">
            Checks if the dimensions of the columns were calculated.
            @return true if the dimensions of the columns were calculated
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPRow.SplitRow(System.Single)">
            Splits a row to newHeight. The returned row is the remainder. It will
            return null if the newHeight was so small that only an empty row would
            result.
            
            @param newHeight
                       the new height
            @return the remainder row or null if the newHeight was so small that only
                    an empty row would result
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPRow.MaxHeights">
            Gets the maximum height of the row (i.e. of the 'highest' cell).
            @return the maximum height of the row
        </member>
        <member name="T:iTextSharp.text.pdf.PdfPSXObject">
            Implements the PostScript XObject.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPSXObject.#ctor">
            Creates a new instance of PdfPSXObject 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPSXObject.#ctor(iTextSharp.text.pdf.PdfWriter)">
            Constructs a PSXObject
            @param wr
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPSXObject.FormXObject">
             Gets the stream representing this object.
            
             @return the stream representing this object
             @throws IOException
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPSXObject.Duplicate">
            Gets a duplicate of this <CODE>PdfPSXObject</CODE>. All
            the members are copied by reference but the buffer stays different.
            @return a copy of this <CODE>PdfPSXObject</CODE>
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.pdf.PdfPTable" -->
        <member name="F:iTextSharp.text.pdf.PdfPTable.BASECANVAS">
            The index of the original <CODE>PdfcontentByte</CODE>.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPTable.BACKGROUNDCANVAS">
            The index of the duplicate <CODE>PdfContentByte</CODE> where the background will be drawn.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPTable.LINECANVAS">
            The index of the duplicate <CODE>PdfContentByte</CODE> where the border lines will be drawn.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPTable.TEXTCANVAS">
            The index of the duplicate <CODE>PdfContentByte</CODE> where the text will be drawn.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPTable.headerRows">
            Holds value of property headerRows. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPTable.widthPercentage">
            Holds value of property widthPercentage. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPTable.horizontalAlignment">
            Holds value of property horizontalAlignment. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPTable.skipFirstHeader">
            Holds value of property skipFirstHeader. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPTable.lockedWidth">
            Holds value of property lockedWidth.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPTable.splitRows">
            Holds value of property splitRows.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPTable.spacingBefore">
            The spacing before the table. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPTable.spacingAfter">
            The spacing after the table. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPTable.extendLastRow">
            Holds value of property extendLastRow.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPTable.headersInEvent">
            Holds value of property headersInEvent.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfPTable.splitLate">
            Holds value of property splitLate.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.#ctor(System.Single[])">
            Constructs a <CODE>PdfPTable</CODE> with the relative column widths.
            @param relativeWidths the relative column widths
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.#ctor(System.Int32)">
            Constructs a <CODE>PdfPTable</CODE> with <CODE>numColumns</CODE> columns.
            @param numColumns the number of columns
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.#ctor(iTextSharp.text.pdf.PdfPTable)">
            Constructs a copy of a <CODE>PdfPTable</CODE>.
            @param table the <CODE>PdfPTable</CODE> to be copied
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.ShallowCopy(iTextSharp.text.pdf.PdfPTable)">
            Makes a shallow copy of a table (format without content).
            @param table
            @return a shallow copy of the table
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.CopyFormat(iTextSharp.text.pdf.PdfPTable)">
            Copies the format of the sourceTable without copying the content. 
            @param sourceTable
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.SetWidths(System.Single[])">
            Sets the relative widths of the table.
            @param relativeWidths the relative widths of the table.
            @throws DocumentException if the number of widths is different than the number
            of columns
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.SetWidths(System.Int32[])">
            Sets the relative widths of the table.
            @param relativeWidths the relative widths of the table.
            @throws DocumentException if the number of widths is different than the number
            of columns
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.SetTotalWidth(System.Single[])">
            Sets the full width of the table from the absolute column width.
            @param columnWidth the absolute width of each column
            @throws DocumentException if the number of widths is different than the number
            of columns
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.SetWidthPercentage(System.Single[],iTextSharp.text.Rectangle)">
            Sets the percentage width of the table from the absolute column width.
            @param columnWidth the absolute width of each column
            @param pageSize the page size
            @throws DocumentException
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.CalculateHeightsFast">
            Calculates the heights of the table.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.AddCell(iTextSharp.text.pdf.PdfPCell)">
            Adds a cell element.
            @param cell the cell element
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.AddCell(System.String)">
            Adds a cell element.
            @param text the text for the cell
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.AddCell(iTextSharp.text.pdf.PdfPTable)">
            Adds a nested table.
            @param table the table to be added to the cell
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.AddCell(iTextSharp.text.Image)">
            Adds an Image as Cell.
            @param image the <CODE>Image</CODE> to add to the table. This image will fit in the cell
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.AddCell(iTextSharp.text.Phrase)">
            Adds a cell element.
            @param phrase the <CODE>Phrase</CODE> to be added to the cell
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfPTable.WriteSelectedRows(System.Int32,System.Int32,System.Single,System.Single,iTextSharp.text.pdf.PdfContentByte[])" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfPTable.WriteSelectedRows(System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,iTextSharp.text.pdf.PdfContentByte[])" -->
        <member name="M:iTextSharp.text.pdf.PdfPTable.WriteSelectedRows(System.Int32,System.Int32,System.Single,System.Single,iTextSharp.text.pdf.PdfContentByte)">
            Writes the selected rows to the document.
            
            @param rowStart the first row to be written, zero index
            @param rowEnd the last row to be written + 1. If it is -1 all the
            rows to the end are written
            @param xPos the x write coodinate
            @param yPos the y write coodinate
            @param canvas the <CODE>PdfContentByte</CODE> where the rows will
            be written to
            @return the y coordinate position of the bottom of the last row
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfPTable.WriteSelectedRows(System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,iTextSharp.text.pdf.PdfContentByte)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfPTable.BeginWritingRows(iTextSharp.text.pdf.PdfContentByte)" -->
        <member name="M:iTextSharp.text.pdf.PdfPTable.EndWritingRows(iTextSharp.text.pdf.PdfContentByte[])">
            Finishes writing the table.
            @param canvases the array returned by <CODE>beginWritingRows()</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.GetRowHeight(System.Int32)">
            Gets the height of a particular row.
            @param idx the row index (starts at 0)
            @return the height of a particular row
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.DeleteRow(System.Int32)">
            Deletes a row from the table.
            @param rowNumber the row to be deleted
            @return <CODE>true</CODE> if the row was deleted
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.DeleteLastRow">
            Deletes the last row in the table.
            @return <CODE>true</CODE> if the last row was deleted
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.DeleteBodyRows">
            Removes all of the rows except headers
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.Process(iTextSharp.text.IElementListener)">
             Processes the element by adding it (or the different parts) to an
             <CODE>ElementListener</CODE>.
            
             @param    listener    an <CODE>ElementListener</CODE>
             @return    <CODE>true</CODE> if the element was processed successfully
        </member>
        <member name="M:iTextSharp.text.pdf.PdfPTable.GetRow(System.Int32)">
            Gets a row with a given index
            (added by Jin-Hsia Yang).
            @param idx
            @return the row at position idx
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPTable.TotalWidth">
            Gets the full width of the table.
            @return the full width of the table
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPTable.DefaultCell">
            Gets the default <CODE>PdfPCell</CODE> that will be used as
            reference for all the <CODE>addCell</CODE> methods except
            <CODE>addCell(PdfPCell)</CODE>.
            @return default <CODE>PdfPCell</CODE>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPTable.Size">
            Gets the number of rows in this table.
            @return the number of rows in this table
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPTable.TotalHeight">
            Gets the total height of the table.
            @return the total height of the table
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPTable.HeaderHeight">
            Gets the height of the rows that constitute the header as defined by
            <CODE>setHeaderRows()</CODE>.
            @return the height of the rows that constitute the header
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPTable.Chunks">
             Gets all the chunks in this element.
            
             @return    an <CODE>ArrayList</CODE>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPTable.Type">
             Gets the type of the text element.
            
             @return    a type
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPTable.Rows">
            Gets an arraylist with all the rows in the table.
            @return an arraylist
        </member>
        <member name="P:iTextSharp.text.pdf.PdfPTable.AbsoluteWidths">
            Gets the absolute sizes of each column width.
            @return he absolute sizes of each column width
        </member>
        <member name="T:iTextSharp.text.pdf.PdfReaderInstance">
             Instance of PdfReader in each output document.
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.pdf.PdfRectangle" -->
        <member name="F:iTextSharp.text.pdf.PdfRectangle.llx">
            lower left x 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfRectangle.lly">
            lower left y 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfRectangle.urx">
            upper right x 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfRectangle.ury">
            upper right y 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfRectangle.#ctor(System.Single,System.Single,System.Single,System.Single,System.Int32)">
             Constructs a <CODE>PdfRectangle</CODE>-object.
            
             @param       llx         lower left x
             @param       lly         lower left y
             @param       urx         upper right x
             @param       ury         upper right y
            
             @since       rugPdf0.10
        </member>
        <member name="M:iTextSharp.text.pdf.PdfRectangle.#ctor(System.Single,System.Single,System.Int32)">
             Constructs a <CODE>PdfRectangle</CODE>-object starting from the origin (0, 0).
            
             @param       urx         upper right x
             @param       ury         upper right y
        </member>
        <member name="M:iTextSharp.text.pdf.PdfRectangle.#ctor(iTextSharp.text.Rectangle,System.Int32)">
             Constructs a <CODE>PdfRectangle</CODE>-object with a <CODE>Rectangle</CODE>-object.
            
             @param   rectangle   a <CODE>Rectangle</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfRectangle.Add(iTextSharp.text.pdf.PdfObject)">
             Overrides the <CODE>add</CODE>-method in <CODE>PdfArray</CODE> in order to prevent the adding of extra object to the array.
            
             @param       object          <CODE>PdfObject</CODE> to add (will not be added here)
             @return      <CODE>false</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfRectangle.GetLeft(System.Int32)">
             Returns the lower left x-coordinate, considering a given margin.
            
             @param       margin      a margin
             @return      the lower left x-coordinate
        </member>
        <member name="M:iTextSharp.text.pdf.PdfRectangle.GetRight(System.Int32)">
             Returns the upper right x-coordinate, considering a given margin.
            
             @param       margin      a margin
             @return      the upper right x-coordinate
        </member>
        <member name="M:iTextSharp.text.pdf.PdfRectangle.GetTop(System.Int32)">
             Returns the upper right y-coordinate, considering a given margin.
            
             @param       margin      a margin
             @return      the upper right y-coordinate
        </member>
        <member name="M:iTextSharp.text.pdf.PdfRectangle.GetBottom(System.Int32)">
             Returns the lower left y-coordinate, considering a given margin.
            
             @param       margin      a margin
             @return      the lower left y-coordinate
        </member>
        <member name="P:iTextSharp.text.pdf.PdfRectangle.Left">
             Returns the lower left x-coordinate.
            
             @return      the lower left x-coordinaat
        </member>
        <member name="P:iTextSharp.text.pdf.PdfRectangle.Right">
             Returns the upper right x-coordinate.
            
             @return      the upper right x-coordinate
        </member>
        <member name="P:iTextSharp.text.pdf.PdfRectangle.Top">
             Returns the upper right y-coordinate.
            
             @return      the upper right y-coordinate
        </member>
        <member name="P:iTextSharp.text.pdf.PdfRectangle.Bottom">
             Returns the lower left y-coordinate.
            
             @return      the lower left y-coordinate
        </member>
        <member name="P:iTextSharp.text.pdf.PdfRectangle.Width">
             Returns the width of the rectangle.
            
             @return      a width
        </member>
        <member name="P:iTextSharp.text.pdf.PdfRectangle.Height">
             Returns the height of the rectangle.
            
             @return      a height
        </member>
        <member name="P:iTextSharp.text.pdf.PdfRectangle.Rotate">
             Swaps the values of urx and ury and of lly and llx in order to rotate the rectangle.
            
             @return      a <CODE>PdfRectangle</CODE>
        </member>
        <member name="T:iTextSharp.text.pdf.PdfRendition">
            A Rendition dictionary (pdf spec 1.5)
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.pdf.PdfResources" -->
        <member name="M:iTextSharp.text.pdf.PdfResources.#ctor">
            Constructs a PDF ResourcesDictionary.
        </member>
        <member name="T:iTextSharp.text.pdf.PdfShading">
            Implements the shading dictionary (or stream).
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:iTextSharp.text.pdf.PdfShading.bBox">
            Holds value of property bBox. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfShading.antiAlias">
            Holds value of property antiAlias. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfShading.#ctor(iTextSharp.text.pdf.PdfWriter)">
            Creates new PdfShading 
        </member>
        <member name="T:iTextSharp.text.pdf.PdfShadingPattern">
            Implements the shading pattern dictionary.
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfShadingPattern.#ctor(iTextSharp.text.pdf.PdfShading)">
            Creates new PdfShadingPattern 
        </member>
        <member name="T:iTextSharp.text.pdf.PdfSigGenericPKCS">
            A signature dictionary representation for the standard filters.
        </member>
        <member name="T:iTextSharp.text.pdf.PdfSignature">
            Implements the signature dictionary.
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSignature.#ctor(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfName)">
            Creates new PdfSignature 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfSigGenericPKCS.hashAlgorithm">
            The hash algorith, for example "SHA1"
        </member>
        <member name="F:iTextSharp.text.pdf.PdfSigGenericPKCS.pkcs">
            The class instance that calculates the PKCS#1 and PKCS#7
        </member>
        <member name="F:iTextSharp.text.pdf.PdfSigGenericPKCS.name">
            The subject name in the signing certificate (the element "CN")
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSigGenericPKCS.#ctor(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfName)">
            Creates a generic standard filter.
            @param filter the filter name
            @param subFilter the sub-filter name
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSigGenericPKCS.SetSignInfo(org.bouncycastle.crypto.CipherParameters,org.bouncycastle.x509.X509Certificate[],System.Object[])">
            Sets the crypto information to sign.
            @param privKey the private key
            @param certChain the certificate chain
            @param crlList the certificate revocation list. It can be <CODE>null</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSigGenericPKCS.SetExternalDigest(System.Byte[],System.Byte[],System.String)">
            Sets the digest/signature to an external calculated value.
            @param digest the digest. This is the actual signature
            @param RSAdata the extra data that goes into the data tag in PKCS#7
            @param digestEncryptionAlgorithm the encryption algorithm. It may must be <CODE>null</CODE> if the <CODE>digest</CODE>
            is also <CODE>null</CODE>. If the <CODE>digest</CODE> is not <CODE>null</CODE>
            then it may be "RSA" or "DSA"
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSigGenericPKCS.Name">
            Gets the subject name in the signing certificate (the element "CN")
            @return the subject name in the signing certificate (the element "CN")
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSigGenericPKCS.Signer">
            Gets the class instance that does the actual signing.
            @return the class instance that does the actual signing
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSigGenericPKCS.SignerContents">
            Gets the signature content. This can be a PKCS#1 or a PKCS#7. It corresponds to
            the /Contents key.
            @return the signature content
        </member>
        <member name="T:iTextSharp.text.pdf.PdfSigGenericPKCS.VeriSign">
            Creates a standard filter of the type VeriSign.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSigGenericPKCS.VeriSign.#ctor">
            The constructor for the default provider.
        </member>
        <member name="T:iTextSharp.text.pdf.PdfSigGenericPKCS.PPKLite">
            Creates a standard filter of the type self signed.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSigGenericPKCS.PPKLite.#ctor">
            The constructor for the default provider.
        </member>
        <member name="T:iTextSharp.text.pdf.PdfSigGenericPKCS.PPKMS">
            Creates a standard filter of the type Windows Certificate.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSigGenericPKCS.PPKMS.#ctor">
            The constructor for the default provider.
        </member>
        <member name="T:iTextSharp.text.pdf.PdfSignatureAppearance">
            This class takes care of the cryptographic options and appearances that form a signature.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfSignatureAppearance.questionMark">
            Commands to draw a yellow question mark in a stream content
        </member>
        <member name="F:iTextSharp.text.pdf.PdfSignatureAppearance.SELF_SIGNED">
            The self signed filter.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfSignatureAppearance.VERISIGN_SIGNED">
            The VeriSign filter.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfSignatureAppearance.WINCER_SIGNED">
            The Windows Certificate Security.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSignatureAppearance.IsInvisible">
            Gets the visibility status of the signature.
            @return the visibility status of the signature
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSignatureAppearance.SetCrypto(org.bouncycastle.crypto.CipherParameters,org.bouncycastle.x509.X509Certificate[],System.Object[],iTextSharp.text.pdf.PdfName)">
            Sets the cryptographic parameters.
            @param privKey the private key
            @param certChain the certificate chain
            @param crlList the certificate revocation list. It may be <CODE>null</CODE>
            @param filter the crytographic filter type. It can be SELF_SIGNED, VERISIGN_SIGNED or WINCER_SIGNED
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSignatureAppearance.SetVisibleSignature(iTextSharp.text.Rectangle,System.Int32,System.String)">
            Sets the signature to be visible. It creates a new visible signature field.
            @param pageRect the position and dimension of the field in the page
            @param page the page to place the field. The fist page is 1
            @param fieldName the field name or <CODE>null</CODE> to generate automatically a new field name
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSignatureAppearance.SetVisibleSignature(System.String)">
            Sets the signature to be visible. An empty signature field with the same name must already exist.
            @param fieldName the existing empty signature field name
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfSignatureAppearance.GetLayer(System.Int32)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfSignatureAppearance.GetTopLayer" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfSignatureAppearance.GetAppearance" -->
        <member name="M:iTextSharp.text.pdf.PdfSignatureAppearance.FitText(iTextSharp.text.Font,System.String,iTextSharp.text.Rectangle,System.Single,System.Int32)">
            Fits the text to some rectangle adjusting the font size as needed.
            @param font the font to use
            @param text the text
            @param rect the rectangle where the text must fit
            @param maxFontSize the maximum font size
            @param runDirection the run direction
            @return the calculated font size that makes the text fit
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSignatureAppearance.SetExternalDigest(System.Byte[],System.Byte[],System.String)">
            Sets the digest/signature to an external calculated value.
            @param digest the digest. This is the actual signature
            @param RSAdata the extra data that goes into the data tag in PKCS#7
            @param digestEncryptionAlgorithm the encryption algorithm. It may must be <CODE>null</CODE> if the <CODE>digest</CODE>
            is also <CODE>null</CODE>. If the <CODE>digest</CODE> is not <CODE>null</CODE>
            then it may be "RSA" or "DSA"
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSignatureAppearance.IsNewField">
            Checks if a new field was created.
            @return <CODE>true</CODE> if a new field was created, <CODE>false</CODE> if signing
            an existing field or if the signature is invisible
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSignatureAppearance.GetNewSigName">
            Gets a new signature fied name that doesn't clash with any existing name.
            @return a new signature fied name
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfSignatureAppearance.PreClose" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfSignatureAppearance.PreClose(System.Collections.Hashtable)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfSignatureAppearance.Close(iTextSharp.text.pdf.PdfDictionary)" -->
        <member name="M:iTextSharp.text.pdf.PdfSignatureAppearance.IsPreClosed">
            Checks if the document is in the process of closing.
            @return <CODE>true</CODE> if the document is in the process of closing,
            <CODE>false</CODE> otherwise
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSignatureAppearance.GetImage">
            Gets the background image for the layer 2.
            @return the background image for the layer 2
        </member>
        <member name="F:iTextSharp.text.pdf.PdfSignatureAppearance.contact">
            Holds value of property contact.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfSignatureAppearance.layer2Font">
            Holds value of property layer2Font.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfSignatureAppearance.layer4Text">
            Holds value of property layer4Text.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfSignatureAppearance.acro6Layers">
            Holds value of property acro6Layers.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfSignatureAppearance.runDirection">
            Holds value of property runDirection.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfSignatureAppearance.signatureEvent">
            Holds value of property signatureEvent.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfSignatureAppearance.image">
            Holds value of property image.
        </member>
        <member name="F:iTextSharp.text.pdf.PdfSignatureAppearance.imageScale">
            Holds value of property imageScale.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.Layer2Text">
            Sets the signature text identifying the signer.
            @param text the signature text identifying the signer. If <CODE>null</CODE> or not set
            a standard description will be used
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.Layer4Text">
            Sets the text identifying the signature status.
            @param text the text identifying the signature status. If <CODE>null</CODE> or not set
            the description "Signature Not Verified" will be used
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.Rect">
            Gets the rectangle representing the signature dimensions.
            @return the rectangle representing the signature dimensions. It may be <CODE>null</CODE>
            or have zero width or height for invisible signatures
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.Reason">
            Sets the signing reason.
            @param reason the signing reason
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.Location">
            Sets the signing location.
            @param location the signing location
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.PrivKey">
            Gets the private key.
            @return the private key
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.CertChain">
            Gets the certificate chain.
            @return the certificate chain
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.CrlList">
            Gets the certificate revocation list.
            @return the certificate revocation list
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.Filter">
            Gets the filter used to sign the document.
            @return the filter used to sign the document
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.Page">
            Gets the page number of the field.
            @return the page number of the field
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.FieldName">
            Gets the field name.
            @return the field name
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.PageRect">
            Gets the rectangle that represent the position and dimension of the signature in the page.
            @return the rectangle that represent the position and dimension of the signature in the page
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.SignDate">
            Gets the signature date.
            @return the signature date
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.TempFile">
            Gets the temporary file.
            @return the temporary file or <CODE>null</CODE> is the document is created in memory
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "P:iTextSharp.text.pdf.PdfSignatureAppearance.RangeStream" -->
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.CryptoDictionary">
            Gets the user made signature dictionary. This is the dictionary at the /V key.
            @return the user made signature dictionary
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.Stamper">
            Gets the <CODE>PdfStamper</CODE> associated with this instance.
            @return the <CODE>PdfStamper</CODE> associated with this instance
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "P:iTextSharp.text.pdf.PdfSignatureAppearance.SigStandard" -->
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.Contact">
            Sets the signing contact.
            @param contact the signing contact
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.Layer2Font">
            Sets the n2 and n4 layer font. If the font size is zero, auto-fit will be used.
            @param layer2Font the n2 and n4 font
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.Acro6Layers">
            Acrobat 6.0 and higher recomends that only layer n2 and n4 be present. This method sets that mode.
            @param acro6Layers if <code>true</code> only the layers n2 and n4 will be present
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.RunDirection">
            Sets the run direction in the n2 and n4 layer. 
            @param runDirection the run direction
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.SignatureEvent">
            Sets the signature event to allow modification of the signature dictionary.
            @param signatureEvent the signature event
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.Image">
            Sets the background image for the layer 2.
            @param image the background image for the layer 2
        </member>
        <member name="P:iTextSharp.text.pdf.PdfSignatureAppearance.ImageScale">
            Sets the scaling to be applied to the background image. If it's zero the image
            will fully fill the rectangle. If it's less than zero the image will fill the rectangle but
            will keep the proportions. If it's greater than zero that scaling will be applied.
            In any of the cases the image will always be centered. It's zero by default.
            @param imageScale the scaling to be applied to the background image
        </member>
        <member name="T:iTextSharp.text.pdf.PdfSignatureAppearance.FRangeStream">
            
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSignatureAppearance.FRangeStream.ReadByte">
            @see java.io.Stream#read()
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSignatureAppearance.FRangeStream.Read(System.Byte[],System.Int32,System.Int32)">
            @see java.io.Stream#read(byte[], int, int)
        </member>
        <member name="T:iTextSharp.text.pdf.PdfSignatureAppearance.ISignatureEvent">
            An interface to retrieve the signature dictionary for modification.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSignatureAppearance.ISignatureEvent.GetSignatureDictionary(iTextSharp.text.pdf.PdfDictionary)">
            Allows modification of the signature dictionary.
            @param sig the signature dictionary
        </member>
        <member name="T:iTextSharp.text.pdf.PdfSpotColor">
             A <CODE>PdfSpotColor</CODE> defines a ColorSpace
            
             @see     PdfDictionary
        </member>
        <member name="M:iTextSharp.text.pdf.PdfSpotColor.#ctor(System.String,System.Single,iTextSharp.text.Color)">
             Constructs a new <CODE>PdfSpotColor</CODE>.
            
             @param       name        a string value
             @param       tint        a tint value between 0 and 1
             @param       altcs       a altnative colorspace value
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.pdf.PdfStamper" -->
        <member name="F:iTextSharp.text.pdf.PdfStamper.stamper">
            The writer
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.#ctor(iTextSharp.text.pdf.PdfReader,System.IO.Stream)">
            Starts the process of adding extra content to an existing PDF
            document.
            @param reader the original document. It cannot be reused
            @param os the output stream
            @throws DocumentException on error
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.#ctor(iTextSharp.text.pdf.PdfReader,System.IO.Stream,System.Char)">
            Starts the process of adding extra content to an existing PDF
            document.
            @param reader the original document. It cannot be reused
            @param os the output stream
            @param pdfVersion the new pdf version or '\0' to keep the same version as the original
            document
            @throws DocumentException on error
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.#ctor(iTextSharp.text.pdf.PdfReader,System.IO.Stream,System.Char,System.Boolean)">
            Starts the process of adding extra content to an existing PDF
            document, possibly as a new revision.
            @param reader the original document. It cannot be reused
            @param os the output stream
            @param pdfVersion the new pdf version or '\0' to keep the same version as the original
            document
            @param append if <CODE>true</CODE> appends the document changes as a new revision. This is
            only useful for multiple signatures as nothing is gained in speed or memory
            @throws DocumentException on error
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.InsertPage(System.Int32,iTextSharp.text.Rectangle)">
            Inserts a blank page. All the pages above and including <CODE>pageNumber</CODE> will
            be shifted up. If <CODE>pageNumber</CODE> is bigger than the total number of pages
            the new page will be the last one.
            @param pageNumber the page number position where the new page will be inserted
            @param mediabox the size of the new page
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfStamper.Close" -->
        <member name="M:iTextSharp.text.pdf.PdfStamper.GetUnderContent(System.Int32)">
            Gets a <CODE>PdfContentByte</CODE> to write under the page of
            the original document.
            @param pageNum the page number where the extra content is written
            @return a <CODE>PdfContentByte</CODE> to write under the page of
            the original document
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.GetOverContent(System.Int32)">
            Gets a <CODE>PdfContentByte</CODE> to write over the page of
            the original document.
            @param pageNum the page number where the extra content is written
            @return a <CODE>PdfContentByte</CODE> to write over the page of
            the original document
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.SetEncryption(System.Byte[],System.Byte[],System.Int32,System.Boolean)">
            Sets the encryption options for this document. The userPassword and the
             ownerPassword can be null or have zero length. In this case the ownerPassword
             is replaced by a random string. The open permissions for the document can be
             AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
             AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
             The permissions can be combined by ORing them.
            @param userPassword the user password. Can be null or empty
            @param ownerPassword the owner password. Can be null or empty
            @param permissions the user permissions
            @param strength128Bits <code>true</code> for 128 bit key length, <code>false</code> for 40 bit key length
            @throws DocumentException if anything was already written to the output
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.SetEncryption(System.Boolean,System.String,System.String,System.Int32)">
            Sets the encryption options for this document. The userPassword and the
             ownerPassword can be null or have zero length. In this case the ownerPassword
             is replaced by a random string. The open permissions for the document can be
             AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
             AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
             The permissions can be combined by ORing them.
            @param strength <code>true</code> for 128 bit key length, <code>false</code> for 40 bit key length
            @param userPassword the user password. Can be null or empty
            @param ownerPassword the owner password. Can be null or empty
            @param permissions the user permissions
            @throws DocumentException if anything was already written to the output
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.GetImportedPage(iTextSharp.text.pdf.PdfReader,System.Int32)">
            Gets a page from other PDF document. Note that calling this method more than
            once with the same parameters will retrieve the same object.
            @param reader the PDF document where the page is
            @param pageNumber the page number. The first page is 1
            @return the template representing the imported page
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.AddAnnotation(iTextSharp.text.pdf.PdfAnnotation,System.Int32)">
            Adds an annotation of form filed in a specific page. This page number
            can be overridden with {@link PdfAnnotation#setPlaceInPage(int)}.
            @param annot the annotation
            @param page the page
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.AddComments(iTextSharp.text.pdf.FdfReader)">
            Adds the comments present in an FDF file.
            @param fdf the FDF file
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.SetThumbnail(iTextSharp.text.Image,System.Int32)">
            Sets the thumbnail image for a page.
            @param image the image
            @param page the page
            @throws PdfException on error
            @throws DocumentException on error
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfStamper.PartialFormFlattening(System.String)" -->
        <member name="M:iTextSharp.text.pdf.PdfStamper.SetFullCompression">
            Sets the document's compression to the new 1.5 mode with object streams and xref
            streams. It can be set at any time but once set it can't be unset.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.SetPageAction(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfAction,System.Int32)">
            Sets the open and close page additional action.
            @param actionType the action type. It can be <CODE>PdfWriter.PAGE_OPEN</CODE>
            or <CODE>PdfWriter.PAGE_CLOSE</CODE>
            @param action the action to perform
            @param page the page where the action will be applied. The first page is 1
            @throws PdfException if the action type is invalid
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.SetDuration(System.Int32,System.Int32)">
            Sets the display duration for the page (for presentations)
            @param seconds   the number of seconds to display the page. A negative value removes the entry
            @param page the page where the duration will be applied. The first page is 1
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamper.SetTransition(iTextSharp.text.pdf.PdfTransition,System.Int32)">
            Sets the transition for the page
            @param transition   the transition object. A <code>null</code> removes the transition
            @param page the page where the transition will be applied. The first page is 1
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfStamper.CreateSignature(iTextSharp.text.pdf.PdfReader,System.IO.Stream,System.Char,System.String,System.Boolean)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfStamper.CreateSignature(iTextSharp.text.pdf.PdfReader,System.IO.Stream,System.Char)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfStamper.CreateSignature(iTextSharp.text.pdf.PdfReader,System.IO.Stream,System.Char,System.String)" -->
        <member name="P:iTextSharp.text.pdf.PdfStamper.MoreInfo">
            Gets the optional <CODE>String</CODE> map to add or change values in
             the info dictionary.
             @return the map or <CODE>null</CODE>
            
            An optional <CODE>String</CODE> map to add or change values in
             the info dictionary. Entries with <CODE>null</CODE>
             values delete the key in the original info dictionary
             @param moreInfo additional entries to the info dictionary
            
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStamper.SignatureAppearance">
            Gets the signing instance. The appearances and other parameters can the be set.
            @return the signing instance
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStamper.RotateContents">
            Checks if the content is automatically adjusted to compensate
            the original page rotation.
            @return the auto-rotation status
            Flags the content to be automatically adjusted to compensate
            the original page rotation. The default is <CODE>true</CODE>.
            @param rotateContents <CODE>true</CODE> to set auto-rotation, <CODE>false</CODE>
            otherwise
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStamper.Writer">
            Gets the underlying PdfWriter.
            @return the underlying PdfWriter
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStamper.Reader">
            Gets the underlying PdfReader.
            @return the underlying PdfReader
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStamper.AcroFields">
            Gets the <CODE>AcroFields</CODE> object that allows to get and set field values
            and to merge FDF forms.
            @return the <CODE>AcroFields</CODE> object
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStamper.FormFlattening">
            Determines if the fields are flattened on close. The fields added with
            {@link #addAnnotation(PdfAnnotation,int)} will never be flattened.
            @param flat <CODE>true</CODE> to flatten the fields, <CODE>false</CODE>
            to keep the fields
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStamper.Outlines">
            Sets the bookmarks. The list structure is defined in
            {@link SimpleBookmark}.
            @param outlines the bookmarks or <CODE>null</CODE> to remove any
            @throws IOException on error
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStamper.JavaScript">
            Adds a JavaScript action at the document level. When the document
            opens all this JavaScript runs.
            @param js the JavaScript code
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStamper.ViewerPreferences">
            Sets the viewer preferences.
            @param preferences the viewer preferences
            @see PdfWriter#setViewerPreferences(int)
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStamper.FullCompression">
            Gets the 1.5 compression status.
            @return <code>true</code> if the 1.5 compression is on
        </member>
        <member name="F:iTextSharp.text.pdf.PdfStamperImp.pagesToContent">
            Integer(page number) -> PageStamp 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfStamperImp.rotateContents">
            Holds value of property rotateContents. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamperImp.#ctor(iTextSharp.text.pdf.PdfReader,System.IO.Stream,System.Char,System.Boolean)">
            Creates new PdfStamperImp.
            @param reader the read PDF
            @param os the output destination
            @param pdfVersion the new pdf version or '\0' to keep the same version as the original
            document
            @param append
            @throws DocumentException on error
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamperImp.RegisterReader(iTextSharp.text.pdf.PdfReader,System.Boolean)">
            @param reader
            @param openFile
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamperImp.UnRegisterReader(iTextSharp.text.pdf.PdfReader)">
            @param reader
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamperImp.AddComments(iTextSharp.text.pdf.FdfReader)">
            @param fdf
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamperImp.GetPageReference(System.Int32)">
            @see com.lowagie.text.pdf.PdfWriter#getPageReference(int)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamperImp.AddAnnotation(iTextSharp.text.pdf.PdfAnnotation)">
            @see com.lowagie.text.pdf.PdfWriter#addAnnotation(com.lowagie.text.pdf.PdfAnnotation)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamperImp.SetPageAction(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfAction)">
            Always throws an <code>UnsupportedOperationException</code>.
            @param actionType ignore
            @param action ignore
            @throws PdfException ignore
            @see PdfStamper#setPageAction(PdfName, PdfAction, int)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamperImp.SetPageAction(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfAction,System.Int32)">
            Sets the open and close page additional action.
            @param actionType the action type. It can be <CODE>PdfWriter.PAGE_OPEN</CODE>
            or <CODE>PdfWriter.PAGE_CLOSE</CODE>
            @param action the action to perform
            @param page the page where the action will be applied. The first page is 1
            @throws PdfException if the action type is invalid
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamperImp.SetDuration(System.Int32,System.Int32)">
            Sets the display duration for the page (for presentations)
            @param seconds   the number of seconds to display the page. A negative value removes the entry
            @param page the page where the duration will be applied. The first page is 1
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamperImp.SetTransition(iTextSharp.text.pdf.PdfTransition,System.Int32)">
            Sets the transition for the page
            @param transition   the transition object. A <code>null</code> removes the transition
            @param page the page where the transition will be applied. The first page is 1
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamperImp.IsAppend">
            Getter for property append.
            @return Value of property append.
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamperImp.SetAdditionalAction(iTextSharp.text.pdf.PdfName,iTextSharp.text.pdf.PdfAction)">
            Additional-actions defining the actions to be taken in
             response to various trigger events affecting the document
             as a whole. The actions types allowed are: <CODE>DOCUMENT_CLOSE</CODE>,
             <CODE>WILL_SAVE</CODE>, <CODE>DID_SAVE</CODE>, <CODE>WILL_PRINT</CODE>
             and <CODE>DID_PRINT</CODE>.
            
             @param actionType the action type
             @param action the action to execute in response to the trigger
             @throws PdfException on invalid action type
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamperImp.SetOpenAction(iTextSharp.text.pdf.PdfAction)">
            @see com.lowagie.text.pdf.PdfWriter#setOpenAction(com.lowagie.text.pdf.PdfAction)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfStamperImp.SetOpenAction(System.String)">
            @see com.lowagie.text.pdf.PdfWriter#setOpenAction(java.lang.String)
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStamperImp.ViewerPreferences">
            Sets the viewer preferences.
            @param preferences the viewer preferences
            @see PdfWriter#setViewerPreferences(int)
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStamperImp.SigFlags">
            Set the signature flags.
            @param f the flags. This flags are ORed with current ones
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStamperImp.Duration">
            Always throws an <code>UnsupportedOperationException</code>.
            @param seconds ignore
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStamperImp.Transition">
            Always throws an <code>UnsupportedOperationException</code>.
            @param transition ignore
        </member>
        <member name="P:iTextSharp.text.pdf.PdfStamperImp.Thumbnail">
            @see com.lowagie.text.pdf.PdfWriter#setThumbnail(com.lowagie.text.Image)
        </member>
        <member name="T:iTextSharp.text.pdf.PdfTable">
             <CODE>PdfTable</CODE> is an object that contains the graphics and text of a table.
            
             @see     iTextSharp.text.Table
             @see     iTextSharp.text.Row
             @see     iTextSharp.text.Cell
             @see     PdfCell
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTable.columns">
            this is the number of columns in the table. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTable.headercells">
            this is the ArrayList with all the cell of the table header. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTable.cells">
            this is the ArrayList with all the cells in the table. 
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTable.table">
            Original table used to build this object
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTable.positions">
            Cached column widths. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfTable.#ctor(iTextSharp.text.Table,System.Single,System.Single,System.Single,System.Boolean)">
             Constructs a <CODE>PdfTable</CODE>-object.
            
             @param   table   a <CODE>Table</CODE>
             @param   left    the left border on the page
             @param   right   the right border on the page
             @param   top     the start position of the top of the table
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.PdfTable.UpdateRowAdditions" -->
        <member name="M:iTextSharp.text.pdf.PdfTable.UpdateRowAdditionsInternal">
            Updates the table row additions in the underlying table object
        </member>
        <member name="M:iTextSharp.text.pdf.PdfTable.HasHeader">
             Checks if there is a table header.
            
             @return  an <CODE>ArrayList</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.PdfTable.HasToFitPageTable">
             Checks if this <CODE>Table</CODE> has to fit a page.
            
             @return  true if the table may not be split
        </member>
        <member name="M:iTextSharp.text.pdf.PdfTable.HasToFitPageCells">
             Checks if the cells of this <CODE>Table</CODE> have to fit a page.
            
             @return  true if the cells may not be split
        </member>
        <member name="P:iTextSharp.text.pdf.PdfTable.Rows">
            Get the number of rows
        </member>
        <member name="P:iTextSharp.text.pdf.PdfTable.Type">
            @see com.lowagie.text.Element#type() 
        </member>
        <member name="P:iTextSharp.text.pdf.PdfTable.HeaderCells">
             Returns the arraylist with the cells of the table header.
            
             @return  an <CODE>ArrayList</CODE>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfTable.Cells">
             Returns the arraylist with the cells of the table.
            
             @return  an <CODE>ArrayList</CODE>
        </member>
        <member name="P:iTextSharp.text.pdf.PdfTable.Columns">
             Returns the number of columns of the table.
            
             @return  the number of columns
        </member>
        <member name="P:iTextSharp.text.pdf.PdfTable.Cellpadding">
             Returns the cellpadding of the table.
            
             @return  the cellpadding
        </member>
        <member name="P:iTextSharp.text.pdf.PdfTable.Cellspacing">
             Returns the cellspacing of the table.
            
             @return  the cellspacing
        </member>
        <member name="P:iTextSharp.text.pdf.PdfTable.Offset">
             Gets the offset of this table.
            
             @return  the space between this table and the previous element.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.pdf.PdfTextArray" -->
        <member name="M:iTextSharp.text.pdf.PdfTextArray.Add(iTextSharp.text.pdf.PdfNumber)">
             Adds a <CODE>PdfNumber</CODE> to the <CODE>PdfArray</CODE>.
            
             @param       number          displacement of the string
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTransition.SPLITVOUT">
            Out Vertical Split
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTransition.SPLITHOUT">
            Out Horizontal Split
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTransition.SPLITVIN">
            In Vertical Split
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTransition.SPLITHIN">
            IN Horizontal Split
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTransition.BLINDV">
            Vertical Blinds
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTransition.BLINDH">
            Vertical Blinds
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTransition.INBOX">
            Inward Box
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTransition.OUTBOX">
            Outward Box
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTransition.LRWIPE">
            Left-Right Wipe
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTransition.RLWIPE">
            Right-Left Wipe
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTransition.BTWIPE">
            Bottom-Top Wipe
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTransition.TBWIPE">
            Top-Bottom Wipe
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTransition.DISSOLVE">
            Dissolve
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTransition.LRGLITTER">
            Left-Right Glitter
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTransition.TBGLITTER">
            Top-Bottom Glitter
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTransition.DGLITTER">
            Diagonal Glitter
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTransition.duration">
            duration of the transition effect
        </member>
        <member name="F:iTextSharp.text.pdf.PdfTransition.type">
            type of the transition effect
        </member>
        <member name="M:iTextSharp.text.pdf.PdfTransition.#ctor">
              Constructs a <CODE>Transition</CODE>.
            
        </member>
        <member name="M:iTextSharp.text.pdf.PdfTransition.#ctor(System.Int32)">
              Constructs a <CODE>Transition</CODE>.
            
            @param  type      type of the transition effect
        </member>
        <member name="M:iTextSharp.text.pdf.PdfTransition.#ctor(System.Int32,System.Int32)">
              Constructs a <CODE>Transition</CODE>.
            
            @param  type      type of the transition effect
            @param  duration  duration of the transition effect
        </member>
        <member name="T:iTextSharp.text.pdf.PdfTransparencyGroup">
            The transparency group dictionary.
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="M:iTextSharp.text.pdf.PdfTransparencyGroup.#ctor">
            Constructs a transparencyGroup.
        </member>
        <member name="P:iTextSharp.text.pdf.PdfTransparencyGroup.Isolated">
            Determining the initial backdrop against which its stack is composited.
            @param isolated
        </member>
        <member name="P:iTextSharp.text.pdf.PdfTransparencyGroup.Knockout">
            Determining whether the objects within the stack are composited with one another or only with the group's backdrop.
            @param knockout
        </member>
        <member name="T:iTextSharp.text.pdf.PdfXConformanceException">
            
             @author  psoares
        </member>
        <member name="M:iTextSharp.text.pdf.PdfXConformanceException.#ctor">
            Creates a new instance of PdfXConformanceException. 
        </member>
        <member name="M:iTextSharp.text.pdf.PdfXConformanceException.#ctor(System.String)">
            Creates a new instance of PdfXConformanceException.
            @param s
        </member>
        <member name="T:iTextSharp.text.pdf.Pfm2afm">
            Converts a PFM file into an AFM file.
        </member>
        <member name="M:iTextSharp.text.pdf.Pfm2afm.#ctor(iTextSharp.text.pdf.RandomAccessFileOrArray,System.IO.Stream)">
            Creates a new instance of Pfm2afm 
        </member>
        <member name="M:iTextSharp.text.pdf.Pfm2afm.Convert(iTextSharp.text.pdf.RandomAccessFileOrArray,System.IO.Stream)">
            Converts a PFM file into an AFM file.
            @param inp the PFM file
            @param outp the AFM file
            @throws IOException on error
        </member>
        <member name="T:iTextSharp.text.pdf.PRAcroForm">
            This class captures an AcroForm on input. Basically, it extends Dictionary
            by indexing the fields of an AcroForm
            @author Mark Thompson
        </member>
        <member name="M:iTextSharp.text.pdf.PRAcroForm.#ctor(iTextSharp.text.pdf.PdfReader)">
            Constructor
            @param reader reader of the input file
        </member>
        <member name="M:iTextSharp.text.pdf.PRAcroForm.GetRefByName(System.String)">
            Given the title (/T) of a reference, return the associated reference
            @param name a string containing the path
            @return a reference to the field, or null
        </member>
        <member name="M:iTextSharp.text.pdf.PRAcroForm.ReadAcroForm(iTextSharp.text.pdf.PdfDictionary)">
            Read, and comprehend the acroform
            @param root the docment root
        </member>
        <member name="M:iTextSharp.text.pdf.PRAcroForm.IterateFields(iTextSharp.text.pdf.PdfArray,iTextSharp.text.pdf.PRIndirectReference,System.String)">
            After reading, we index all of the fields. Recursive.
            @param fieldlist An array of fields
            @param fieldDict the last field dictionary we encountered (recursively)
            @param title the pathname of the field, up to this point or null
        </member>
        <member name="M:iTextSharp.text.pdf.PRAcroForm.MergeAttrib(iTextSharp.text.pdf.PdfDictionary,iTextSharp.text.pdf.PdfDictionary)">
            merge field attributes from two dictionaries
            @param parent one dictionary
            @param child the other dictionary
            @return a merged dictionary
        </member>
        <member name="M:iTextSharp.text.pdf.PRAcroForm.PushAttrib(iTextSharp.text.pdf.PdfDictionary)">
            stack a level of dictionary. Merge in a dictionary from this level
        </member>
        <member name="P:iTextSharp.text.pdf.PRAcroForm.Size">
            Number of fields found
            @return size
        </member>
        <member name="T:iTextSharp.text.pdf.PRAcroForm.FieldInformation">
            This class holds the information for a single field
        </member>
        <member name="M:iTextSharp.text.pdf.PRIndirectReference.#ctor(iTextSharp.text.pdf.PdfReader,System.Int32,System.Int32)">
             Constructs a <CODE>PdfIndirectReference</CODE>.
            
             @param        reader            a <CODE>PdfReader</CODE>
             @param        number            the object number.
             @param        generation        the generation number.
        </member>
        <member name="M:iTextSharp.text.pdf.PRIndirectReference.#ctor(iTextSharp.text.pdf.PdfReader,System.Int32)">
             Constructs a <CODE>PdfIndirectReference</CODE>.
            
             @param        reader            a <CODE>PdfReader</CODE>
             @param        number            the object number.
        </member>
        <member name="M:iTextSharp.text.pdf.PRStream.SetData(System.Byte[])">
            Sets the data associated with the stream
            @param data raw data, decrypted and uncompressed.
        </member>
        <member name="T:iTextSharp.text.pdf.PRTokeniser">
            
             @author  Paulo Soares (psoares@consiste.pt)
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.pdf.PushbuttonField" -->
        <member name="F:iTextSharp.text.pdf.PushbuttonField.LAYOUT_LABEL_ONLY">
            A layout option 
        </member>
        <member name="F:iTextSharp.text.pdf.PushbuttonField.LAYOUT_ICON_ONLY">
            A layout option 
        </member>
        <member name="F:iTextSharp.text.pdf.PushbuttonField.LAYOUT_ICON_TOP_LABEL_BOTTOM">
            A layout option 
        </member>
        <member name="F:iTextSharp.text.pdf.PushbuttonField.LAYOUT_LABEL_TOP_ICON_BOTTOM">
            A layout option 
        </member>
        <member name="F:iTextSharp.text.pdf.PushbuttonField.LAYOUT_ICON_LEFT_LABEL_RIGHT">
            A layout option 
        </member>
        <member name="F:iTextSharp.text.pdf.PushbuttonField.LAYOUT_LABEL_LEFT_ICON_RIGHT">
            A layout option 
        </member>
        <member name="F:iTextSharp.text.pdf.PushbuttonField.LAYOUT_LABEL_OVER_ICON">
            A layout option 
        </member>
        <member name="F:iTextSharp.text.pdf.PushbuttonField.SCALE_ICON_ALWAYS">
            An icon scaling option 
        </member>
        <member name="F:iTextSharp.text.pdf.PushbuttonField.SCALE_ICON_NEVER">
            An icon scaling option 
        </member>
        <member name="F:iTextSharp.text.pdf.PushbuttonField.SCALE_ICON_IS_TOO_BIG">
            An icon scaling option 
        </member>
        <member name="F:iTextSharp.text.pdf.PushbuttonField.SCALE_ICON_IS_TOO_SMALL">
            An icon scaling option 
        </member>
        <member name="F:iTextSharp.text.pdf.PushbuttonField.layout">
            Holds value of property layout.
        </member>
        <member name="F:iTextSharp.text.pdf.PushbuttonField.image">
            Holds value of property image.
        </member>
        <member name="F:iTextSharp.text.pdf.PushbuttonField.template">
            Holds value of property template.
        </member>
        <member name="F:iTextSharp.text.pdf.PushbuttonField.scaleIcon">
            Holds value of property scaleIcon.
        </member>
        <member name="F:iTextSharp.text.pdf.PushbuttonField.proportionalIcon">
            Holds value of property proportionalIcon.
        </member>
        <member name="F:iTextSharp.text.pdf.PushbuttonField.iconVerticalAdjustment">
            Holds value of property iconVerticalAdjustment.
        </member>
        <member name="F:iTextSharp.text.pdf.PushbuttonField.iconHorizontalAdjustment">
            Holds value of property iconHorizontalAdjustment.
        </member>
        <member name="F:iTextSharp.text.pdf.PushbuttonField.iconFitToBounds">
            Holds value of property iconFitToBounds.
        </member>
        <member name="M:iTextSharp.text.pdf.PushbuttonField.#ctor(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Rectangle,System.String)">
            Creates a new instance of PushbuttonField
            @param writer the document <CODE>PdfWriter</CODE>
            @param box the field location and dimensions
            @param fieldName the field name. If <CODE>null</CODE> only the widget keys
            will be included in the field allowing it to be used as a kid field.
        </member>
        <member name="M:iTextSharp.text.pdf.PushbuttonField.GetAppearance">
            Gets the button appearance.
            @throws IOException on error
            @throws DocumentException on error
            @return the button appearance
        </member>
        <member name="P:iTextSharp.text.pdf.PushbuttonField.Layout">
            Sets the icon and label layout. Possible values are <CODE>LAYOUT_LABEL_ONLY</CODE>,
            <CODE>LAYOUT_ICON_ONLY</CODE>, <CODE>LAYOUT_ICON_TOP_LABEL_BOTTOM</CODE>,
            <CODE>LAYOUT_LABEL_TOP_ICON_BOTTOM</CODE>, <CODE>LAYOUT_ICON_LEFT_LABEL_RIGHT</CODE>,
            <CODE>LAYOUT_LABEL_LEFT_ICON_RIGHT</CODE> and <CODE>LAYOUT_LABEL_OVER_ICON</CODE>.
            The default is <CODE>LAYOUT_LABEL_ONLY</CODE>.
            @param layout New value of property layout.
        </member>
        <member name="P:iTextSharp.text.pdf.PushbuttonField.Image">
            Sets the icon as an image.
            @param image the image
        </member>
        <member name="P:iTextSharp.text.pdf.PushbuttonField.Template">
            Sets the icon as a template.
            @param template the template
        </member>
        <member name="P:iTextSharp.text.pdf.PushbuttonField.setScaleIcon">
            Sets the way the icon will be scaled. Possible values are
            <CODE>SCALE_ICON_ALWAYS</CODE>, <CODE>SCALE_ICON_NEVER</CODE>,
            <CODE>SCALE_ICON_IS_TOO_BIG</CODE> and <CODE>SCALE_ICON_IS_TOO_SMALL</CODE>.
            The default is <CODE>SCALE_ICON_ALWAYS</CODE>.
            @param scaleIcon the way the icon will be scaled
        </member>
        <member name="P:iTextSharp.text.pdf.PushbuttonField.ProportionalIcon">
            Sets the way the icon is scaled. If <CODE>true</CODE> the icon is scaled proportionally,
            if <CODE>false</CODE> the scaling is done anamorphicaly.
            @param proportionalIcon the way the icon is scaled
        </member>
        <member name="P:iTextSharp.text.pdf.PushbuttonField.IconVerticalAdjustment">
            A number between 0 and 1 indicating the fraction of leftover space to allocate at the bottom of the icon.
            A value of 0 positions the icon at the bottom of the annotation rectangle.
            A value of 0.5 centers it within the rectangle. The default is 0.5.
            @param iconVerticalAdjustment a number between 0 and 1 indicating the fraction of leftover space to allocate at the bottom of the icon
        </member>
        <member name="P:iTextSharp.text.pdf.PushbuttonField.IconHorizontalAdjustment">
            A number between 0 and 1 indicating the fraction of leftover space to allocate at the left of the icon.
            A value of 0 positions the icon at the left of the annotation rectangle.
            A value of 0.5 centers it within the rectangle. The default is 0.5.
            @param iconHorizontalAdjustment a number between 0 and 1 indicating the fraction of leftover space to allocate at the left of the icon
        </member>
        <member name="P:iTextSharp.text.pdf.PushbuttonField.Field">
            Gets the pushbutton field.
            @throws IOException on error
            @throws DocumentException on error
            @return the pushbutton field
        </member>
        <member name="P:iTextSharp.text.pdf.PushbuttonField.IconFitToBounds">
            If <CODE>true</CODE> the icon will be scaled to fit fully within the bounds of the annotation,
            if <CODE>false</CODE> the border width will be taken into account. The default
            is <CODE>false</CODE>.
            @param iconFitToBounds if <CODE>true</CODE> the icon will be scaled to fit fully within the bounds of the annotation,
            if <CODE>false</CODE> the border width will be taken into account
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.pdf.RadioCheckField" -->
        <member name="F:iTextSharp.text.pdf.RadioCheckField.TYPE_CHECK">
            A field with the symbol check 
        </member>
        <member name="F:iTextSharp.text.pdf.RadioCheckField.TYPE_CIRCLE">
            A field with the symbol circle 
        </member>
        <member name="F:iTextSharp.text.pdf.RadioCheckField.TYPE_CROSS">
            A field with the symbol cross 
        </member>
        <member name="F:iTextSharp.text.pdf.RadioCheckField.TYPE_DIAMOND">
            A field with the symbol diamond 
        </member>
        <member name="F:iTextSharp.text.pdf.RadioCheckField.TYPE_SQUARE">
            A field with the symbol square 
        </member>
        <member name="F:iTextSharp.text.pdf.RadioCheckField.TYPE_STAR">
            A field with the symbol star 
        </member>
        <member name="F:iTextSharp.text.pdf.RadioCheckField.checkType">
            Holds value of property checkType.
        </member>
        <member name="F:iTextSharp.text.pdf.RadioCheckField.onValue">
            Holds value of property onValue.
        </member>
        <member name="F:iTextSharp.text.pdf.RadioCheckField.vchecked">
            Holds value of property checked.
        </member>
        <member name="M:iTextSharp.text.pdf.RadioCheckField.#ctor(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Rectangle,System.String,System.String)">
            Creates a new instance of RadioCheckField
            @param writer the document <CODE>PdfWriter</CODE>
            @param box the field location and dimensions
            @param fieldName the field name. It must not be <CODE>null</CODE>
            @param onValue the value when the field is checked
        </member>
        <member name="M:iTextSharp.text.pdf.RadioCheckField.GetAppearance(System.Boolean,System.Boolean)">
            Gets the field appearance.
            @param isRadio <CODE>true</CODE> for a radio field and <CODE>false</CODE>
            for a check field
            @param on <CODE>true</CODE> for the checked state, <CODE>false</CODE>
            otherwise
            @throws IOException on error
            @throws DocumentException on error
            @return the appearance
        </member>
        <member name="M:iTextSharp.text.pdf.RadioCheckField.GetAppearanceRadioCircle(System.Boolean)">
            Gets the special field appearance for the radio circle.
            @param on <CODE>true</CODE> for the checked state, <CODE>false</CODE>
            otherwise
            @return the appearance
        </member>
        <member name="M:iTextSharp.text.pdf.RadioCheckField.GetRadioGroup(System.Boolean,System.Boolean)">
            Gets a radio group. It's composed of the field specific keys, without the widget
            ones. This field is to be used as a field aggregator with {@link PdfFormField#addKid(PdfFormField) AddKid()}.
            @param noToggleToOff if <CODE>true</CODE>, exactly one radio button must be selected at all
            times; clicking the currently selected button has no effect.
            If <CODE>false</CODE>, clicking
            the selected button deselects it, leaving no button selected.
            @param radiosInUnison if <CODE>true</CODE>, a group of radio buttons within a radio button field that
            use the same value for the on state will turn on and off in unison; that is if
            one is checked, they are all checked. If <CODE>false</CODE>, the buttons are mutually exclusive
            (the same behavior as HTML radio buttons)
            @return the radio group
        </member>
        <member name="M:iTextSharp.text.pdf.RadioCheckField.GetField(System.Boolean)">
            Gets a radio or check field.
            @param isRadio <CODE>true</CODE> to get a radio field, <CODE>false</CODE> to get
            a check field
            @throws IOException on error
            @throws DocumentException on error
            @return the field
        </member>
        <member name="P:iTextSharp.text.pdf.RadioCheckField.CheckType">
            Sets the checked symbol. It can be
            <CODE>TYPE_CHECK</CODE>,
            <CODE>TYPE_CIRCLE</CODE>,
            <CODE>TYPE_CROSS</CODE>,
            <CODE>TYPE_DIAMOND</CODE>,
            <CODE>TYPE_SQUARE</CODE> and
            <CODE>TYPE_STAR</CODE>.
            @param checkType the checked symbol
        </member>
        <member name="P:iTextSharp.text.pdf.RadioCheckField.OnValue">
            Sets the value when the field is checked.
            @param onValue the value when the field is checked
        </member>
        <member name="P:iTextSharp.text.pdf.RadioCheckField.Checked">
            Sets the state of the field to checked or unchecked.
            @param checked the state of the field, <CODE>true</CODE> for checked
            and <CODE>false</CODE> for unchecked
        </member>
        <member name="P:iTextSharp.text.pdf.RadioCheckField.RadioField">
            Gets the radio field. It's only composed of the widget keys and must be used
            with {@link #getRadioGroup(bool,bool)}.
            @return the radio field
            @throws IOException on error
            @throws DocumentException on error
        </member>
        <member name="P:iTextSharp.text.pdf.RadioCheckField.CheckField">
            Gets the check field.
            @return the check field
            @throws IOException on error
            @throws DocumentException on error
        </member>
        <member name="T:iTextSharp.text.pdf.RandomAccessFileOrArray">
            An implementation of a RandomAccessFile for input only
             that accepts a file or a byte array as data source.
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:iTextSharp.text.pdf.RandomAccessFileOrArray.startOffset">
            Holds value of property startOffset. 
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.RandomAccessFileOrArray.ReadShortLE" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.RandomAccessFileOrArray.ReadUnsignedShortLE" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.RandomAccessFileOrArray.ReadCharLE" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.RandomAccessFileOrArray.ReadIntLE" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.RandomAccessFileOrArray.ReadUnsignedInt" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.pdf.SequenceList" -->
        <member name="M:iTextSharp.text.pdf.SequenceList.Expand(System.String,System.Int32)">
            Generates a list of numbers from a string.
            @param ranges the comma separated ranges
            @param maxNumber the maximum number in the range
            @return a list with the numbers as <CODE>Integer</CODE>
        </member>
        <member name="T:iTextSharp.text.pdf.ShadingColor">
            Implements a shading pattern as a <code>Color</code>.
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.pdf.SimpleBookmark" -->
        <member name="M:iTextSharp.text.pdf.SimpleBookmark.#ctor">
            Creates a new instance of SimpleBookmark 
        </member>
        <member name="M:iTextSharp.text.pdf.SimpleBookmark.GetNumber(iTextSharp.text.pdf.PdfIndirectReference)">
            Gets number of indirect. If type of directed indirect is PAGES, it refers PAGE object through KIDS.
            (Contributed by Kazuya Ujihara)
            @param indirect 
            2004-06-13
        </member>
        <member name="M:iTextSharp.text.pdf.SimpleBookmark.GetBookmark(iTextSharp.text.pdf.PdfReader)">
            Gets a <CODE>List</CODE> with the bookmarks. It returns <CODE>null</CODE> if
            the document doesn't have any bookmarks.
            @param reader the document
            @return a <CODE>List</CODE> with the bookmarks or <CODE>null</CODE> if the
            document doesn't have any
        </member>
        <member name="M:iTextSharp.text.pdf.SimpleBookmark.EliminatePages(System.Collections.ArrayList,System.Int32[])">
            Removes the bookmark entries for a number of page ranges. The page ranges
            consists of a number of pairs with the start/end page range. The page numbers
            are inclusive.
            @param list the bookmarks
            @param pageRange the page ranges, always in pairs.
        </member>
        <member name="M:iTextSharp.text.pdf.SimpleBookmark.ShiftPageNumbers(System.Collections.ArrayList,System.Int32,System.Int32[])">
            For the pages in range add the <CODE>pageShift</CODE> to the page number.
            The page ranges
            consists of a number of pairs with the start/end page range. The page numbers
            are inclusive.
            @param list the bookmarks
            @param pageShift the number to add to the pages in range
            @param pageRange the page ranges, always in pairs. It can be <CODE>null</CODE>
            to include all the pages
        </member>
        <member name="M:iTextSharp.text.pdf.SimpleBookmark.ExportToXMLNode(System.Collections.ArrayList,System.IO.StreamWriter,System.Int32,System.Boolean)">
            Exports the bookmarks to XML. Only of use if the generation is to be include in
            some other XML document.
            @param list the bookmarks
            @param out the export destination. The writer is not closed
            @param indent the indentation level. Pretty printing significant only
            @param onlyASCII codes above 127 will always be escaped with &amp;#nn; if <CODE>true</CODE>,
            whatever the encoding
            @throws IOException on error
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.SimpleBookmark.ExportToXML(System.Collections.ArrayList,System.IO.Stream,System.String,System.Boolean)" -->
        <member name="M:iTextSharp.text.pdf.SimpleBookmark.ExportToXML(System.Collections.ArrayList,System.IO.StreamWriter,System.String,System.Boolean)">
            Exports the bookmarks to XML.
            @param list the bookmarks
            @param wrt the export destination. The writer is not closed
            @param encoding the encoding according to IANA conventions
            @param onlyASCII codes above 127 will always be escaped with &amp;#nn; if <CODE>true</CODE>,
            whatever the encoding
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.SimpleBookmark.ImportFromXML(System.IO.Stream)">
            Import the bookmarks from XML.
            @param in the XML source. The stream is not closed
            @throws IOException on error
            @return the bookmarks
        </member>
        <member name="M:iTextSharp.text.pdf.SimpleBookmark.ImportFromXML(System.IO.StreamReader)">
            Import the bookmarks from XML.
            @param in the XML source. The reader is not closed
            @throws IOException on error
            @return the bookmarks
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.pdf.SimpleXMLParser" -->
        <member name="M:iTextSharp.text.pdf.SimpleXMLParser.Parse(iTextSharp.text.pdf.ISimpleXMLDocHandler,System.IO.Stream)">
            Parses the XML document firing the events to the handler.
            @param doc the document handler
            @param in the document. The encoding is deduced from the stream. The stream is not closed
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.SimpleXMLParser.Parse(iTextSharp.text.pdf.ISimpleXMLDocHandler,iTextSharp.text.pdf.ISimpleXMLDocHandlerComment,System.IO.StreamReader,System.Boolean)">
            Parses the XML document firing the events to the handler.
            @param doc the document handler
            @param r the document. The encoding is already resolved. The reader is not closed
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.SimpleXMLParser.EscapeXML(System.String,System.Boolean)">
            Escapes a string with the appropriated XML codes.
            @param s the string to be escaped
            @param onlyASCII codes above 127 will always be escaped with &amp;#nn; if <CODE>true</CODE>
            @return the escaped string
        </member>
        <member name="T:iTextSharp.text.pdf.SpotColor">
            
             @author  psoares
        </member>
        <member name="M:iTextSharp.text.pdf.StampContent.#ctor(iTextSharp.text.pdf.PdfStamperImp,iTextSharp.text.pdf.PdfStamperImp.PageStamp)">
            Creates a new instance of StampContent 
        </member>
        <member name="P:iTextSharp.text.pdf.StampContent.Duplicate">
             Gets a duplicate of this <CODE>PdfContentByte</CODE>. All
             the members are copied by reference but the buffer stays different.
            
             @return a copy of this <CODE>PdfContentByte</CODE>
        </member>
        <member name="T:iTextSharp.text.pdf.TextField">
            Supports text, combo and list fields generating the correct appearances.
            All the option in the Acrobat GUI are supported in an easy to use API.
            @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:iTextSharp.text.pdf.TextField.defaultText">
            Holds value of property defaultText. 
        </member>
        <member name="F:iTextSharp.text.pdf.TextField.choices">
            Holds value of property choices. 
        </member>
        <member name="F:iTextSharp.text.pdf.TextField.choiceExports">
            Holds value of property choiceExports. 
        </member>
        <member name="F:iTextSharp.text.pdf.TextField.choiceSelection">
            Holds value of property choiceSelection. 
        </member>
        <member name="M:iTextSharp.text.pdf.TextField.#ctor(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.Rectangle,System.String)">
            Creates a new <CODE>TextField</CODE>.
            @param writer the document <CODE>PdfWriter</CODE>
            @param box the field location and dimensions
            @param fieldName the field name. If <CODE>null</CODE> only the widget keys
            will be included in the field allowing it to be used as a kid field.
        </member>
        <member name="M:iTextSharp.text.pdf.TextField.GetAppearance">
            Gets the appearance for this TextField.
            @return the appearance object for this TextField
            @throws IOException
            @throws DocumentException
        </member>
        <member name="M:iTextSharp.text.pdf.TextField.GetTextField">
            Gets a new text field.
            @throws IOException on error
            @throws DocumentException on error
            @return a new text field
        </member>
        <member name="M:iTextSharp.text.pdf.TextField.GetComboField">
            Gets a new combo field.
            @throws IOException on error
            @throws DocumentException on error
            @return a new combo field
        </member>
        <member name="M:iTextSharp.text.pdf.TextField.GetListField">
            Gets a new list field.
            @throws IOException on error
            @throws DocumentException on error
            @return a new list field
        </member>
        <member name="P:iTextSharp.text.pdf.TextField.DefaultText">
            Sets the default text. It is only meaningful for text fields.
            @param defaultText the default text
        </member>
        <member name="P:iTextSharp.text.pdf.TextField.Choices">
            Sets the choices to be presented to the user in list/combo
            fields.
            @param choices the choices to be presented to the user
        </member>
        <member name="P:iTextSharp.text.pdf.TextField.ChoiceExports">
            Sets the export values in list/combo fields. If this array
            is <CODE>null</CODE> then the choice values will also be used
            as the export values.
            @param choiceExports the export values in list/combo fields
        </member>
        <member name="P:iTextSharp.text.pdf.TextField.ChoiceSelection">
            Sets the zero based index of the selected item.
            @param choiceSelection the zero based index of the selected item
        </member>
        <member name="T:iTextSharp.text.pdf.TrueTypeFontSubSet">
            Subsets a True Type font by removing the unneeded glyphs from
             the font.
            
             @author  Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFontSubSet.tableDirectory">
            Contains the location of the several tables. The key is the name of
            the table and the value is an <CODE>int[3]</CODE> where position 0
            is the checksum, position 1 is the offset from the start of the file
            and position 2 is the length of the table.
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFontSubSet.rf">
            The file in use.
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFontSubSet.fileName">
            The file name.
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFontSubSet.#ctor(System.String,iTextSharp.text.pdf.RandomAccessFileOrArray,System.Collections.Hashtable,System.Int32,System.Boolean)">
            Creates a new TrueTypeFontSubSet
            @param directoryOffset The offset from the start of the file to the table directory
            @param fileName the file name of the font
            @param glyphsUsed the glyphs used
            @param includeCmap <CODE>true</CODE> if the table cmap is to be included in the generated font
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFontSubSet.Process">
            Does the actual work of subsetting the font.
            @throws IOException on error
            @throws DocumentException on error
            @return the subset font
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFontSubSet.ReadStandardString(System.Int32)">
            Reads a <CODE>string</CODE> from the font file as bytes using the Cp1252
             encoding.
            @param length the length of bytes to read
            @return the <CODE>string</CODE> read
            @throws IOException the font file could not be read
        </member>
        <member name="T:iTextSharp.text.pdf.TrueTypeFontUnicode">
            Represents a True Type font with Unicode encoding. All the character
            in the font can be used directly by using the encoding Identity-H or
            Identity-V. This is the only way to represent some character sets such
            as Thai.
            @author  Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:iTextSharp.text.pdf.TrueTypeFontUnicode.vertical">
            <CODE>true</CODE> if the encoding is vertical.
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFontUnicode.#ctor(System.String,System.String,System.Boolean,System.Byte[])">
            Creates a new TrueType font addressed by Unicode characters. The font
            will always be embedded.
            @param ttFile the location of the font on file. The file must end in '.ttf'.
            The modifiers after the name are ignored.
            @param enc the encoding to be applied to this font
            @param emb true if the font is to be embedded in the PDF
            @param ttfAfm the font as a <CODE>byte</CODE> array
            @throws DocumentException the font is invalid
            @throws IOException the font file could not be read
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFontUnicode.GetWidth(System.String)">
            Gets the width of a <CODE>string</CODE> in normalized 1000 units.
            @param text the <CODE>string</CODE> to get the witdth of
            @return the width in normalized 1000 units
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFontUnicode.GetToUnicode(System.Object[])">
            Creates a ToUnicode CMap to allow copy and paste from Acrobat.
            @param metrics metrics[0] contains the glyph index and metrics[2]
            contains the Unicode code
            @throws DocumentException on error
            @return the stream representing this CMap or <CODE>null</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFontUnicode.ToHex(System.Int32)">
            Gets an hex string in the format "&lt;HHHH&gt;".
            @param n the number
            @return the hex string
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFontUnicode.GetCIDFontType2(iTextSharp.text.pdf.PdfIndirectReference,System.String,System.Object[])">
            Generates the CIDFontTyte2 dictionary.
            @param fontDescriptor the indirect reference to the font descriptor
            @param subsetPrefix the subset prefix
            @param metrics the horizontal width metrics
            @return a stream
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFontUnicode.GetFontBaseType(iTextSharp.text.pdf.PdfIndirectReference,System.String,iTextSharp.text.pdf.PdfIndirectReference)">
            Generates the font dictionary.
            @param descendant the descendant dictionary
            @param subsetPrefix the subset prefix
            @param toUnicode the ToUnicode stream
            @return the stream
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFontUnicode.Compare(System.Object,System.Object)">
            The method used to sort the metrics array.
            @param o1 the first element
            @param o2 the second element
            @return the comparisation
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFontUnicode.WriteFont(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.pdf.PdfIndirectReference,System.Object[])">
            Outputs to the writer the font dictionaries and streams.
            @param writer the writer for this document
            @param ref the font indirect reference
            @param parms several parameters that depend on the font type
            @throws IOException on error
            @throws DocumentException error in generating the object
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFontUnicode.ConvertToBytes(System.String)">
            A forbidden operation. Will throw a null pointer exception.
            @param text the text
            @return always <CODE>null</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFontUnicode.CharExists(System.Char)">
            Checks if a character exists in this font.
            @param c the character to check
            @return <CODE>true</CODE> if the character has a glyph,
            <CODE>false</CODE> otherwise
        </member>
        <member name="M:iTextSharp.text.pdf.TrueTypeFontUnicode.SetCharAdvance(System.Char,System.Int32)">
            Sets the character advance.
            @param c the character
            @param advance the character advance normalized to 1000 units
            @return <CODE>true</CODE> if the advance was set,
            <CODE>false</CODE> otherwise
        </member>
        <member name="T:iTextSharp.text.pdf.Type1Font">
            Reads a Type1 font
            
             @author Paulo Soares (psoares@consiste.pt)
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font.pfb">
            The PFB file if the input was made with a <CODE>byte</CODE> array.
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font.FontName">
            The Postscript font name.
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font.FullName">
            The full name of the font.
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font.FamilyName">
            The family name of the font.
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font.Weight">
            The weight of the font: normal, bold, etc.
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font.ItalicAngle">
            The italic angle of the font, usually 0.0 or negative.
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font.IsFixedPitch">
            <CODE>true</CODE> if all the characters have the same
            width.
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font.CharacterSet">
            The character set of the font.
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font.llx">
            The llx of the FontBox.
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font.lly">
            The lly of the FontBox.
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font.urx">
            The lurx of the FontBox.
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font.ury">
            The ury of the FontBox.
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font.UnderlinePosition">
            The underline position.
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font.UnderlineThickness">
            The underline thickness.
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font.EncodingScheme">
            The font's encoding name. This encoding is 'StandardEncoding' or
            'AdobeStandardEncoding' for a font that can be totally encoded
            according to the characters names. For all other names the
            font is treated as symbolic.
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font.CapHeight">
            A variable.
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font.XHeight">
            A variable.
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font.Ascender">
            A variable.
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font.Descender">
            A variable.
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font.StdHW">
            A variable.
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font.StdVW">
            A variable.
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font.CharMetrics">
            Represents the section CharMetrics in the AFM file. Each
            value of this array contains a <CODE>Object[4]</CODE> with an
            Integer, Integer, String and int[]. This is the code, width, name and char bbox.
            The key is the name of the char and also an Integer with the char number.
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font.KernPairs">
            Represents the section KernPairs in the AFM file. The key is
            the name of the first character and the value is a <CODE>Object[]</CODE>
            with 2 elements for each kern pair. Position 0 is the name of
            the second character and position 1 is the kerning distance. This is
            repeated for all the pairs.
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font.fileName">
            The file in use.
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font.builtinFont">
            <CODE>true</CODE> if this font is one of the 14 built in fonts.
        </member>
        <member name="F:iTextSharp.text.pdf.Type1Font.pfbTypes">
            Types of records in a PFB file. ASCII is 1 and BINARY is 2.
            They have to appear in the PFB file in this sequence.
        </member>
        <member name="M:iTextSharp.text.pdf.Type1Font.#ctor(System.String,System.String,System.Boolean,System.Byte[],System.Byte[])">
            Creates a new Type1 font.
            @param ttfAfm the AFM file if the input is made with a <CODE>byte</CODE> array
            @param pfb the PFB file if the input is made with a <CODE>byte</CODE> array
            @param afmFile the name of one of the 14 built-in fonts or the location of an AFM file. The file must end in '.afm'
            @param enc the encoding to be applied to this font
            @param emb true if the font is to be embedded in the PDF
            @throws DocumentException the AFM file is invalid
            @throws IOException the AFM file could not be read
        </member>
        <member name="M:iTextSharp.text.pdf.Type1Font.GetRawWidth(System.Int32,System.String)">
            Gets the width from the font according to the <CODE>name</CODE> or,
            if the <CODE>name</CODE> is null, meaning it is a symbolic font,
            the char <CODE>c</CODE>.
            @param c the char if the font is symbolic
            @param name the glyph name
            @return the width of the char
        </member>
        <member name="M:iTextSharp.text.pdf.Type1Font.GetKerning(System.Char,System.Char)">
            Gets the kerning between two Unicode characters. The characters
            are converted to names and this names are used to find the kerning
            pairs in the <CODE>Hashtable</CODE> <CODE>KernPairs</CODE>.
            @param char1 the first char
            @param char2 the second char
            @return the kerning to be applied
        </member>
        <member name="M:iTextSharp.text.pdf.Type1Font.Process(iTextSharp.text.pdf.RandomAccessFileOrArray)">
            Reads the font metrics
            @param rf the AFM file
            @throws DocumentException the AFM file is invalid
            @throws IOException the AFM file could not be read
        </member>
        <member name="M:iTextSharp.text.pdf.Type1Font.GetFontStream">
            If the embedded flag is <CODE>false</CODE> or if the font is
             one of the 14 built in types, it returns <CODE>null</CODE>,
            otherwise the font is read and output in a PdfStream object.
            @return the PdfStream containing the font or <CODE>null</CODE>
            @throws DocumentException if there is an error reading the font
        </member>
        <member name="M:iTextSharp.text.pdf.Type1Font.GetFontDescriptor(iTextSharp.text.pdf.PdfIndirectReference)">
            Generates the font descriptor for this font or <CODE>null</CODE> if it is
            one of the 14 built in fonts.
            @param fontStream the indirect reference to a PdfStream containing the font or <CODE>null</CODE>
            @return the PdfDictionary containing the font descriptor or <CODE>null</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.Type1Font.GetFontBaseType(iTextSharp.text.pdf.PdfIndirectReference,System.Int32,System.Int32,System.Byte[])">
            Generates the font dictionary for this font.
            @return the PdfDictionary containing the font dictionary
            @param firstChar the first valid character
            @param lastChar the last valid character
            @param shortTag a 256 bytes long <CODE>byte</CODE> array where each unused byte is represented by 0
            @param fontDescriptor the indirect reference to a PdfDictionary containing the font descriptor or <CODE>null</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.Type1Font.WriteFont(iTextSharp.text.pdf.PdfWriter,iTextSharp.text.pdf.PdfIndirectReference,System.Object[])">
            Outputs to the writer the font dictionaries and streams.
            @param writer the writer for this document
            @param ref the font indirect reference
            @param parms several parameters that depend on the font type
            @throws IOException on error
            @throws DocumentException error in generating the object
        </member>
        <member name="M:iTextSharp.text.pdf.Type1Font.GetFontDescriptor(System.Int32,System.Single)">
            Gets the font parameter identified by <CODE>key</CODE>. Valid values
            for <CODE>key</CODE> are <CODE>ASCENT</CODE>, <CODE>CAPHEIGHT</CODE>, <CODE>DESCENT</CODE>,
            <CODE>ITALICANGLE</CODE>, <CODE>BBOXLLX</CODE>, <CODE>BBOXLLY</CODE>, <CODE>BBOXURX</CODE>
            and <CODE>BBOXURY</CODE>.
            @param key the parameter to be extracted
            @param fontSize the font size in points
            @return the parameter in points
        </member>
        <member name="M:iTextSharp.text.pdf.Type1Font.HasKernPairs">
            Checks if the font has any kerning pairs.
            @return <CODE>true</CODE> if the font has any kerning pairs
        </member>
        <member name="M:iTextSharp.text.pdf.Type1Font.SetKerning(System.Char,System.Char,System.Int32)">
            Sets the kerning between two Unicode chars.
            @param char1 the first char
            @param char2 the second char
            @param kern the kerning to apply in normalized 1000 units
            @return <code>true</code> if the kerning was applied, <code>false</code> otherwise
        </member>
        <member name="P:iTextSharp.text.pdf.Type1Font.PostscriptFontName">
            Gets the postscript font name.
            @return the postscript font name
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "P:iTextSharp.text.pdf.Type1Font.FullFontName" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "P:iTextSharp.text.pdf.Type1Font.FamilyFontName" -->
        <member name="T:iTextSharp.text.pdf.Type3Font">
            A class to support Type3 fonts.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.pdf.Type3Font.#ctor(iTextSharp.text.pdf.PdfWriter,System.Char[],System.Boolean)" -->
        <member name="M:iTextSharp.text.pdf.Type3Font.DefineGlyph(System.Char,System.Single,System.Single,System.Single,System.Single,System.Single)">
            Defines a glyph.
            @param c the character to match this glyph. It must be one of those defined in the constructor
            @param wx the advance this character will have
            @param llx the X lower left corner of the glyph bounding box. If the <CODE>colorize</CODE> option is
            <CODE>true</CODE> the value is ignored
            @param lly the Y lower left corner of the glyph bounding box. If the <CODE>colorize</CODE> option is
            <CODE>true</CODE> the value is ignored
            @param urx the X upper right corner of the glyph bounding box. If the <CODE>colorize</CODE> option is
            <CODE>true</CODE> the value is ignored
            @param ury the Y upper right corner of the glyph bounding box. If the <CODE>colorize</CODE> option is
            <CODE>true</CODE> the value is ignored
            @return a content where the glyph can be defined
        </member>
        <member name="T:iTextSharp.text.pdf.Type3Glyph">
            The content where Type3 glyphs are written to.
        </member>
        <member name="T:iTextSharp.text.pdf.VerticalText">
            Writes text vertically. Note that the naming is done according
            to horizontal text although it referrs to vertical text.
            A line with the alignment Element.LEFT_ALIGN will actually
            be top aligned.
        </member>
        <member name="F:iTextSharp.text.pdf.VerticalText.NO_MORE_TEXT">
            Signals that there are no more text available. 
        </member>
        <member name="F:iTextSharp.text.pdf.VerticalText.NO_MORE_COLUMN">
            Signals that there is no more column. 
        </member>
        <member name="F:iTextSharp.text.pdf.VerticalText.chunks">
            The chunks that form the text. 
        </member>
        <member name="F:iTextSharp.text.pdf.VerticalText.text">
            The <CODE>PdfContent</CODE> where the text will be written to. 
        </member>
        <member name="F:iTextSharp.text.pdf.VerticalText.alignment">
            The column Element. Default is left Element. 
        </member>
        <member name="F:iTextSharp.text.pdf.VerticalText.currentChunkMarker">
            Marks the chunks to be eliminated when the line is written. 
        </member>
        <member name="F:iTextSharp.text.pdf.VerticalText.currentStandbyChunk">
            The chunk created by the splitting. 
        </member>
        <member name="F:iTextSharp.text.pdf.VerticalText.splittedChunkText">
            The chunk created by the splitting. 
        </member>
        <member name="F:iTextSharp.text.pdf.VerticalText.leading">
            The leading
        </member>
        <member name="F:iTextSharp.text.pdf.VerticalText.startX">
            The X coordinate.
        </member>
        <member name="F:iTextSharp.text.pdf.VerticalText.startY">
            The Y coordinate.
        </member>
        <member name="F:iTextSharp.text.pdf.VerticalText.maxLines">
            The maximum number of vertical lines.
        </member>
        <member name="F:iTextSharp.text.pdf.VerticalText.height">
            The height of the text.
        </member>
        <member name="M:iTextSharp.text.pdf.VerticalText.#ctor(iTextSharp.text.pdf.PdfContentByte)">
            Creates new VerticalText
            @param text the place where the text will be written to. Can
            be a template.
        </member>
        <member name="M:iTextSharp.text.pdf.VerticalText.AddText(iTextSharp.text.Phrase)">
            Adds a <CODE>Phrase</CODE> to the current text array.
            @param phrase the text
        </member>
        <member name="M:iTextSharp.text.pdf.VerticalText.AddText(iTextSharp.text.Chunk)">
            Adds a <CODE>Chunk</CODE> to the current text array.
            @param chunk the text
        </member>
        <member name="M:iTextSharp.text.pdf.VerticalText.SetVerticalLayout(System.Single,System.Single,System.Single,System.Int32,System.Single)">
            Sets the layout.
            @param startX the top right X line position
            @param startY the top right Y line position
            @param height the height of the lines
            @param maxLines the maximum number of lines
            @param leading the separation between the lines
        </member>
        <member name="M:iTextSharp.text.pdf.VerticalText.CreateLine(System.Single)">
            Creates a line from the chunk array.
            @param width the width of the line
            @return the line or null if no more chunks
        </member>
        <member name="M:iTextSharp.text.pdf.VerticalText.ShortenChunkArray">
            Normalizes the list of chunks when the line is accepted.
        </member>
        <member name="M:iTextSharp.text.pdf.VerticalText.Go">
            Outputs the lines to the document. It is equivalent to <CODE>go(false)</CODE>.
            @return returns the result of the operation. It can be <CODE>NO_MORE_TEXT</CODE>
            and/or <CODE>NO_MORE_COLUMN</CODE>
            @throws DocumentException on error
        </member>
        <member name="M:iTextSharp.text.pdf.VerticalText.Go(System.Boolean)">
            Outputs the lines to the document. The output can be simulated.
            @param simulate <CODE>true</CODE> to simulate the writting to the document
            @return returns the result of the operation. It can be <CODE>NO_MORE_TEXT</CODE>
            and/or <CODE>NO_MORE_COLUMN</CODE>
            @throws DocumentException on error
        </member>
        <member name="M:iTextSharp.text.pdf.VerticalText.SetOrigin(System.Single,System.Single)">
            Sets the new text origin.
            @param startX the X coordinate
            @param startY the Y coordinate
        </member>
        <member name="P:iTextSharp.text.pdf.VerticalText.Leading">
            Gets the separation between the vertical lines.
            @return the vertical line separation
        </member>
        <member name="P:iTextSharp.text.pdf.VerticalText.OriginX">
            Gets the X coordinate where the next line will be writen. This value will change
            after each call to <code>go()</code>.
            @return  the X coordinate
        </member>
        <member name="P:iTextSharp.text.pdf.VerticalText.OriginY">
            Gets the Y coordinate where the next line will be writen.
            @return  the Y coordinate
        </member>
        <member name="P:iTextSharp.text.pdf.VerticalText.MaxLines">
            Gets the maximum number of available lines. This value will change
            after each call to <code>go()</code>.
            @return Value of property maxLines.
        </member>
        <member name="P:iTextSharp.text.pdf.VerticalText.Height">
            Gets the height of the line
            @return the height
        </member>
        <member name="P:iTextSharp.text.pdf.VerticalText.Alignment">
            Gets the Element.
            @return the alignment
        </member>
        <member name="T:iTextSharp.text.pdf.XfdfReader">
            Reads a XFDF.
            @author Leonard Rosenthol (leonardr@pdfsages.com)
        </member>
        <member name="M:iTextSharp.text.pdf.XfdfReader.#ctor(System.String)">
            Reads an XFDF form.
            @param filename the file name of the form
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.XfdfReader.#ctor(System.Byte[])">
            Reads an XFDF form.
            @param xfdfIn the byte array with the form
            @throws IOException on error
        </member>
        <member name="M:iTextSharp.text.pdf.XfdfReader.GetField(System.String)">
            Gets the field value.
            @param name the fully qualified field name
            @return the field's value
        </member>
        <member name="M:iTextSharp.text.pdf.XfdfReader.GetFieldValue(System.String)">
            Gets the field value or <CODE>null</CODE> if the field does not
            exist or has no value defined.
            @param name the fully qualified field name
            @return the field value or <CODE>null</CODE>
        </member>
        <member name="M:iTextSharp.text.pdf.XfdfReader.StartElement(System.String,System.Collections.Hashtable)">
            Called when a start tag is found.
            @param tag the tag name
            @param h the tag's attributes
        </member>
        <member name="M:iTextSharp.text.pdf.XfdfReader.EndElement(System.String)">
            Called when an end tag is found.
            @param tag the tag name
        </member>
        <member name="M:iTextSharp.text.pdf.XfdfReader.StartDocument">
            Called when the document starts to be parsed.
        </member>
        <member name="M:iTextSharp.text.pdf.XfdfReader.EndDocument">
            Called after the document is parsed.
        </member>
        <member name="M:iTextSharp.text.pdf.XfdfReader.Text(System.String)">
            Called when a text element is found.
            @param str the text element, probably a fragment.
        </member>
        <member name="P:iTextSharp.text.pdf.XfdfReader.Fields">
            Gets all the fields. The map is keyed by the fully qualified
            field name and the value is a merged <CODE>PdfDictionary</CODE>
            with the field content.
            @return all the fields
        </member>
        <member name="P:iTextSharp.text.pdf.XfdfReader.FileSpec">
            Gets the PDF file specification contained in the FDF.
            @return the PDF file specification contained in the FDF
        </member>
        <member name="T:iTextSharp.text.rtf.document.output.IRtfDataCache">
            The RtfDataCache interface must be implemented by classes wishing to
            act as caches for the rtf document data.
            
            @version $Revision: 1.1 $
            @author Mark Hall (mhall@edu.uni-klu.ac.at)
        </member>
        <member name="M:iTextSharp.text.rtf.document.output.IRtfDataCache.GetOutputStream">
            Get the OutputStream that the RtfDocument can write to.
            
            @return The OutputStream the RtfDocument can use.
        </member>
        <member name="M:iTextSharp.text.rtf.document.output.IRtfDataCache.WriteTo(System.IO.Stream)">
            Write the content of the cache into the OutputStream.
            
            @param target The OutputStream to write the content into.
            @throws IOException If an error occurs reading/writing.
        </member>
        <member name="F:iTextSharp.text.rtf.document.output.RtfDataCache.CACHE_MEMORY">
            Constant for caching into memory.
        </member>
        <member name="F:iTextSharp.text.rtf.document.output.RtfDataCache.CACHE_DISK">
            Constant for caching to the disk.
        </member>
        <member name="T:iTextSharp.text.rtf.document.output.RtfDiskCache">
            The RtfFileCache is a RtfDataCache that uses a temporary file
            to store the rtf document data. Not so fast, but doesn't use any
            memory (just disk space).
            
            @version $Revision: 1.1 $
            @author Mark Hall (mhall@edu.uni-klu.ac.at)
        </member>
        <member name="F:iTextSharp.text.rtf.document.output.RtfDiskCache.data">
            The BufferedOutputStream that stores the cache data.
        </member>
        <member name="F:iTextSharp.text.rtf.document.output.RtfDiskCache.tempFile">
            The temporary file to store the data in.
        </member>
        <member name="M:iTextSharp.text.rtf.document.output.RtfDiskCache.#ctor">
            Constructs a RtfFileCache. Creates the temp file.
            
            @throws IOException If the temporary file could not be created.
        </member>
        <member name="M:iTextSharp.text.rtf.document.output.RtfDiskCache.GetOutputStream">
            Gets the BufferedOutputStream to write to.
        </member>
        <member name="M:iTextSharp.text.rtf.document.output.RtfDiskCache.WriteTo(System.IO.Stream)">
            Writes the content of the temporary file into the Stream.
        </member>
        <member name="T:iTextSharp.text.rtf.document.output.RtfMemoryCache">
            The RtfMemoryCache is an RtfDataCache that keeps the whole rtf document
            data in memory. Fast but memory intensive.
            
            @version $Revision: 1.1 $
            @author Mark Hall (mhall@edu.uni-klu.ac.at)
        </member>
        <member name="F:iTextSharp.text.rtf.document.output.RtfMemoryCache.data">
            The buffer for the rtf document data.
        </member>
        <member name="M:iTextSharp.text.rtf.document.output.RtfMemoryCache.#ctor">
            Constructs a RtfMemoryCache.
        </member>
        <member name="M:iTextSharp.text.rtf.document.output.RtfMemoryCache.GetOutputStream">
            Gets the MemoryStream.
        </member>
        <member name="M:iTextSharp.text.rtf.document.output.RtfMemoryCache.WriteTo(System.IO.Stream)">
            Writes the content of the MemoryStream into the Stream.
        </member>
        <member name="T:iTextSharp.text.rtf.document.RtfCodePage">
             The RtfCodePage class allows different code pages to be used in the rtf document.
             Currently always ansi / ansicpg1252
            
             Version: $Id: RtfCodePage.java,v 1.16 2005/05/04 14:33:53 blowagie Exp $
             @author Mark Hall (mhall@edu.uni-klu.ac.at)
        </member>
        <member name="T:iTextSharp.text.rtf.RtfElement">
             RtfElement is the base class for all RTF Element classes
            
             Version: $Id: RtfElement.java,v 1.8 2004/12/14 15:14:44 blowagie Exp $
             @author Mark Hall (mhall@edu.uni-klu.ac.at)
        </member>
        <member name="M:iTextSharp.text.rtf.IRtfBasicElement.Write">
            Return the content of the Element in a byte array
            @return The byte array containing the data
        </member>
        <member name="M:iTextSharp.text.rtf.IRtfBasicElement.SetRtfDocument(iTextSharp.text.rtf.document.RtfDocument)">
            Sets the RtfDocument this RtfElement belongs to
            
            @param doc The RtfDocument to use
        </member>
        <member name="M:iTextSharp.text.rtf.IRtfBasicElement.SetInTable(System.Boolean)">
            Sets whether this IRtfBasicElement is in a table
            
            @param inTable Whether this IRtfBasicElement is in a table
        </member>
        <member name="M:iTextSharp.text.rtf.IRtfBasicElement.SetInHeader(System.Boolean)">
            Sets whether this IRtfBasicElement is in a header
            
            @param inHeader Whether this IRtfBasicElement is in a header
        </member>
        <member name="F:iTextSharp.text.rtf.RtfElement.TWIPS_FACTOR">
            The factor to use for translating from iText to rtf measurments
        </member>
        <member name="F:iTextSharp.text.rtf.RtfElement.OPEN_GROUP">
            Constant for the beginning of a rtf group
        </member>
        <member name="F:iTextSharp.text.rtf.RtfElement.CLOSE_GROUP">
            Constant for the end of an rtf group
        </member>
        <member name="F:iTextSharp.text.rtf.RtfElement.DELIMITER">
            Constant for a delimiter in rtf
        </member>
        <member name="F:iTextSharp.text.rtf.RtfElement.COMMA_DELIMITER">
            Constant for a comma delimiter in rtf
        </member>
        <member name="F:iTextSharp.text.rtf.RtfElement.document">
            The RtfDocument this RtfElement belongs to
        </member>
        <member name="F:iTextSharp.text.rtf.RtfElement.inTable">
            Whether this RtfElement is in a table
        </member>
        <member name="F:iTextSharp.text.rtf.RtfElement.inHeader">
            Whether this RtfElement is in a header
        </member>
        <member name="M:iTextSharp.text.rtf.RtfElement.#ctor(iTextSharp.text.rtf.document.RtfDocument)">
            Constructs a RtfElement belonging to the specified RtfDocument.
            
            @param doc The RtfDocument this RtfElement belongs to
        </member>
        <member name="M:iTextSharp.text.rtf.RtfElement.IntToByteArray(System.Int32)">
             Transforms an integer into its String representation and then returns the bytes
             of that string.
            
             @param i The integer to convert
             @return A byte array representing the integer
        </member>
        <member name="M:iTextSharp.text.rtf.RtfElement.Write">
             Returns the content of the RtfElement in a byte array.
            
             @return An empty byte array
        </member>
        <member name="M:iTextSharp.text.rtf.RtfElement.SetRtfDocument(iTextSharp.text.rtf.document.RtfDocument)">
            Sets the RtfDocument this RtfElement belongs to
            
            @param doc The RtfDocument to use
        </member>
        <member name="M:iTextSharp.text.rtf.RtfElement.IsInTable">
            Gets whether this RtfElement is in a table
            
            @return Whether this RtfElement is in a table
        </member>
        <member name="M:iTextSharp.text.rtf.RtfElement.SetInTable(System.Boolean)">
            Sets whether this RtfElement is in a table
            
            @param inTable <code>True</code> if this RtfElement is in a table, <code>false</code> otherwise
        </member>
        <member name="M:iTextSharp.text.rtf.RtfElement.SetInHeader(System.Boolean)">
            Sets whether this RtfElement is in a header
            
            @param inHeader <code>True</code> if this RtfElement is in a header, <code>false</code> otherwise
        </member>
        <member name="T:iTextSharp.text.rtf.IRtfExtendedElement">
            The RtfExtendedElement interface is to be used for elements that also
            write data into the definition part of the rtf document
            Version: $Id: RtfExtendedElement.java,v 1.16 2005/05/04 14:33:37 blowagie Exp $
            @author Mark Hall (mhall@edu.uni-klu.ac.at)
        </member>
        <member name="M:iTextSharp.text.rtf.IRtfExtendedElement.WriteDefinition">
            Return the definition part of the element in a byte array
            @return A byte array containing the definition data of the Element
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfCodePage.ANSI">
            Constant for ansi encoded rtf documents
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfCodePage.ANSI_CODEPAGE">
            Constant for the ansi codepage
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfCodePage.#ctor(iTextSharp.text.rtf.document.RtfDocument)">
            Construct an RtfCodePage
            
            @param doc The RtfDocument this RtfCodePage belongs to
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfCodePage.WriteDefinition">
             Writes the selected codepage to a byte array
            
             @return Byte array with the current codepage
        </member>
        <member name="T:iTextSharp.text.rtf.document.RtfDocument">
             The RtfDocument stores all document related data and also the main data stream.
             INTERNAL CLASS - NOT TO BE USED DIRECTLY
            
             Version: $Id: RtfDocument.cs,v 1.3 2005/08/20 16:12:56 psoares33 Exp $
             @author Mark Hall (mhall@edu.uni-klu.ac.at)
             @author Todd Bush (Todd.Bush@canopysystems.com) [Tab support]
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocument.data">
            Stores the actual document data
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocument.mapper">
            The RtfMapper to use in this RtfDocument
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocument.documentHeader">
            The RtfDocumentHeader that handles all document header methods
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocument.previousRandomInts">
            Stores integers that have been generated as unique random numbers
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocument.autogenerateTOCEntries">
            Whether to automatically generate TOC entries for Chapters and Sections. Defaults to false
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocument.dataWritten">
            Whether data has been written to the RtfDataCache.
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocument.documentSettings">
            The RtfDocumentSettings for this RtfDocument.
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocument.RTF_DOCUMENT">
            Constant for the Rtf document start
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocument.#ctor">
            The default constructor for a RtfDocument
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocument.WriteDocument">
             Writes the document
            
             @return A byte array containing the complete rtf document
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocument.Add(iTextSharp.text.rtf.IRtfBasicElement)">
            Adds an element to the rtf document
            
            @param element The element to add
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocument.GetMapper">
            Gets the RtfMapper object of this RtfDocument
            
            @return The RtfMapper
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocument.GetRandomInt">
            Generates a random integer that is unique with respect to the document.
            
            @return A random int
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocument.GetDocumentHeader">
            Gets the RtfDocumentHeader of this RtfDocument
            
            @return The RtfDocumentHeader of this RtfDocument
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocument.FilterSpecialChar(System.String,System.Boolean,System.Boolean)">
             Replaces special characters with their unicode values
             @param str The original <code>String</code>
             @param useHex indicated if the hexadecimal value has to be used
             @param softLineBreaks whether to use soft line breaks instead of default hard ones.
            
             @return The converted String
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocument.SetAutogenerateTOCEntries(System.Boolean)">
            Whether to automagically generate table of contents entries when
            adding Chapters or Sections.
            
            @param autogenerate Whether to automatically generate TOC entries
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocument.GetAutogenerateTOCEntries">
            Get whether to autmatically generate table of contents entries
            
            @return Wheter to automatically generate TOC entries
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocument.SetDataCacheStyle(System.Int32)">
            Sets the rtf data cache style to use. Valid values are given in the 
            RtfDataCache class.
             
            @param dataCacheStyle The style to use.
            @throws DocumentException If data has already been written into the data cache.
            @throws IOException If the disk cache could not be initialised.
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocument.GetDocumentSettings">
            Gets the RtfDocumentSettings that specify how the rtf document is generated.
            
            @return The current RtfDocumentSettings.
        </member>
        <member name="T:iTextSharp.text.rtf.document.RtfDocumentHeader">
            The RtfDocumentHeader contains all classes required for the generation of
            the document header area.
            
            @version $Version:$
            @author Mark Hall (mhall@edu.uni-klu.ac.at)
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentHeader.TITLE_PAGE">
            Constant for the title page
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentHeader.FACING_PAGES">
            Constant for facing pages
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentHeader.codePage">
            The code page to use
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentHeader.colorList">
            Stores all the colors used in the document
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentHeader.fontList">
            Stores all the fonts used in the document
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentHeader.listTable">
            Manages List tables
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentHeader.infoGroup">
            The information group with author/subject/keywords/title/producer/creationdate data
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentHeader.pageSetting">
            The page settings
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentHeader.header">
            The current RtfHeaderFooterGroup for the header
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentHeader.footer">
            The current RtfHeaderFooterGroup for the footer
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentHeader.#ctor(iTextSharp.text.rtf.document.RtfDocument)">
            Constructs a RtfDocumentHeader for a RtfDocument
            
            @param doc The RtfDocument this RtfDocumentHeader belongs to
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentHeader.Init">
            Initialises the RtfDocumentHeader.
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentHeader.Write">
            Write the contents of the document header area.
            
            @return A byte array with the contents of the document header area
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentHeader.WriteSectionDefinition">
            Writes the section definition data
            
            @return A byte array with the section definition data
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentHeader.GetFontNumber(iTextSharp.text.rtf.style.RtfFont)">
             Gets the number of the specified RtfFont
            
             @param font The RtfFont for which to get the number
             @return The number of the font
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentHeader.GetColorNumber(iTextSharp.text.rtf.style.RtfColor)">
            Gets the number of the specified RtfColor
            
            @param color The RtfColor for which to get the number
            @return The number of the color
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentHeader.GetListNumber(iTextSharp.text.rtf.list.RtfList)">
            Gets the number of the specified RtfList
            
            @param list The RtfList for which to get the number
            @return The number of the list
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentHeader.FreeListNumber(iTextSharp.text.rtf.list.RtfList)">
            Removes a RtfList from the list table
            
            @param list The RtfList to remove
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentHeader.GetPageSetting">
            Gets the RtfPageSetting object of this RtfDocument
            
            @return The RtfPageSetting object
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentHeader.AddInfoElement(iTextSharp.text.rtf.document.RtfInfoElement)">
            Adds an RtfInfoElement to the list of RtfInfoElements
            
            @param rtfInfoElement The RtfInfoElement to add
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentHeader.SetHeader(iTextSharp.text.HeaderFooter)">
            Sets the current header to use
            
            @param header The HeaderFooter to use as header
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentHeader.SetFooter(iTextSharp.text.HeaderFooter)">
            Sets the current footer to use
            
            @param footer The HeaderFooter to use as footer
        </member>
        <member name="T:iTextSharp.text.rtf.document.RtfDocumentSettings">
            The RtfDocumentSettings contains output specific settings. These settings modify
            how the actual document is then generated and some settings may mean that some
            RTF readers can't read the document or render it wrongly.
            
            @version $Revision: 1.3 $
            @author Mark Hall (mhall@edu.uni-klu.ac.at)
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentSettings.outputTableRowDefinitionAfter">
            Whether to also output the table row definition after the cell content.
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentSettings.outputDebugLineBreaks">
            Whether to output the line breaks that make the rtf document source more readable.
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentSettings.alwaysGenerateSoftLinebreaks">
            Whether to always generate soft linebreaks for \n in Chunks.
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfDocumentSettings.alwaysUseUnicode">
            Whether to always translate characters past 'z' into unicode representations.
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.IsOutputDebugLineBreaks">
            Gets whether to output the line breaks for increased rtf document readability.
            
            @return Whether to output line breaks.
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.SetOutputDebugLineBreaks(System.Boolean)">
            Sets whether to output the line breaks for increased rtf document readability.
            Some line breaks may be added where the rtf specification demands it.
            
            @param outputDebugLineBreaks The outputDebugLineBreaks to set.
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.IsOutputTableRowDefinitionAfter">
            Gets whether the table row definition should also be written after the cell content.
            
            @return Returns the outputTableRowDefinitionAfter.
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.SetOutputTableRowDefinitionAfter(System.Boolean)">
            Sets whether the table row definition should also be written after the cell content.
            This is recommended to be set to <code>true</code> if you need Word2000 compatiblity and
            <code>false</code> if the document should be opened in OpenOffice.org Writer.
            
            @param outputTableRowDefinitionAfter The outputTableRowDefinitionAfter to set.
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.IsAlwaysGenerateSoftLinebreaks">
            Gets whether all linebreaks inside Chunks are generated as soft linebreaks.
            
            @return <code>True</code> if soft linebreaks are generated, <code>false</code> for hard linebreaks.
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.SetAlwaysGenerateSoftLinebreaks(System.Boolean)">
            Sets whether to always generate soft linebreaks.
            
            @param alwaysGenerateSoftLinebreaks Whether to always generate soft linebreaks.
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.IsAlwaysUseUnicode">
            Gets whether all characters bigger than 'z' are represented as unicode.
            
            @return <code>True</code> if unicode representation is used, <code>false</code> otherwise.
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfDocumentSettings.SetAlwaysUseUnicode(System.Boolean)">
            Sets whether to represent all characters bigger than 'z' as unicode.
            
            @param alwaysUseUnicode <code>True</code> to use unicode representation, <code>false</code> otherwise.
        </member>
        <member name="T:iTextSharp.text.rtf.document.RtfInfoElement">
            Stores one information group element. Valid elements are
            author, title, subject, keywords, producer and creationdate.
            
            @version $Version:$
            @author Mark Hall (mhall@edu.uni-klu.ac.at)
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfInfoElement.INFO_AUTHOR">
            Constant for the author element
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfInfoElement.INFO_SUBJECT">
            Constant for the subject element
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfInfoElement.INFO_KEYWORDS">
            Constant for the keywords element
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfInfoElement.INFO_TITLE">
            Constant for the title element
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfInfoElement.INFO_PRODUCER">
            Constant for the producer element
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfInfoElement.INFO_CREATION_DATE">
            Constant for the creationdate element
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfInfoElement.infoType">
            The type of this RtfInfoElement. The values from Element.INFO_ELEMENT_NAME are used.
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfInfoElement.content">
            The content of this RtfInfoElement
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfInfoElement.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.Meta)">
            Constructs a RtfInfoElement based on the given Meta object
            
            @param doc The RtfDocument this RtfInfoElement belongs to
            @param meta The Meta object this RtfInfoElement is based on
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfInfoElement.Write">
            Writes this RtfInfoElement
            
            @return A byte array containing the RtfInfoElement data
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.rtf.document.RtfInfoElement.ConvertDate(System.String)" -->
        <member name="T:iTextSharp.text.rtf.document.RtfInfoGroup">
            The RtfInfoGroup stores information group elements. 
            
            @version $Version:$
            @author Mark Hall (mhall@edu.uni-klu.ac.at)
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfInfoGroup.INFO_GROUP">
            Information group starting tag
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfInfoGroup.infoElements">
            The RtfInfoElements that belong to this RtfInfoGroup
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfInfoGroup.#ctor(iTextSharp.text.rtf.document.RtfDocument)">
            Constructs a RtfInfoGroup belonging to a RtfDocument
            
            @param doc The RtfDocument this RtfInfoGroup belongs to
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfInfoGroup.Add(iTextSharp.text.rtf.document.RtfInfoElement)">
            Adds an RtfInfoElement to the RtfInfoGroup
            
            @param infoElement The RtfInfoElement to add
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfInfoGroup.Write">
            Writes the RtfInfoGroup and its RtfInfoElement elements.
            
            @return A byte array containing the group and its elements
        </member>
        <member name="T:iTextSharp.text.rtf.document.RtfPageSetting">
            The RtfPageSetting stores the page size / page margins for a RtfDocument.
            INTERNAL CLASS - NOT TO BE USED DIRECTLY
             
            @version $Version:$
            @author Mark Hall (mhall@edu.uni-klu.ac.at)
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting.PAGE_WIDTH">
            Constant for the page height
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting.PAGE_HEIGHT">
            Constant for the page width
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting.MARGIN_LEFT">
            Constant for the left margin
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting.MARGIN_RIGHT">
            Constant for the right margin
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting.MARGIN_TOP">
            Constant for the top margin
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting.MARGIN_BOTTOM">
            Constant for the bottom margin
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting.LANDSCAPE">
            Constant for landscape
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting.SECTION_PAGE_WIDTH">
            Constant for the section page width
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting.SECTION_PAGE_HEIGHT">
            Constant for the section page height
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting.SECTION_MARGIN_LEFT">
            Constant for the section left margin
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting.SECTION_MARGIN_RIGHT">
            Constant for the section right margin
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting.SECTION_MARGIN_TOP">
            Constant for the section top margin
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting.SECTION_MARGIN_BOTTOM">
            Constant for the section bottom margin
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting.pageWidth">
            The page width to use
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting.pageHeight">
            The page height to use
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting.marginLeft">
            The left margin to use
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting.marginRight">
            The right margin to use
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting.marginTop">
            The top margin to use
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting.marginBottom">
            The bottom margin to use
        </member>
        <member name="F:iTextSharp.text.rtf.document.RtfPageSetting.landscape">
            Whether the page is portrait or landscape
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfPageSetting.#ctor(iTextSharp.text.rtf.document.RtfDocument)">
            Constructs a new RtfPageSetting object belonging to a RtfDocument.
            
            @param doc The RtfDocument this RtfPageSetting belongs to 
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfPageSetting.WriteDefinition">
            Writes the page size / page margin definition
            
            @return A byte array with the page size / page margin definition
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfPageSetting.WriteSectionDefinition">
            Writes the definition part for a new section
            
            @return A byte array containing the definition for a new section
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfPageSetting.GetMarginBottom">
            Gets the bottom margin
             
            @return Returns the bottom margin
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfPageSetting.SetMarginBottom(System.Int32)">
            Sets the bottom margin
            
            @param marginBottom The bottom margin to use
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfPageSetting.GetMarginLeft">
            Gets the left margin
            
            @return Returns the left margin
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfPageSetting.SetMarginLeft(System.Int32)">
            Sets the left margin to use
            
            @param marginLeft The left margin to use
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfPageSetting.GetMarginRight">
            Gets the right margin
            
            @return Returns the right margin
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfPageSetting.SetMarginRight(System.Int32)">
            Sets the right margin to use
            
            @param marginRight The right margin to use
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfPageSetting.GetMarginTop">
            Gets the top margin
            
            @return Returns the top margin
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfPageSetting.SetMarginTop(System.Int32)">
            Sets the top margin to use
            
            @param marginTop The top margin to use
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfPageSetting.GetPageHeight">
            Gets the page height
            
            @return Returns the page height
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfPageSetting.SetPageHeight(System.Int32)">
            Sets the page height to use
            
            @param pageHeight The page height to use
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfPageSetting.GetPageWidth">
            Gets the page width
            
            @return Returns the page width
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfPageSetting.SetPageWidth(System.Int32)">
            Sets the page width to use
            
            @param pageWidth The page width to use
        </member>
        <member name="M:iTextSharp.text.rtf.document.RtfPageSetting.SetPageSize(iTextSharp.text.Rectangle)">
            Set the page size to use. This method will use guessFormat to try to guess the correct
            page format. If no format could be guessed, the sizes from the pageSize are used and
            the landscape setting is determined by comparing width and height;
            
            @param pageSize The pageSize to use
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.rtf.document.RtfPageSetting.GuessFormat(iTextSharp.text.Rectangle,System.Boolean)" -->
        <member name="M:iTextSharp.text.rtf.document.RtfPageSetting.RectEquals(iTextSharp.text.Rectangle,iTextSharp.text.Rectangle)">
            This method compares to Rectangles. They are considered equal if width and height are the same
            
            @param rect1 The first Rectangle to compare
            @param rect2 The second Rectangle to compare
            @return <code>True</code> if the Rectangles equal, <code>false</code> otherwise
        </member>
        <member name="T:iTextSharp.text.rtf.field.RtfAnchor">
            
            @version $Version:$
            @author Mark Hall (mhall@edu.uni-klu.ac.at)
        </member>
        <member name="T:iTextSharp.text.rtf.field.RtfField">
            The RtfField class is an abstract base class for all rtf field functionality.
            Subclasses only need to implement the two abstract methods writeFieldInstContent
            and writeFieldResultContent. All other field functionality is handled by the
            RtfField class.
            
            @version $Version:$
            @author Mark Hall (mhall@edu.uni-klu.ac.at)
            @author <a href="mailto:Dirk.Weigenand@smb-tec.com">Dirk Weigenand</a>
        </member>
        <member name="T:iTextSharp.text.Chunk">
            <summary>
            This is the smallest significant part of text that can be added to a document.
            </summary>
            <remarks>
            Most elements can be divided in one or more Chunks.
            A chunk is a string with a certain Font.
            all other layoutparameters should be defined in the object to which
            this chunk of text is added.
            </remarks>
            <example>
            <code>
            <strong>Chunk chunk = new Chunk("Hello world", FontFactory.GetFont(FontFactory.COURIER, 20, Font.ITALIC, new Color(255, 0, 0)));</strong>
            document.Add(chunk);
            </code>
            </example>
        </member>
        <member name="F:iTextSharp.text.Chunk.SUBSUPSCRIPT">
            <summary> Key for sub/basescript. </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.UNDERLINE">
            <summary> Key for underline. </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.STRIKETHRU">
            <summary> Key for strikethru. </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.COLOR">
            <summary> Key for color. </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.ENCODING">
            <summary> Key for encoding. </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.REMOTEGOTO">
            <summary> Key for remote goto. </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.LOCALGOTO">
            <summary> Key for local goto. </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.LOCALDESTINATION">
            <summary> Key for local destination. </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.IMAGE">
            <summary> Key for image. </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.GENERICTAG">
            <summary> Key for generic tag. </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.NEWPAGE">
            <summary> Key for newpage. </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.SPLITCHARACTER">
            <summary> Key for split character. </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.ACTION">
            <summary> Key for Action. </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.BACKGROUND">
            <summary> Key for background. </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.PDFANNOTATION">
            <summary> Key for annotation. </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.HYPHENATION">
            <summary> Key for hyphenation. </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.SKEW">
            <summary> Key for text skewing. </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.TEXTRENDERMODE">
            <summary> Key for text rendering mode.</summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.HSCALE">
            Key for text horizontal scaling. 
        </member>
        <member name="F:iTextSharp.text.Chunk.NEWLINE">
            <summary> This is a Chunk containing a newline. </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.NEXTPAGE">
            This is a Chunk containing a newpage. 
        </member>
        <member name="F:iTextSharp.text.Chunk.content">
            <summary> This is the content of this chunk of text. </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.font">
            <summary> This is the Font of this chunk of text. </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.attributes">
            <summary> Contains some of the attributes for this Chunk. </summary>
        </member>
        <member name="F:iTextSharp.text.Chunk.markupAttributes">
            <summary> Contains extra markupAttributes </summary>
        </member>
        <member name="M:iTextSharp.text.Chunk.#ctor">
            <summary>
            Empty constructor.
            </summary>
            <overloads>
            Has six overloads.
            </overloads>
        </member>
        <member name="M:iTextSharp.text.Chunk.#ctor(System.String,iTextSharp.text.Font)">
            <summary>
            Constructs a chunk of text with a certain content and a certain Font.
            </summary>
            <param name="content">the content</param>
            <param name="font">the font</param>
        </member>
        <member name="M:iTextSharp.text.Chunk.#ctor(System.String)">
            <summary>
            Constructs a chunk of text with a certain content, without specifying a Font.
            </summary>
            <param name="content">the content</param>
        </member>
        <member name="M:iTextSharp.text.Chunk.#ctor(System.Char,iTextSharp.text.Font)">
             Constructs a chunk of text with a char and a certain <CODE>Font</CODE>.
            
             @param    c        the content
             @param    font        the font
        </member>
        <member name="M:iTextSharp.text.Chunk.#ctor(System.Char)">
             Constructs a chunk of text with a char, without specifying a <CODE>Font</CODE>.
            
             @param    c        the content
        </member>
        <member name="M:iTextSharp.text.Chunk.#ctor(iTextSharp.text.Image,System.Single,System.Single)">
            <summary>
            Constructs a chunk containing an Image.
            </summary>
            <param name="image">the image</param>
            <param name="offsetX">the image offset in the x direction</param>
            <param name="offsetY">the image offset in the y direction</param>
        </member>
        <member name="M:iTextSharp.text.Chunk.#ctor(iTextSharp.text.Image,System.Single,System.Single,System.Boolean)">
            <summary>
            Constructs a chunk containing an Image.
            </summary>
            <param name="image">the image</param>
            <param name="offsetX">the image offset in the x direction</param>
            <param name="offsetY">the image offset in the y direction</param>
            <param name="changeLeading">true if the leading has to be adapted to the image</param>
        </member>
        <member name="M:iTextSharp.text.Chunk.#ctor(System.util.Properties)">
            <summary>
            Returns a Chunk that has been constructed taking in account
            the value of some attributes.
            </summary>
            <param name="attributes">some attributes</param>
        </member>
        <member name="M:iTextSharp.text.Chunk.Process(iTextSharp.text.IElementListener)">
            <summary>
            Processes the element by adding it (or the different parts) to an
            IElementListener.
            </summary>
            <param name="listener">an IElementListener</param>
            <returns>true if the element was processed successfully</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.Append(System.String)">
            <summary>
            appends some text to this Chunk.
            </summary>
            <param name="str">a string</param>
            <returns>a StringBuilder</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.IsEmpty">
            <summary>
            Checks is this Chunk is empty.
            </summary>
            <returns>false if the Chunk contains other characters than space.</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.GetWidthPoint">
            Gets the width of the Chunk in points.
            @return a width in points
        </member>
        <member name="M:iTextSharp.text.Chunk.SetTextRise(System.Single)">
            <summary>
            Sets the text displacement relative to the baseline. Positive values rise the text,
            negative values lower the text.
            </summary>
            <remarks>
            It can be used to implement sub/basescript.
            </remarks>
            <param name="rise">the displacement in points</param>
            <returns>this Chunk</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetTextRenderMode(System.Int32,System.Single,iTextSharp.text.Color)">
            Sets the text rendering mode. It can outline text, simulate bold and make
            text invisible.
            @param mode the text rendering mode. It can be <CODE>PdfContentByte.TEXT_RENDER_MODE_FILL</CODE>,
            <CODE>PdfContentByte.TEXT_RENDER_MODE_STROKE</CODE>, <CODE>PdfContentByte.TEXT_RENDER_MODE_FILL_STROKE</CODE>
            and <CODE>PdfContentByte.TEXT_RENDER_MODE_INVISIBLE</CODE>.
            @param strokeWidth the stroke line width for the modes <CODE>PdfContentByte.TEXT_RENDER_MODE_STROKE</CODE> and
            <CODE>PdfContentByte.TEXT_RENDER_MODE_FILL_STROKE</CODE>.
            @param strokeColor the stroke color or <CODE>null</CODE> to follow the text color
            @return this <CODE>Chunk</CODE>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetSkew(System.Single,System.Single)">
            Skews the text to simulate italic and other effects.
            Try <CODE>alpha=0</CODE> and <CODE>beta=12</CODE>.
            @param alpha the first angle in degrees
            @param beta the second angle in degrees
            @return this <CODE>Chunk</CODE>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetHorizontalScaling(System.Single)">
            Sets the text horizontal scaling. A value of 1 is normal and a value of 0.5f
            shrinks the text to half it's width.
            @param scale the horizontal scaling factor
            @return this <CODE>Chunk</CODE>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetAction(iTextSharp.text.pdf.PdfAction)">
            <summary>
            Sets an action for this Chunk.
            </summary>
            <param name="action">the action</param>
            <returns>this Chunk</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetAnchor(System.Uri)">
            <summary>
            Sets an anchor for this Chunk.
            </summary>
            <param name="url">the Uri to link to</param>
            <returns>this Chunk</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetAnchor(System.String)">
            <summary>
            Sets an anchor for this Chunk.
            </summary>
            <param name="url">the url to link to</param>
            <returns>this Chunk</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetLocalGoto(System.String)">
            <summary>
            Sets a local goto for this Chunk.
            </summary>
            <remarks>
            There must be a local destination matching the name.
            </remarks>
            <param name="name">the name of the destination to go to</param>
            <returns>this Chunk</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetBackground(iTextSharp.text.Color)">
            <summary>
            Sets the color of the background Chunk.
            </summary>
            <param name="color">the color of the background</param>
            <returns>this Chunk</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetBackground(iTextSharp.text.Color,System.Single,System.Single,System.Single,System.Single)">
            Sets the color and the size of the background <CODE>Chunk</CODE>.
            @param color the color of the background
            @param extraLeft increase the size of the rectangle in the left
            @param extraBottom increase the size of the rectangle in the bottom
            @param extraRight increase the size of the rectangle in the right
            @param extraTop increase the size of the rectangle in the top
            @return this <CODE>Chunk</CODE>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetUnderline(System.Single,System.Single)">
            Sets an horizontal line that can be an underline or a strikethrough.
            Actually, the line can be anywhere vertically and has always the
            <CODE>Chunk</CODE> width. Multiple call to this method will
            produce multiple lines.
            @param thickness the absolute thickness of the line
            @param yPosition the absolute y position relative to the baseline
            @return this <CODE>Chunk</CODE>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetUnderline(iTextSharp.text.Color,System.Single,System.Single,System.Single,System.Single,System.Int32)">
            Sets an horizontal line that can be an underline or a strikethrough.
            Actually, the line can be anywhere vertically and has always the
            <CODE>Chunk</CODE> width. Multiple call to this method will
            produce multiple lines.
            @param color the color of the line or <CODE>null</CODE> to follow
            the text color
            @param thickness the absolute thickness of the line
            @param thicknessMul the thickness multiplication factor with the font size
            @param yPosition the absolute y position relative to the baseline
            @param yPositionMul the position multiplication factor with the font size
            @param cap the end line cap. Allowed values are
            PdfContentByte.LINE_CAP_BUTT, PdfContentByte.LINE_CAP_ROUND and
            PdfContentByte.LINE_CAP_PROJECTING_SQUARE
            @return this <CODE>Chunk</CODE>
        </member>
        <member name="M:iTextSharp.text.Chunk.AddToArray(System.Object[][],System.Object[])">
            Utility method to extend an array.
            @param original the original array or <CODE>null</CODE>
            @param item the item to be added to the array
            @return a new array with the item appended
        </member>
        <member name="M:iTextSharp.text.Chunk.SetAnnotation(iTextSharp.text.pdf.PdfAnnotation)">
            <summary>
            Sets a generic annotation to this Chunk.
            </summary>
            <param name="annotation">the annotation</param>
            <returns>this Chunk</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetHyphenation(iTextSharp.text.pdf.IHyphenationEvent)">
            <summary>
            sets the hyphenation engine to this Chunk.
            </summary>
            <param name="hyphenation">the hyphenation engine</param>
            <returns>this Chunk</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetRemoteGoto(System.String,System.String)">
            <summary>
            Sets a goto for a remote destination for this Chunk.
            </summary>
            <param name="filename">the file name of the destination document</param>
            <param name="name">the name of the destination to go to</param>
            <returns>this Chunk</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetRemoteGoto(System.String,System.Int32)">
            <summary>
            Sets a goto for a remote destination for this Chunk.
            </summary>
            <param name="filename">the file name of the destination document</param>
            <param name="page">the page of the destination to go to. First page is 1</param>
            <returns>this Chunk</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetLocalDestination(System.String)">
            <summary>
            Sets a local destination for this Chunk.
            </summary>
            <param name="name">the name for this destination</param>
            <returns>this Chunk</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetGenericTag(System.String)">
            <summary>
            Sets the generic tag Chunk.
            </summary>
            <remarks>
            The text for this tag can be retrieved with PdfPageEvent.
            </remarks>
            <param name="text">the text for the tag</param>
            <returns>this Chunk</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetSplitCharacter(iTextSharp.text.ISplitCharacter)">
            <summary>
            Sets the split characters.
            </summary>
            <param name="splitCharacter">the SplitCharacter interface</param>
            <returns>this Chunk</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetNewPage">
            <summary>
            Sets a new page tag..
            </summary>
            <returns>this Chunk</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetAttribute(System.String,System.Object)">
            <summary>
            Sets an arbitrary attribute.
            </summary>
            <param name="name">the key for the attribute</param>
            <param name="obj">the value of the attribute</param>
            <returns>this Chunk</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.HasAttributes">
            <summary>
            Checks the attributes of this Chunk.
            </summary>
            <returns>false if there aren't any.</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.GetImage">
            <summary>
            Returns the image.
            </summary>
            <value>an Image</value>
        </member>
        <member name="M:iTextSharp.text.Chunk.IsTag(System.String)">
            <summary>
            Checks if a given tag corresponds with this object.
            </summary>
            <param name="tag">the given tag</param>
            <returns>true if the tag corresponds</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.SetMarkupAttribute(System.String,System.String)">
            <summary>
            See <see cref="M:iTextSharp.text.IMarkupAttributes.SetMarkupAttribute(System.String,System.String)"/>
            </summary>
            <param name="name">attribute name</param>
            <param name="value">attribute value</param>
        </member>
        <member name="M:iTextSharp.text.Chunk.GetMarkupAttribute(System.String)">
            <summary>
            See <see cref="M:iTextSharp.text.IMarkupAttributes.GetMarkupAttribute(System.String)"/>
            </summary>
            <param name="name">attribute name</param>
            <returns>attribute value</returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.GetKeySet(System.Collections.Hashtable)">
            <summary>
            
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.Chunk.GetKeySet(System.util.Properties)">
            <summary>
            
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="P:iTextSharp.text.Chunk.Type">
            <summary>
            Gets the type of the text element.
            </summary>
            <value>a type</value>
        </member>
        <member name="P:iTextSharp.text.Chunk.Chunks">
            <summary>
            Gets all the chunks in this element.
            </summary>
            <value>an ArrayList</value>
        </member>
        <member name="P:iTextSharp.text.Chunk.Font">
            <summary>
            Get/set the font of this Chunk.
            </summary>
            <value>a Font</value>
        </member>
        <member name="P:iTextSharp.text.Chunk.Content">
            <summary>
            Returns the content of this Chunk.
            </summary>
            <value>a string</value>
        </member>
        <member name="P:iTextSharp.text.Chunk.TextRise">
            Gets the text displacement relatiev to the baseline.
            @return a displacement in points
        </member>
        <member name="P:iTextSharp.text.Chunk.HorizontalScaling">
            Gets the horizontal scaling.
            @return a percentage in float
        </member>
        <member name="P:iTextSharp.text.Chunk.Attributes">
            <summary>
            Gets the attributes for this Chunk.
            </summary>
            <remarks>
            It may be null.
            </remarks>
            <value>a Hashmap</value>
        </member>
        <member name="P:iTextSharp.text.Chunk.MarkupAttributeNames">
            <summary>
            See <see cref="P:iTextSharp.text.IMarkupAttributes.MarkupAttributeNames"/>
            </summary>
            <value>a collection of string attribute names</value>
        </member>
        <member name="P:iTextSharp.text.Chunk.MarkupAttributes">
            <summary>
            See <see cref="P:iTextSharp.text.IMarkupAttributes.MarkupAttributes"/>
            </summary>
            <value>a Properties-object containing all the markupAttributes.</value>
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField.TWIPS_FACTOR">
            The factor to use for translating from iText to rtf measurments
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField.OPEN_GROUP">
            Constant for the beginning of a rtf group
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField.CLOSE_GROUP">
            Constant for the end of an rtf group
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField.DELIMITER">
            Constant for a delimiter in rtf
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField.COMMA_DELIMITER">
            Constant for a comma delimiter in rtf
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField.FIELD">
            Constant for a rtf field
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField.FIELD_DIRTY">
            Constant for a dirty field
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField.FIELD_PRIVATE">
            Constant for a private field
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField.FIELD_LOCKED">
            Constant for a locked field
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField.FIELD_EDIT">
            Constant for a edited field
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField.FIELD_ALT">
            Constant for an alt field
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField.FIELD_INSTRUCTIONS">
            Constant for the field instructions
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField.FIELD_RESULT">
            Constant for the field result
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField.fieldDirty">
            Is the field dirty
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField.fieldEdit">
            Is the field edited
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField.fieldLocked">
            Is the field locked
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField.fieldPrivate">
            Is the field private
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField.fieldAlt">
            Is it an alt field
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField.inTable">
            Whether this RtfField is in a table
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField.inHeader">
            Whether this RtfElement is in a header
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField.document">
            The RtfDocument this RtfField belongs to 
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfField.font">
            The RtfFont of this RtfField
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.#ctor(iTextSharp.text.rtf.document.RtfDocument)">
            Constructs a RtfField for a RtfDocument. This is not very usefull,
            since the RtfField by itself does not do anything. Use one of the
            subclasses instead.
            
            @param doc The RtfDocument this RtfField belongs to.
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.Font)">
            Constructs a RtfField for a RtfDocument. This is not very usefull,
            since the RtfField by itself does not do anything. Use one of the
            subclasses instead.
            
            @param doc The RtfDocument this RtfField belongs to.
            @param font The Font this RtfField should use
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.SetRtfDocument(iTextSharp.text.rtf.document.RtfDocument)">
            Sets the RtfDocument this RtfElement belongs to
            
            @param doc The RtfDocument to use
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.WriteFieldBegin">
            Writes the field beginning. Also writes field properties.
            
            @return A byte array with the field beginning.
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.WriteFieldInstBegin">
            Writes the beginning of the field instruction area.
            
            @return The beginning of the field instruction area
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.WriteFieldInstContent">
            Writes the content of the field instruction area. Override this
            method in your subclasses.
            
            @return The content of the field instruction area
            @throws IOException If an error occurs.
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.WriteFieldInstEnd">
            Writes the end of the field instruction area.
            
            @return A byte array containing the end of the field instruction area
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.WriteFieldResultBegin">
            Writes the beginning of the field result area
            
            @return A byte array containing the beginning of the field result area
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.WriteFieldResultContent">
            Writes the content of the pre-calculated field result. Override this
            method in your subclasses.
            
            @return A byte array containing the field result
            @throws IOException If an error occurs
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.WriteFieldResultEnd">
            Writes the end of the field result area
            
            @return A byte array containing the end of the field result area
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.WriteFieldEnd">
            Writes the end of the field
            
            @return A byte array containing the end of the field
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.Write">
            Write the content of this RtfField.
            
            @return A byte array containing the content of this RtfField
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.IsFieldAlt">
            Get whether this field is an alt field
            
            @return Returns whether this field is an alt field
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.SetFieldAlt(System.Boolean)">
            Set whether this field is an alt field
            
            @param fieldAlt The value to use
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.IsFieldDirty">
            Get whether this field is dirty
            
            @return Returns whether this field is dirty
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.SetFieldDirty(System.Boolean)">
            Set whether this field is dirty
            
            @param fieldDirty The value to use
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.IsFieldEdit">
            Get whether this field is edited
            
            @return Returns whether this field is edited
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.SetFieldEdit(System.Boolean)">
            Set whether this field is edited.
            
            @param fieldEdit The value to use
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.IsFieldLocked">
            Get whether this field is locked
            
            @return Returns the fieldLocked.
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.SetFieldLocked(System.Boolean)">
            Set whether this field is locked
            @param fieldLocked The value to use
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.IsFieldPrivate">
            Get whether this field is private
            
            @return Returns the fieldPrivate.
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.SetFieldPrivate(System.Boolean)">
            Set whether this field is private
            
            @param fieldPrivate The value to use
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.SetInTable(System.Boolean)">
            Sets whether this RtfField is in a table
            
            @param inTable <code>True</code> if this RtfField is in a table, <code>false</code> otherwise
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.SetInHeader(System.Boolean)">
            Sets whether this RtfField is in a header
            
            @param inHeader <code>True</code> if this RtfField is in a header, <code>false</code> otherwise
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfField.IsEmpty">
            An RtfField is never empty.
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfAnchor.HYPERLINK">
            Constant for a hyperlink
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfAnchor.url">
            The url of this RtfAnchor
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfAnchor.content">
            The RtfPhrase to display for the url
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfAnchor.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.Anchor)">
            Constructs a RtfAnchor based on a RtfField
            
            @param doc The RtfDocument this RtfAnchor belongs to
            @param anchor The Anchor this RtfAnchor is based on
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfAnchor.WriteFieldInstContent">
            Write the field instructions for this RtfAnchor. Sets the field
            type to HYPERLINK and then writes the url.
            
            @return The field instructions for this RtfAnchor
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfAnchor.WriteFieldResultContent">
            Write the field result for this RtfAnchor. Writes the content
            of the RtfPhrase.
            
            @return The field result for this RtfAnchor
            @throws IOException
        </member>
        <member name="T:iTextSharp.text.rtf.field.RtfPageNumber">
            The RtfPageNumber provides the page number field in rtf documents.
            
            @version $Revision: 1.7 $
            @author Mark Hall (mhall@edu.uni-klu.ac.at)
            @author <a href="mailto:Steffen.Stundzig@smb-tec.com">Steffen.Stundzig@smb-tec.com</a>
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfPageNumber.PAGE_NUMBER">
            Constant for the page number
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfPageNumber.#ctor">
            Constructs a RtfPageNumber. This can be added anywhere to add a page number field.
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfPageNumber.#ctor(iTextSharp.text.Font)">
            Constructs a RtfPageNumber with a specified Font. This can be added anywhere to
            add a page number field.
            @param font
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfPageNumber.#ctor(iTextSharp.text.rtf.document.RtfDocument)">
            Constructs a RtfPageNumber object.
            
            @param doc The RtfDocument this RtfPageNumber belongs to
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfPageNumber.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.Font)">
            Constructs a RtfPageNumber object with a specific font.
            
            @param doc The RtfDocument this RtfPageNumber belongs to
            @param font The Font to use
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfPageNumber.WriteFieldInstContent">
            Writes the field instruction content
            
            @return A byte array containing "PAGE"
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfPageNumber.WriteFieldResultContent">
            Writes the field result content
            
            @return An empty byte array
            @throws IOException
        </member>
        <member name="T:iTextSharp.text.rtf.field.RtfTableOfContents">
            The RtfTableOfContents together with multiple RtfTOCEntry objects generates a table 
            of contents. The table of contents will display no entries in the viewing program
            and the user will have to update it first. A text to inform the user of this is
            displayed instead.
            
            @version $Version:$
            @author Mark Hall (mhall@edu.uni-klu.ac.at)
            @author <a href="mailto:Steffen.Stundzig@smb-tec.com">Steffen.Stundzig@smb-tec.com</a> 
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfTableOfContents.defaultText">
            The default text to display
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfTableOfContents.#ctor(System.String,iTextSharp.text.Font)">
            Constructs a RtfTableOfContents. The default text is the text that is displayed
            before the user updates the table of contents
            
            @param defaultText The default text to display
            @param font The Font to use
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfTableOfContents.WriteFieldInstContent">
            Writes the field instruction content
            
            @return A byte array containing with the field instructions
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfTableOfContents.WriteFieldResultContent">
            Writes the field result content
            
            @return An byte array containing the default text
            @throws IOException
        </member>
        <member name="T:iTextSharp.text.rtf.field.RtfTOCEntry">
            The RtfTOCEntry is used together with the RtfTableOfContents to generate a table of
            contents. Add the RtfTOCEntry in those locations in the document where table of
            contents entries should link to 
            
            @version $Version:$
            @author Mark Hall (mhall@edu.uni-klu.ac.at)
            @author <a href="mailto:Steffen.Stundzig@smb-tec.com">Steffen.Stundzig@smb-tec.com</a> 
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfTOCEntry.TEXT_HIDDEN_ON">
            Constant for the beginning of hidden text
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfTOCEntry.TEXT_HIDDEN_OFF">
            Constant for the end of hidden text
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfTOCEntry.TOC_ENTRY_PAGE_NUMBER">
            Constant for a TOC entry with page numbers
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfTOCEntry.TOC_ENTRY_NO_PAGE_NUMBER">
            Constant for a TOC entry without page numbers
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfTOCEntry.entry">
            The entry text of this RtfTOCEntry
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfTOCEntry.showPageNumber">
            Whether to show page numbers in the table of contents
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfTOCEntry.#ctor(System.String,iTextSharp.text.Font)">
            Constructs a RtfTOCEntry with a certain entry text.
            
            @param entry The entry text to display
            @param font The Font to use
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfTOCEntry.Write">
            Writes the content of the RtfTOCEntry
            
            @return A byte array with the contents of the RtfTOCEntry
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfTOCEntry.SetShowPageNumber(System.Boolean)">
            Sets whether to display a page number in the table of contents, or not
            
            @param showPageNumber Whether to display a page number or not
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfTOCEntry.WriteFieldInstContent">
            UNUSED
            @return null
            @throws IOException never thrown
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfTOCEntry.WriteFieldResultContent">
            UNUSED
            @return null
            @throws IOException never thrown
        </member>
        <member name="T:iTextSharp.text.rtf.field.RtfTotalPageNumber">
            The RtfTotalPageNumber provides the total number of pages field in rtf documents.
            
            @version $Version:$
            @author Jose Hurtado (jose.hurtado@gft.com)
            @author Mark Hall (mhall@edu.uni-klu.ac.at)
        </member>
        <member name="F:iTextSharp.text.rtf.field.RtfTotalPageNumber.ARABIC_TOTAL_PAGES">
            Constant for arabic total page numbers.
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfTotalPageNumber.#ctor">
            Constructs a RtfTotalPageNumber. This can be added anywhere to add a total number of pages field.
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfTotalPageNumber.#ctor(iTextSharp.text.Font)">
            Constructs a RtfTotalPageNumber with a specified Font. This can be added anywhere
            to add a total number of pages field.
            @param font
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfTotalPageNumber.#ctor(iTextSharp.text.rtf.document.RtfDocument)">
            Constructs a RtfTotalPageNumber object.
            
            @param doc The RtfDocument this RtfTotalPageNumber belongs to
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfTotalPageNumber.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.Font)">
            Constructs a RtfTotalPageNumber object with a specific font.
            
            @param doc The RtfDocument this RtfTotalPageNumber belongs to
            @param font The Font to use
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfTotalPageNumber.WriteFieldInstContent">
            Writes the field NUMPAGES instruction with Arabic format
            
            @return A byte array containing "NUMPAGES \\\\* Arabic".
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.rtf.field.RtfTotalPageNumber.WriteFieldResultContent">
            Writes the field result content
            
            @return An byte array containing "1".
            @throws IOException
        </member>
        <member name="T:iTextSharp.text.rtf.graphic.RtfImage">
            The RtfImage contains one image. Supported image types are jpeg, png, wmf, bmp.
            
            @version $Version:$
            @author Mark Hall (mhall@edu.uni-klu.ac.at)
            @author Paulo Soares
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage.PICTURE_GROUP">
            Constant for the shape/picture group
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage.PICTURE">
            Constant for a picture
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage.PICTURE_JPEG">
            Constant for a jpeg image
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage.PICTURE_PNG">
            Constant for a png image
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage.PICTURE_BMP">
            Constant for a bmp image
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage.PICTURE_WMF">
            Constant for a wmf image
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage.PICTURE_WIDTH">
            Constant for the picture width
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage.PICTURE_HEIGHT">
            Constant for the picture height
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage.PICTURE_SCALED_WIDTH">
            Constant for the picture width scale
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage.PICTURE_SCALED_HEIGHT">
            Constant for the picture height scale
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage.imageType">
            The type of image this is.
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage.image">
            The actual image. Already formated for direct inclusion in the rtf document
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage.alignment">
            The alignment of this picture
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage.width">
            The width of this picture
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage.height">
            The height of this picutre
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage.plainWidth">
            The intended display width of this picture
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage.plainHeight">
            The intended display height of this picture
        </member>
        <member name="F:iTextSharp.text.rtf.graphic.RtfImage.topLevelElement">
            Whether this RtfImage is a top level element and should
            be an extra paragraph.
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfImage.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.Image)">
            Constructs a RtfImage for an Image.
            
            @param doc The RtfDocument this RtfImage belongs to
            @param image The Image that this RtfImage wraps
            @throws DocumentException If an error occured accessing the image content
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfImage.GetImage(iTextSharp.text.Image)">
            Extracts the image data from the Image. The data is formated for direct inclusion
            in a rtf document
            
            @param image The Image for which to extract the content
            @return The image data formated for the rtf document
            @throws DocumentException If an error occurs accessing the image content
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfImage.Write">
            Writes the RtfImage content
            
            @return the RtfImage content
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfImage.SetAlignment(System.Int32)">
            Sets the alignment of this RtfImage. Uses the alignments from com.lowagie.text.Element.
            
            @param alignment The alignment to use.
        </member>
        <member name="M:iTextSharp.text.rtf.graphic.RtfImage.SetTopLevelElement(System.Boolean)">
            Set whether this RtfImage should behave like a top level element
            and enclose itself in a paragraph.
            
            @param topLevelElement Whether to behave like a top level element.
        </member>
        <member name="T:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter">
            The RtfHeaderFooter represents one header or footer. This class can be used
            directly.
            
            @version $Id: RtfHeaderFooter.java,v 1.8 2004/12/14 12:51:59 blowagie Exp $
            @author Mark Hall (mhall@edu.uni-klu.ac.at)
        </member>
        <member name="T:iTextSharp.text.HeaderFooter">
            <summary>
            A HeaderFooter-object is a Rectangle with text
            that can be put above and/or below every page.
            </summary>
            <example>
            <code>
            <strong>HeaderFooter header = new HeaderFooter(new Phrase("This is a header."), false);
            HeaderFooter footer = new HeaderFooter(new Phrase("This is page "), new Phrase("."));</strong>
            document.SetHeader(header);
            document.SetFooter(footer);
            </code>
            </example>
        </member>
        <member name="F:iTextSharp.text.HeaderFooter.numbered">
            <summary> Does the page contain a pagenumber? </summary>
        </member>
        <member name="F:iTextSharp.text.HeaderFooter.before">
            <summary> This is the Phrase that comes before the pagenumber. </summary>
        </member>
        <member name="F:iTextSharp.text.HeaderFooter.pageN">
            <summary> This is number of the page. </summary>
        </member>
        <member name="F:iTextSharp.text.HeaderFooter.after">
            <summary> This is the Phrase that comes after the pagenumber. </summary>
        </member>
        <member name="F:iTextSharp.text.HeaderFooter.alignment">
            <summary> This is alignment of the header/footer. </summary>
        </member>
        <member name="M:iTextSharp.text.HeaderFooter.#ctor(iTextSharp.text.Phrase,iTextSharp.text.Phrase)">
            <summary>
            Constructs a HeaderFooter-object.
            </summary>
            <param name="before">the Phrase before the pagenumber</param>
            <param name="after">the Phrase after the pagenumber</param>
        </member>
        <member name="M:iTextSharp.text.HeaderFooter.#ctor(iTextSharp.text.Phrase,System.Boolean)">
            <summary>
            Constructs a Header-object with a pagenumber at the end.
            </summary>
            <param name="before">the Phrase before the pagenumber</param>
            <param name="numbered">true if the page has to be numbered</param>
        </member>
        <member name="M:iTextSharp.text.HeaderFooter.IsNumbered">
            <summary>
            Checks if the HeaderFooter contains a page number.
            </summary>
            <returns>true if the page has to be numbered</returns>
        </member>
        <member name="M:iTextSharp.text.HeaderFooter.SetAlignment(System.String)">
            <summary>
            Sets the alignment of this HeaderFooter.
            </summary>
            <param name="alignment">the new alignment as a string</param>
        </member>
        <member name="P:iTextSharp.text.HeaderFooter.Before">
            <summary>
            Get/set the part that comes before the pageNumber.
            </summary>
            <value>a Phrase</value>
        </member>
        <member name="P:iTextSharp.text.HeaderFooter.After">
            <summary>
            Get/set the part that comes after the pageNumber.
            </summary>
            <value>a Phrase</value>
        </member>
        <member name="P:iTextSharp.text.HeaderFooter.PageNumber">
            <summary>
            Sets the page number.
            </summary>
            <value>the new page number</value>
        </member>
        <member name="P:iTextSharp.text.HeaderFooter.Alignment">
            <summary>
            Sets the Element.
            </summary>
            <value>the new alignment</value>
        </member>
        <member name="P:iTextSharp.text.HeaderFooter.Paragraph">
            <summary>
            Gets the Paragraph that can be used as header or footer.
            </summary>
            <returns>a Paragraph</returns>
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.TYPE_HEADER">
            Constant for the header type
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.TYPE_FOOTER">
            Constant for the footer type
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.DISPLAY_FIRST_PAGE">
            Constant for displaying the header/footer on the first page
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.DISPLAY_ALL_PAGES">
            Constant for displaying the header/footer on all pages
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.DISPLAY_LEFT_PAGES">
            Constant for displaying the header/footer on all left hand pages
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.DISPLAY_RIGHT_PAGES">
            Constant for displaying the header/footer on all right hand pages
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.HEADER_ALL">
            Constant for a header on all pages
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.HEADER_FIRST">
            Constant for a header on the first page
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.HEADER_LEFT">
            Constant for a header on all left hand pages
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.HEADER_RIGHT">
            Constant for a header on all right hand pages
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.FOOTER_ALL">
            Constant for a footer on all pages
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.FOOTER_FIRST">
            Constant for a footer on the first page
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.FOOTER_LEFT">
            Constnat for a footer on the left hand pages
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.FOOTER_RIGHT">
            Constant for a footer on the right hand pages
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.document">
            The RtfDocument this RtfHeaderFooter belongs to
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.content">
            The content of this RtfHeaderFooter
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.type">
            The display type of this RtfHeaderFooter. TYPE_HEADER or TYPE_FOOTER
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.displayAt">
            The display location of this RtfHeaderFooter. DISPLAY_FIRST_PAGE,
            DISPLAY_LEFT_PAGES, DISPLAY_RIGHT_PAGES or DISPLAY_ALL_PAGES
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.HeaderFooter,System.Int32,System.Int32)">
            Constructs a RtfHeaderFooter based on a HeaderFooter with a certain type and displayAt
            location. For internal use only.
            
            @param doc The RtfDocument this RtfHeaderFooter belongs to
            @param headerFooter The HeaderFooter to base this RtfHeaderFooter on
            @param type The type of RtfHeaderFooter
            @param displayAt The display location of this RtfHeaderFooter
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.rtf.headerfooter.RtfHeaderFooter,System.Int32)">
            Constructs a RtfHeaderFooter as a copy of an existing RtfHeaderFooter.
            For internal use only.
            
            @param doc The RtfDocument this RtfHeaderFooter belongs to
            @param headerFooter The RtfHeaderFooter to copy
            @param displayAt The display location of this RtfHeaderFooter
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.HeaderFooter)">
            Constructs a RtfHeaderFooter for a HeaderFooter.
             
            @param doc The RtfDocument this RtfHeaderFooter belongs to
            @param headerFooter The HeaderFooter to base this RtfHeaderFooter on
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.#ctor(iTextSharp.text.IElement)">
             Constructs a RtfHeaderFooter for any Element.
            
             @param element The Element to display as content of this RtfHeaderFooter
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.SetRtfDocument(iTextSharp.text.rtf.document.RtfDocument)">
            Sets the RtfDocument this RtfElement belongs to
            
            @param doc The RtfDocument to use
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.Write">
            Writes the content of this RtfHeaderFooter
            
            @return A byte array with the content of this RtfHeaderFooter
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.SetDisplayAt(System.Int32)">
            Sets the display location of this RtfHeaderFooter
            
            @param displayAt The display location to use.
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.SetType(System.Int32)">
            Sets the type of this RtfHeaderFooter
            
            @param type The type to use.
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.GetContent">
            Gets the content of this RtfHeaderFooter
            
            @return The content of this RtfHeaderFooter
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.SetInTable(System.Boolean)">
            Unused
            @param inTable
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooter.SetInHeader(System.Boolean)">
            Unused
            @param inHeader
        </member>
        <member name="T:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup">
            The RtfHeaderFooterGroup holds 0 - 3 RtfHeaderFooters that create a group
            of headers or footers.
            
            @version $Version:$
            @author Mark Hall (mhall@edu.uni-klu.ac.at)
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.MODE_NONE">
            This RtfHeaderFooterGroup contains no RtfHeaderFooter objects
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.MODE_SINGLE">
            This RtfHeaderFooterGroup contains one RtfHeaderFooter object
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.MODE_MULTIPLE">
            This RtfHeaderFooterGroup contains two or three RtfHeaderFooter objects
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.mode">
            The current mode of this RtfHeaderFooterGroup. Defaults to MODE_NONE
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.type">
            The current type of this RtfHeaderFooterGroup. Defaults to RtfHeaderFooter.TYPE_HEADER
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.headerAll">
            The RtfHeaderFooter for all pages
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.headerFirst">
            The RtfHeaderFooter for the first page
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.headerLeft">
            The RtfHeaderFooter for the left hand pages
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.headerRight">
            The RtfHeaderFooter for the right hand pages
        </member>
        <member name="F:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.document">
            The RtfDocument this RtfHeaderFooterGroup belongs to
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.#ctor">
             Constructs a RtfHeaderGroup to which you add headers/footers using 
             via the setHeaderFooter method.
            
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.#ctor(iTextSharp.text.rtf.document.RtfDocument,System.Int32)">
            Constructs a certain type of RtfHeaderFooterGroup. RtfHeaderFooter.TYPE_HEADER
            and RtfHeaderFooter.TYPE_FOOTER are valid values for type.
            
            @param doc The RtfDocument this RtfHeaderFooter belongs to
            @param type The type of RtfHeaderFooterGroup to create
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup,System.Int32)">
            Constructs a RtfHeaderFooterGroup by copying the content of the original
            RtfHeaderFooterGroup
            
            @param doc The RtfDocument this RtfHeaderFooter belongs to
            @param headerFooter The RtfHeaderFooterGroup to copy
            @param type The type of RtfHeaderFooterGroup to create
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.rtf.headerfooter.RtfHeaderFooter,System.Int32)">
            Constructs a RtfHeaderFooterGroup for a certain RtfHeaderFooter.
            
            @param doc The RtfDocument this RtfHeaderFooter belongs to
            @param headerFooter The RtfHeaderFooter to display
            @param type The typ of RtfHeaderFooterGroup to create
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.HeaderFooter,System.Int32)">
            Constructs a RtfHeaderGroup for a certain HeaderFooter
            
            @param doc The RtfDocument this RtfHeaderFooter belongs to
            @param headerFooter The HeaderFooter to display
            @param type The typ of RtfHeaderFooterGroup to create
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.SetRtfDocument(iTextSharp.text.rtf.document.RtfDocument)">
            Sets the RtfDocument this RtfElement belongs to
            
            @param doc The RtfDocument to use
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.Write">
            Write the content of this RtfHeaderFooterGroup.
            
            @return A byte array with the content of this RtfHeaderFooterGroup
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.SetHeaderFooter(iTextSharp.text.rtf.headerfooter.RtfHeaderFooter,System.Int32)">
            Set a RtfHeaderFooter to be displayed at a certain position
            
            @param headerFooter The RtfHeaderFooter to display
            @param displayAt The display location to use
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.SetHeaderFooter(iTextSharp.text.HeaderFooter,System.Int32)">
            Set a HeaderFooter to be displayed at a certain position
            
            @param headerFooter The HeaderFooter to set
            @param displayAt The display location to use
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.SetHasTitlePage">
            Set that this RtfHeaderFooterGroup should have a title page. If only
            a header / footer for all pages exists, then it will be copied to the
            first page aswell.
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.SetHasFacingPages">
            Set that this RtfHeaderFooterGroup should have facing pages. If only
            a header / footer for all pages exists, then it will be copied to the left
            and right pages aswell.
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.HasTitlePage">
            Get whether this RtfHeaderFooterGroup has a titlepage
            
            @return Whether this RtfHeaderFooterGroup has a titlepage
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.HasFacingPages">
            Get whether this RtfHeaderFooterGroup has facing pages
            
            @return Whether this RtfHeaderFooterGroup has facing pages
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.SetInTable(System.Boolean)">
            Unused
            @param inTable
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.SetInHeader(System.Boolean)">
            Unused
            @param inHeader
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.SetType(System.Int32)">
            Set the type of this RtfHeaderFooterGroup. RtfHeaderFooter.TYPE_HEADER
            or RtfHeaderFooter.TYPE_FOOTER. Also sets the type for all RtfHeaderFooters
            of this RtfHeaderFooterGroup.
            
            @param type The type to use
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.GetMode">
            Gets the mode of this RtfHeaderFooterGroup
            
            @return The mode of this RtfHeaderFooterGroup
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.GetHeaderAll">
            Gets the RtfHeaderFooter for all pages
            
            @return The RtfHeaderFooter for all pages 
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.GetHeaderFirst">
            Gets the RtfHeaderFooter for the title page
            
            @return The RtfHeaderFooter for the title page 
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.GetHeaderLeft">
            Gets the RtfHeaderFooter for all left hand pages
            
            @return The RtfHeaderFooter for all left hand pages 
        </member>
        <member name="M:iTextSharp.text.rtf.headerfooter.RtfHeaderFooterGroup.GetHeaderRight">
            Gets the RtfHeaderFooter for all right hand pages
            
            @return The RtfHeaderFooter for all right hand pages 
        </member>
        <member name="T:iTextSharp.text.rtf.list.RtfList">
            The RtfList stores one List. It also provides the methods to write the
            list declaration and the list data.
             
            @version $Version:$
            @author Mark Hall (mhall@edu.uni-klu.ac.at)
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.LIST_LEVEL">
            Constant for list level
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.LIST_LEVEL_TYPE">
            Constant for list level style old
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.LIST_LEVEL_TYPE_NEW">
            Constant for list level style new
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.LIST_LEVEL_ALIGNMENT">
            Constant for list level alignment old
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.LIST_LEVEL_ALIGNMENT_NEW">
            Constant for list level alignment new
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.LIST_LEVEL_START_AT">
            Constant for list level start at
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.LIST_LEVEL_TEXT">
            Constant for list level text
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.LIST_LEVEL_STYLE_NUMBERED_BEGIN">
            Constant for the beginning of the list level numbered style
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.LIST_LEVEL_STYLE_NUMBERED_END">
            Constant for the end of the list level numbered style
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.LIST_LEVEL_STYLE_BULLETED">
            Constant for the list level bulleted style
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.LIST_LEVEL_NUMBERS_BEGIN">
            Constant for the beginning of the list level numbers
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.LIST_LEVEL_NUMBERS_NUMBERED">
            Constant for the list level numbers
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.LIST_LEVEL_NUMBERS_END">
            Constant for the end of the list level numbers
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.LIST_LEVEL_FIRST_INDENT">
            Constant for the first indentation
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.LIST_LEVEL_SYMBOL_INDENT">
            Constant for the symbol indentation
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.LIST_LEVEL_NUMBER">
            Constant for the list level value
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.TAB">
            Constant for a tab character
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.LIST_TEXT">
            Constant for the old list text
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.LIST_NUMBER_END">
            Constant for the old list number end
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.LIST_BULLET">
            Constant for the old bulleted list 
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.items">
            The subitems of this RtfList
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.listLevel">
            The level of this RtfList
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.firstIndent">
            The first indentation of this RtfList
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.leftIndent">
            The left indentation of this RtfList
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.rightIndent">
            The right indentation of this RtfList
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.symbolIndent">
            The symbol indentation of this RtfList
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.listNumber">
            The list number of this RtfList
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.numbered">
            Whether this RtfList is numbered
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.fontNumber">
            The RtfFont for numbered lists
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.fontBullet">
            The RtfFont for bulleted lists
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.alignment">
            The alignment of this RtfList
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfList.parentList">
            The parent List in multi-level lists.
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.List)">
            Constructs a new RtfList for the specified List.
            
            @param doc The RtfDocument this RtfList belongs to
            @param list The List this RtfList is based on
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.WriteDefinition">
            Writes the definition part of this list level
            
            @return A byte array containing the definition of this list level
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.WriteListBeginning">
            Writes the initialisation part of the RtfList
            
            @return A byte array containing the initialisation part
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.Write">
            Writes the content of the RtfList
            
            @return A byte array containing the actual content of the RtfList
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.GetListLevel">
            Gets the list level of this RtfList
            
            @return Returns the list level.
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.SetListLevel(System.Int32)">
            Sets the list level of this RtfList. A list level > 0 will
            unregister this RtfList from the RtfListTable
            
            @param listLevel The list level to set.
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.SetParent(iTextSharp.text.rtf.list.RtfList)">
            Sets the parent RtfList of this RtfList
            
            @param parent The parent RtfList to use.
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.GetListNumber">
            Gets the id of this list
            
            @return Returns the list number.
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.SetListNumber(System.Int32)">
            Sets the id of this list
            
            @param listNumber The list number to set.
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.SetInTable(System.Boolean)">
            Sets whether this RtfList is in a table. Sets the correct inTable setting for all
            child elements.
            
            @param inTable <code>True</code> if this RtfList is in a table, <code>false</code> otherwise
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.SetInHeader(System.Boolean)">
            Sets whether this RtfList is in a header. Sets the correct inTable setting for all
            child elements.
            
            @param inHeader <code>True</code> if this RtfList is in a header, <code>false</code> otherwise
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.CorrectIndentation">
            Correct the indentation of this RtfList by adding left/first line indentation
            from the parent RtfList. Also calls correctIndentation on all child RtfLists.
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.GetLeftIndent">
            Get the left indentation of this RtfList.
            
            @return The left indentation.
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfList.GetFirstIndent">
            Get the first line indentation of this RtfList.
            
            @return The first line indentation.
        </member>
        <member name="T:iTextSharp.text.rtf.list.RtfListItem">
            The RtfListItem acts as a wrapper for a ListItem.
            
            @version $Version:$
            @author Mark Hall (mhall@edu.uni-klu.ac.at)
        </member>
        <member name="T:iTextSharp.text.rtf.text.RtfParagraph">
            The RtfParagraph is an extension of the RtfPhrase that adds alignment and
            indentation properties. It wraps a Paragraph.
            
            @version $Version:$
            @author Mark Hall (mhall@edu.uni-klu.ac.at)
        </member>
        <member name="T:iTextSharp.text.rtf.text.RtfPhrase">
            The RtfPhrase contains multiple RtfChunks
            
            @version $Id: RtfPhrase.java,v 1.12 2005/03/12 15:32:03 hallm Exp $
            @author Mark Hall (mhall@edu.uni-klu.ac.at)
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfPhrase.PARAGRAPH_DEFAULTS">
            Constant for the resetting of the paragraph defaults
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfPhrase.IN_TABLE">
            Constant for phrase in a table indication
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfPhrase.LINE_SPACING">
            Constant for the line spacing.
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfPhrase.chunks">
            ArrayList containing the RtfChunks of this RtfPhrase
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfPhrase.lineLeading">
            The height of each line.
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfPhrase.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.Phrase)">
            Constructs a new RtfPhrase for the RtfDocument with the given Phrase
            
            @param doc The RtfDocument this RtfPhrase belongs to
            @param phrase The Phrase this RtfPhrase is based on
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfPhrase.Write">
            Write the content of this RtfPhrase. First resets to the paragraph defaults
            then if the RtfPhrase is in a RtfCell a marker for this is written and finally
            the RtfChunks of this RtfPhrase are written.
            
            @return The content of this RtfPhrase
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfPhrase.SetInTable(System.Boolean)">
            Sets whether this RtfPhrase is in a table. Sets the correct inTable setting for all
            child elements.
            
            @param inTable <code>True</code> if this RtfPhrase is in a table, <code>false</code> otherwise
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfPhrase.SetInHeader(System.Boolean)">
            Sets whether this RtfPhrase is in a header. Sets the correct inTable setting for all
            child elements.
            
            @param inHeader <code>True</code> if this RtfPhrase is in a header, <code>false</code> otherwise
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfPhrase.SetRtfDocument(iTextSharp.text.rtf.document.RtfDocument)">
            Sets the RtfDocument this RtfPhrase belongs to. Also sets the RtfDocument for all child
            elements.
            
            @param doc The RtfDocument to use
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfParagraph.PARAGRAPH">
            Constant for the end of a paragraph
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfParagraph.ALIGN_LEFT">
            Constant for left alignment
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfParagraph.ALIGN_RIGHT">
            Constant for right alignment
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfParagraph.ALIGN_CENTER">
            Constant for center alignment
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfParagraph.ALIGN_JUSTIFY">
            Constant for justified alignment
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfParagraph.INDENT_LEFT">
            Constant for left indentation
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfParagraph.INDENT_RIGHT">
            Constant for right indentation
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfParagraph.KEEP_TOGETHER">
            Constant for keeping the paragraph together on one page
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfParagraph.KEEP_TOGETHER_WITH_NEXT">
            Constant for keeping the paragraph toghether with the next one on one page
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfParagraph.SPACING_BEFORE">
            Constant for the space before the paragraph.
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfParagraph.SPACING_AFTER">
            Constant for the space after the paragraph.
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfParagraph.alignment">
            The alignment of this RtfParagraph
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfParagraph.indentLeft">
            The left indentation of this RtfParagraph
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfParagraph.indentRight">
            The right indentation of this RtfParagraph
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfParagraph.keepTogether">
            Whether this RtfParagraph must stay on one page.
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfParagraph.keepTogetherWithNext">
            Whether this RtfParagraph must stay on the same page as the next paragraph.
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfParagraph.spacingBefore">
            The space before this paragraph.
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfParagraph.spacingAfter">
            The space after this paragraph.
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfParagraph.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.Paragraph)">
            Constructs a RtfParagraph belonging to a RtfDocument based on a Paragraph.
            
            @param doc The RtfDocument this RtfParagraph belongs to
            @param paragraph The Paragraph that this RtfParagraph is based on
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfParagraph.SetKeepTogetherWithNext(System.Boolean)">
            Set whether this RtfParagraph must stay on the same page as the next one.
             
            @param keepTogetherWithNext Whether this RtfParagraph must keep together with the next.
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfParagraph.Write">
            Writes the content of this RtfParagraph. First paragraph specific data is written
            and then the RtfChunks of this RtfParagraph are added.
            
            @return The content of this RtfParagraph
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfParagraph.GetIndentLeft">
            Gets the left indentation of this RtfParagraph.
            
            @return The left indentation.
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfParagraph.SetIndentLeft(System.Int32)">
            Sets the left indentation of this RtfParagraph.
            
            @param indentLeft The left indentation to use.
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfParagraph.GetIndentRight">
            Gets the right indentation of this RtfParagraph.
            
            @return The right indentation.
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfParagraph.SetIndentRight(System.Int32)">
            Sets the right indentation of this RtfParagraph.
            
            @param indentRight The right indentation to use.
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListItem.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.ListItem)">
            Constructs a RtfListItem for a ListItem belonging to a RtfDocument.
            
            @param doc The RtfDocument this RtfListItem belongs to.
            @param listItem The ListItem this RtfListItem is based on.
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListItem.Write">
            Writes the content of this RtfListItem.
            
            @return A byte array with the content of this RtfListItem.
        </member>
        <member name="T:iTextSharp.text.rtf.list.RtfListTable">
            The RtfListTable manages all RtfLists in one RtfDocument. It also generates
            the list and list override tables in the document header.
            
            @version $Version:$
            @author Mark Hall (mhall@edu.uni-klu.ac.at)
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListTable.LIST_NUMBER">
            Constant for the list number
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListTable.LIST_TABLE">
            Constant for the list table
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListTable.LIST">
            Constant for the list
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListTable.LIST_TEMPLATE_ID">
            Constant for the list template id
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListTable.LIST_HYBRID">
            Constant for the hybrid list
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListTable.LIST_ID">
            Constant for the list id
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListTable.LIST_OVERRIDE_TABLE">
            Constant for the list override table
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListTable.LIST_OVERRIDE">
            Constant for the list override
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListTable.LIST_OVERRIDE_COUNT">
            Constant for the list override count
        </member>
        <member name="F:iTextSharp.text.rtf.list.RtfListTable.lists">
            The RtfLists managed by this RtfListTable
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListTable.#ctor(iTextSharp.text.rtf.document.RtfDocument)">
            Constructs a RtfListTable for a RtfDocument
            
            @param doc The RtfDocument this RtfListTable belongs to
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListTable.WriteDefinition">
            Writes the list and list override tables.
            
            @return A byte array with the list and list override tables.
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListTable.GetListNumber(iTextSharp.text.rtf.list.RtfList)">
            Gets the id of the specified RtfList. If the RtfList is not yet in the
            list of RtfLists, then it is added.
            
            @param list The RtfList for which to get the id.
            @return The id of the RtfList.
        </member>
        <member name="M:iTextSharp.text.rtf.list.RtfListTable.FreeListNumber(iTextSharp.text.rtf.list.RtfList)">
            Remove a RtfList from the list of RtfLists
            
            @param list The RtfList to remove.
        </member>
        <member name="T:iTextSharp.text.rtf.style.RtfColor">
            The RtfColor stores one rtf color value for a rtf document
            
            @version $Version:$
            @author Mark Hall (mhall@edu.uni-klu.ac.at)
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfColor.COLON">
            Constant for the end of one color entry
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfColor.COLOR_RED">
            Constant for RED value
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfColor.COLOR_GREEN">
            Constant for GREEN value
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfColor.COLOR_BLUE">
            Constant for BLUE value
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfColor.COLOR_NUMBER">
            Constant for the number of the colour in the list of colours
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfColor.colorNumber">
            The number of the colour in the list of colours
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfColor.red">
            The red value
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfColor.green">
            The green value
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfColor.blue">
            The blue value
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfColor.#ctor(iTextSharp.text.rtf.document.RtfDocument,System.Int32,System.Int32,System.Int32,System.Int32)">
            Constructor only for use when initializing the RtfColorList
            
            @param doc The RtfDocument this RtfColor belongs to
            @param red The red value to use
            @param green The green value to use
            @param blue The blue value to use
            @param colorNumber The number of the colour in the colour list
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfColor.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.rtf.style.RtfColor)">
            Constructs a RtfColor as a clone of an existing RtfColor
            
            @param doc The RtfDocument this RtfColor belongs to
            @param col The RtfColor to use as a base
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfColor.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.Color)">
            Constructs a RtfColor based on the Color
            
            @param doc The RtfDocument this RtfColor belongs to
            @param col The Color to base this RtfColor on
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfColor.#ctor(iTextSharp.text.rtf.document.RtfDocument,System.Int32,System.Int32,System.Int32)">
            Constructs a RtfColor based on the red/green/blue values
            
            @param doc The RtfDocument this RtfColor belongs to
            @param red The red value to use
            @param green The green value to use
            @param blue The blue value to use
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfColor.WriteDefinition">
            Write the definition part of this RtfColor.
            
            @return A byte array with the definition of this colour
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfColor.WriteBegin">
            Writes the beginning of this RtfColor
            
            @return A byte array with the colour start data
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfColor.WriteEnd">
            Unused
            
            @return An empty (<code>byte[0]</code>) byte array
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfColor.Equals(System.Object)">
            Tests if this RtfColor is equal to another RtfColor.
            
            @param obj another RtfColor
            @return <code>True</code> if red, green and blue values of the two colours match,
              <code>false</code> otherwise.
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfColor.GetHashCode">
            Returns the hash code of this RtfColor. The hash code is
            an integer with the lowest three bytes containing the values
            of red, green and blue.
            
            @return The hash code of this RtfColor
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfColor.GetBlue">
            Get the blue value of this RtfColor
            
            @return The blue value
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfColor.GetGreen">
            Get the green value of this RtfColor
            
            @return The green value
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfColor.GetRed">
            Get the red value of this RtfColor
            
            @return The red value
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfColor.GetColorNumber">
            Gets the number of this RtfColor in the list of colours
            
            @return Returns the colorNumber.
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfColor.SetRtfDocument(iTextSharp.text.rtf.document.RtfDocument)">
            Sets the RtfDocument this RtfColor belongs to
            
            @param doc The RtfDocument to use
        </member>
        <member name="T:iTextSharp.text.rtf.style.RtfColorList">
            The RtfColorList stores all colours that appear in the document. Black
            and White are always added
            
            @version $Version:$
            @author Mark Hall (mhall@edu.uni-klu.ac.at)
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfColorList.COLOR_TABLE">
            Constant for the beginning of the colour table
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfColorList.colorList">
            ArrayList containing all colours of this RtfColorList
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfColorList.#ctor(iTextSharp.text.rtf.document.RtfDocument)">
            Constructs a new RtfColorList for the RtfDocument. Will add the default
            black and white colours.
            
            @param doc The RtfDocument this RtfColorList belongs to
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfColorList.GetColorNumber(iTextSharp.text.rtf.style.RtfColor)">
            Returns the index of the given RtfColor in the colour list. If the RtfColor
            is not in the list of colours, then it is added.
            
            @param color The RtfColor for which to get the index
            @return The index of the RtfColor
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfColorList.WriteDefinition">
            Write the definition part of the colour list. Calls the writeDefinition
            methods of the RtfColors in the colour list. 
            
            @return A byte array with the definition colour list
        </member>
        <member name="T:iTextSharp.text.rtf.style.RtfFont">
             The RtfFont class stores one font for an rtf document. It extends Font,
             so can be set as a font, to allow adding of fonts with arbitrary names.
             BaseFont fontname handling contributed by Craig Fleming. Various fixes
             Renaud Michel, Werner Daehn.
            
             Version: $Id: RtfFont.cs,v 1.4 2005/08/20 16:12:56 psoares33 Exp $
             @author Mark Hall (mhall@edu.uni-klu.ac.at)
             @author Craig Fleming (rythos@rhana.dhs.org)
             @author Renaud Michel (r.michel@immedia.be)
             @author Werner Daehn (Werner.Daehn@BusinessObjects.com)
        </member>
        <member name="T:iTextSharp.text.Font">
            <summary>
            Contains all the specifications of a font: fontfamily, size, style and color.
            </summary>
            <example>
            <code>
            Paragraph p = new Paragraph("This is a paragraph",
                          <strong>new Font(Font.HELVETICA, 18, Font.BOLDITALIC, new Color(0, 0, 255))</strong>);
            </code>
            </example>
        </member>
        <member name="F:iTextSharp.text.Font.COURIER">
            <summary> a possible value of a font family. </summary>
        </member>
        <member name="F:iTextSharp.text.Font.HELVETICA">
            <summary> a possible value of a font family. </summary>
        </member>
        <member name="F:iTextSharp.text.Font.TIMES_ROMAN">
            <summary> a possible value of a font family. </summary>
        </member>
        <member name="F:iTextSharp.text.Font.SYMBOL">
            <summary> a possible value of a font family. </summary>
        </member>
        <member name="F:iTextSharp.text.Font.ZAPFDINGBATS">
            <summary> a possible value of a font family. </summary>
        </member>
        <member name="F:iTextSharp.text.Font.NORMAL">
            <summary> this is a possible style. </summary>
        </member>
        <member name="F:iTextSharp.text.Font.BOLD">
            <summary> this is a possible style. </summary>
        </member>
        <member name="F:iTextSharp.text.Font.ITALIC">
            <summary> this is a possible style. </summary>
        </member>
        <member name="F:iTextSharp.text.Font.UNDERLINE">
            <summary> this is a possible style. </summary>
        </member>
        <member name="F:iTextSharp.text.Font.STRIKETHRU">
            <summary> this is a possible style. </summary>
        </member>
        <member name="F:iTextSharp.text.Font.BOLDITALIC">
            <summary> this is a possible style. </summary>
        </member>
        <member name="F:iTextSharp.text.Font.UNDEFINED">
            <summary> the value of an undefined attribute. </summary>
        </member>
        <member name="F:iTextSharp.text.Font.DEFAULTSIZE">
            <summary> the value of the default size. </summary>
        </member>
        <member name="F:iTextSharp.text.Font.family">
            <summary> the value of the fontfamily. </summary>
        </member>
        <member name="F:iTextSharp.text.Font.size">
            <summary> the value of the fontsize. </summary>
        </member>
        <member name="F:iTextSharp.text.Font.style">
            <summary> the value of the style. </summary>
        </member>
        <member name="F:iTextSharp.text.Font.color">
            <summary> the value of the color. </summary>
        </member>
        <member name="F:iTextSharp.text.Font.baseFont">
            <summary> the external font </summary>
        </member>
        <member name="M:iTextSharp.text.Font.#ctor(iTextSharp.text.Font)">
            Copy constructor of a Font
            @param other the font that has to be copied
        </member>
        <member name="M:iTextSharp.text.Font.#ctor(System.Int32,System.Single,System.Int32,iTextSharp.text.Color)">
            <summary>
            Constructs a Font.
            </summary>
            <param name="family">the family to which this font belongs</param>
            <param name="size">the size of this font</param>
            <param name="style">the style of this font</param>
            <param name="color">the Color of this font.</param>
        </member>
        <member name="M:iTextSharp.text.Font.#ctor(iTextSharp.text.pdf.BaseFont,System.Single,System.Int32,iTextSharp.text.Color)">
            <summary>
            Constructs a Font.
            </summary>
            <param name="bf">the external font</param>
            <param name="size">the size of this font</param>
            <param name="style">the style of this font</param>
            <param name="color">the Color of this font.</param>
        </member>
        <member name="M:iTextSharp.text.Font.#ctor(iTextSharp.text.pdf.BaseFont,System.Single,System.Int32)">
            <summary>
            Constructs a Font.
            </summary>
            <param name="bf">the external font</param>
            <param name="size">the size of this font</param>
            <param name="style">the style of this font</param>
        </member>
        <member name="M:iTextSharp.text.Font.#ctor(iTextSharp.text.pdf.BaseFont,System.Single)">
            <summary>
            Constructs a Font.
            </summary>
            <param name="bf">the external font</param>
            <param name="size">the size of this font</param>
        </member>
        <member name="M:iTextSharp.text.Font.#ctor(iTextSharp.text.pdf.BaseFont)">
            <summary>
            Constructs a Font.
            </summary>
            <param name="bf">the external font</param>
        </member>
        <member name="M:iTextSharp.text.Font.#ctor(System.Int32,System.Single,System.Int32)">
            <summary>
            Constructs a Font.
            </summary>
            <param name="family">the family to which this font belongs</param>
            <param name="size">the size of this font</param>
            <param name="style">the style of this font</param>
        </member>
        <member name="M:iTextSharp.text.Font.#ctor(System.Int32,System.Single)">
            <summary>
            Constructs a Font.
            </summary>
            <param name="family">the family to which this font belongs</param>
            <param name="size">the size of this font</param>
        </member>
        <member name="M:iTextSharp.text.Font.#ctor(System.Int32)">
            <summary>
            Constructs a Font.
            </summary>
            <param name="family">the family to which this font belongs</param>
        </member>
        <member name="M:iTextSharp.text.Font.#ctor">
            <summary>
            Constructs a Font.
            </summary>
            <overloads>
            Has nine overloads.
            </overloads>
        </member>
        <member name="M:iTextSharp.text.Font.CompareTo(System.Object)">
            <summary>
            Compares this Font with another
            </summary>
            <param name="obj">the other Font</param>
            <returns>a value</returns>
        </member>
        <member name="M:iTextSharp.text.Font.GetFamilyIndex(System.String)">
            <summary>
            Translates a string-value of a certain family
            into the index that is used for this family in this class.
            </summary>
            <param name="family">A string representing a certain font-family</param>
            <returns>the corresponding index</returns>
        </member>
        <member name="M:iTextSharp.text.Font.GetStyleValue(System.String)">
            <summary>
            Translates a string-value of a certain style
            into the index value is used for this style in this class.
            </summary>
            <param name="style">a string</param>
            <returns>the corresponding value</returns>
        </member>
        <member name="M:iTextSharp.text.Font.SetColor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the color.
            </summary>
            <param name="red">the red-value of the new color</param>
            <param name="green">the green-value of the new color</param>
            <param name="blue">the blue-value of the new color</param>
        </member>
        <member name="M:iTextSharp.text.Font.Leading(System.Single)">
            <summary>
            Gets the leading that can be used with this font.
            </summary>
            <param name="linespacing">a certain linespacing</param>
            <returns>the height of a line</returns>
        </member>
        <member name="M:iTextSharp.text.Font.IsStandardFont">
            <summary>
            Checks if the properties of this font are undefined or null.
            <p/>
            If so, the standard should be used.
            </summary>
            <returns>a boolean</returns>
        </member>
        <member name="M:iTextSharp.text.Font.Difference(iTextSharp.text.Font)">
            <summary>
            Replaces the attributes that are equal to null with
            the attributes of a given font.
            </summary>
            <param name="font">the font of a bigger element class</param>
            <returns>a Font</returns>
        </member>
        <member name="M:iTextSharp.text.Font.SetFamily(System.String)">
            <summary>
            Sets the family using a String ("Courier",
            "Helvetica", "Times New Roman", "Symbol" or "ZapfDingbats").
            </summary>
            <param name="family">A String representing a certain font-family.</param>
        </member>
        <member name="M:iTextSharp.text.Font.SetStyle(System.String)">
            <summary>
            Sets the style using a String containing one of
            more of the following values: normal, bold, italic, underline, strike.
            </summary>
            <param name="style">A String representing a certain style.</param>
        </member>
        <member name="M:iTextSharp.text.Font.SetStyle(System.Int32)">
            Sets the style.
            @param    style    the style.
        </member>
        <member name="M:iTextSharp.text.Font.IsBold">
            <summary>
            checks if this font is Bold.
            </summary>
            <returns>a boolean</returns>
        </member>
        <member name="M:iTextSharp.text.Font.IsItalic">
            <summary>
            checks if this font is Bold.
            </summary>
            <returns>a boolean</returns>
        </member>
        <member name="M:iTextSharp.text.Font.IsUnderlined">
            <summary>
            checks if this font is underlined.
            </summary>
            <returns>a boolean</returns>
        </member>
        <member name="M:iTextSharp.text.Font.IsStrikethru">
            <summary>
            checks if the style of this font is STRIKETHRU.
            </summary>
            <returns>a boolean</returns>
        </member>
        <member name="M:iTextSharp.text.Font.GetCalculatedBaseFont(System.Boolean)">
            Gets the <CODE>BaseFont</CODE> this class represents.
            For the built-in fonts a <CODE>BaseFont</CODE> is calculated.
            @param specialEncoding <CODE>true</CODE> to use the special encoding for Symbol and ZapfDingbats,
            <CODE>false</CODE> to always use <CODE>Cp1252</CODE>
            @return the <CODE>BaseFont</CODE> this class represents
        </member>
        <member name="P:iTextSharp.text.Font.Familyname">
            <summary>
            Gets the familyname as a string.
            </summary>
            <value>the familyname</value>
        </member>
        <member name="P:iTextSharp.text.Font.Family">
            <summary>
            Gets the family of this font.
            </summary>
            <value>the value of the family</value>
        </member>
        <member name="P:iTextSharp.text.Font.Size">
            <summary>
            Get/set the size of this font.
            </summary>
            <value>the size of this font</value>
        </member>
        <member name="P:iTextSharp.text.Font.Style">
            <summary>
            Gets the style of this font.
            </summary>
            <value>the style of this font</value>
        </member>
        <member name="P:iTextSharp.text.Font.Color">
            <summary>
            Get/set the color of this font.
            </summary>
            <value>the color of this font</value>
        </member>
        <member name="P:iTextSharp.text.Font.BaseFont">
            <summary>
            Gets the BaseFont inside this object.
            </summary>
            <value>the BaseFont</value>
        </member>
        <member name="P:iTextSharp.text.Font.CalculatedStyle">
            Gets the style that can be used with the calculated <CODE>BaseFont</CODE>.
            @return the style that can be used with the calculated <CODE>BaseFont</CODE>
        </member>
        <member name="P:iTextSharp.text.Font.CalculatedSize">
            Gets the size that can be used with the calculated <CODE>BaseFont</CODE>.
            @return the size that can be used with the calculated <CODE>BaseFont</CODE>
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.STYLE_NONE">
            Constant for a plain font
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.STYLE_BOLD">
            Constant for a bold font
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.STYLE_ITALIC">
            Constant for an italic font
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.STYLE_UNDERLINE">
            Constant for an underlined font
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.STYLE_STRIKETHROUGH">
            Constant for a strikethrough font
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.STYLE_DOUBLE_STRIKETHROUGH">
            Constant for a double strikethrough font
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.STYLE_SHADOW">
            Constant for a shadowed font
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.STYLE_OUTLINE">
            Constant for an outlined font
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.STYLE_EMBOSSED">
            Constant for an embossed font
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.STYLE_ENGRAVED">
            Constant for an engraved font
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.STYLE_HIDDEN">
            Constant for a font that hides the actual text.
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.FONT_FAMILY">
            Constant for the font family to use ("froman")
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.FONT_CHARSET">
            Constant for the charset
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.FONT_SIZE">
            Constant for the font size
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.FONT_BOLD">
            Constant for the bold flag
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.FONT_ITALIC">
            Constant for the italic flag
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.FONT_UNDERLINE">
            Constant for the underline flag
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.FONT_STRIKETHROUGH">
            Constant for the strikethrough flag
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.FONT_DOUBLE_STRIKETHROUGH">
            Constant for the double strikethrough flag
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.FONT_SHADOW">
            Constant for the shadow flag
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.FONT_OUTLINE">
            Constant for the outline flag
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.FONT_EMBOSSED">
            Constant for the embossed flag
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.FONT_ENGRAVED">
            Constant for the engraved flag
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.FONT_HIDDEN">
            Constant for hidden text flag
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.fontName">
            The font name. Defaults to "Times New Roman"
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.fontSize">
            The font size. Defaults to 10
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.fontStyle">
            The font style. Defaults to STYLE_NONE
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.fontNumber">
            The number of this font
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.color">
            The colour of this font
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.charset">
            The character set to use for this font
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFont.document">
            The RtfDocument this RtfFont belongs to.
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.#ctor(System.String)">
            Constructs a RtfFont with the given font name and all other properties
            at their default values.
            
            @param fontName The font name to use
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.#ctor(System.String,System.Single)">
            Constructs a RtfFont with the given font name and font size and all other
            properties at their default values.
            
            @param fontName The font name to use
            @param size The font size to use
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.#ctor(System.String,System.Single,System.Int32)">
            Constructs a RtfFont with the given font name, font size and font style and the
            default color.
            
            @param fontName The font name to use
            @param size The font size to use
            @param style The font style to use
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.#ctor(System.String,System.Single,System.Int32,iTextSharp.text.Color)">
            Constructs a RtfFont with the given font name, font size, font style and
            color.
            
            @param fontName The font name to use
            @param size the font size to use
            @param style The font style to use
            @param color The font color to use
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.#ctor(iTextSharp.text.rtf.document.RtfDocument,System.Int32)">
             Special constructor for the default font
            
             @param doc The RtfDocument this font appears in
             @param fontNumber The id of this font
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.Font)">
            Constructs a RtfFont from a com.lowagie.text.Font
            @param doc The RtfDocument this font appears in
            @param font The Font to use as a base
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.WriteDefinition">
             Writes the font definition
            
             @return A byte array with the font definition
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.WriteBegin">
             Writes the font beginning
            
             @return A byte array with the font start data
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.WriteEnd">
             Write the font end
            
             @return A byte array with the end of font data
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.Write">
            Unused
            @return an empty byte array
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.Equals(System.Object)">
            Tests for equality of RtfFonts. RtfFonts are equal if their fontName,
            fontSize, fontStyle and fontSuperSubscript are equal
            
            @param obj The RtfFont to compare with this RtfFont
            @return <code>True</code> if the RtfFonts are equal, <code>false</code> otherwise
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.GetHashCode">
            Returns the hash code of this RtfFont. The hash code is the hash code of the
            string containing the font name + font size + "-" + the font style + "-" + the
            font super/supscript value.
            
            @return The hash code of this RtfFont
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.GetFontName">
            Gets the font name of this RtfFont
            
            @return The font name
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.SetFamily(System.String)">
            @see com.lowagie.text.Font#setFamily(String)
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.SetToDefaultFamily(System.String)">
            Sets the correct font name from the family name.
            
            @param familyname The family name to set the name to.
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.GetFontSize">
            Gets the font size of this RtfFont
            
            @return The font size
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.GetFontStyle">
            Gets the font style of this RtfFont
            
            @return The font style
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.SetStyle(System.Int32)">
            @see com.lowagie.text.Font#setStyle(int)
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.SetStyle(System.String)">
            @see com.lowagie.text.Font#setStyle(String)
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.GetFontNumber">
            Gets the font number of this RtfFont
            
            @return The font number
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.SetRtfDocument(iTextSharp.text.rtf.document.RtfDocument)">
            Sets the RtfDocument this RtfFont belongs to
            
            @param doc The RtfDocument to use
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.SetInTable(System.Boolean)">
            Unused
            @param inTable
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.SetInHeader(System.Boolean)">
            Unused
            @param inHeader
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.SetColor(System.Int32,System.Int32,System.Int32)">
            @see com.lowagie.text.Font#setColor(int, int, int)
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.IntToByteArray(System.Int32)">
             Transforms an integer into its String representation and then returns the bytes
             of that string.
            
             @param i The integer to convert
             @return A byte array representing the integer
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFont.Difference(iTextSharp.text.Font)">
             Replaces the attributes that are equal to <VAR>null</VAR> with
             the attributes of a given font.
            
             @param font The surrounding font
             @return A RtfFont
        </member>
        <member name="P:iTextSharp.text.rtf.style.RtfFont.Familyname">
            @see com.lowagie.text.Font#getFamilyname()
        </member>
        <member name="P:iTextSharp.text.rtf.style.RtfFont.Size">
            @see com.lowagie.text.Font#setSize(float)
        </member>
        <member name="P:iTextSharp.text.rtf.style.RtfFont.Color">
            @see com.lowagie.text.Font#setColor(Color)
        </member>
        <member name="T:iTextSharp.text.rtf.style.RtfFontList">
             The RtfFontList stores the list of fonts used in the rtf document. It also
             has methods for writing this list to the document
            
             Version: $Id: RtfFontList.java,v 1.16 2005/05/04 14:33:52 blowagie Exp $
             @author Mark Hall (mhall@edu.uni-klu.ac.at)
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFontList.DEFAULT_FONT">
            Constant for the default font
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFontList.FONT_TABLE">
            Constant for the font table
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFontList.FONT_NUMBER">
            Constant for the font number
        </member>
        <member name="F:iTextSharp.text.rtf.style.RtfFontList.fontList">
            The list of fonts
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFontList.#ctor(iTextSharp.text.rtf.document.RtfDocument)">
             Creates a RtfFontList
            
             @param doc The RtfDocument this RtfFontList belongs to
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFontList.GetFontNumber(iTextSharp.text.rtf.style.RtfFont)">
             Gets the index of the font in the list of fonts. If the font does not
             exist in the list, it is added.
            
             @param font The font to get the id for
             @return The index of the font
        </member>
        <member name="M:iTextSharp.text.rtf.style.RtfFontList.WriteDefinition">
             Writes the definition of the font list
            
             @return A byte array with the definition of the font list
        </member>
        <member name="T:iTextSharp.text.rtf.table.RtfBorder">
            The RtfBorder handle one row or cell border.
            INTERNAL USE ONLY
            
            @version $Version:$
            @author Mark Hall (mhall@edu.uni-klu.ac.at)
            @author Unknown
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.ROW_BORDER">
            Constant for a row border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.CELL_BORDER">
            Constant for a cell border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.NO_BORDER">
            This border is no border :-)
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.LEFT_BORDER">
            Constant for a left border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.TOP_BORDER">
            Constant for a top border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.RIGHT_BORDER">
            Constant for a right border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BOTTOM_BORDER">
            Constant for a bottom border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BOX_BORDER">
            Constant for a box (left, top, right, bottom) border 
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.VERTICAL_BORDER">
            Constant for a vertical line
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.HORIZONTAL_BORDER">
            Constant for a horizontal line
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_NONE">
            Constant for a border with no border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_SINGLE">
            Constant for a single border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_DOUBLE_THICK">
            Constant for a double thick border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_SHADOWED">
            Constant for a shadowed border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_DOTTED">
            Constant for a dotted border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_DASHED">
            Constant for a dashed border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_HAIRLINE">
            Constant for a hairline border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_DOUBLE">
            Constant for a double border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_DOT_DASH">
            Constant for a dot dash border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_DOT_DOT_DASH">
            Constant for a dot dot dash border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_TRIPLE">
            Constant for a triple border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_THICK_THIN">
            Constant for a thick thin border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_THIN_THICK">
            Constant for a thin thick border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_THIN_THICK_THIN">
            Constant for a thin thick thin border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_THICK_THIN_MED">
            Constant for a thick thin medium border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_THIN_THICK_MED">
            Constant for a thin thick medium border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_THIN_THICK_THIN_MED">
            Constant for a thin thick thin medium border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_THICK_THIN_LARGE">
            Constant for a thick thin large border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_THIN_THICK_LARGE">
            Constant for a thin thick large border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_THIN_THICK_THIN_LARGE">
            Constant for a thin thick thin large border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_WAVY">
            Constant for a wavy border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_DOUBLE_WAVY">
            Constant for a double wavy border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_STRIPED">
            Constant for a striped border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_EMBOSS">
            Constant for an embossed border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_ENGRAVE">
            Constant for an engraved border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.ROW_BORDER_LEFT">
            Constant for the left row border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.ROW_BORDER_TOP">
            Constant for the top row border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.ROW_BORDER_RIGHT">
            Constant for the right row border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.ROW_BORDER_BOTTOM">
            Constant for the bottom row border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.ROW_BORDER_HORIZONTAL">
            Constant for the horizontal line
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.ROW_BORDER_VERTICAL">
            Constant for the vertical line
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.CELL_BORDER_LEFT">
            Constant for the left cell border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.CELL_BORDER_TOP">
            Constant for the top cell border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.CELL_BORDER_RIGHT">
            Constant for the right cell border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.CELL_BORDER_BOTTOM">
            Constant for the bottom cell border
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_WIDTH">
            Constant for the border width
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_COLOR_NUMBER">
            Constant for the border colour number
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_STYLE_SINGLE">
            Constant for the single border style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_STYLE_DOUBLE_THICK">
            Constant for the double thick border style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_STYLE_SHADOWED">
            Constant for the shadowed border style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_STYLE_DOTTED">
            Constant for the dotted border style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_STYLE_DASHED">
            Constant for the dashed border style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_STYLE_HAIRLINE">
            Constant for the hairline border style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_STYLE_DOUBLE">
            Constant for the double border style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_STYLE_DOT_DASH">
            Constant for the dot dash border style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_STYLE_DOT_DOT_DASH">
            Constant for the dot dot dash border style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_STYLE_TRIPLE">
            Constant for the triple border style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_STYLE_THICK_THIN">
            Constant for the thick thin border style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_STYLE_THIN_THICK">
            Constant for the thin thick border style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_STYLE_THIN_THICK_THIN">
            Constant for the thin thick thin border style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_STYLE_THICK_THIN_MED">
            Constant for the thick thin medium border style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_STYLE_THIN_THICK_MED">
            Constant for the thin thick medium border style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_STYLE_THIN_THICK_THIN_MED">
            Constant for the thin thick thin medium border style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_STYLE_THICK_THIN_LARGE">
            Constant for the thick thin large border style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_STYLE_THIN_THICK_LARGE">
            Constant for the thin thick large border style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_STYLE_THIN_THICK_THIN_LARGE">
            Constant for the thin thick thin large border style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_STYLE_WAVY">
            Constant for the wavy border style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_STYLE_DOUBLE_WAVY">
            Constant for the double wavy border style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_STYLE_STRIPED">
            Constant for the striped border style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_STYLE_EMBOSS">
            Constant for the embossed border style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.BORDER_STYLE_ENGRAVE">
            Constant for the engraved border style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.borderType">
            The type of this RtfBorder
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.borderPosition">
            The position of this RtfBorder
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.borderStyle">
            The style of this RtfBorder
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.borderWidth">
            The width of this RtfBorder
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorder.borderColor">
            The colour of this RtfBorder
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfBorder.#ctor(iTextSharp.text.rtf.document.RtfDocument,System.Int32,iTextSharp.text.rtf.table.RtfBorder)">
            Makes a copy of the given RtfBorder
            
            @param doc The RtfDocument this RtfBorder belongs to
            @param borderType The border type of this RtfBorder
            @param border The RtfBorder to copy
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfBorder.#ctor(iTextSharp.text.rtf.document.RtfDocument,System.Int32,System.Int32,System.Int32,System.Single,iTextSharp.text.Color)">
            Constructs a RtfBorder
            
            @param doc The RtfDocument this RtfBorder belongs to
            @param borderType The type of border this RtfBorder is
            @param borderPosition The position of this RtfBorder
            @param borderStyle The style of this RtfBorder
            @param borderWidth The width of this RtfBorder
            @param borderColor The colour of this RtfBorder
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfBorder.Write">
            Writes the RtfBorder settings
            
            @return A byte array with the RtfBorder settings
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfBorder.WriteBorderStyle">
            Writes the style of this RtfBorder
            
            @return A byte array containing the style of this RtfBorder
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfBorder.GetBorderColor">
            Gets the colour of this RtfBorder
            
            @return Returns RtfColor of this RtfBorder
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfBorder.GetBorderPosition">
            Gets the position of this RtfBorder
            @return Returns the position of this RtfBorder
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfBorder.GetBorderStyle">
            Gets the style of this RtfBorder
            
            @return Returns the style of this RtfBorder
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfBorder.GetBorderType">
            Gets the type of this RtfBorder
            
            @return Returns the type of this RtfBorder
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfBorder.GetBorderWidth">
            Gets the width of this RtfBorder
            
            @return Returns the width of this RtfBorder
        </member>
        <member name="T:iTextSharp.text.rtf.table.RtfBorderGroup">
            The RtfBorderGroup represents a collection of RtfBorders to use in a RtfCell
            or RtfTable.
            
            @version $Version:$
            @author Mark Hall (mhall@edu.uni-klu.ac.at)
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorderGroup.borderType">
            The type of borders this RtfBorderGroup contains.
            RtfBorder.ROW_BORDER or RtfBorder.CELL_BORDER
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfBorderGroup.borders">
            The borders in this RtfBorderGroup
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfBorderGroup.#ctor">
            Constructs an empty RtfBorderGroup.
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfBorderGroup.#ctor(System.Int32,System.Int32,System.Single,iTextSharp.text.Color)">
            Constructs a RtfBorderGroup with on border style for multiple borders.
            
            @param bordersToAdd The borders to add (Rectangle.LEFT, Rectangle.RIGHT, Rectangle.TOP, Rectangle.BOTTOM, Rectangle.BOX)
            @param borderStyle The style of border to add (from RtfBorder)
            @param borderWidth The border width to use
            @param borderColor The border color to use
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfBorderGroup.#ctor(iTextSharp.text.rtf.document.RtfDocument,System.Int32,iTextSharp.text.rtf.table.RtfBorderGroup)">
            Constructs a RtfBorderGroup based on another RtfBorderGroup.
            
            @param doc The RtfDocument this RtfBorderGroup belongs to
            @param borderType The type of borders this RtfBorderGroup contains
            @param borderGroup The RtfBorderGroup to use as a base
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfBorderGroup.#ctor(iTextSharp.text.rtf.document.RtfDocument,System.Int32,System.Int32,System.Single,iTextSharp.text.Color)">
            Constructs a RtfBorderGroup with certain borders
            
            @param doc The RtfDocument this RtfBorderGroup belongs to
            @param borderType The type of borders this RtfBorderGroup contains
            @param bordersToUse The borders to add (Rectangle.LEFT, Rectangle.RIGHT, Rectangle.TOP, Rectangle.BOTTOM, Rectangle.BOX)
            @param borderWidth The border width to use
            @param borderColor The border color to use
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfBorderGroup.SetBorder(System.Int32,System.Int32,System.Single,iTextSharp.text.Color)">
            Sets a border in the Hashtable of borders
            
            @param borderPosition The position of this RtfBorder
            @param borderStyle The type of borders this RtfBorderGroup contains
            @param borderWidth The border width to use
            @param borderColor The border color to use
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfBorderGroup.AddBorder(System.Int32,System.Int32,System.Single,iTextSharp.text.Color)">
            Adds borders to the RtfBorderGroup
            
            @param bordersToAdd The borders to add (Rectangle.LEFT, Rectangle.RIGHT, Rectangle.TOP, Rectangle.BOTTOM, Rectangle.BOX)
            @param borderStyle The style of border to add (from RtfBorder)
            @param borderWidth The border width to use
            @param borderColor The border color to use
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfBorderGroup.RemoveBorder(System.Int32)">
            Removes borders from the list of borders
            
            @param bordersToRemove The borders to remove (from Rectangle)
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfBorderGroup.Write">
            Writes the borders of this RtfBorderGroup
            
            @return A byte array with the borders of this RtfBorderGroup
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfBorderGroup.GetBorders">
            Gets the RtfBorders of this RtfBorderGroup
            
            @return The RtfBorders of this RtfBorderGroup
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.rtf.table.RtfCell" -->
        <member name="T:iTextSharp.text.Cell">
            <summary>
            A Cell is a Rectangle containing other Elements.
            </summary>
            <remarks>
            A Cell is a Rectangle containing other
            Elements.
            <p/>
            A Cell must be added to a Table.
            The Table will place the Cell in
            a Row.
            </remarks>
            <example>
            <code>
            Table table = new Table(3);
            table.SetBorderWidth(1);
            table.SetBorderColor(new Color(0, 0, 255));
            table.SetCellpadding(5);
            table.SetCellspacing(5);
            <strong>Cell cell = new Cell("header");
            cell.SetHeader(true);
            cell.SetColspan(3);</strong>
            table.AddCell(cell);
            <strong>cell = new Cell("example cell with colspan 1 and rowspan 2");
            cell.SetRowspan(2);
            cell.SetBorderColor(new Color(255, 0, 0));</strong>
            table.AddCell(cell);
            table.AddCell("1.1");
            table.AddCell("2.1");
            table.AddCell("1.2");
            table.AddCell("2.2");
            </code>
            </example>
            <seealso cref="T:iTextSharp.text.Rectangle"/>
            <seealso cref="T:iTextSharp.text.Element"/>
            <seealso cref="T:iTextSharp.text.Table"/>
            <seealso cref="T:iTextSharp.text.Row"/>
        </member>
        <member name="F:iTextSharp.text.Cell.arrayList">
            <summary> This is the ArrayList of Elements. </summary>
        </member>
        <member name="F:iTextSharp.text.Cell.horizontalAlignment">
            <summary> This is the horizontal Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Cell.verticalAlignment">
            <summary> This is the vertical Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Cell.width">
            <summary> This is the vertical Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Cell.colspan">
            <summary> This is the colspan. </summary>
        </member>
        <member name="F:iTextSharp.text.Cell.rowspan">
            <summary> This is the rowspan. </summary>
        </member>
        <member name="F:iTextSharp.text.Cell.leading">
            <summary> This is the leading. </summary>
        </member>
        <member name="F:iTextSharp.text.Cell.header">
            <summary> Is this Cell a header? </summary>
        </member>
        <member name="F:iTextSharp.text.Cell.useAscender">
            <summary>
            Indicates that the largest ascender height should be used to determine the
            height of the first line.  Note that this only has an effect when rendered
            to PDF.  Setting this to true can help with vertical alignment problems.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Cell.useDescender">
            <summary>
            Indicates that the largest descender height should be added to the height of
            the last line (so characters like y don't dip into the border).   Note that
            this only has an effect when rendered to PDF.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Cell.useBorderPadding">
            <summary>
            Adjusts the cell contents to compensate for border widths.  Note that
            this only has an effect when rendered to PDF.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Cell.noWrap">
            <summary> Will the element have to be wrapped? </summary>
        </member>
        <member name="M:iTextSharp.text.Cell.#ctor">
            Constructs an empty Cell.
            <summary>
            Constructs an empty Cell.
            </summary>
            <overloads>
            Has five overloads.
            </overloads>
        </member>
        <member name="M:iTextSharp.text.Cell.#ctor(System.Boolean)">
            <summary>
            Constructs an empty Cell (for internal use only).
            </summary>
            <param name="dummy">a dummy value</param>
        </member>
        <member name="M:iTextSharp.text.Cell.#ctor(System.String)">
            <summary>
            Constructs a Cell with a certain content.
            </summary>
            <remarks>
            The string will be converted into a Paragraph.
            </remarks>
            <param name="content">a string</param>
        </member>
        <member name="M:iTextSharp.text.Cell.#ctor(iTextSharp.text.IElement)">
            <summary>
            Constructs a Cell with a certain Element.
            </summary>
            <remarks>
            if the element is a ListItem, Row or
            Cell, an exception will be thrown.
            </remarks>
            <param name="element">the element</param>
        </member>
        <member name="M:iTextSharp.text.Cell.#ctor(System.util.Properties)">
            <summary>
            Returns a Cell that has been constructed taking in account
            the value of some attributes.
            </summary>
            <param name="attributes">some attributes</param>
        </member>
        <member name="M:iTextSharp.text.Cell.Process(iTextSharp.text.IElementListener)">
            <summary>
            Processes the element by adding it (or the different parts) to an
            IElementListener.
            </summary>
            <param name="listener">an IElementListener</param>
            <returns>true if the element was processed successfully</returns>
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.Cell.AddElement(iTextSharp.text.IElement)" -->
        <member name="M:iTextSharp.text.Cell.Add(System.Object)">
            <summary>
            Add an Object to this cell.
            </summary>
            <param name="o">the object to add</param>
            <returns>always true</returns>
        </member>
        <member name="M:iTextSharp.text.Cell.SetHorizontalAlignment(System.String)">
            <summary>
            Sets the alignment of this cell.
            </summary>
            <param name="alignment">the new alignment as a string</param>
        </member>
        <member name="M:iTextSharp.text.Cell.SetVerticalAlignment(System.String)">
            <summary>
            Sets the alignment of this paragraph.
            </summary>
            <param name="alignment">the new alignment as a string</param>
        </member>
        <member name="M:iTextSharp.text.Cell.IsEmpty">
            <summary>
            Checks if the Cell is empty.
            </summary>
            <returns>false if there are non-empty Elements in the Cell.</returns>
        </member>
        <member name="M:iTextSharp.text.Cell.Fill">
            <summary>
            Makes sure there is at least 1 object in the Cell.
            Otherwise it might not be shown in the table.
            </summary>
        </member>
        <member name="M:iTextSharp.text.Cell.IsTable">
            <summary>
            Checks if the Cell is empty.
            </summary>
            <returns>false if there are non-empty Elements in the Cell.</returns>
        </member>
        <member name="M:iTextSharp.text.Cell.Clear">
            <summary>
            Clears all the Elements of this Cell.
            </summary>
        </member>
        <member name="M:iTextSharp.text.Cell.GetTop(System.Int32)">
            <summary>
            This method throws an Exception.
            </summary>
            <param name="margin">new value</param>
            <returns>none</returns>
        </member>
        <member name="M:iTextSharp.text.Cell.GetBottom(System.Int32)">
            <summary>
            This method throws an Exception.
            </summary>
            <param name="margin">new value</param>
            <returns>none</returns>
        </member>
        <member name="M:iTextSharp.text.Cell.GetLeft(System.Int32)">
            <summary>
            This method throws an Exception.
            </summary>
            <param name="margin">new value</param>
            <returns>none</returns>
        </member>
        <member name="M:iTextSharp.text.Cell.GetRight(System.Int32)">
            <summary>
            This method throws an Exception.
            </summary>
            <param name="margin">new value</param>
            <returns>none</returns>
        </member>
        <member name="M:iTextSharp.text.Cell.IsTag(System.String)">
            <summary>
            Checks if a given tag corresponds with this object.
            </summary>
            <param name="tag">the given tag</param>
            <returns>true if the tag corresponds</returns>
        </member>
        <member name="F:iTextSharp.text.Cell.groupChange">
            <summary>Does this <CODE>Cell</CODE> force a group change? </summary>
        </member>
        <member name="F:iTextSharp.text.Cell.maxLines">
            <summary>
            Maximum number of lines allowed in the cell.  
            The default value of this property is not to limit the maximum number of lines
            (contributed by dperezcar@fcc.es)
            </summary>
        </member>
        <member name="F:iTextSharp.text.Cell.showTruncation">
            <summary>
            If a truncation happens due to the {@link #maxLines} property, then this text will 
            be added to indicate a truncation has happened.
            Default value is null, and means avoiding marking the truncation.  
            A useful value of this property could be e.g. "..."
            (contributed by dperezcar@fcc.es)
            </summary>
        </member>
        <member name="M:iTextSharp.text.Cell.CreatePdfPCell">
            Creates a PdfPCell based on this Cell object.
            @return a PdfPCell
            @throws BadElementException
        </member>
        <member name="P:iTextSharp.text.Cell.Type">
            <summary>
            Gets the type of the text element.
            </summary>
            <value>a type</value>
        </member>
        <member name="P:iTextSharp.text.Cell.Chunks">
            <summary>
            Gets all the chunks in this element.
            </summary>
            <value>an ArrayList</value>
        </member>
        <member name="P:iTextSharp.text.Cell.Width">
            <summary>
            Sets the width.
            </summary>
            <value>the new value</value>
        </member>
        <member name="P:iTextSharp.text.Cell.Size">
            <summary>
            Gets the number of Elements in the Cell.
            </summary>
            <value>a size</value>
        </member>
        <member name="P:iTextSharp.text.Cell.Elements">
            <summary>
            Gets Elements.
            </summary>
            <value>an ArrayList</value>
        </member>
        <member name="P:iTextSharp.text.Cell.HorizontalAlignment">
            <summary>
            Gets/Sets the horizontal Element.
            </summary>
            <value>a value</value>
        </member>
        <member name="P:iTextSharp.text.Cell.VerticalAlignment">
            <summary>
            Gets/sets the vertical Element.
            </summary>
            <value>a value</value>
        </member>
        <member name="P:iTextSharp.text.Cell.CellWidth">
            <summary>
            Gets the width.
            </summary>
            <value>a value</value>
        </member>
        <member name="P:iTextSharp.text.Cell.Colspan">
             Gets the colspan.
            
             @return    a value
            <summary>
            Gets/sets the colspan.
            </summary>
            <value>a value</value>
        </member>
        <member name="P:iTextSharp.text.Cell.Rowspan">
            <summary>
            Gets/sets the rowspan.
            </summary>
            <value>a value</value>
        </member>
        <member name="P:iTextSharp.text.Cell.Leading">
            <summary>
            Gets/sets the leading.
            </summary>
            <value>a value</value>
        </member>
        <member name="P:iTextSharp.text.Cell.Header">
            <summary>
            Gets/sets header
            </summary>
            <value>a value</value>
        </member>
        <member name="P:iTextSharp.text.Cell.NoWrap">
             Get nowrap.
            
             @return    a value
            <summary>
            Get/set nowrap.
            </summary>
            <value>a value</value>
        </member>
        <member name="P:iTextSharp.text.Cell.Top">
            <summary>
            This property throws an Exception.
            </summary>
            <value>none</value>
        </member>
        <member name="P:iTextSharp.text.Cell.Bottom">
            <summary>
            This property throws an Exception.
            </summary>
            <value>none</value>
        </member>
        <member name="P:iTextSharp.text.Cell.Left">
            <summary>
            This property throws an Exception.
            </summary>
            <value>none</value>
        </member>
        <member name="P:iTextSharp.text.Cell.Right">
            <summary>
            This property throws an Exception.
            </summary>
            <value>none</value>
        </member>
        <member name="P:iTextSharp.text.Cell.GroupChange">
            <summary>
            Does this <CODE>Cell</CODE> force a group change?
            </summary>
        </member>
        <member name="P:iTextSharp.text.Cell.MaxLines">
            <summary>
            get/set maxLines value
            </summary>
        </member>
        <member name="P:iTextSharp.text.Cell.ShowTruncation">
            <summary>
            get/set showTruncation value
            </summary>
        </member>
        <member name="P:iTextSharp.text.Cell.UseAscender">
            <summary>
            get/set useAscender value
            </summary>
        </member>
        <member name="P:iTextSharp.text.Cell.UseDescender">
            <summary>
            get/set useDescender value
            </summary>
        </member>
        <member name="P:iTextSharp.text.Cell.UseBorderPadding">
            <summary>
            get/set useBorderPadding value
            </summary>
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfCell.MERGE_NONE">
            This cell is not merged
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfCell.MERGE_VERT_PARENT">
            This cell is the parent cell of a vertical merge operation
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfCell.MERGE_VERT_CHILD">
            This cell is a child cell of a vertical merge operation
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfCell.parentRow">
            The parent RtfRow of this RtfCell
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfCell.content">
            The content of this RtfCell
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfCell.cellRight">
            The right margin of this RtfCell
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfCell.cellWidth">
            The width of this RtfCell
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfCell.borders">
            The borders of this RtfCell
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfCell.verticalAlignment">
            The vertical alignment of this RtfCell
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfCell.backgroundColor">
            The background color of this RtfCell
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfCell.cellPadding">
            The padding of this RtfCell
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfCell.mergeType">
            The merge type of this RtfCell
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfCell.colspan">
            The number of columns spanned by this RtfCell
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfCell.rowspan">
            The number of rows spanned by this RtfCell
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfCell.document">
            The RtfDocument this RtfCell belongs to
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfCell.inHeader">
            Whether this RtfCell is in a header
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.#ctor">
            Constructs an empty RtfCell
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.#ctor(System.String)">
            Constructs a RtfCell based upon a String
            
            @param content The String to base the RtfCell on
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.#ctor(iTextSharp.text.IElement)">
            Constructs a RtfCell based upon an Element
            
            @param element The Element to base the RtfCell on
            @throws BadElementException If the Element is not valid
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.#ctor(System.util.Properties)">
            Constructs a RtfCell based upon certain Properties
            
            @param properties The Properties for this RtfCell
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.rtf.table.RtfRow,iTextSharp.text.Cell)">
            Constructs a RtfCell based on a Cell.
            
            @param doc The RtfDocument this RtfCell belongs to
            @param row The RtfRow this RtfCell lies in
            @param cell The Cell to base this RtfCell on
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.ImportCell(iTextSharp.text.Cell)">
            Imports the Cell properties into the RtfCell
            
            @param cell The Cell to import
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.WriteDefinition">
            Write the cell definition part of this RtfCell
            
            @return A byte array with the cell definition
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.Write">
            Write the content of this RtfCell
            
            @return A byte array with the content of this RtfCell
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.SetCellRight(System.Int32)">
            Sets the right margin of this cell. Used in merge operations
            
            @param cellRight The right margin to use
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.GetCellRight">
            Gets the right margin of this RtfCell
            
            @return The right margin of this RtfCell.
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.SetCellWidth(System.Int32)">
            Sets the cell width of this RtfCell. Used in merge operations.
            
            @param cellWidth The cell width to use
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.GetCellWidth">
            Gets the cell width of this RtfCell
            
            @return The cell width of this RtfCell
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.GetColspan">
            Gets the number of columns this RtfCell spans
            
            @return The number of columns this RtfCell spans
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.GetRowspan">
            Gets the number of rows this RtfCell spans
            
            @return The number of rows this RtfCell spans
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.GetCellpadding">
            Gets the cell padding of this RtfCell
            
            @return The cell padding of this RtfCell
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.GetBorders">
            Gets the borders of this RtfCell
            
            @return The borders of this RtfCell
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.SetBorders(iTextSharp.text.rtf.table.RtfBorderGroup)">
            Set the borders of this RtfCell
            
            @param borderGroup The RtfBorderGroup to use as borders
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.GetVerticalAlignment">
            Get the vertical alignment of this RtfCell
            
            @return The vertical alignment of this RtfCell
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.GetBackgroundColor">
            Get the background color of this RtfCell
            
            @return The background color of this RtfCell
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.SetCellMergeChild(iTextSharp.text.rtf.table.RtfCell)">
            Merge this cell into the parent cell.
            
            @param mergeParent The RtfCell to merge with
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.SetRtfDocument(iTextSharp.text.rtf.document.RtfDocument)">
            Sets the RtfDocument this RtfCell belongs to
            
            @param doc The RtfDocument to use
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.SetInTable(System.Boolean)">
            Unused
            @param inTable
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.SetInHeader(System.Boolean)">
            Sets whether this RtfCell is in a header
            
            @param inHeader <code>True</code> if this RtfCell is in a header, <code>false</code> otherwise
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfCell.IntToByteArray(System.Int32)">
             Transforms an integer into its String representation and then returns the bytes
             of that string.
            
             @param i The integer to convert
             @return A byte array representing the integer
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.rtf.table.RtfRow" -->
        <member name="F:iTextSharp.text.rtf.table.RtfRow.ROW_BEGIN">
            Constant for the RtfRow beginning
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow.ROW_WIDTH_STYLE">
            Constant for the RtfRow width style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow.ROW_WIDTH">
            Constant for the RtfRow width
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow.ROW_KEEP_TOGETHER">
            Constant to specify that this RtfRow are not to be broken across pages
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow.ROW_HEADER_ROW">
            Constant to specify that this is a header RtfRow
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow.ROW_ALIGN_LEFT">
            Constant for left alignment of this RtfRow
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow.ROW_ALIGN_RIGHT">
            Constant for right alignment of this RtfRow
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow.ROW_ALIGN_CENTER">
            Constant for center alignment of this RtfRow
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow.ROW_ALIGN_JUSTIFIED">
            Constant for justified alignment of this RtfRow
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow.ROW_GRAPH">
            Constant for the graph style of this RtfRow
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow.ROW_CELL_SPACING_LEFT">
            Constant for the cell left spacing
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow.ROW_CELL_SPACING_TOP">
            Constant for the cell top spacing
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow.ROW_CELL_SPACING_RIGHT">
            Constant for the cell right spacing
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow.ROW_CELL_SPACING_BOTTOM">
            Constant for the cell bottom spacing
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow.ROW_CELL_SPACING_LEFT_STYLE">
            Constant for the cell left spacing style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow.ROW_CELL_SPACING_TOP_STYLE">
            Constant for the cell top spacing style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow.ROW_CELL_SPACING_RIGHT_STYLE">
            Constant for the cell right spacing style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow.ROW_CELL_SPACING_BOTTOM_STYLE">
            Constant for the cell bottom spacing style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow.ROW_CELL_PADDING_LEFT">
            Constant for the cell left padding
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow.ROW_CELL_PADDING_RIGHT">
            Constant for the cell right padding
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow.ROW_CELL_PADDING_LEFT_STYLE">
            Constant for the cell left padding style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow.ROW_CELL_PADDING_RIGHT_STYLE">
            Constant for the cell right padding style
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow.ROW_END">
            Constant for the end of a row
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow.parentTable">
            The RtfTable this RtfRow belongs to
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow.cells">
            The cells of this RtfRow
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow.width">
            The width of this row
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfRow.rowNumber">
            The row number
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfRow.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.rtf.table.RtfTable,iTextSharp.text.Row,System.Int32)">
            Constructs a RtfRow for a Row.
            
            @param doc The RtfDocument this RtfRow belongs to
            @param rtfTable The RtfTable this RtfRow belongs to
            @param row The Row this RtfRow is based on
            @param rowNumber The number of this row
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfRow.ImportRow(iTextSharp.text.Row)">
            Imports a Row and copies all settings
            
            @param row The Row to import
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfRow.HandleCellSpanning">
            Performs a second pass over all cells to handle cell row/column spanning.
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfRow.Write">
            Writes the content of this RtfRow
            
            @return A byte array with the content of this RtfRow
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfRow.GetParentTable">
            Gets the parent RtfTable of this RtfRow
            
            @return The parent RtfTable of this RtfRow
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfRow.GetCells">
            Gets the cells of this RtfRow
            
            @return The cells of this RtfRow
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.rtf.table.RtfTable" -->
        <member name="F:iTextSharp.text.rtf.table.RtfTable.rows">
            The rows of this RtfTable
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfTable.tableWidthPercent">
            The percentage of the page width that this RtfTable covers
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfTable.proportionalWidths">
            An array with the proportional widths of the cells in each row
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfTable.cellPadding">
            The cell padding
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfTable.cellSpacing">
            The cell spacing
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfTable.borders">
            The border style of this RtfTable 
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfTable.alignment">
            The alignment of this RtfTable
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfTable.cellsFitToPage">
            Whether the cells in this RtfTable must fit in a page
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfTable.tableFitToPage">
            Whether the whole RtfTable must fit in a page
        </member>
        <member name="F:iTextSharp.text.rtf.table.RtfTable.headerRows">
            The number of header rows in this RtfTable
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfTable.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.Table)">
            Constructs a RtfTable based on a Table for a RtfDocument.
            
            @param doc The RtfDocument this RtfTable belongs to
            @param table The Table that this RtfTable wraps
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfTable.ImportTable(iTextSharp.text.Table)">
            Imports the rows and settings from the Table into this
            RtfTable.
            
            @param table The source Table
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfTable.Write">
            Writes the content of this RtfTable
            
            @return A byte array with the content of this RtfTable
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfTable.GetAlignment">
            Gets the alignment of this RtfTable
            
            @return The alignment of this RtfTable.
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfTable.GetBorders">
            Gets the borders of this RtfTable
            
            @return The borders of this RtfTable.
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfTable.GetCellPadding">
            Gets the cell padding of this RtfTable
            
            @return The cell padding of this RtfTable.
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfTable.GetCellSpacing">
            Gets the cell spacing of this RtfTable
            
            @return The cell spacing of this RtfTable.
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfTable.GetProportionalWidths">
            Gets the proportional cell widths of this RtfTable
            
            @return The proportional widths of this RtfTable.
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfTable.GetTableWidthPercent">
            Gets the percentage of the page width this RtfTable covers 
            
            @return The percentage of the page width.
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfTable.GetRows">
            Gets the rows of this RtfTable
            
            @return The rows of this RtfTable
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfTable.GetCellsFitToPage">
            Gets the cellsFitToPage setting of this RtfTable.
            
            @return The cellsFitToPage setting of this RtfTable.
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfTable.GetTableFitToPage">
            Gets the tableFitToPage setting of this RtfTable.
            
            @return The tableFitToPage setting of this RtfTable.
        </member>
        <member name="M:iTextSharp.text.rtf.table.RtfTable.GetHeaderRows">
            Gets the number of header rows of this RtfTable
            
            @return The number of header rows
        </member>
        <member name="T:iTextSharp.text.rtf.text.RtfAnnotation">
            The RtfAnnotation provides support for adding Annotations to the rtf document.
            Only simple Annotations with Title / Content are supported.
            
            @version $Version:$
            @author Mark Hall (mhall@edu.uni-klu.ac.at)
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfAnnotation.ANNOTATION_ID">
            Constant for the id of the annotation
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfAnnotation.ANNOTATION_AUTHOR">
            Constant for the author of the annotation
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfAnnotation.ANNOTATION">
            Constant for the actual annotation
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfAnnotation.title">
            The title of this RtfAnnotation
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfAnnotation.content">
            The content of this RtfAnnotation
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfAnnotation.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.Annotation)">
            Constructs a RtfAnnotation based on an Annotation.
            
            @param doc The RtfDocument this RtfAnnotation belongs to
            @param annotation The Annotation this RtfAnnotation is based off
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfAnnotation.Write">
            Writes the content of the RtfAnnotation
            
            @return The content of this RtfAnnotation
        </member>
        <member name="T:iTextSharp.text.rtf.text.RtfChapter">
            The RtfChapter wraps a Chapter element.
            INTERNAL CLASS
            
            @version $Version:$
            @author Mark Hall (mhall@edu.uni-klu.ac.at)
        </member>
        <member name="T:iTextSharp.text.rtf.text.RtfSection">
            The RtfSection wraps a Section element.
            INTERNAL CLASS
            
            @version $Version:$
            @author Mark Hall (mhall@edu.uni-klu.ac.at)
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfSection.title">
            The title paragraph of this RtfSection
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfSection.items">
            The sub-items of this RtfSection
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfSection.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.Section)">
            Constructs a RtfSection for a given Section. If the autogenerateTOCEntries
            property of the RtfDocument is set and the title is not empty then a TOC entry
            is generated for the title.
             
            @param doc The RtfDocument this RtfSection belongs to
            @param section The Section this RtfSection is based on
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfSection.Write">
            Write this RtfSection and its contents
            
            @return A byte array with the RtfSection and its contents
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfSection.SetInTable(System.Boolean)">
            Sets whether this RtfSection is in a table. Sets the correct inTable setting for all
            child elements.
            
            @param inTable <code>True</code> if this RtfSection is in a table, <code>false</code> otherwise
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfSection.SetInHeader(System.Boolean)">
            Sets whether this RtfSection is in a header. Sets the correct inTable setting for all
            child elements.
            
            @param inHeader <code>True</code> if this RtfSection is in a header, <code>false</code> otherwise
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfSection.UpdateIndentation(System.Single,System.Single,System.Single)">
            Updates the left, right and content indentation of all RtfParagraph and RtfSection
            elements that this RtfSection contains.
            
            @param indentLeft The left indentation to add.
            @param indentRight The right indentation to add.
            @param indentContent The content indentation to add.
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfChapter.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.Chapter)">
            Constructs a RtfChapter for a given Chapter
            
            @param doc The RtfDocument this RtfChapter belongs to
            @param chapter The Chapter this RtfChapter is based on
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfChapter.Write">
            Writes the RtfChapter and its contents
            
            @return A byte array containing the RtfChapter and its contents 
        </member>
        <member name="T:iTextSharp.text.rtf.text.RtfChunk">
            The RtfChunk contains one piece of text. The smallest text element available
            in iText.
            
            @version $Version:$
            @author Mark Hall (mhall@edu.uni-klu.ac.at)
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfChunk.FONT_SUBSCRIPT">
            Constant for the subscript flag
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfChunk.FONT_SUPERSCRIPT">
            Constant for the superscript flag
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfChunk.FONT_END_SUPER_SUBSCRIPT">
            Constant for the end of sub / superscript flag
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfChunk.HIGHLIGHT">
            Constant for background colour.
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfChunk.font">
            The font of this RtfChunk
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfChunk.content">
            The actual content of this RtfChunk
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfChunk.softLineBreaks">
            Whether to use soft line breaks instead of hard ones.
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfChunk.superSubScript">
            The super / subscript of this RtfChunk
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfChunk.background">
            An optional background colour.
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfChunk.#ctor(iTextSharp.text.rtf.document.RtfDocument,iTextSharp.text.Chunk)">
            Constructs a RtfChunk based on the content of a Chunk
            
            @param doc The RtfDocument that this Chunk belongs to
            @param chunk The Chunk that this RtfChunk is based on
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfChunk.Write">
            Writes the content of this RtfChunk. First the font information
            is written, then the content, and then more font information
            
            @return A byte array with the content of this RtfChunk
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfChunk.SetRtfDocument(iTextSharp.text.rtf.document.RtfDocument)">
            Sets the RtfDocument this RtfChunk belongs to.
            
            @param doc The RtfDocument to use
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfChunk.SetSoftLineBreaks(System.Boolean)">
            Sets whether to use soft line breaks instead of default hard ones.
            
            @param softLineBreaks whether to use soft line breaks instead of default hard ones.
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfChunk.GetSoftLineBreaks">
            Gets whether to use soft line breaks instead of default hard ones.
            
            @return whether to use soft line breaks instead of default hard ones.
        </member>
        <member name="T:iTextSharp.text.rtf.text.RtfNewPage">
            The RtfNewPage creates a new page. INTERNAL CLASS
            
            @version $Version:$
            @author Mark Hall (mhall@edu.uni-klu.ac.at)
        </member>
        <member name="F:iTextSharp.text.rtf.text.RtfNewPage.NEW_PAGE">
            Constant for a new page
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfNewPage.#ctor(iTextSharp.text.rtf.document.RtfDocument)">
            Constructs a RtfNewPage
            
            @param doc The RtfDocument this RtfNewPage belongs to
        </member>
        <member name="M:iTextSharp.text.rtf.text.RtfNewPage.Write">
            Writes a new page
            
            @return A byte array with the new page set
        </member>
        <member name="T:iTextSharp.text.rtf.AbstractRtfField">
             This class implements an abstract RtfField.
            
             This class is based on the RtfWriter-package from Mark Hall.
             
             ONLY FOR USE WITH THE RtfWriter NOT with the RtfWriter2.
            
             @author <a href="mailto:Dirk.Weigenand@smb-tec.com">Dirk Weigenand</a>
             @version $Id: AbstractRtfField.java,v 1.16 2004/12/14 15:14:44 blowagie Exp $
             @since Mon Aug 19 14:50:39 2002
        </member>
        <member name="T:iTextSharp.text.rtf.IRtfField">
             This interface should mark classes, that can be represented 
             as RTF fields, such as pagenumber, toc entries and so on.
             
             ONLY FOR USE WITH THE RtfWriter NOT with the RtfWriter2.
            
             This class is based on the RtfWriter-package from Mark Hall.
             @author <a href="mailto:Steffen.Stundzig@smb-tec.com">Steffen.Stundzig@smb-tec.com</a> 
             @version $Revision: 1.17 $Date: 2004/12/14 15:14:44 $
        </member>
        <member name="M:iTextSharp.text.rtf.IRtfField.Write(iTextSharp.text.rtf.RtfWriter,System.IO.Stream)">
            Writes an RTF field.
            @param writer
            @param out
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.rtf.AbstractRtfField.#ctor(System.String,iTextSharp.text.Font)">
            public constructor
            @param content the content of the field
            @param font the font of the field
        </member>
        <member name="F:iTextSharp.text.rtf.AbstractRtfField.rtfFieldIsLocked">
            Determines whether this RtfField is locked, i.e. it cannot be
            updated. Defaults to <tt>false</tt>.
        </member>
        <member name="F:iTextSharp.text.rtf.AbstractRtfField.rtfFieldIsDirty">
            Determines whether a formatting change has been made since the
            field was last updated. Defaults to <tt>false</tt>.
        </member>
        <member name="F:iTextSharp.text.rtf.AbstractRtfField.rtfFieldWasEdited">
            Determines whether text has been added, removed from thre field
            result since the field was last updated. Defaults to
            <tt>false</tt>.
        </member>
        <member name="F:iTextSharp.text.rtf.AbstractRtfField.rtfFieldIsPrivate">
            Determines whether the field is in suitable form for
            display. Defaults to <tt>false</tt>.
        </member>
        <member name="F:iTextSharp.text.rtf.AbstractRtfField.rtfFieldIsAlt">
            Determines whether this RtfField shall refer to an end note.
        </member>
        <member name="M:iTextSharp.text.rtf.AbstractRtfField.IsLocked">
            Determines whtether the field is locked, i.e. it cannot be
            updated.
            
            @return <tt>true</tt> iff the field cannot be updated,
            <tt>false</tt> otherwise.
        </member>
        <member name="M:iTextSharp.text.rtf.AbstractRtfField.SetLocked(System.Boolean)">
             Set whether the field can be updated.
            
             @param rtfFieldIsLocked <tt>true</tt> if the field cannot be
             updated, <tt>false</tt> otherwise.
        </member>
        <member name="M:iTextSharp.text.rtf.AbstractRtfField.SetDirty(System.Boolean)">
            Set whether a formatting change has been made since the field
            was last updated
            @param rtfFieldIsDirty <tt>true</tt> if the field was
            changed since the field was last updated, <tt>false</tt>
            otherwise.
        </member>
        <member name="M:iTextSharp.text.rtf.AbstractRtfField.IsDirty">
            Determines whether the field was changed since the field was
            last updated
            @return <tt>true</tt> if the field was changed since the field
            was last updated, <tt>false</tt> otherwise.
        </member>
        <member name="M:iTextSharp.text.rtf.AbstractRtfField.SetEdited(System.Boolean)">
            Set whether text has been added, removed from thre field result
            since the field was last updated.
            @param rtfFieldWasEdited Determines whether text has been
            added, removed from the field result since the field was last
            updated (<tt>true</tt>, <tt>false</tt> otherwise..
        </member>
        <member name="M:iTextSharp.text.rtf.AbstractRtfField.WasEdited">
            Determines whether text has been added, removed from the field
            result since the field was last updated.
            @return rtfFieldWasEdited <tt>true</tt> if text has been added,
            removed from the field result since the field was last updated,
            <tt>false</tt> otherwise.
        </member>
        <member name="M:iTextSharp.text.rtf.AbstractRtfField.SetPrivate(System.Boolean)">
            Set whether the field is in suitable form for
            display. I.e. it's not a field with a picture as field result
            @param rtfFieldIsPrivate Determines whether the field is in
            suitable form for display: <tt>true</tt> it can be displayed,
            <tt>false</tt> it cannot be displayed.
        </member>
        <member name="M:iTextSharp.text.rtf.AbstractRtfField.IsPrivate">
            Determines whether the field is in suitable form for display.
            @return whether the field is in suitable form for display:
            <tt>true</tt> yes, <tt>false</tt> no it cannot be displayed.
        </member>
        <member name="M:iTextSharp.text.rtf.AbstractRtfField.WriteRtfFieldInitializationStuff(System.IO.Stream)">
            Abstract method for writing custom stuff to the Field
            Initialization Stuff part of an RtfField.
            @param outp
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.rtf.AbstractRtfField.WriteRtfFieldResultStuff(System.IO.Stream)">
            Abstract method for writing custom stuff to the Field Result
            part of an RtfField.
            @param outp
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.rtf.AbstractRtfField.SetAlt(System.Boolean)">
            Determines whether this RtfField shall refer to an end note.
            @param rtfFieldIsAlt <tt>true</tt> if this RtfField shall refer
            to an end note, <tt>false</tt> otherwise
        </member>
        <member name="M:iTextSharp.text.rtf.AbstractRtfField.IsAlt">
            Determines whether this RtfField shall refer to an end
            note.
            @return <tt>true</tt> if this RtfField shall refer to an end
            note, <tt>false</tt> otherwise.
        </member>
        <member name="M:iTextSharp.text.rtf.AbstractRtfField.Write(iTextSharp.text.rtf.RtfWriter,System.IO.Stream)">
            For Interface RtfField.
            @param writer
            @param outp
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.rtf.AbstractRtfField.WriteRtfFieldBegin(System.IO.Stream)">
            Write the beginning of an RtfField to the Stream.
            @param outp
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.rtf.AbstractRtfField.WriteRtfFieldModifiers(System.IO.Stream)">
            Write the modifiers defined for a RtfField to the Stream.
            @param outp
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.rtf.AbstractRtfField.WriteRtfFieldInstBegin(System.IO.Stream)">
            Write RtfField Initialization Stuff to Stream.
            @param outp
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.rtf.AbstractRtfField.WriteRtfFieldInstEnd(System.IO.Stream)">
            Write end of RtfField Initialization Stuff to Stream.
            @param outp
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.rtf.AbstractRtfField.WriteRtfFieldResultBegin(System.IO.Stream)">
            Write beginning of RtfField Result to Stream.
            @param outp
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.rtf.AbstractRtfField.WriteRtfFieldResultEnd(System.IO.Stream)">
            Write end of RtfField Result to Stream.
            @param outp
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.rtf.AbstractRtfField.WriteRtfFieldEnd(System.IO.Stream)">
            Close the RtfField.
            @param outp
            @throws IOException
        </member>
        <member name="P:iTextSharp.text.rtf.AbstractRtfField.Content">
            empty implementation for Chunk.
            @return an empty string
        </member>
        <member name="T:iTextSharp.text.rtf.GenericRtfField">
             This class implements a generic RtfField.
            
             This class is based on the RtfWriter-package from Mark Hall.
             
             ONLY FOR USE WITH THE RtfWriter NOT with the RtfWriter2.
            
             @author <a href="mailto:Dirk.Weigenand@smb-tec.com">Dirk Weigenand</a>
             @version $Id: GenericRtfField.java,v 1.17 2004/12/14 15:14:44 blowagie Exp $
             @since Mon Aug 19 14:50:39 2002
        </member>
        <member name="F:iTextSharp.text.rtf.GenericRtfField.fieldInst">
            Field Initialization Stuff.
        </member>
        <member name="F:iTextSharp.text.rtf.GenericRtfField.fieldResult">
            Field Result Stuff.
        </member>
        <member name="M:iTextSharp.text.rtf.GenericRtfField.#ctor(System.String,System.String)">
             public constructor, set the data that is to be written into the
             Field Initialization Stuff and Field Result parts of the
             RtfField.
            
             @param fieldInst data to be written into the Field
             Initialization Stuff part of the RtfField.
             @param fieldResult data to be written into the Field Result
             part of the RtfField.
        </member>
        <member name="M:iTextSharp.text.rtf.GenericRtfField.#ctor(System.String,System.String,iTextSharp.text.Font)">
             public constructor, set the data that is to be written into the
             Field Initialization Stuff and Field Result parts of the
             RtfField.
            
             @param fieldInst data to be written into the Field
             Initialization Stuff part of the RtfField.
             @param fieldResult data to be written into the Field Result
             part of the RtfField.
             @param font
        </member>
        <member name="M:iTextSharp.text.rtf.GenericRtfField.WriteRtfFieldInitializationStuff(System.IO.Stream)">
            method for writing custom stuff to the Field Initialization
            Stuff part of an RtfField.
            @param outp
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.rtf.GenericRtfField.WriteRtfFieldResultStuff(System.IO.Stream)">
            method for writing custom stuff to the Field Result part of an
            RtfField.
            @param outp
            @throws IOException
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.rtf.RtfCell" -->
        <member name="F:iTextSharp.text.rtf.RtfCell.MERGE_HORIZ_FIRST">
            A possible value for merging 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfCell.MERGE_VERT_FIRST">
            A possible value for merging 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfCell.MERGE_BOTH_FIRST">
            A possible value for merging 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfCell.MERGE_HORIZ_PREV">
            A possible value for merging 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfCell.MERGE_VERT_PREV">
            A possible value for merging 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfCell.MERGE_BOTH_PREV">
            A possible value for merging 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfCell.cellMergeFirst">
            First cell to merge with - Horizontal 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfCell.cellVMergeFirst">
            First cell to merge with - Vertical 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfCell.cellMergePrev">
            Merge cell with previous horizontal cell 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfCell.cellVMergePrev">
            Merge cell with previous vertical cell 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfCell.cellVerticalAlignBottom">
            Cell content vertical alignment bottom 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfCell.cellVerticalAlignCenter">
            Cell content vertical alignment center 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfCell.cellVerticalAlignTop">
            Cell content vertical alignment top 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfCell.cellBorderLeft">
            Cell border left 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfCell.cellBorderRight">
            Cell border right 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfCell.cellBorderTop">
            Cell border top 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfCell.cellBorderBottom">
            Cell border bottom 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfCell.cellBackgroundColor">
            Cell background color 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfCell.cellWidthStyle">
            Cell width format 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfCell.cellWidthTag">
            Cell width 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfCell.cellRightBorder">
            Cell right border position 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfCell.cellInTable">
            Cell is part of table 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfCell.cellEnd">
            End of cell 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfCell.cellPaddingTop">
            padding top 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfCell.cellPaddingTopUnit">
            padding top unit 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfCell.cellPaddingBottom">
            padding bottom 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfCell.cellPaddingBottomUnit">
            padding bottom unit 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfCell.cellPaddingLeft">
            padding left 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfCell.cellPaddingLeftUnit">
            padding left unit 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfCell.cellPaddingRight">
            padding right 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfCell.cellPaddingRightUnit">
            padding right unit 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfCell.writer">
            The <code>RtfWriter</code> to which this <code>RtfCell</code> belongs. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfCell.mainTable">
            The <code>RtfTable</code> to which this <code>RtfCell</code> belongs. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfCell.cellWidth">
            Cell width 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfCell.cellRight">
            Cell right border position 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfCell.store">
            <code>Cell</code> containing the actual data 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfCell.emptyCell">
            Is this an empty cell 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfCell.mergeType">
            Type of merging to do 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfCell.cellpadding">
            cell padding, because the table only renders the left and right cell padding
            and not the top and bottom one
        </member>
        <member name="M:iTextSharp.text.rtf.RtfCell.#ctor(iTextSharp.text.rtf.RtfWriter,iTextSharp.text.rtf.RtfTable)">
             Create a new <code>RtfCell</code>.
            
             @param writer The <code>RtfWriter</code> that this <code>RtfCell</code> belongs to
             @param mainTable The <code>RtfTable</code> that created the
             <code>RtfRow</code> that created the <code>RtfCell</code> :-)
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.rtf.RtfCell.ImportCell(iTextSharp.text.Cell,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" -->
        <member name="M:iTextSharp.text.rtf.RtfCell.WriteCellSettings(System.IO.MemoryStream)">
             Write the properties of the <code>RtfCell</code>.
            
             @param os The <code>Stream</code> to which to write the properties
             of the <code>RtfCell</code> to.
             @return true if writing the cell settings succeeded
             @throws DocumentException
        </member>
        <member name="M:iTextSharp.text.rtf.RtfCell.WriteCellContent(System.IO.MemoryStream)">
             Write the content of the <code>RtfCell</code>.
            
             @param os The <code>Stream</code> to which to write the content of
             the <code>RtfCell</code> to.
             @return true if writing the cell content succeeded
             @throws DocumentException
        </member>
        <member name="M:iTextSharp.text.rtf.RtfCell.SetMerge(System.Int32,iTextSharp.text.rtf.RtfCell)">
             Sets the merge type and the <code>RtfCell</code> with which this
             <code>RtfCell</code> is to be merged.
            
             @param mergeType The merge type specifies the kind of merge to be applied
             (MERGE_HORIZ_PREV, MERGE_VERT_PREV, MERGE_BOTH_PREV)
             @param mergeCell The <code>RtfCell</code> that the cell at x and y is to
             be merged with
        </member>
        <member name="M:iTextSharp.text.rtf.RtfCell.GetStore">
             Get the <code>Cell</code> with the actual content.
            
             @return <code>Cell</code> which is contained in the <code>RtfCell</code>
        </member>
        <member name="M:iTextSharp.text.rtf.RtfCell.GetCellWidth">
             Get the with of this <code>RtfCell</code>
            
             @return Width of the current <code>RtfCell</code>
        </member>
        <member name="M:iTextSharp.text.rtf.RtfCell.SetCellWidth(System.Int32)">
            sets the width of the cell
            @param value a width
        </member>
        <member name="M:iTextSharp.text.rtf.RtfCell.GetCellRight">
            Get the position of the right border of this <code>RtfCell</code>.
            @return position of the right border
        </member>
        <member name="M:iTextSharp.text.rtf.RtfCell.SetCellRight(System.Int32)">
            Sets the right position of the cell
            @param value a cell position
        </member>
        <member name="M:iTextSharp.text.rtf.RtfCell.WriteInt(System.IO.MemoryStream,System.Int32)">
             Write an Integer to the Outputstream.
            
             @param outp The <code>Stream</code> to be written to.
             @param i The int to be written.
             @throws IOException
        </member>
        <member name="T:iTextSharp.text.rtf.RtfFont">
             The RtfFont class enables you to add arbitrary Fonts to a rtf document by specifying
             the font name you want to have. The font has to be installed on the client for this to
             work.
             
             ONLY FOR USE WITH THE RtfWriter NOT with the RtfWriter2.
            
             @author <a href="mhall@myrealbox.com">mhall@myrealbox.com</a>
        </member>
        <member name="F:iTextSharp.text.rtf.RtfFont.familyName">
            The font family name of this RtfFont
        </member>
        <member name="M:iTextSharp.text.rtf.RtfFont.#ctor(System.String)">
             Constructs a RtfFont
            
             @param familyName The family name of this RtfFont
        </member>
        <member name="M:iTextSharp.text.rtf.RtfFont.#ctor(System.String,System.Single)">
             Constructs a RtfFont
            
             @param familyName The font family name of this RtfFont
             @param size The font size of this RtfFont
        </member>
        <member name="M:iTextSharp.text.rtf.RtfFont.#ctor(System.String,System.Single,System.Int32)">
             Constructs a RtfFont
            
             @param familyName The font family name of this RtfFont
             @param size The font size of this RtfFont
             @param style The font style of this RtfFont
        </member>
        <member name="M:iTextSharp.text.rtf.RtfFont.#ctor(System.String,System.Single,System.Int32,iTextSharp.text.Color)">
             Constructs a RtfFont
            
             @param familyName The font family name of this RtfFont
             @param size The font size of this RtfFont
             @param style The font style of this RtfFont
             @param color The font color of this RtfFont
        </member>
        <member name="M:iTextSharp.text.rtf.RtfFont.Difference(iTextSharp.text.Font)">
             Replaces the attributes that are equal to <VAR>null</VAR> with
             the attributes of a given font.
            
             @param	font	the font of a bigger element class
             @return	a <CODE>Font</CODE>
        </member>
        <member name="P:iTextSharp.text.rtf.RtfFont.Familyname">
             Gets the familyname as a String.
            
             @return  the familyname
        </member>
        <member name="T:iTextSharp.text.rtf.RtfHeaderFooter">
             This HeaderFooter specialization extends the normal HeaderFooter impl.
             by the new ctor with 'Element' param.
             So we have the ability to add a table or some moe sophisticated stuff
             as header or footer content.
             
             ONLY FOR USE WITH THE RtfWriter NOT with the RtfWriter2.
            
             This class is based on the RtfWriter-package from Mark Hall.
             @author <a href="mailto:Steffen.Stundzig@smb-tec.com">Steffen.Stundzig@smb-tec.com</a>
             @author <a href="mailto:mhall@myrealbox.com">Mark.Hall@myrealbox.com</a>
             @version $Revision: 1.19 $Date: 2004/12/14 15:14:44 $
        </member>
        <member name="M:iTextSharp.text.rtf.RtfHeaderFooter.#ctor(iTextSharp.text.Phrase,iTextSharp.text.Phrase)">
            Constructs a new header
            @param before
            @param after
        </member>
        <member name="M:iTextSharp.text.rtf.RtfHeaderFooter.#ctor(iTextSharp.text.Phrase,System.Boolean)">
            Constructs a new header
            @param before
            @param numbered
        </member>
        <member name="M:iTextSharp.text.rtf.RtfHeaderFooter.#ctor(iTextSharp.text.IElement)">
            Constructs a new header
            @param content
        </member>
        <member name="M:iTextSharp.text.rtf.RtfHeaderFooter.Content">
            @return the element specified in the ctor or null;
        </member>
        <member name="T:iTextSharp.text.rtf.RtfHeaderFooters">
             This HeaderFooter specialization contains some headers or footers for several
             pages. Is a list of headerFooters but also a sub class of header footer, to change
             as less as possible of the current API.
             
             ONLY FOR USE WITH THE RtfWriter NOT with the RtfWriter2.
            
             This class is based on the RtfWriter-package from Mark Hall.
             @author <a href="mailto:Steffen.Stundzig@smb-tec.com">Steffen.Stundzig@smb-tec.com</a> 
             @author <a href="mailto:mhall@myrealbox.com">Mark.Hall@myrealbox.com</a>
             @version $Revision: 1.20 $Date: 2004/12/14 15:14:44 $
        </member>
        <member name="F:iTextSharp.text.rtf.RtfHeaderFooters.ALL_PAGES">
            an attribute value 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfHeaderFooters.LEFT_PAGES">
            an attribute value 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfHeaderFooters.RIGHT_PAGES">
            an attribute value 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfHeaderFooters.FIRST_PAGE">
            an attribute value 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfHeaderFooters.allPages">
            header or footer placeholder 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfHeaderFooters.leftPages">
            header or footer placeholder 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfHeaderFooters.rightPages">
            header or footer placeholder 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfHeaderFooters.firstPage">
            header or footer placeholder 
        </member>
        <member name="M:iTextSharp.text.rtf.RtfHeaderFooters.#ctor">
            Contructs a HeaderFooters object
        </member>
        <member name="M:iTextSharp.text.rtf.RtfHeaderFooters.#ctor(iTextSharp.text.Phrase,iTextSharp.text.Phrase)">
            Contructs a HeaderFooters object
            @param before
            @param after
        </member>
        <member name="M:iTextSharp.text.rtf.RtfHeaderFooters.#ctor(iTextSharp.text.Phrase,System.Boolean)">
            Contructs a HeaderFooters object
            @param before
            @param numbered
        </member>
        <member name="M:iTextSharp.text.rtf.RtfHeaderFooters.Set(System.Int32,iTextSharp.text.HeaderFooter)">
            Adds a HeaderFooter to this HeaderFooters object
            @param type
            @param hf
        </member>
        <member name="M:iTextSharp.text.rtf.RtfHeaderFooters.Get(System.Int32)">
            Returns a type of HeaderFooter object registered in this HeaderFooters object.
            @param type type of the HeaderFooter object
            @return a HeaderFooter object
        </member>
        <member name="T:iTextSharp.text.rtf.RtfMapper">
            The RtfMapper provides mappings between com.lowagie.text.* classes
            and the corresponding com.lowagie.text.rtf.** classes.
            
            @version $Version:$
            @author Mark Hall (mhall@edu.uni-klu.ac.at)
        </member>
        <member name="F:iTextSharp.text.rtf.RtfMapper.rtfDoc">
            The RtfDocument this RtfMapper belongs to
        </member>
        <member name="M:iTextSharp.text.rtf.RtfMapper.#ctor(iTextSharp.text.rtf.document.RtfDocument)">
            Constructs a RtfMapper for a RtfDocument
            
            @param doc The RtfDocument this RtfMapper belongs to
        </member>
        <member name="M:iTextSharp.text.rtf.RtfMapper.MapElement(iTextSharp.text.IElement)">
            Takes an Element subclass and returns the correct IRtfBasicElement
            subclass, that wraps the Element subclass.
            
            @param element The Element to wrap
            @return A IRtfBasicElement wrapping the Element
            @throws DocumentException
        </member>
        <member name="T:iTextSharp.text.rtf.RtfPageNumber">
             A rtf page number field.
             
             ONLY FOR USE WITH THE RtfWriter NOT with the RtfWriter2.
            
             This class is based on the RtfWriter-package from Mark Hall.
             @author <a href="mailto:Steffen.Stundzig@smb-tec.com">Steffen.Stundzig@smb-tec.com</a>
             @author <a href="mailto:mhall@myrealbox.com">mhall@myrealbox.com</a>
             @version $Revision: 1.25 $Date: 2004/12/14 15:14:44 $
        </member>
        <member name="M:iTextSharp.text.rtf.RtfPageNumber.#ctor(System.String,iTextSharp.text.Font)">
            construct a RtfPageNumber. The parameter content will be
            displayed in front of the page number using the font given as
            second argument.
            @param content the String that will be displayed in front of the page number
            @param contentFont the font to use to display this page number
        </member>
        <member name="M:iTextSharp.text.rtf.RtfPageNumber.Write(iTextSharp.text.rtf.RtfWriter,System.IO.Stream)">
            write this RtfField into a stream using the writer given as
            first argument.
            @param writer the RtfWriter to use to write this RtfField
            @param outp the Stream to write this RtfField into.
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.rtf.RtfPageNumber.ToString">
            @see com.lowagie.text.Element#toString()
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.rtf.RtfRow" -->
        <member name="F:iTextSharp.text.rtf.RtfRow.tableBorder">
            Table border solid 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfRow.tableBorderWidth">
            Table border width 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfRow.tableBorderColor">
            Table border color 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfRow.rowBegin">
            Table row defaults 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfRow.rowEnd">
            End of table row 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfRow.rowAutofit">
            Table row autofit 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfRow.rowBorderLeft">
            Row border left 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfRow.rowBorderRight">
            Row border right 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfRow.rowBorderTop">
            Row border top 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfRow.rowBorderBottom">
            Row border bottom 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfRow.rowBorderInlineHorizontal">
            Row border horiz inline 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfRow.rowBorderInlineVertical">
            Row border bottom 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfRow.rowSpacingLeft">
            Default cell spacing left 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfRow.rowSpacingRight">
            Default cell spacing right 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfRow.rowSpacingTop">
            Default cell spacing top 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfRow.rowSpacingBottom">
            Default cell spacing bottom 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfRow.rowSpacingLeftStyle">
            Default cell spacing format left 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfRow.rowSpacingRightStyle">
            Default cell spacing format right 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfRow.rowSpacingTopStyle">
            Default cell spacing format top 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfRow.rowSpacingBottomStyle">
            Default cell spacing format bottom 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfRow.rowPaddingLeft">
            Default cell padding left 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfRow.rowPaddingRight">
            Default cell padding right 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfRow.rowPaddingLeftStyle">
            Default cell padding format left 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfRow.rowPaddingRightStyle">
            Default cell padding format right 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfRow.rowWidthStyle">
            Row width format 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfRow.rowWidth">
            Row width 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfRow.rowHeader">
            Table row header. This row should appear at the top of every
            page the current table appears on.
        </member>
        <member name="F:iTextSharp.text.rtf.RtfRow.rowKeep">
            Table row keep together. This row cannot be split by a page break.
            This property is assumed to be off unless the control word is
            present.
        </member>
        <member name="F:iTextSharp.text.rtf.RtfRow.rowAlignLeft">
            Table alignment left 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfRow.rowAlignCenter">
            Table alignment center 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfRow.rowAlignRight">
            Table alignment right 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfRow.cells">
            List of <code>RtfCell</code>s in this <code>RtfRow</code> 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfRow.writer">
            The <code>RtfWriter</code> to which this <code>RtfRow</code> belongs 
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "F:iTextSharp.text.rtf.RtfRow.mainTable" -->
        <member name="F:iTextSharp.text.rtf.RtfRow.width">
            The width of this <code>RtfRow</code> (in percent) 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfRow.cellpadding">
            The default cellpadding of <code>RtfCells</code> in this
            <code>RtfRow</code> 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfRow.cellspacing">
            The default cellspacing of <code>RtfCells</code> in this
            <code>RtfRow</code> 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfRow.borders">
            The borders of this <code>RtfRow</code> 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfRow.borderColor">
            The border color of this <code>RtfRow</code> 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfRow.borderWidth">
            The border width of this <code>RtfRow</code> 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfRow.origRow">
            Original Row 
        </member>
        <member name="M:iTextSharp.text.rtf.RtfRow.#ctor(iTextSharp.text.rtf.RtfWriter,iTextSharp.text.rtf.RtfTable)">
             Create a new <code>RtfRow</code>.
            
             @param writer The <code>RtfWriter</code> that this <code>RtfRow</code> belongs to
             @param mainTable The <code>RtfTable</code> that created this
             <code>RtfRow</code>
        </member>
        <member name="M:iTextSharp.text.rtf.RtfRow.PregenerateRows(System.Int32)">
             Pregenerate the <code>RtfCell</code>s in this <code>RtfRow</code>.
            
             @param columns The number of <code>RtfCell</code>s to be generated.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.rtf.RtfRow.ImportRow(iTextSharp.text.Row,System.Single[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,iTextSharp.text.Color,System.Single,System.Int32)" -->
        <member name="M:iTextSharp.text.rtf.RtfRow.WriteRow(System.IO.MemoryStream,System.Int32,iTextSharp.text.Table)">
             Write the <code>RtfRow</code> to the specified <code>Stream</code>.
            
             @param os The <code>Stream</code> to which this <code>RtfRow</code>
             should be written to.
             @param rowNum The <code>index</code> of this row in the containing table.
             @param table The <code>Table</code> which contains the original <code>Row</code>.
             @return true if writing the row succeeded
             @throws DocumentException
             @throws IOException
        </member>
        <member name="M:iTextSharp.text.rtf.RtfRow.SetMerge(System.Int32,System.Int32,iTextSharp.text.rtf.RtfCell)">
             <code>RtfTable</code>s call this method from their own SetMerge() to
             specify that a certain other cell is to be merged with it.
            
             @param x The column position of the cell to be merged
             @param mergeType The merge type specifies the kind of merge to be applied
             (MERGE_HORIZ_PREV, MERGE_VERT_PREV, MERGE_BOTH_PREV)
             @param mergeCell The <code>RtfCell</code> that the cell at x and y is to
             be merged with
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.rtf.RtfTable" -->
        <member name="F:iTextSharp.text.rtf.RtfTable.rowsList">
            Stores the different rows. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfTable.writer">
            Stores the RtfWriter, which created this RtfTable. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfTable.origTable">
            Stores the Table, which this RtfTable is based on. 
        </member>
        <member name="M:iTextSharp.text.rtf.RtfTable.#ctor(iTextSharp.text.rtf.RtfWriter)">
             Create a new <code>RtfTable</code>.
            
             @param writer The <code>RtfWriter</code> that created this Table
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.rtf.RtfTable.ImportTable(iTextSharp.text.Table,System.Int32)" -->
        <member name="M:iTextSharp.text.rtf.RtfTable.WriteTable(System.IO.MemoryStream)">
             Output the content of the <CODE>RtfTable</CODE> to an Stream.
            
             @param os The <code>Stream</code> that the content of the <code>RtfTable</code> is to be written to
             @return true if writing the table succeeded
             @throws DocumentException
             @throws IOException
        </member>
        <member name="M:iTextSharp.text.rtf.RtfTable.SetMerge(System.Int32,System.Int32,System.Int32,iTextSharp.text.rtf.RtfCell)">
             <code>RtfCell</code>s call this method to specify that a certain other cell is to be merged with it.
            
             @param x The column position of the cell to be merged
             @param y The row position of the cell to be merged
             @param mergeType The merge type specifies the kind of merge to be applied (MERGE_HORIZ_PREV, MERGE_VERT_PREV, MERGE_BOTH_PREV)
             @param mergeCell The <code>RtfCell</code> that the cell at x and y is to be merged with
        </member>
        <member name="M:iTextSharp.text.rtf.RtfTable.GetOriginalTable">
             This method allows access to the original Table that led to this RtfTable.
            
             @return The Table object that is the basis of this RtfTable.
        </member>
        <member name="T:iTextSharp.text.rtf.RtfTableCell">
            A <code>Cell</code> with extended style attributes
            
            ONLY FOR USE WITH THE RtfWriter NOT with the RtfWriter2.
        </member>
        <member name="F:iTextSharp.text.rtf.RtfTableCell.BORDER_UNDEFINED">
            Table border solid 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfTableCell.BORDER_SINGLE">
            Table border solid 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfTableCell.BORDER_DOUBLE_THICK">
            Table border double thickness 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfTableCell.BORDER_SHADOWED">
            Table border shadowed 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfTableCell.BORDER_DOTTED">
            Table border dotted 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfTableCell.BORDER_DASHED">
            Table border dashed 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfTableCell.BORDER_HAIRLINE">
            Table border hairline 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfTableCell.BORDER_DOUBLE">
            Table border double line 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfTableCell.BORDER_DOT_DASH">
            Table border dot dash line 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfTableCell.BORDER_DOT_DOT_DASH">
            Table border dot dot dash line 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfTableCell.BORDER_TRIPLE">
            Table border triple line 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfTableCell.BORDER_THICK_THIN">
            Table border line 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfTableCell.BORDER_THIN_THICK">
            Table border line 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfTableCell.BORDER_THIN_THICK_THIN">
            Table border line 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfTableCell.BORDER_THICK_THIN_MED">
            Table border line 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfTableCell.BORDER_THIN_THICK_MED">
            Table border line 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfTableCell.BORDER_THIN_THICK_THIN_MED">
            Table border line 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfTableCell.BORDER_THICK_THIN_LARGE">
            Table border line 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfTableCell.BORDER_THIN_THICK_LARGE">
            Table border line 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfTableCell.BORDER_THIN_THICK_THIN_LARGE">
            Table border line 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfTableCell.BORDER_WAVY">
            Table border line 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfTableCell.BORDER_DOUBLE_WAVY">
            Table border line 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfTableCell.BORDER_STRIPED">
            Table border line 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfTableCell.BORDER_EMBOSS">
            Table border line 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfTableCell.BORDER_ENGRAVE">
            Table border line 
        </member>
        <member name="M:iTextSharp.text.rtf.RtfTableCell.#ctor(System.Boolean)">
             Constructs an empty <CODE>Cell</CODE> (for internal use only).
            
             @param   dummy   a dummy value
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.rtf.RtfTableCell.#ctor(iTextSharp.text.IElement)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.rtf.RtfTableCell.#ctor(System.String)" -->
        <member name="M:iTextSharp.text.rtf.RtfTableCell.#ctor(System.util.Properties)">
             Returns a <CODE>Cell</CODE> that has been constructed taking in account
             the value of some <VAR>attributes</VAR>.
            
             @param   attributes      Some attributes
        </member>
        <member name="M:iTextSharp.text.rtf.RtfTableCell.GetStyleControlWord(System.Int32)">
            Get the RTF control word for <code>style</code>
            @param style a style value
            @return a byte array corresponding with a style control word
        </member>
        <member name="P:iTextSharp.text.rtf.RtfTableCell.BorderWidth">
             Set all four borders to <code>f</code> width
            
             @param f the desired width
        </member>
        <member name="P:iTextSharp.text.rtf.RtfTableCell.TopBorderWidth">
             Set the top border to <code>f</code> width
            
             @param f the desired width
        </member>
        <member name="P:iTextSharp.text.rtf.RtfTableCell.LeftBorderWidth">
             Set the left border to <code>f</code> width
            
             @param f the desired width
        </member>
        <member name="P:iTextSharp.text.rtf.RtfTableCell.RightBorderWidth">
             Set the right border to <code>f</code> width
            
             @param f the desired width
        </member>
        <member name="P:iTextSharp.text.rtf.RtfTableCell.BottomBorderWidth">
             Set the bottom border to <code>f</code> width
            
             @param f the desired width
        </member>
        <member name="P:iTextSharp.text.rtf.RtfTableCell.BorderStyle">
             Set all four borders to style defined by <code>style</code>
            
             @param style the desired style
        </member>
        <member name="P:iTextSharp.text.rtf.RtfTableCell.TopBorderStyle">
             Set the top border to style defined by <code>style</code>
            
             @param style the desired style
        </member>
        <member name="P:iTextSharp.text.rtf.RtfTableCell.LeftBorderStyle">
             Set the left border to style defined by <code>style</code>
            
             @param style the desired style
        </member>
        <member name="P:iTextSharp.text.rtf.RtfTableCell.RightBorderStyle">
             Set the right border to style defined by <code>style</code>
            
             @param style the desired style
        </member>
        <member name="P:iTextSharp.text.rtf.RtfTableCell.BottomBorderStyle">
             Set the bottom border to style defined by <code>style</code>
            
             @param style the desired style
        </member>
        <member name="T:iTextSharp.text.rtf.RtfTOC">
             This class can be used to insert a table of contents into 
             the RTF document.
             Therefore the field TOC is used. It works great in Word 2000. 
             StarOffice doesn't support such fields. Other word version
             are not tested yet.
             
             ONLY FOR USE WITH THE RtfWriter NOT with the RtfWriter2.
            
             This class is based on the RtfWriter-package from Mark Hall.
             @author <a href="mailto:Steffen.Stundzig@smb-tec.com">Steffen.Stundzig@smb-tec.com</a> 
             @version $Revision: 1.22 $Date: 2004/12/14 15:14:43 $
        </member>
        <member name="M:iTextSharp.text.rtf.RtfTOC.#ctor(System.String,iTextSharp.text.Font)">
            @param tocName the headline of the table of contents
            @param tocFont the font for the headline
        </member>
        <member name="M:iTextSharp.text.rtf.RtfTOC.Write(iTextSharp.text.rtf.RtfWriter,System.IO.Stream)">
            @see com.lowagie.text.rtf.RtfField#write(com.lowagie.text.rtf.RtfWriter, java.io.Stream)
        </member>
        <member name="M:iTextSharp.text.rtf.RtfTOC.AddTOCAsTOCEntry(System.String,iTextSharp.text.Font)">
            Add a toc entry
            @param entryName the name of the entry
            @param entryFont the font to be used for the entry
        </member>
        <member name="M:iTextSharp.text.rtf.RtfTOC.SetDefaultText(System.String)">
            Sets the default text of the Table of Contents
            @param text the default text
        </member>
        <member name="T:iTextSharp.text.rtf.RtfTOCEntry">
             This class can be used to insert entries for a table of contents into 
             the RTF document.
             
             ONLY FOR USE WITH THE RtfWriter NOT with the RtfWriter2.
            
             This class is based on the RtfWriter-package from Mark Hall.
             @author <a href="mailto:Steffen.Stundzig@smb-tec.com">Steffen.Stundzig@smb-tec.com</a> 
             @version $Revision: 1.22 $Date: 2004/12/14 15:14:44 $
        </member>
        <member name="M:iTextSharp.text.rtf.RtfTOCEntry.#ctor(System.String,iTextSharp.text.Font)">
            Constructs an entry for the Table of Contents
            @param content the content of the entry
            @param contentFont the font
        </member>
        <member name="M:iTextSharp.text.rtf.RtfTOCEntry.#ctor(System.String,iTextSharp.text.Font,System.String,iTextSharp.text.Font)">
            Constructs an entry for the Table of Contents
            @param content the content of the entry
            @param contentFont the font
            @param entryName name of the entry
            @param entryFont font of the entryname
        </member>
        <member name="M:iTextSharp.text.rtf.RtfTOCEntry.Write(iTextSharp.text.rtf.RtfWriter,System.IO.Stream)">
            @see com.lowagie.text.rtf.RtfField#write(com.lowagie.text.rtf.RtfWriter, java.io.Stream)
        </member>
        <member name="M:iTextSharp.text.rtf.RtfTOCEntry.HideText">
            sets the hideText value to true 
        </member>
        <member name="M:iTextSharp.text.rtf.RtfTOCEntry.HidePageNumber">
            sets the hidePageNumber value to true 
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:iTextSharp.text.rtf.RtfWriter" -->
        <member name="F:iTextSharp.text.rtf.RtfWriter.escape">
            This is the escape character which introduces RTF tags. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.delimiter">
            This is the delimiter between RTF tags and normal text. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.commaDelimiter">
            This is another delimiter between RTF tags and normal text. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.openGroup">
            This is the character for beginning a new group. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.closeGroup">
            This is the character for closing a group. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.fontNumber">
            Font number tag. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.bold">
            Bold tag. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.italic">
            Italic tag. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.TWIPSFACTOR">
            Factor to use when converting. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.extendedEscape">
            This is another escape character which introduces RTF tags. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.docBegin">
            RTF begin and version. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.ansi">
            RTF encoding. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.ansiCodepage">
            RTF encoding codepage. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.fontTable">
            Begin the font table tag. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.fontSize">
            Font size tag. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.fontColor">
            Font color tag. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.fontModern">
            Modern font tag. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.fontSwiss">
            Swiss font tag. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.fontRoman">
            Roman font tag. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.fontTech">
            Tech font tag. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.fontCharset">
            Font charset tag. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.fontCourier">
            Font Courier tag. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.fontArial">
            Font Arial tag. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.fontSymbol">
            Font Symbol tag. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.fontTimesNewRoman">
            Font Times New Roman tag. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.fontWindings">
            Font Windings tag. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.defaultFont">
            Default Font. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.firstIndent">
            First indent tag. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.listIndent">
            Left indent tag. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.rightIndent">
            Right indent tag. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.sectionDefaults">
            Reset section defaults tag. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.section">
            Begin new section tag. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.paragraphDefaults">
            Reset paragraph defaults tag. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.paragraph">
            Begin new paragraph tag. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.sectionPageWidth">
            Page width of a section. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.sectionPageHeight">
            Page height of a section. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.listtableGroup">
            Begin the List Table 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.listoverridetableGroup">
            Begin the List Override Table 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.listDefinition">
            Begin a List definition 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.listTemplateID">
            List Template ID 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.hybridList">
            RTF Writer outputs hybrid lists 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.listLevelDefinition">
            Current List level 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.listLevelTypeOld">
            Level numbering (old) 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.listLevelTypeNew">
            Level numbering (new) 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.listLevelAlignOld">
            Level alignment (old) 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.listLevelAlignNew">
            Level alignment (new) 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.listLevelStartAt">
            Level starting number 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.listLevelTextDefinition">
            Level text group 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.listLevelTextLength">
            Filler for Level Text Length 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.listLevelTextStyleNumbers">
            Level Text Numbering Style 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.listLevelTextStyleBullet">
            Level Text Bullet Style 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.listLevelNumbersDefinition">
            Level Numbers Definition 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.listLevelNumbers">
            Filler for Level Numbers 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.tabStop">
            Tab Stop 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.listBegin">
            Actual list begin 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.listCurrentLevel">
            Current list level 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.listTextOld">
            List text group for older browsers 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.tab">
            Tab 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.listBulletOld">
            Old Bullet Style 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.listID">
            Current List ID 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.listOverride">
            List override 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.listOverrideCount">
            Number of overrides 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.underline">
            Underline tag. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.strikethrough">
            Strikethrough tag. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.alignLeft">
            Text alignment left tag. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.alignCenter">
            Text alignment center tag. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.alignRight">
            Text alignment right tag. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.alignJustify">
            Text alignment justify tag. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.colorTable">
            Begin colour table tag. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.colorRed">
            Red value tag. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.colorGreen">
            Green value tag. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.colorBlue">
            Blue value tag. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.infoBegin">
            Begin the info group tag.
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.metaAuthor">
            Author tag. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.metaSubject">
            Subject tag. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.metaKeywords">
            Keywords tag. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.metaTitle">
            Title tag. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.metaProducer">
            Producer tag. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.metaCreationDate">
            Creation Date tag. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.year">
            Year tag. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.month">
            Month tag. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.day">
            Day tag. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.hour">
            Hour tag. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.minute">
            Minute tag. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.second">
            Second tag. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.startSuper">
            Start superscript. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.startSub">
            Start subscript. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.endSuperSub">
            End super/sub script. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.titlePage">
            Title Page tag 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.facingPages">
            Facing pages tag 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.headerBegin">
            Begin header group tag. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.footerBegin">
            Begin footer group tag. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.rtfPaperWidth">
            Paper width tag. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.rtfPaperHeight">
            Paper height tag. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.rtfMarginLeft">
            Margin left tag. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.rtfMarginRight">
            Margin right tag. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.rtfMarginTop">
            Margin top tag. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.rtfMarginBottom">
            Margin bottom tag. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.newPage">
            New Page tag. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.landscapeTag1">
            Document Landscape tag 1. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.landscapeTag2">
            Document Landscape tag 2. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.annotationID">
            Annotation ID tag. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.annotationAuthor">
            Annotation Author tag. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.annotation">
            Annotation text tag. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.pictureGroup">
            Begin the main Picture group tag 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.picture">
            Begin the picture tag 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.picturePNG">
            PNG Image 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.pictureJPEG">
            JPEG Image 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.pictureBMP">
            BMP Image 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.pictureWMF">
            WMF Image 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.pictureWidth">
            Picture width 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.pictureHeight">
            Picture height 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.pictureScaleX">
            Picture scale horizontal percent 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.pictureScaleY">
            Picture scale vertical percent 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.field">
            Begin field tag 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.fieldContent">
            Content fo the field 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.fieldPage">
            PAGE numbers 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.fieldHyperlink">
            HYPERLINK field 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.fieldDisplay">
            Last page number (not used) 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.fontList">
            This <code>ArrayList</code> contains all fonts used in the document. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.colorList">
            This <code>ArrayList</code> contains all colours used in the document. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.content">
            This <code>MemoryStream</code> contains the main body of the document. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.info">
            This <code>MemoryStream</code> contains the information group. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.listtable">
            This <code>MemoryStream</code> contains the list table. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.listoverride">
            This <code>MemoryStream</code> contains the list override table. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.header">
            Document header. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.footer">
            Document footer. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.marginLeft">
            Left margin. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.marginRight">
            Right margin. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.marginTop">
            Top margin. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.marginBottom">
            Bottom margin. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.pageWidth">
            Page width. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.pageHeight">
            Page height. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.currentListID">
            Current list ID. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.listIds">
            List of current Lists. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.listLevel">
            Current List Level. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.maxListLevel">
            Current maximum List Level. 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.writeTOC">
            Write a TOC 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.hasTitlePage">
            Special title page 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.inHeaderFooter">
            Currently writing either Header or Footer 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.inTable">
            Currently writing a Table 
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter.landscape">
            Landscape or Portrait Document 
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter.#ctor(iTextSharp.text.Document,System.IO.Stream)">
             Constructs a <CODE>RtfWriter</CODE>.
            
             @param doc         The <CODE>Document</CODE> that is to be written as RTF
             @param os          The <CODE>Stream</CODE> the writer has to write to.
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter.SetGenerateTOCEntries(System.Boolean)">
             This method controls whether TOC entries are automatically generated
            
             @param writeTOC    bool value indicating whether a TOC is to be generated
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter.GetGeneratingTOCEntries">
             Gets the current setting of writeTOC
            
             @return    bool value indicating whether a TOC is being generated
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter.SetHasTitlePage(System.Boolean)">
             This method controls whether the first page is a title page
            
             @param hasTitlePage    bool value indicating whether the first page is a title page
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter.GetHasTitlePage">
             Gets the current setting of hasTitlePage
            
             @return    bool value indicating whether the first page is a title page
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter.SetLandscape(System.Boolean)">
             Explicitly sets the page format to use.
             Otherwise the RtfWriter will try to guess the format by comparing pagewidth and pageheight
            
             @param landscape bool value indicating whether we are using landscape format or not
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter.GetLandscape">
             Returns the current landscape setting
            
             @return bool value indicating the current page format
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter.GetInstance(iTextSharp.text.Document,System.IO.Stream)">
             Gets an instance of the <CODE>RtfWriter</CODE>.
            
             @param document    The <CODE>Document</CODE> that has to be written
             @param os  The <CODE>Stream</CODE> the writer has to write to.
             @return    a new <CODE>RtfWriter</CODE>
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter.Open">
            Signals that the <CODE>Document</CODE> has been opened and that
            <CODE>Elements</CODE> can be added.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:iTextSharp.text.rtf.RtfWriter.Close" -->
        <member name="M:iTextSharp.text.rtf.RtfWriter.ResetFooter">
            Resets the footer.
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter.ResetHeader">
            Resets the header.
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter.NewPage">
             Tells the <code>RtfWriter</code> that a new page is to be begun.
            
             @return <code>true</code> if a new Page was begun.
             @throws DocumentException if the Document was not open or had been closed.
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter.SetMargins(System.Single,System.Single,System.Single,System.Single)">
             Sets the page margins
            
             @param marginLeft The left margin
             @param marginRight The right margin
             @param marginTop The top margin
             @param marginBottom The bottom margin
            
             @return <code>true</code> if the page margins were set.
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter.SetPageSize(iTextSharp.text.Rectangle)">
             Sets the page size
            
             @param pageSize A <code>Rectangle</code> specifying the page size
            
             @return <code>true</code> if the page size was set
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter.WriteTOC(System.String,iTextSharp.text.Font,System.Boolean,iTextSharp.text.Font)">
             Write the table of contents.
            
             @param tocTitle The title that will be displayed above the TOC
             @param titleFont The <code>Font</code> that will be used for the tocTitle
             @param showTOCasEntry Set this to true if you want the TOC to appear as an entry in the TOC
             @param showTOCEntryFont Use this <code>Font</code> to specify what Font to use when showTOCasEntry is true
            
             @return <code>true</code> if the TOC was added.
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter.Add(iTextSharp.text.IElement)">
            Signals that an <CODE>Element</CODE> was added to the <CODE>Document</CODE>.
            
            @param element A high level object to add
            @return    <CODE>true</CODE> if the element was added, <CODE>false</CODE> if not.
            @throws    DocumentException   if a document isn't open yet, or has been closed
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter.AddElement(iTextSharp.text.IElement,System.IO.MemoryStream)">
            Adds an <CODE>Element</CODE> to the <CODE>Document</CODE>.
            @param element the high level element to add
            @param outp the outputstream to which the RTF data is sent
            @return    <CODE>true</CODE> if the element was added, <CODE>false</CODE> if not.
            @throws    DocumentException   if a document isn't open yet, or has been closed
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter.WriteSection(iTextSharp.text.Section,System.IO.MemoryStream)">
             Write the beginning of a new <code>Section</code>
            
             @param sectionElement The <code>Section</code> be written
             @param outp The <code>MemoryStream</code> to write to
            
             @throws IOException
             @throws DocumentException
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter.WriteParagraph(iTextSharp.text.Paragraph,System.IO.MemoryStream)">
             Write the beginning of a new <code>Paragraph</code>
            
             @param paragraphElement The <code>Paragraph</code> to be written
             @param outp The <code>MemoryStream</code> to write to
            
             @throws IOException
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter.WritePhrase(iTextSharp.text.Phrase,System.IO.MemoryStream)">
             Write a <code>Phrase</code>.
            
             @param phrase  The <code>Phrase</code> item to be written
             @param outp     The <code>MemoryStream</code> to write to
            
             @throws IOException
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter.WriteAnchor(iTextSharp.text.Anchor,System.IO.MemoryStream)">
             Write an <code>Anchor</code>. Anchors are treated like Phrases.
            
             @param anchor  The <code>Chunk</code> item to be written
             @param outp     The <code>MemoryStream</code> to write to
            
             @throws IOException
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter.WriteChunk(iTextSharp.text.Chunk,System.IO.MemoryStream)">
             Write a <code>Chunk</code> and all its font properties.
            
             @param chunk The <code>Chunk</code> item to be written
             @param outp The <code>MemoryStream</code> to write to
            
             @throws IOException
             @throws DocumentException
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter.WriteListElement(iTextSharp.text.ListItem,System.IO.MemoryStream)">
             Write a <code>ListItem</code>
            
             @param listItem The <code>ListItem</code> to be written
             @param outp The <code>MemoryStream</code> to write to
            
             @throws IOException
             @throws DocumentException
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter.WriteList(iTextSharp.text.List,System.IO.MemoryStream)">
             Write a <code>List</code>
            
             @param list The <code>List</code> to be written
             @param outp The <code>MemoryStream</code> to write to
            
             @throws    IOException
             @throws    DocumentException
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter.WriteTable(iTextSharp.text.Table,System.IO.MemoryStream)">
             Write a <code>Table</code>.
            
             @param table The <code>table</code> to be written
             @param outp The <code>MemoryStream</code> to write to
            
             Currently no nesting of tables is supported. If a cell contains anything but a Cell Object it is ignored.
            
             @throws IOException
             @throws DocumentException
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter.WriteImage(iTextSharp.text.Image,System.IO.MemoryStream)">
             Write an <code>Image</code>.
            
             @param image The <code>image</code> to be written
             @param outp The <code>MemoryStream</code> to write to
            
             At the moment only PNG and JPEG Images are supported.
            
             @throws IOException
             @throws DocumentException
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter.WriteAnnotation(iTextSharp.text.Annotation,System.IO.MemoryStream)">
             Write an <code>Annotation</code>
            
             @param annotationElement The <code>Annotation</code> to be written
             @param outp The <code>MemoryStream</code> to write to
            
             @throws IOException
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter.WriteMeta(System.Byte[],iTextSharp.text.Meta)">
             Add a <code>Meta</code> element. It is written to the Inforamtion Group
             and merged with the main <code>MemoryStream</code> when the
             Document is closed.
            
             @param metaName The type of <code>Meta</code> element to be added
             @param meta The <code>Meta</code> element to be added
            
             Currently only the Meta Elements Author, Subject, Keywords, Title, Producer and CreationDate are supported.
            
             @throws IOException
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter.WriteFormatedDateTime(System.String)">
             Writes a date. The date is formated <strong>Year, Month, Day, Hour, Minute, Second</strong>
            
             @param date The date to be written
            
             @throws IOException
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter.AddFont(iTextSharp.text.Font)">
             Add a new <code>Font</code> to the list of fonts. If the <code>Font</code>
             already exists in the list of fonts, then it is not added again.
            
             @param newFont The <code>Font</code> to be added
            
             @return The index of the <code>Font</code> in the font list
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter.AddColor(iTextSharp.text.Color)">
             Add a new <code>Color</code> to the list of colours. If the <code>Color</code>
             already exists in the list of colours, then it is not added again.
            
             @param newColor The <code>Color</code> to be added
            
             @return The index of the <code>color</code> in the colour list
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter.WriteDocument">
             Merge all the different <code>ArrayList</code>s and <code>MemoryStream</code>s
             to the final <code>MemoryStream</code>
            
             @return <code>true</code> if all information was sucessfully written to the <code>MemoryStream</code>
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter.WriteDocumentIntro">
            Write the Rich Text file settings
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter.WriteFontList">
            Write the font list to the final <code>MemoryStream</code>
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter.WriteColorList">
            Write the colour list to the final <code>MemoryStream</code>
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter.WriteInfoGroup">
            Write the Information Group to the final <code>MemoryStream</code>
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter.WriteList">
            Write the listtable and listoverridetable to the final <code>MemoryStream</code>
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter.WriteInt(System.IO.Stream,System.Int32)">
             Write an integer
            
             @param outp The <code>OuputStream</code> to which the <code>int</code> value is to be written
             @param i The <code>int</code> value to be written
             @throws IOException
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter.GetRandomInt">
             Get a random integer.
             This returns a <b>unique</b> random integer to be used with listids.
            
             @return Random <code>int</code> value.
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter.WriteHeadersFooters(System.IO.MemoryStream)">
             Write the current header and footer to a <code>MemoryStream</code>
            
             @param os        The <code>MemoryStream</code> to which the header and footer will be written.
             @throws IOException
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter.WriteHeaderFooter(iTextSharp.text.HeaderFooter,System.Byte[],System.IO.MemoryStream)">
             Write a <code>HeaderFooter</code> to a <code>MemoryStream</code>
            
             @param headerFooter  The <code>HeaderFooter</code> object to be written.
             @param hfType        The type of header or footer to be added.
             @param target        The <code>MemoryStream</code> to which the <code>HeaderFooter</code> will be written.
             @throws IOException
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter.WriteDocumentFormat">
             Write the <code>Document</code>'s Paper and Margin Size
             to the final <code>MemoryStream</code>
            @throws IOException
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter.InitDefaults">
            Initialise all helper classes.
            Clears alls lists, creates new <code>MemoryStream</code>'s
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter.WriteSectionDefaults(System.IO.MemoryStream)">
             Writes the default values for the current Section
            
             @param outp The <code>MemoryStream</code> to be written to
             @throws IOException
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter.ParseFormat(iTextSharp.text.Rectangle,System.Boolean)">
            This method tries to fit the <code>Rectangle pageSize</code> to one of the predefined PageSize rectangles.
            If a match is found the pageWidth and pageHeight will be set according to values determined from files
            generated by MS Word2000 and OpenOffice 641. If no match is found the method will try to match the rotated
            Rectangle by calling itself with the parameter rotate set to true.
            @param pageSize a rectangle defining the size of the page
            @param rotate portrait or lanscape?
            @return true if the format parsing succeeded
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter.RectEquals(iTextSharp.text.Rectangle,iTextSharp.text.Rectangle)">
            This method compares to Rectangles. They are considered equal if width and height are the same
            @param rect1
            @param rect2
            @return true if rect1 and rect2 represent the same rectangle
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter.WritingHeaderFooter">
             Returns whether we are currently writing a header or footer
            
             @return the value of inHeaderFooter
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter.FilterSpecialChar(System.String,System.Boolean)">
             Replaces special characters with their unicode values
            
             @param str The original <code>String</code>
             @param useHex
             @return The converted String
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter.SetMarginMirroring(System.Boolean)">
            @see com.lowagie.text.DocListener#setMarginMirroring(bool)
        </member>
        <member name="P:iTextSharp.text.rtf.RtfWriter.Footer">
            Adds the footer to the bottom of the <CODE>Document</CODE>.
            @param footer
        </member>
        <member name="P:iTextSharp.text.rtf.RtfWriter.Header">
            Adds the header to the top of the <CODE>Document</CODE>.
            @param header
        </member>
        <member name="T:iTextSharp.text.rtf.RtfWriter2">
             The RtfWriter allows the creation of rtf documents via the iText system
            
             Version: $Id: RtfWriter2.java,v 1.10 2005/05/24 16:26:32 hallm Exp $
             @author Mark Hall (mhall@edu.uni-klu.ac.at)
        </member>
        <member name="F:iTextSharp.text.rtf.RtfWriter2.rtfDoc">
            The RtfDocument this RtfWriter is creating
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter2.#ctor(iTextSharp.text.Document,System.IO.Stream)">
            Constructs a new RtfWriter that listens to the specified Document and
            writes its output to the Stream.
            
            @param doc The Document that this RtfWriter listens to
            @param os The Stream to write to
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter2.GetInstance(iTextSharp.text.Document,System.IO.Stream)">
            Static method to generate RtfWriters
            
            @param doc The Document that this RtfWriter listens to
            @param os The Stream to write to
            @return The new RtfWriter
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter2.ResetHeader">
            Resets the header
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter2.ResetFooter">
            Resets the footer
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter2.ResetPageCount">
            This method is not supported in the RtfWriter
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter2.Add(iTextSharp.text.Watermark)">
             This method is not supported in the RtfWriter
            
             @param wm Unused
             @return <code>false</code>
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter2.RemoveWatermark">
            This method is not supported in the RtfWriter
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter2.ClearTextWrap">
            This method is not supported in the RtfWriter
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter2.Open">
            Opens the RtfDocument
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter2.Close">
            Closes the RtfDocument. This causes the document to be written
            to the specified Stream
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter2.Add(iTextSharp.text.IElement)">
             Adds an Element to the Document
            
             @param element The element to be added
             @return <code>false</code>
             @throws DocumentException
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter2.NewPage">
             Adds a page break
            
             @return <code>false</code>
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter2.SetMargins(System.Single,System.Single,System.Single,System.Single)">
             Sets the page margins
            
             @param left The left margin
             @param right The right margin
             @param top The top margin
             @param bottom The bottom margin
             @return <code>false</code>
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter2.SetPageSize(iTextSharp.text.Rectangle)">
             Sets the size of the page
            
             @param rect A Rectangle representing the page
             @return <code>false</code>
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter2.SetAutogenerateTOCEntries(System.Boolean)">
            Whether to automagically generate table of contents entries when
            adding Chapters or Sections.
            
            @param autogenerate Whether to automatically generate TOC entries
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter2.SetDataCacheStyle(System.Int32)">
            Sets the rtf data cache style to use. Valid values are given in the 
            RtfDataCache class.
             
            @param dataCacheStyle The style to use.
            @throws DocumentException If data has already been written into the data cache.
            @throws IOException If the disk cache could not be initialised.
        </member>
        <member name="M:iTextSharp.text.rtf.RtfWriter2.GetDocumentSettings">
            Gets the RtfDocumentSettings that specify how the rtf document is generated.
            
            @return The current RtfDocumentSettings.
        </member>
        <member name="P:iTextSharp.text.rtf.RtfWriter2.Header">
            Sets the header to use
            
            @param hf The HeaderFooter to use
        </member>
        <member name="P:iTextSharp.text.rtf.RtfWriter2.Footer">
            Sets the footer to use
            
            @param hf The HeaderFooter to use
        </member>
        <member name="P:iTextSharp.text.rtf.RtfWriter2.PageCount">
            This method is not supported in the RtfWriter
            @param i Unused
        </member>
        <member name="T:iTextSharp.text.xml.TagMap">
            <summary>
            The <CODE>TagMap</CODE>-class maps several XHTML-tags to iText-objects.
            </summary>
        </member>
        <member name="M:iTextSharp.text.xml.TagMap.#ctor(System.String)">
            <summary>
            Constructs a Tagmap object
            </summary>
            <param name="tagfile">the file of tags to parse</param>
        </member>
        <member name="M:iTextSharp.text.xml.TagMap.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructs a Tagmap object
            </summary>
            <param name="tagfile">the file of tags to parse</param>
        </member>
        <member name="M:iTextSharp.text.xml.TagMap.Init(System.Xml.XmlDocument)">
            <summary>
            Parses the xml document
            </summary>
            <param name="tagfile"></param>
        </member>
        <member name="M:iTextSharp.text.xml.TagMap.Init(System.String)">
            <summary>
            Parses the xml document
            </summary>
            <param name="tagfile"></param>
        </member>
        <member name="F:iTextSharp.text.xml.TagMap.AttributeHandler.TAG">
            <summary> This is a tag </summary>
        </member>
        <member name="F:iTextSharp.text.xml.TagMap.AttributeHandler.ATTRIBUTE">
            <summary> This is a tag </summary>
        </member>
        <member name="F:iTextSharp.text.xml.TagMap.AttributeHandler.NAME">
            <summary> This is an attribute </summary>
        </member>
        <member name="F:iTextSharp.text.xml.TagMap.AttributeHandler.ALIAS">
            <summary> This is an attribute </summary>
        </member>
        <member name="F:iTextSharp.text.xml.TagMap.AttributeHandler.VALUE">
            <summary> This is an attribute </summary>
        </member>
        <member name="F:iTextSharp.text.xml.TagMap.AttributeHandler.CONTENT">
            <summary> This is an attribute </summary>
        </member>
        <member name="F:iTextSharp.text.xml.TagMap.AttributeHandler.tagMap">
            <summary> This is the tagmap using the AttributeHandler </summary>
        </member>
        <member name="F:iTextSharp.text.xml.TagMap.AttributeHandler.currentPeer">
            <summary> This is the current peer. </summary>
        </member>
        <member name="M:iTextSharp.text.xml.TagMap.AttributeHandler.#ctor(System.Collections.Hashtable)">
            <summary>
            Constructs a new SAXiTextHandler that will translate all the events
            triggered by the parser to actions on the <CODE>Document</CODE>-object.
            </summary>
            <param name="tagMap">A Hashtable containing XmlPeer-objects</param>
        </member>
        <member name="M:iTextSharp.text.xml.TagMap.AttributeHandler.StartElement(System.String,System.String,System.String,System.Collections.Hashtable)">
            <summary>
            This method gets called when a start tag is encountered.
            </summary>
            <param name="tag">the name of the tag that is encountered</param>
            <param name="lname"></param>
            <param name="n"></param>
            <param name="attrs">the list of attributes</param>
        </member>
        <member name="M:iTextSharp.text.xml.TagMap.AttributeHandler.IgnorableWhitespace(System.Char[],System.Int32,System.Int32)">
            <summary>
            This method gets called when ignorable white space encountered.
            </summary>
            <param name="ch">an array of characters</param>
            <param name="start">the start position in the array</param>
            <param name="length">the number of characters to read from the array</param>
        </member>
        <member name="M:iTextSharp.text.xml.TagMap.AttributeHandler.Characters(System.String,System.Int32,System.Int32)">
            <summary>
            This method gets called when characters are encountered.
            </summary>
            <param name="content">an array of characters</param>
            <param name="start">the start position in the array</param>
            <param name="length">the number of characters to read from the array</param>
        </member>
        <member name="M:iTextSharp.text.xml.TagMap.AttributeHandler.EndElement(System.String,System.String,System.String)">
            <summary>
            This method gets called when an end tag is encountered.
            </summary>
            <param name="tag">the name of the tag that ends</param>
            <param name="lname"></param>
            <param name="name"></param>
        </member>
        <member name="T:iTextSharp.text.xml.XmlWriter">
            <summary>
            A <CODE>DocWriter</CODE> class for XML (Remark: this class is not finished yet!).
            </summary>
            <remarks>
            An <CODE>XmlWriter</CODE> can be added as a <CODE>DocListener</CODE>
            to a certain <CODE>Document</CODE> by getting an instance.
            Every <CODE>Element</CODE> added to the original <CODE>Document</CODE>
            will be written to the <CODE>Stream</CODE> of this <CODE>XmlWriter</CODE>.
            </remarks>
            <example>
            <BLOCKQUOTE><PRE>
            // creation of the document with a certain size and certain margins
            Document document = new Document(PageSize.A4, 50, 50, 50, 50);
            try {
                // this will write XML to the Standard Stream
                <STRONG>XmlWriter.GetInstance(document, Console.Out);</STRONG>
                // this will write XML to a file called text.html
                <STRONG>XmlWriter.GetInstance(document, new FileStream("text.xml", FileMode.Create));</STRONG>
                // this will write XML to for instance the Stream of a System.Web.HttpResponse-object
                <STRONG>XmlWriter.GetInstance(document, Response.Stream);</STRONG>
            }
            catch (DocumentException de) {
                System.err.Println(de.Message);
            }
            // this will close the document and all the OutputStreams listening to it
            <STRONG>document.Close();</STRONG>
            </PRE></BLOCKQUOTE>
            </example>
        </member>
        <member name="F:iTextSharp.text.xml.XmlWriter.PROLOG">
            <summary> This is the first line of the XML page. </summary>
        </member>
        <member name="F:iTextSharp.text.xml.XmlWriter.DOCTYPE">
            <summary> This is the reference to the DTD. </summary>
        </member>
        <member name="F:iTextSharp.text.xml.XmlWriter.DTD">
            <summary> This is the place where the DTD is located. </summary>
        </member>
        <member name="F:iTextSharp.text.xml.XmlWriter.xmlCode">
            <summary> This is an array containing character to XML translations. </summary>
        </member>
        <member name="M:iTextSharp.text.xml.XmlWriter.#cctor">
            <summary>
            Static Constructor
            </summary>
        </member>
        <member name="F:iTextSharp.text.xml.XmlWriter.itext">
            <summary> This is the meta information of the document. </summary>
        </member>
        <member name="M:iTextSharp.text.xml.XmlWriter.#ctor(iTextSharp.text.Document,System.IO.Stream)">
            <summary>
            Constructs an <CODE>XmlWriter</CODE>.
            </summary>
            <param name="doc">The <CODE>Document</CODE> that has to be written as XML</param>
            <param name="os">The <CODE>Stream</CODE> the writer has to write to.</param>
        </member>
        <member name="M:iTextSharp.text.xml.XmlWriter.#ctor(iTextSharp.text.Document,System.IO.Stream,System.String)">
            <summary>
            Constructs an <CODE>XmlWriter</CODE>.
            </summary>
            <param name="doc">The <CODE>Document</CODE> that has to be written as XML</param>
            <param name="os">The <CODE>Stream</CODE> the writer has to write to.</param>
            <param name="dtd">The DTD to use</param>
        </member>
        <member name="M:iTextSharp.text.xml.XmlWriter.GetInstance(iTextSharp.text.Document,System.IO.Stream)">
            <summary>
            Gets an instance of the <CODE>XmlWriter</CODE>.
            </summary>
            <param name="document">The <CODE>Document</CODE> that has to be written</param>
            <param name="os">The <CODE>Stream</CODE> the writer has to write to.</param>
            <returns>a new <CODE>XmlWriter</CODE></returns>
        </member>
        <member name="M:iTextSharp.text.xml.XmlWriter.GetInstance(iTextSharp.text.Document,System.IO.Stream,System.String)">
            <summary>
            Gets an instance of the <CODE>XmlWriter</CODE>.
            </summary>
            <param name="document">The <CODE>Document</CODE> that has to be written</param>
            <param name="os">The <CODE>Stream</CODE> the writer has to write to.</param>
            <param name="dtd">The DTD to use</param>
            <returns>a new <CODE>XmlWriter</CODE></returns>
        </member>
        <member name="M:iTextSharp.text.xml.XmlWriter.Add(iTextSharp.text.IElement)">
            <summary>
            Signals that an <CODE>Element</CODE> was added to the <CODE>Document</CODE>.
            </summary>
            <param name="element">the element to add</param>
            <returns><CODE>true</CODE> if the element was added, <CODE>false</CODE> if not.</returns>
        </member>
        <member name="M:iTextSharp.text.xml.XmlWriter.Open">
            <summary>
            Signals that the <CODE>Document</CODE> has been opened and that
            <CODE>Elements</CODE> can be added.
            </summary>
        </member>
        <member name="M:iTextSharp.text.xml.XmlWriter.NewPage">
            <summary>
            Signals that an new page has to be LTed.
            </summary>
            <returns><CODE>true</CODE> if the page was added, <CODE>false</CODE> if not.</returns>
        </member>
        <member name="M:iTextSharp.text.xml.XmlWriter.Close">
            <summary>
            Signals that the <CODE>Document</CODE> was closed and that no other
            <CODE>Elements</CODE> will be added.
            </summary>
        </member>
        <member name="M:iTextSharp.text.xml.XmlWriter.Write(iTextSharp.text.IElement,System.Int32)">
            <summary>
            Writes the XML representation of an element.
            </summary>
            <param name="element">the element</param>
            <param name="indent">the indentation</param>
        </member>
        <member name="M:iTextSharp.text.xml.XmlWriter.WriteSection(iTextSharp.text.Section,System.Int32)">
            <summary>
            Writes the XML representation of a section.
            </summary>
            <param name="section">the section to write</param>
            <param name="indent">the indentation</param>
        </member>
        <member name="M:iTextSharp.text.xml.XmlWriter.Write(iTextSharp.text.Rectangle)">
            <summary>
            Writes the XML representation of this <CODE>Rectangle</CODE>.
            </summary>
            <param name="rectangle">a <CODE>Rectangle</CODE></param>
        </member>
        <member name="M:iTextSharp.text.xml.XmlWriter.Encode(System.String,System.Int32)">
            <summary>
            Encodes a <CODE>String</CODE>.
            </summary>
            <param name="str">the <CODE>String</CODE> to encode</param>
            <param name="indent"></param>
            <returns>the encoded <CODE>String</CODE></returns>
        </member>
        <member name="M:iTextSharp.text.xml.XmlWriter.AddTabs(System.Text.StringBuilder,System.Int32)">
            <summary>
            Adds a number of tabs to a <CODE>StringBuilder</CODE>.
            </summary>
            <param name="buf">the StringBuilder</param>
            <param name="indent">the number of tabs to add</param>
        </member>
        <member name="M:iTextSharp.text.xml.XmlWriter.Write(iTextSharp.text.Font)">
            <summary>
            Writes the XML representation of a <CODE>Font</CODE>.
            </summary>
            <param name="font">a <CODE>Font</CODE></param>
        </member>
        <member name="T:iTextSharp.text.Anchor">
            <summary>
            An Anchor can be a reference or a destination of a reference.
            </summary>
            <remarks>
            An Anchor is a special kind of <see cref="T:iTextSharp.text.Phrase"/>.
            It is constructed in the same way.
            </remarks>
            <seealso cref="T:iTextSharp.text.Element"/>
            <seealso cref="T:iTextSharp.text.Phrase"/>
        </member>
        <member name="T:iTextSharp.text.Phrase">
            <summary>
            A Phrase is a series of Chunks.
            </summary>
            <remarks>
            A Phrase has a main Font, but some chunks
            within the phrase can have a Font that differs from the
            main Font. All the Chunks in a Phrase
            have the same leading.
            </remarks>
            <example>
            <code>
            // When no parameters are passed, the default leading = 16
            <strong>Phrase phrase0 = new Phrase();
            Phrase phrase1 = new Phrase("this is a phrase");</strong>
            // In this example the leading is passed as a parameter
            <strong>Phrase phrase2 = new Phrase(16, "this is a phrase with leading 16");</strong>
            // When a Font is passed (explicitely or embedded in a chunk), the default leading = 1.5 * size of the font
            <strong>Phrase phrase3 = new Phrase("this is a phrase with a red, normal font Courier, size 12", FontFactory.GetFont(FontFactory.COURIER, 12, Font.NORMAL, new Color(255, 0, 0)));
            Phrase phrase4 = new Phrase(new Chunk("this is a phrase"));
            Phrase phrase5 = new Phrase(18, new Chunk("this is a phrase", FontFactory.GetFont(FontFactory.HELVETICA, 16, Font.BOLD, new Color(255, 0, 0)));</strong>
            </code>
            </example>
        </member>
        <member name="F:iTextSharp.text.Phrase.leading">
            <summary>This is the leading of this phrase.</summary>
        </member>
        <member name="F:iTextSharp.text.Phrase.font">
            <summary> This is the font of this phrase. </summary>
        </member>
        <member name="F:iTextSharp.text.Phrase.markupAttributes">
            <summary> Contains extra markupAttributes </summary>
        </member>
        <member name="M:iTextSharp.text.Phrase.#ctor(System.Boolean)">
            Constructs a Phrase that can be used in the static GetInstance() method.
            @param    dummy    a dummy parameter
        </member>
        <member name="M:iTextSharp.text.Phrase.#ctor">
            <summary>
            Constructs a Phrase without specifying a leading.
            </summary>
            <overloads>
            Has nine overloads.
            </overloads>
        </member>
        <member name="M:iTextSharp.text.Phrase.#ctor(System.Single)">
            <summary>
            Constructs a Phrase with a certain leading.
            </summary>
            <param name="leading">the leading</param>
        </member>
        <member name="M:iTextSharp.text.Phrase.#ctor(iTextSharp.text.Chunk)">
            <summary>
            Constructs a Phrase with a certain Chunk.
            </summary>
            <param name="chunk">a Chunk</param>
        </member>
        <member name="M:iTextSharp.text.Phrase.#ctor(System.Single,iTextSharp.text.Chunk)">
            <summary>
            Constructs a Phrase with a certain Chunk and a certain leading.
            </summary>
            <param name="leading">the leading</param>
            <param name="chunk">a Chunk</param>
        </member>
        <member name="M:iTextSharp.text.Phrase.#ctor(System.String)">
            <summary>
            Constructs a Phrase with a certain string.
            </summary>
            <param name="str">a string</param>
        </member>
        <member name="M:iTextSharp.text.Phrase.#ctor(System.String,iTextSharp.text.Font)">
            <summary>
            Constructs a Phrase with a certain string and a certain Font.
            </summary>
            <param name="str">a string</param>
            <param name="font">a Font</param>
        </member>
        <member name="M:iTextSharp.text.Phrase.#ctor(System.Single,System.String)">
            <summary>
            Constructs a Phrase with a certain leading and a certain string.
            </summary>
            <param name="leading">the leading</param>
            <param name="str">a string</param>
        </member>
        <member name="M:iTextSharp.text.Phrase.GetInstance(System.String)">
            Gets a special kind of Phrase that changes some characters into corresponding symbols.
            @param string
            @return a newly constructed Phrase
        </member>
        <member name="M:iTextSharp.text.Phrase.GetInstance(System.Int32,System.String)">
            Gets a special kind of Phrase that changes some characters into corresponding symbols.
            @param leading
            @param string
            @return a newly constructed Phrase
        </member>
        <member name="M:iTextSharp.text.Phrase.GetInstance(System.Int32,System.String,iTextSharp.text.Font)">
            Gets a special kind of Phrase that changes some characters into corresponding symbols.
            @param leading
            @param string
            @param font
            @return a newly constructed Phrase
        </member>
        <member name="M:iTextSharp.text.Phrase.#ctor(System.util.Properties)">
            <summary>
            Returns a Phrase that has been constructed taking in account
            the value of some attributes.
            </summary>
            <param name="attributes">some attributes</param>
        </member>
        <member name="M:iTextSharp.text.Phrase.Process(iTextSharp.text.IElementListener)">
            <summary>
            Processes the element by adding it (or the different parts) to an
            <see cref="T:iTextSharp.text.IElementListener"/>.
            </summary>
            <param name="listener">an IElementListener</param>
            <returns>true if the element was processed successfully</returns>
        </member>
        <member name="M:iTextSharp.text.Phrase.Add(System.Int32,System.Object)">
            <summary>
            Adds a Chunk, an Anchor or another Phrase
            to this Phrase.
            </summary>
            <param name="index">index at which the specified element is to be inserted</param>
            <param name="o">an object of type Chunk, Anchor, or Phrase</param>
        </member>
        <member name="M:iTextSharp.text.Phrase.Add(System.Object)">
            <summary>
            Adds a Chunk, Anchor or another Phrase
            to this Phrase.
            </summary>
            <param name="o">an object of type Chunk, Anchor or Phrase</param>
            <returns>a bool</returns>
        </member>
        <member name="M:iTextSharp.text.Phrase.AddChunk(iTextSharp.text.Chunk)">
            <summary>
            Adds a Chunk.
            </summary>
            <remarks>
            This method is a hack to solve a problem I had with phrases that were split between chunks
            in the wrong place.
            </remarks>
            <param name="chunk">a Chunk</param>
            <returns>a bool</returns>
        </member>
        <member name="M:iTextSharp.text.Phrase.AddAll(System.Collections.ICollection)">
            <summary>
            Adds a collection of Chunks
            to this Phrase.
            </summary>
            <param name="collection">a collection of Chunks, Anchors and Phrases.</param>
            <returns>true if the action succeeded, false if not.</returns>
        </member>
        <member name="M:iTextSharp.text.Phrase.AddSpecial(System.Object)">
            <summary>
            Adds a Object to the Paragraph.
            </summary>
            <param name="obj">the object to add.</param>
        </member>
        <member name="M:iTextSharp.text.Phrase.IsEmpty">
            <summary>
            Checks is this Phrase contains no or 1 empty Chunk.
            </summary>
            <returns>
            false if the Phrase
            contains more than one or more non-emptyChunks.
            </returns>
        </member>
        <member name="M:iTextSharp.text.Phrase.IsTag(System.String)">
            <summary>
            Checks if a given tag corresponds with this object.
            </summary>
            <param name="tag">the given tag</param>
            <returns>true if the tag corresponds</returns>
        </member>
        <member name="M:iTextSharp.text.Phrase.SetMarkupAttribute(System.String,System.String)">
            <summary>
            See <see cref="M:iTextSharp.text.IMarkupAttributes.SetMarkupAttribute(System.String,System.String)"/>
            </summary>
            <param name="name">attribute name</param>
            <param name="value">attribute value</param>
        </member>
        <member name="M:iTextSharp.text.Phrase.GetMarkupAttribute(System.String)">
            <summary>
            See <see cref="M:iTextSharp.text.IMarkupAttributes.GetMarkupAttribute(System.String)"/>
            </summary>
            <param name="name">attribute name</param>
            <returns>attribute value</returns>
        </member>
        <member name="P:iTextSharp.text.Phrase.Type">
            <summary>
            Gets the type of the text element.
            </summary>
            <value>a type</value>
        </member>
        <member name="P:iTextSharp.text.Phrase.Chunks">
            <summary>
            Gets all the chunks in this element.
            </summary>
            <value>an ArrayList</value>
        </member>
        <member name="P:iTextSharp.text.Phrase.LeadingDefined">
            <summary>
            Checks you if the leading of this phrase is defined.
            </summary>
            <value>true if the leading is defined</value>
        </member>
        <member name="P:iTextSharp.text.Phrase.Leading">
            <summary>
            Gets/sets the leading of this phrase.
            </summary>
            <value>the linespacing</value>
        </member>
        <member name="P:iTextSharp.text.Phrase.Font">
            <summary>
            Gets the font of the first Chunk that appears in this Phrase.
            </summary>
            <value>a Font</value>
        </member>
        <member name="P:iTextSharp.text.Phrase.MarkupAttributeNames">
            <summary>
            See <see cref="P:iTextSharp.text.IMarkupAttributes.MarkupAttributeNames"/>
            </summary>
            <value>a collection of string attribute names</value>
        </member>
        <member name="P:iTextSharp.text.Phrase.MarkupAttributes">
            <summary>
            See <see cref="P:iTextSharp.text.IMarkupAttributes.MarkupAttributes"/>
            </summary>
            <value>a Properties-object containing all the markupAttributes.</value>
        </member>
        <member name="F:iTextSharp.text.Anchor.ANCHOR">
            <summary>
            This is the anchor tag.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Anchor.name">
            <summary>
            This is the name of the Anchor.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Anchor.reference">
            <summary>
            This is the reference of the Anchor.
            </summary>
        </member>
        <member name="M:iTextSharp.text.Anchor.#ctor">
            <summary>
            Constructs an Anchor without specifying a leading.
            </summary>
            <overloads>
            Has nine overloads.
            </overloads>
        </member>
        <member name="M:iTextSharp.text.Anchor.#ctor(System.Single)">
            <summary>
            Constructs an Anchor with a certain leading.
            </summary>
            <param name="leading">the leading</param>
        </member>
        <member name="M:iTextSharp.text.Anchor.#ctor(iTextSharp.text.Chunk)">
            <summary>
            Constructs an Anchor with a certain Chunk.
            </summary>
            <param name="chunk">a Chunk</param>
        </member>
        <member name="M:iTextSharp.text.Anchor.#ctor(System.String)">
            <summary>
            Constructs an Anchor with a certain string.
            </summary>
            <param name="str">a string</param>
        </member>
        <member name="M:iTextSharp.text.Anchor.#ctor(System.String,iTextSharp.text.Font)">
            <summary>
            Constructs an Anchor with a certain string
            and a certain Font.
            </summary>
            <param name="str">a string</param>
            <param name="font">a Font</param>
        </member>
        <member name="M:iTextSharp.text.Anchor.#ctor(System.Single,iTextSharp.text.Chunk)">
            <summary>
            Constructs an Anchor with a certain Chunk
            and a certain leading.
            </summary>
            <param name="leading">the leading</param>
            <param name="chunk">a Chunk</param>
        </member>
        <member name="M:iTextSharp.text.Anchor.#ctor(System.Single,System.String)">
            <summary>
            Constructs an Anchor with a certain leading
            and a certain string.
            </summary>
            <param name="leading">the leading</param>
            <param name="str">a string</param>
        </member>
        <member name="M:iTextSharp.text.Anchor.#ctor(System.Single,System.String,iTextSharp.text.Font)">
            <summary>
            Constructs an Anchor with a certain leading,
            a certain string and a certain Font.
            </summary>
            <param name="leading">the leading</param>
            <param name="str">a string</param>
            <param name="font">a Font</param>
        </member>
        <member name="M:iTextSharp.text.Anchor.#ctor(System.util.Properties)">
            <summary>
            Returns an Anchor that has been constructed taking in account
            the value of some <var>attributes</var>.
            </summary>
            <param name="attributes">Some attributes</param>
        </member>
        <member name="M:iTextSharp.text.Anchor.Process(iTextSharp.text.IElementListener)">
            <summary>
            Processes the element by adding it (or the different parts) to an
            <see cref="T:iTextSharp.text.IElementListener"/>
            </summary>
            <param name="listener">an IElementListener</param>
            <returns>true if the element was processed successfully</returns>
        </member>
        <member name="M:iTextSharp.text.Anchor.IsTag(System.String)">
            <summary>
            Checks if a given tag corresponds with this object.
            </summary>
            <param name="tag">the given tag</param>
            <returns>true if the tag corresponds</returns>
        </member>
        <member name="P:iTextSharp.text.Anchor.Chunks">
            <summary>
            Gets all the chunks in this element.
            </summary>
            <value>an ArrayList</value>
        </member>
        <member name="P:iTextSharp.text.Anchor.Type">
            <summary>
            Gets the type of the text element.
            </summary>
            <value>a type</value>
        </member>
        <member name="P:iTextSharp.text.Anchor.Elements">
            <summary>
            <see cref="T:iTextSharp.text.Element"/> enumerator
            </summary>
            <value>an IEnumerator</value>
        </member>
        <member name="P:iTextSharp.text.Anchor.Name">
            <summary>
            Name of this Anchor.
            </summary>
        </member>
        <member name="P:iTextSharp.text.Anchor.Reference">
            <summary>
            reference of this Anchor.
            </summary>
        </member>
        <member name="P:iTextSharp.text.Anchor.Url">
            <summary>
            reference of this Anchor.
            </summary>
            <value>an Uri</value>
        </member>
        <member name="T:iTextSharp.text.Annotation">
            <summary>
            An Annotation is a little note that can be added to a page
            on a document.
            </summary>
            <seealso cref="T:iTextSharp.text.Element"/>
            <seealso cref="T:iTextSharp.text.Anchor"/>
        </member>
        <member name="F:iTextSharp.text.Annotation.TEXT">
            <summary>This is a possible annotation type.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.URL_NET">
            <summary>This is a possible annotation type.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.URL_AS_STRING">
            <summary>This is a possible annotation type.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.FILE_DEST">
            <summary>This is a possible annotation type.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.FILE_PAGE">
            <summary>This is a possible annotation type.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.NAMED_DEST">
            <summary>This is a possible annotation type.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.LAUNCH">
            <summary>This is a possible annotation type.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.SCREEN">
            <summary>This is a possible annotation type.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.TITLE">
            <summary>This is a possible attribute.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.CONTENT">
            <summary>This is a possible attribute.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.URL">
            <summary>This is a possible attribute.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.FILE">
            <summary>This is a possible attribute.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.DESTINATION">
            <summary>This is a possible attribute.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.PAGE">
            <summary>This is a possible attribute.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.NAMED">
            <summary>This is a possible attribute.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.APPLICATION">
            <summary>This is a possible attribute.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.PARAMETERS">
            <summary>This is a possible attribute.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.OPERATION">
            <summary>This is a possible attribute.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.DEFAULTDIR">
            <summary>This is a possible attribute.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.LLX">
            <summary>This is a possible attribute.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.LLY">
            <summary>This is a possible attribute.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.URX">
            <summary>This is a possible attribute.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.URY">
            <summary>This is a possible attribute.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.MIMETYPE">
            <summary>This is a possible attribute.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.annotationtype">
            <summary>This is the type of annotation.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.annotationAttributes">
            <summary>This is the title of the Annotation.</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.markupAttributes">
            <summary>Contains extra markupAttributes</summary> 
        </member>
        <member name="F:iTextSharp.text.Annotation.llx">
            <summary>This is the lower left x-value</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.lly">
            <summary>This is the lower left y-value</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.urx">
            <summary>This is the upper right x-value</summary>
        </member>
        <member name="F:iTextSharp.text.Annotation.ury">
            <summary>This is the upper right y-value</summary>
        </member>
        <member name="M:iTextSharp.text.Annotation.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs an Annotation with a certain title and some text.
            </summary>
            <param name="llx">the lower left x-value</param>
            <param name="lly">the lower left y-value</param>
            <param name="urx">the upper right x-value</param>
            <param name="ury">the upper right y-value</param>
        </member>
        <member name="M:iTextSharp.text.Annotation.#ctor(System.String,System.String)">
            <summary>
            Constructs an Annotation with a certain title and some text.
            </summary>
            <param name="title">the title of the annotation</param>
            <param name="text">the content of the annotation</param>
        </member>
        <member name="M:iTextSharp.text.Annotation.#ctor(System.String,System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs an Annotation with a certain title and some text.
            </summary>
            <param name="title">the title of the annotation</param>
            <param name="text">the content of the annotation</param>
            <param name="llx">the lower left x-value</param>
            <param name="lly">the lower left y-value</param>
            <param name="urx">the upper right x-value</param>
            <param name="ury">the upper right y-value</param>
        </member>
        <member name="M:iTextSharp.text.Annotation.#ctor(System.Single,System.Single,System.Single,System.Single,System.Uri)">
            <summary>
            Constructs an Annotation.
            </summary>
            <param name="llx">the lower left x-value</param>
            <param name="lly">the lower left y-value</param>
            <param name="urx">the upper right x-value</param>
            <param name="ury">the upper right y-value</param>
            <param name="url">the external reference</param>
        </member>
        <member name="M:iTextSharp.text.Annotation.#ctor(System.Single,System.Single,System.Single,System.Single,System.String)">
            <summary>
            Constructs an Annotation.
            </summary>
            <param name="llx">the lower left x-value</param>
            <param name="lly">the lower left y-value</param>
            <param name="urx">the upper right x-value</param>
            <param name="ury">the upper right y-value</param>
            <param name="url">the external reference</param>
        </member>
        <member name="M:iTextSharp.text.Annotation.#ctor(System.Single,System.Single,System.Single,System.Single,System.String,System.String)">
            <summary>
            Constructs an Annotation.
            </summary>
            <param name="llx">the lower left x-value</param>
            <param name="lly">the lower left y-value</param>
            <param name="urx">the upper right x-value</param>
            <param name="ury">the upper right y-value</param>
            <param name="file">an external PDF file</param>
            <param name="dest">the destination in this file</param>
        </member>
        <member name="M:iTextSharp.text.Annotation.#ctor(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.Boolean)">
            <summary>
            Creates a Screen anotation to embed media clips
            </summary>
            <param name="llx">the lower left x-value</param>
            <param name="lly">the lower left y-value</param>
            <param name="urx">the upper right x-value</param>
            <param name="ury">the upper right y-value</param>
            <param name="moviePath">path to the media clip file</param>
            <param name="mimeType">mime type of the media</param>
            <param name="showOnDisplay">if true play on display of the page</param>
        </member>
        <member name="M:iTextSharp.text.Annotation.#ctor(System.Single,System.Single,System.Single,System.Single,System.String,System.Int32)">
            <summary>
            Constructs an Annotation.
            </summary>
            <param name="llx">the lower left x-value</param>
            <param name="lly">the lower left y-value</param>
            <param name="urx">the upper right x-value</param>
            <param name="ury">the upper right y-value</param>
            <param name="file">an external PDF file</param>
            <param name="page">a page number in this file</param>
        </member>
        <member name="M:iTextSharp.text.Annotation.#ctor(System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Constructs an Annotation.
            </summary>
            <param name="llx">the lower left x-value</param>
            <param name="lly">the lower left y-value</param>
            <param name="urx">the upper right x-value</param>
            <param name="ury">the upper right y-value</param>
            <param name="named">a named destination in this file</param>
            <overloads>
            Has nine overloads.
            </overloads>
        </member>
        <member name="M:iTextSharp.text.Annotation.#ctor(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.String,System.String)">
            <summary>
            Constructs an Annotation.
            </summary>
            <param name="llx">the lower left x-value</param>
            <param name="lly">the lower left y-value</param>
            <param name="urx">the upper right x-value</param>
            <param name="ury">the upper right y-value</param>
            <param name="application">an external application</param>
            <param name="parameters">parameters to pass to this application</param>
            <param name="operation">the operation to pass to this application</param>
            <param name="defaultdir">the default directory to run this application in</param>
        </member>
        <member name="M:iTextSharp.text.Annotation.#ctor(System.util.Properties)">
            <summary>
            Constructs an Annotation taking into account
            the value of some attributes
            </summary>
            <param name="attributes">some attributes</param>
        </member>
        <member name="M:iTextSharp.text.Annotation.Process(iTextSharp.text.IElementListener)">
            <summary>
            Processes the element by adding it (or the different parts) to an
            IElementListener.
            </summary>
            <param name="listener">an IElementListener</param>
            <returns>true if the element was process successfully</returns>
        </member>
        <member name="M:iTextSharp.text.Annotation.SetDimensions(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the dimensions of this annotation.
            </summary>
            <param name="llx">the lower left x-value</param>
            <param name="lly">the lower left y-value</param>
            <param name="urx">the upper right x-value</param>
            <param name="ury">the upper right y-value</param>
        </member>
        <member name="M:iTextSharp.text.Annotation.GetLlx">
            <summary>
            Returns the lower left x-value.
            </summary>
            <returns>a value</returns>
        </member>
        <member name="M:iTextSharp.text.Annotation.GetLly">
            <summary>
            Returns the lower left y-value.
            </summary>
            <returns>a value</returns>
        </member>
        <member name="M:iTextSharp.text.Annotation.GetUrx">
            <summary>
            Returns the uppper right x-value.
            </summary>
            <returns>a value</returns>
        </member>
        <member name="M:iTextSharp.text.Annotation.GetUry">
            <summary>
            Returns the uppper right y-value.
            </summary>
            <returns>a value</returns>
        </member>
        <member name="M:iTextSharp.text.Annotation.GetLlx(System.Single)">
            <summary>
            Returns the lower left x-value.
            </summary>
            <param name="def">the default value</param>
            <returns>a value</returns>
        </member>
        <member name="M:iTextSharp.text.Annotation.GetLly(System.Single)">
            <summary>
            Returns the lower left y-value.
            </summary>
            <param name="def">the default value</param>
            <returns>a value</returns>
        </member>
        <member name="M:iTextSharp.text.Annotation.GetUrx(System.Single)">
            <summary>
            Returns the upper right x-value.
            </summary>
            <param name="def">the default value</param>
            <returns>a value</returns>
        </member>
        <member name="M:iTextSharp.text.Annotation.GetUry(System.Single)">
            <summary>
            Returns the upper right y-value.
            </summary>
            <param name="def">the default value</param>
            <returns>a value</returns>
        </member>
        <member name="M:iTextSharp.text.Annotation.IsTag(System.String)">
            <summary>
            Checks if a given tag corresponds with this object.
            </summary>
            <param name="tag">the given tag</param>
            <returns>true if the tag corresonds</returns>
        </member>
        <member name="M:iTextSharp.text.Annotation.SetMarkupAttribute(System.String,System.String)">
            <summary>
            See <see cref="M:iTextSharp.text.IMarkupAttributes.SetMarkupAttribute(System.String,System.String)"/>
            </summary>
            <param name="name">attribute name</param>
            <param name="value">attribute value</param>
        </member>
        <member name="M:iTextSharp.text.Annotation.GetMarkupAttribute(System.String)">
            <summary>
            See <see cref="M:iTextSharp.text.IMarkupAttributes.GetMarkupAttribute(System.String)"/>
            </summary>
            <param name="name">attribute name</param>
            <returns>attribute value</returns>
        </member>
        <member name="P:iTextSharp.text.Annotation.Type">
            <summary>
            Gets the type of the text element
            </summary>
        </member>
        <member name="P:iTextSharp.text.Annotation.Chunks">
            <summary>
            Gets all the chunks in this element.
            </summary>
            <value>an ArrayList</value>
        </member>
        <member name="P:iTextSharp.text.Annotation.AnnotationType">
            <summary>
            Returns the type of this Annotation.
            </summary>
            <value>a type</value>
        </member>
        <member name="P:iTextSharp.text.Annotation.Title">
            <summary>
            Returns the title of this Annotation.
            </summary>
            <value>a name</value>
        </member>
        <member name="P:iTextSharp.text.Annotation.Content">
            <summary>
            Gets the content of this Annotation.
            </summary>
            <value>a reference</value>
        </member>
        <member name="P:iTextSharp.text.Annotation.Attributes">
            <summary>
            Gets the content of this Annotation.
            </summary>
            <value>a reference</value>
        </member>
        <member name="P:iTextSharp.text.Annotation.MarkupAttributeNames">
            <summary>
            See <see cref="P:iTextSharp.text.IMarkupAttributes.MarkupAttributeNames"/>
            </summary>
            <value>a collection of string attribute names</value>
        </member>
        <member name="P:iTextSharp.text.Annotation.MarkupAttributes">
            <summary>
            See <see cref="P:iTextSharp.text.IMarkupAttributes.MarkupAttributes"/>
            </summary>
            <value>a Properties-object containing all the markupAttributes.</value>
        </member>
        <member name="T:iTextSharp.text.BadElementException">
            <summary>
            Signals an attempt to create an Element that hasn't got the right form.
            </summary>
            <seealso cref="T:iTextSharp.text.Cell"/>
            <seealso cref="T:iTextSharp.text.Table"/>
        </member>
        <member name="T:iTextSharp.text.Chapter">
            <summary>
            A Chapter is a special Section.
            </summary>
            <remarks>
            A chapter number has to be created using a Paragraph as title
            and an int as chapter number. The chapter number is shown be
            default. If you don't want to see the chapter number, you have to set the
            numberdepth to 0.
            </remarks>
            <example>
            <code>
            Paragraph title2 = new Paragraph("This is Chapter 2", FontFactory.GetFont(FontFactory.HELVETICA, 18, Font.BOLDITALIC, new Color(0, 0, 255)));
            <strong>Chapter chapter2 = new Chapter(title2, 2);
            chapter2.SetNumberDepth(0);</strong>
            Paragraph someText = new Paragraph("This is some text");
            <strong>chapter2.Add(someText);</strong>
            Paragraph title21 = new Paragraph("This is Section 1 in Chapter 2", FontFactory.GetFont(FontFactory.HELVETICA, 16, Font.BOLD, new Color(255, 0, 0)));
            Section section1 = <strong>chapter2.AddSection(title21);</strong>
            Paragraph someSectionText = new Paragraph("This is some silly paragraph in a chapter and/or section. It contains some text to test the functionality of Chapters and Section.");
            section1.Add(someSectionText);
            </code>
            </example>
        </member>
        <member name="T:iTextSharp.text.Section">
            <summary>
            A Section is a part of a Document containing
            other Sections, Paragraphs, List
            and/or Tables.
            </summary>
            <remarks>
            You can not construct a Section yourself.
            You will have to ask an instance of Section to the
            Chapter or Section to which you want to
            add the new Section.
            </remarks>
            <example>
            <code>
            Paragraph title2 = new Paragraph("This is Chapter 2", FontFactory.GetFont(FontFactory.HELVETICA, 18, Font.BOLDITALIC, new Color(0, 0, 255)));
            Chapter chapter2 = new Chapter(title2, 2);
            Paragraph someText = new Paragraph("This is some text");
            chapter2.Add(someText);
            Paragraph title21 = new Paragraph("This is Section 1 in Chapter 2", FontFactory.GetFont(FontFactory.HELVETICA, 16, Font.BOLD, new Color(255, 0, 0)));
            <strong>Section section1 = chapter2.AddSection(title21);</strong>
            Paragraph someSectionText = new Paragraph("This is some silly paragraph in a chapter and/or section. It contains some text to test the functionality of Chapters and Section.");
            <strong>section1.Add(someSectionText);</strong>
            Paragraph title211 = new Paragraph("This is SubSection 1 in Section 1 in Chapter 2", FontFactory.GetFont(FontFactory.HELVETICA, 14, Font.BOLD, new Color(255, 0, 0)));
            <strong>Section section11 = section1.AddSection(40, title211, 2);
            section11.Add(someSectionText);</strong>strong>
            </code>
            </example>
        </member>
        <member name="F:iTextSharp.text.Section.title">
            <summary> This is the title of this section. </summary>
        </member>
        <member name="F:iTextSharp.text.Section.numberDepth">
            <summary> This is the number of sectionnumbers that has to be shown before the section title. </summary>
        </member>
        <member name="F:iTextSharp.text.Section.indentationLeft">
            <summary> The indentation of this section on the left side. </summary>
        </member>
        <member name="F:iTextSharp.text.Section.indentationRight">
            <summary> The indentation of this section on the right side. </summary>
        </member>
        <member name="F:iTextSharp.text.Section.sectionIndent">
            <summary> The additional indentation of the content of this section. </summary>
        </member>
        <member name="F:iTextSharp.text.Section.subsections">
            <summary> This is the number of subsections. </summary>
        </member>
        <member name="F:iTextSharp.text.Section.numbers">
            <summary> This is the complete list of sectionnumbers of this section and the parents of this section. </summary>
        </member>
        <member name="F:iTextSharp.text.Section.bookmarkOpen">
            <summary> false if the bookmark children are not visible </summary>
        </member>
        <member name="F:iTextSharp.text.Section.bookmarkTitle">
            The bookmark title if different from the content title 
        </member>
        <member name="M:iTextSharp.text.Section.#ctor">
            <summary>
            Constructs a new Section.
            </summary>
            <overloads>
            Has 2 overloads.
            </overloads>
        </member>
        <member name="M:iTextSharp.text.Section.#ctor(iTextSharp.text.Paragraph,System.Int32)">
            <summary>
            Constructs a new Section.
            </summary>
            <param name="title">a Paragraph</param>
            <param name="numberDepth">the numberDepth</param>
        </member>
        <member name="M:iTextSharp.text.Section.SetNumbers(System.Int32,System.Collections.ArrayList)">
            <summary>
            Sets the number of this section.
            </summary>
            <param name="number">the number of this section</param>
            <param name="numbers">an ArrayList, containing the numbers of the Parent</param>
        </member>
        <member name="M:iTextSharp.text.Section.Process(iTextSharp.text.IElementListener)">
            <summary>
            Processes the element by adding it (or the different parts) to an
            IElementListener.
            </summary>
            <param name="listener">the IElementListener</param>
            <returns>true if the element was processed successfully</returns>
        </member>
        <member name="M:iTextSharp.text.Section.Add(System.Int32,System.Object)">
            <summary>
            Adds a Paragraph, List or Table
            to this Section.
            </summary>
            <param name="index">index at which the specified element is to be inserted</param>
            <param name="o">an object of type Paragraph, List or Table</param>
        </member>
        <member name="M:iTextSharp.text.Section.Add(System.Object)">
            <summary>
            Adds a Paragraph, List, Table or another Section
            to this Section.
            </summary>
            <param name="o">an object of type Paragraph, List, Table or another Section</param>
            <returns>a bool</returns>
        </member>
        <member name="M:iTextSharp.text.Section.AddAll(System.Collections.ICollection)">
            <summary>
            Adds a collection of Elements
            to this Section.
            </summary>
            <param name="collection">a collection of Paragraphs, Lists and/or Tables</param>
            <returns>true if the action succeeded, false if not.</returns>
        </member>
        <member name="M:iTextSharp.text.Section.AddSection(System.Single,iTextSharp.text.Paragraph,System.Int32)">
            <summary>
            Creates a Section, adds it to this Section and returns it.
            </summary>
            <param name="indentation">the indentation of the new section</param>
            <param name="title">the title of the new section</param>
            <param name="numberDepth">the numberDepth of the section</param>
            <returns>the newly added Section</returns>
        </member>
        <member name="M:iTextSharp.text.Section.AddSection(System.Single,iTextSharp.text.Paragraph)">
            <summary>
            Creates a Section, adds it to this Section and returns it.
            </summary>
            <param name="indentation">the indentation of the new section</param>
            <param name="title">the title of the new section</param>
            <returns>the newly added Section</returns>
        </member>
        <member name="M:iTextSharp.text.Section.AddSection(iTextSharp.text.Paragraph,System.Int32)">
            <summary>
            Creates a Section, add it to this Section and returns it.
            </summary>
            <param name="title">the title of the new section</param>
            <param name="numberDepth">the numberDepth of the section</param>
            <returns>the newly added Section</returns>
        </member>
        <member name="M:iTextSharp.text.Section.AddSection(iTextSharp.text.Paragraph)">
            <summary>
            Creates a Section, adds it to this Section and returns it.
            </summary>
            <param name="title">the title of the new section</param>
            <returns>the newly added Section</returns>
        </member>
        <member name="M:iTextSharp.text.Section.AddSection(System.Single,System.String,System.Int32)">
             Adds a Section to this Section and returns it.
            
             @param    indentation    the indentation of the new section
             @param    title        the title of the new section
             @param    numberDepth    the numberDepth of the section
            <summary>
            Adds a Section to this Section and returns it.
            </summary>
            <param name="indentation">the indentation of the new section</param>
            <param name="title">the title of the new section</param>
            <param name="numberDepth">the numberDepth of the section</param>
            <returns>the newly added Section</returns>
        </member>
        <member name="M:iTextSharp.text.Section.AddSection(System.String,System.Int32)">
             Adds a Section to this Section and returns it.
            
             @param    title        the title of the new section
             @param    numberDepth    the numberDepth of the section
            <summary>
            Adds a Section to this Section and returns it.
            </summary>
            <param name="title">the title of the new section</param>
            <param name="numberDepth">the numberDepth of the section</param>
            <returns>the newly added Section</returns>
        </member>
        <member name="M:iTextSharp.text.Section.AddSection(System.Single,System.String)">
            <summary>
            Adds a Section to this Section and returns it.
            </summary>
            <param name="indentation">the indentation of the new section</param>
            <param name="title">the title of the new section</param>
            <returns>the newly added Section</returns>
        </member>
        <member name="M:iTextSharp.text.Section.AddSection(System.String)">
            <summary>
            Adds a Section to this Section and returns it.
            </summary>
            <param name="title">the title of the new section</param>
            <returns>the newly added Section</returns>
        </member>
        <member name="M:iTextSharp.text.Section.AddSection(System.util.Properties)">
            <summary>
            Creates a given Section following a set of attributes and adds it to this one.
            </summary>
            <param name="attributes">the attributes</param>
            <returns>the newly added Section</returns>
        </member>
        <member name="M:iTextSharp.text.Section.Set(System.util.Properties)">
            <summary>
            Alters the attributes of this Section.
            </summary>
            <param name="attributes">the attributes</param>
        </member>
        <member name="M:iTextSharp.text.Section.IsChapter">
            <summary>
            Checks if this object is a Chapter.
            </summary>
            <returns>
            true if it is a Chapter,
            false if it is a Section
            </returns>
        </member>
        <member name="M:iTextSharp.text.Section.IsSection">
            <summary>
            Checks if this object is a Section.
            </summary>
            <returns>
            true if it is a Section,
            false if it is a Chapter.
            </returns>
        </member>
        <member name="M:iTextSharp.text.Section.IsTitle(System.String)">
            <summary>
            Checks if a given tag corresponds with a title tag for this object.
            </summary>
            <param name="tag">the given tag</param>
            <returns>true if the tag corresponds</returns>
        </member>
        <member name="M:iTextSharp.text.Section.IsTag(System.String)">
            <summary>
            Checks if a given tag corresponds with this object.
            </summary>
            <param name="tag">the given tag</param>
            <returns>true if the tag corresponds</returns>
        </member>
        <member name="M:iTextSharp.text.Section.GetBookmarkTitle">
            Gets the bookmark title.
            @return the bookmark title
        </member>
        <member name="M:iTextSharp.text.Section.SetBookmarkTitle(System.String)">
            Sets the bookmark title. The bookmark title is the same as the section title but
            can be changed with this method.
            @param bookmarkTitle the bookmark title
        </member>
        <member name="P:iTextSharp.text.Section.Type">
            <summary>
            Gets the type of the text element.
            </summary>
            <value>a type</value>
        </member>
        <member name="P:iTextSharp.text.Section.Chunks">
            <summary>
            Gets all the chunks in this element.
            </summary>
            <value>an ArrayList</value>
        </member>
        <member name="P:iTextSharp.text.Section.Title">
            <summary>
            Get/set the title of this section
            </summary>
            <value>a Paragraph</value>
        </member>
        <member name="P:iTextSharp.text.Section.NumberDepth">
            <summary>
            Get/set the numberdepth of this Section.
            </summary>
            <value>a int</value>
        </member>
        <member name="P:iTextSharp.text.Section.IndentationLeft">
            <summary>
            Get/set the indentation of this Section on the left side.
            </summary>
            <value>the indentation</value>
        </member>
        <member name="P:iTextSharp.text.Section.IndentationRight">
            <summary>
            Get/set the indentation of this Section on the right side.
            </summary>
            <value>the indentation</value>
        </member>
        <member name="P:iTextSharp.text.Section.Indentation">
            <summary>
            Get/set the indentation of the content of this Section.
            </summary>
            <value>the indentation</value>
        </member>
        <member name="P:iTextSharp.text.Section.Depth">
            <summary>
            Returns the depth of this section.
            </summary>
            <value>the depth</value>
        </member>
        <member name="P:iTextSharp.text.Section.BookmarkOpen">
            <summary>
            Get/set the bookmark
            </summary>
            <value>a bool</value>
        </member>
        <member name="M:iTextSharp.text.Chapter.#ctor(iTextSharp.text.Paragraph,System.Int32)">
            <summary>
            Constructs a new Chapter.
            </summary>
            <param name="title">the Chapter title (as a Paragraph)</param>
            <param name="number">the Chapter number</param>
            <overoads>
            Has three overloads.
            </overoads>
        </member>
        <member name="M:iTextSharp.text.Chapter.#ctor(System.String,System.Int32)">
            <summary>
            Constructs a new Chapter.
            </summary>
            <param name="title">the Chapter title (as a string)</param>
            <param name="number">the Chapter number</param>
            <overoads>
            Has three overloads.
            </overoads>
        </member>
        <member name="M:iTextSharp.text.Chapter.#ctor(System.util.Properties,System.Int32)">
            <summary>
            Creates a new Chapter following a set of attributes.
            </summary>
            <param name="attributes">the attributes</param>
            <param name="number">the Chapter number</param>
            <overoads>
            Has three overloads.
            </overoads>
        </member>
        <member name="M:iTextSharp.text.Chapter.IsTag(System.String)">
            <summary>
            Checks if a given tag corresponds with this object.
            </summary>
            <param name="tag">the given tag</param>
            <returns>true if the tag corresponds</returns>
        </member>
        <member name="P:iTextSharp.text.Chapter.Type">
            <summary>
            Gets the type of the text element.
            </summary>
            <value>a type</value>
        </member>
        <member name="T:iTextSharp.text.ElementTags">
            <summary>
            A class that contains all the possible tagnames and their attributes.
            </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ITEXT">
            <summary> the root tag. </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.TITLE">
            <summary> attribute of the root and annotation tag (also a special tag within a chapter or section) </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.SUBJECT">
            <summary> attribute of the root tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.KEYWORDS">
            <summary> attribute of the root tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.AUTHOR">
            <summary> attribute of the root tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.CREATIONDATE">
            <summary> attribute of the root tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.PRODUCER">
            <summary> attribute of the root tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.CHAPTER">
            <summary> the chapter tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.SECTION">
            <summary> the section tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.NUMBERDEPTH">
            <summary> attribute of section/chapter tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.DEPTH">
            <summary> attribute of section/chapter tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.NUMBER">
            <summary> attribute of section/chapter tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.INDENT">
            <summary> attribute of section/chapter tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.LEFT">
            <summary> attribute of chapter/section/paragraph/table/cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.RIGHT">
            <summary> attribute of chapter/section/paragraph/table/cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.PHRASE">
            <summary> the phrase tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ANCHOR">
            <summary> the anchor tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.LIST">
            <summary> the list tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.LISTITEM">
            <summary> the listitem tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.PARAGRAPH">
            <summary> the paragraph tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.LEADING">
            <summary> attribute of phrase/paragraph/cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ALIGN">
            <summary> attribute of paragraph/image/table tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.KEEPTOGETHER">
            <summary> attribute of paragraph </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.NAME">
            <summary> attribute of anchor tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.REFERENCE">
            <summary> attribute of anchor tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.LISTSYMBOL">
            <summary> attribute of list tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.NUMBERED">
            <summary> attribute of list tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.LETTERED">
            <summary> attribute of the list tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.FIRST">
            <summary> attribute of list tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.SYMBOLINDENT">
            <summary> attribute of list tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.INDENTATIONLEFT">
            <summary> attribute of list tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.INDENTATIONRIGHT">
            <summary> attribute of list tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.IGNORE">
            <summary> the chunk tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ENTITY">
            <summary> the chunk tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ID">
            <summary> the chunk tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.CHUNK">
            <summary> the chunk tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ENCODING">
            <summary> attribute of the chunk tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.EMBEDDED">
            <summary> attribute of the chunk tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.COLOR">
            <summary> attribute of the chunk/table/cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.RED">
            <summary> attribute of the chunk/table/cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.GREEN">
            <summary> attribute of the chunk/table/cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.BLUE">
            <summary> attribute of the chunk/table/cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.TABLE">
            <summary> the table tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ROW">
            <summary> the cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.CELL">
            <summary> the cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.COLUMNS">
            <summary> attribute of the table tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.LASTHEADERROW">
            <summary> attribute of the table tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.CELLPADDING">
            <summary> attribute of the table tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.CELLSPACING">
            <summary> attribute of the table tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.OFFSET">
            <summary> attribute of the table tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.WIDTHS">
            <summary> attribute of the table tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.TABLEFITSPAGE">
            <summary> attribute of the table tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.CELLSFITPAGE">
            <summary> attribute of the table tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.HORIZONTALALIGN">
            <summary> attribute of the cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.VERTICALALIGN">
            <summary> attribute of the cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.COLSPAN">
            <summary> attribute of the cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ROWSPAN">
            <summary> attribute of the cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.HEADER">
            <summary> attribute of the cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.FOOTER">
            <summary> attribute of the cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.NOWRAP">
            <summary> attribute of the cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.BORDERWIDTH">
            <summary> attribute of the table/cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.TOP">
            <summary> attribute of the table/cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.BOTTOM">
            <summary> attribute of the table/cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.WIDTH">
            <summary> attribute of the table/cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.BORDERCOLOR">
            <summary> attribute of the table/cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.BACKGROUNDCOLOR">
            <summary> attribute of the table/cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.BGRED">
            <summary> attribute of the table/cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.BGGREEN">
            <summary> attribute of the table/cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.BGBLUE">
            <summary> attribute of the table/cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.GRAYFILL">
            <summary> attribute of the table/cell tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.IMAGE">
            <summary> the image tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.BOOKMARKOPEN">
            <summary> the image tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.URL">
            <summary> attribute of the image and annotation tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.UNDERLYING">
            <summary> attribute of the image tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.TEXTWRAP">
            <summary> attribute of the image tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ALT">
            <summary> attribute of the image tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ABSOLUTEX">
            <summary> attribute of the image tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ABSOLUTEY">
            <summary> attribute of the image tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.PLAINWIDTH">
            <summary> attribute of the image tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.PLAINHEIGHT">
            <summary> attribute of the image tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.SCALEDWIDTH">
            <summary> attribute of the image tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.SCALEDHEIGHT">
            <summary> attribute of the image tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ROTATION">
            <summary> attribute of the image tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.NEWPAGE">
            <summary> the newpage tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.NEWLINE">
            <summary> the newpage tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ANNOTATION">
            <summary> the annotation tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.FILE">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.DESTINATION">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.PAGE">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.NAMED">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.APPLICATION">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.PARAMETERS">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.OPERATION">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.DEFAULTDIR">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.LLX">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.LLY">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.URX">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.URY">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.CONTENT">
            <summary> attribute of the annotation tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ALIGN_LEFT">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ALIGN_CENTER">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ALIGN_RIGHT">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ALIGN_JUSTIFIED">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ALIGN_JUSTIFIED_ALL">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ALIGN_TOP">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ALIGN_MIDDLE">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ALIGN_BOTTOM">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.ALIGN_BASELINE">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.DEFAULT">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.UNKNOWN">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.FONT">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.SIZE">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.STYLE">
            <summary> the possible value of an alignment attribute </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.HORIZONTALRULE">
            <summary> the possible value of a tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.PAGE_SIZE">
            the possible value of a tag 
        </member>
        <member name="F:iTextSharp.text.ElementTags.ORIENTATION">
            the possible value of a tag 
        </member>
        <member name="F:iTextSharp.text.ElementTags.SUBSUPSCRIPT">
            <summary> attribute of the chunk tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.LOCALGOTO">
            <summary> attribute of the chunk tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.REMOTEGOTO">
            <summary> attribute of the chunk tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.LOCALDESTINATION">
            <summary> attribute of the chunk tag </summary>
        </member>
        <member name="F:iTextSharp.text.ElementTags.GENERICTAG">
            <summary> attribute of the chunk tag </summary>
        </member>
        <member name="M:iTextSharp.text.ElementTags.GetAlignment(System.Int32)">
            <summary>
            Translates the alignment value.
            </summary>
            <param name="alignment">the alignment value</param>
            <returns>the translated value</returns>
        </member>
        <member name="T:iTextSharp.text.Entities">
            <summary>
            This class contains entities that can be used in an entity tag.
            </summary>
        </member>
        <member name="F:iTextSharp.text.Entities.map">
            <summary> This is a map that contains all possible id values of the entity tag. </summary>
        </member>
        <member name="M:iTextSharp.text.Entities.#cctor">
            <summary>
            Static Constructor
            </summary>
        </member>
        <member name="M:iTextSharp.text.Entities.Get(System.String,iTextSharp.text.Font)">
            <summary>
            Gets a chunk with a symbol character.
            </summary>
            <param name="e">the original ASCII-char</param>
            <param name="font">a Font</param>
            <returns>a Chunk</returns>
        </member>
        <member name="M:iTextSharp.text.Entities.GetCorrespondingSymbol(System.String)">
            <summary>
            Looks for the corresponding symbol in the font Symbol.
            </summary>
            <param name="c">the original ASCII-char</param>
            <returns>the corresponding symbol in font Symbol</returns>
        </member>
        <member name="M:iTextSharp.text.Entities.IsTag(System.String)">
            <summary>
            Checks if a given tag corresponds with this object.
            </summary>
            <param name="tag">the given tag</param>
            <returns>true if the tag corresponds</returns>
        </member>
        <member name="T:iTextSharp.text.FontFactory">
            <summary>
            If you are using True Type fonts, you can declare the paths of the different ttf- and ttc-files
            to this static class first and then create fonts in your code using one of the static getFont-method
            without having to enter a path as parameter.
            </summary>
        </member>
        <member name="F:iTextSharp.text.FontFactory.COURIER">
            <summary> This is a possible value of a base 14 type 1 font </summary>
        </member>
        <member name="F:iTextSharp.text.FontFactory.COURIER_BOLD">
            <summary> This is a possible value of a base 14 type 1 font </summary>
        </member>
        <member name="F:iTextSharp.text.FontFactory.COURIER_OBLIQUE">
            <summary> This is a possible value of a base 14 type 1 font </summary>
        </member>
        <member name="F:iTextSharp.text.FontFactory.COURIER_BOLDOBLIQUE">
            <summary> This is a possible value of a base 14 type 1 font </summary>
        </member>
        <member name="F:iTextSharp.text.FontFactory.HELVETICA">
            <summary> This is a possible value of a base 14 type 1 font </summary>
        </member>
        <member name="F:iTextSharp.text.FontFactory.HELVETICA_BOLD">
            <summary> This is a possible value of a base 14 type 1 font </summary>
        </member>
        <member name="F:iTextSharp.text.FontFactory.HELVETICA_OBLIQUE">
            <summary> This is a possible value of a base 14 type 1 font </summary>
        </member>
        <member name="F:iTextSharp.text.FontFactory.HELVETICA_BOLDOBLIQUE">
            <summary> This is a possible value of a base 14 type 1 font </summary>
        </member>
        <member name="F:iTextSharp.text.FontFactory.SYMBOL">
            <summary> This is a possible value of a base 14 type 1 font </summary>
        </member>
        <member name="F:iTextSharp.text.FontFactory.TIMES">
            <summary> This is a possible value of a base 14 type 1 font </summary>
        </member>
        <member name="F:iTextSharp.text.FontFactory.TIMES_ROMAN">
            <summary> This is a possible value of a base 14 type 1 font </summary>
        </member>
        <member name="F:iTextSharp.text.FontFactory.TIMES_BOLD">
            <summary> This is a possible value of a base 14 type 1 font </summary>
        </member>
        <member name="F:iTextSharp.text.FontFactory.TIMES_ITALIC">
            <summary> This is a possible value of a base 14 type 1 font </summary>
        </member>
        <member name="F:iTextSharp.text.FontFactory.TIMES_BOLDITALIC">
            <summary> This is a possible value of a base 14 type 1 font </summary>
        </member>
        <member name="F:iTextSharp.text.FontFactory.ZAPFDINGBATS">
            <summary> This is a possible value of a base 14 type 1 font </summary>
        </member>
        <member name="F:iTextSharp.text.FontFactory.defaultEncoding">
            <summary> This is the default encoding to use. </summary>
        </member>
        <member name="F:iTextSharp.text.FontFactory.trueTypeFonts">
            <summary> This is a map of postscriptfontnames of True Type fonts and the path of their ttf- or ttc-file. </summary>
        </member>
        <member name="M:iTextSharp.text.FontFactory.#cctor">
            <summary>
            Static Constructor
            </summary>
        </member>
        <member name="F:iTextSharp.text.FontFactory.fontFamilies">
            <summary> This is a map of fontfamilies. </summary>
        </member>
        <member name="F:iTextSharp.text.FontFactory.defaultEmbedding">
            <summary> This is the default value of the <VAR>embedded</VAR> variable. </summary>
        </member>
        <member name="M:iTextSharp.text.FontFactory.#ctor">
            <summary> Creates new FontFactory </summary>
        </member>
        <member name="M:iTextSharp.text.FontFactory.GetFont(System.String,System.String,System.Boolean,System.Single,System.Int32,iTextSharp.text.Color)">
            <summary>
            Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="encoding">the encoding of the font</param>
            <param name="embedded">true if the font is to be embedded in the PDF</param>
            <param name="size">the size of this font</param>
            <param name="style">the style of this font</param>
            <param name="color">the Color of this font</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactory.GetFont(System.util.Properties)">
            <summary>
            Constructs a Font-object.
            </summary>
            <param name="attributes">the attributes of a Font object</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactory.GetFont(System.String,System.String,System.Boolean,System.Single,System.Int32)">
            <summary>
            Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="encoding">the encoding of the font</param>
            <param name="embedded">true if the font is to be embedded in the PDF</param>
            <param name="size">the size of this font</param>
            <param name="style">the style of this font</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactory.GetFont(System.String,System.String,System.Boolean,System.Single)">
            <summary>
            Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="encoding">the encoding of the font</param>
            <param name="embedded">true if the font is to be embedded in the PDF</param>
            <param name="size">the size of this font</param>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.FontFactory.GetFont(System.String,System.String,System.Boolean)">
            <summary>
            Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="encoding">the encoding of the font</param>
            <param name="embedded">true if the font is to be embedded in the PDF</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactory.GetFont(System.String,System.String,System.Single,System.Int32,iTextSharp.text.Color)">
            <summary>
            Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="encoding">the encoding of the font</param>
            <param name="size">the size of this font</param>
            <param name="style">the style of this font</param>
            <param name="color">the Color of this font</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactory.GetFont(System.String,System.String,System.Single,System.Int32)">
            <summary>
            Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="encoding">the encoding of the font</param>
            <param name="size">the size of this font</param>
            <param name="style">the style of this font</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactory.GetFont(System.String,System.String,System.Single)">
            <summary>
            Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="encoding">the encoding of the font</param>
            <param name="size">the size of this font</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactory.GetFont(System.String,System.String)">
            <summary>
            Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="encoding">the encoding of the font</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactory.GetFont(System.String,System.Single,System.Int32,iTextSharp.text.Color)">
            <summary>
            Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="size">the size of this font</param>
            <param name="style">the style of this font</param>
            <param name="color">the Color of this font</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactory.GetFont(System.String,System.Single,System.Int32)">
            <summary>
            Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="size">the size of this font</param>
            <param name="style">the style of this font</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactory.GetFont(System.String,System.Single)">
            <summary>
            Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <param name="size">the size of this font</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactory.GetFont(System.String)">
            <summary>
            Constructs a Font-object.
            </summary>
            <param name="fontname">the name of the font</param>
            <returns>a Font object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactory.Register(System.String)">
            <summary>
            Register a ttf- or a ttc-file.
            </summary>
            <param name="path">the path to a ttf- or ttc-file</param>
        </member>
        <member name="M:iTextSharp.text.FontFactory.Register(System.String,System.String)">
            <summary>
            Register a ttf- or a ttc-file and use an alias for the font contained in the ttf-file.
            </summary>
            <param name="path">the path to a ttf- or ttc-file</param>
            <param name="alias">the alias you want to use for the font</param>
        </member>
        <member name="M:iTextSharp.text.FontFactory.RegisterDirectory(System.String)">
            Register all the fonts in a directory.
            @param dir the directory
            @return the number of fonts registered
        </member>
        <member name="M:iTextSharp.text.FontFactory.RegisterDirectories">
            Register fonts in some probable directories. It usually works in Windows,
            Linux and Solaris.
            @return the number of fonts registered
        </member>
        <member name="M:iTextSharp.text.FontFactory.Contains(System.String)">
            <summary>
            Checks whether the given font is contained within the object
            </summary>
            <param name="fontname">the name of the font</param>
            <returns>true if font is contained within the object</returns>
        </member>
        <member name="M:iTextSharp.text.FontFactory.IsRegistered(System.String)">
            <summary>
            Checks if a certain font is registered.
            </summary>
            <param name="fontname">the name of the font that has to be checked</param>
            <returns>true if the font is found</returns>
        </member>
        <member name="P:iTextSharp.text.FontFactory.RegisteredFonts">
            <summary>
            Gets a set of registered fontnames.
            </summary>
            <value>a set of registered fontnames</value>
        </member>
        <member name="P:iTextSharp.text.FontFactory.RegisteredFamilies">
            <summary>
            Gets a set of registered font families.
            </summary>
            <value>a set of registered font families</value>
        </member>
        <member name="T:iTextSharp.text.Graphic">
            <summary>
            A Graphic element can contain several geometric figures (curves, lines,...).
            </summary>
            <remarks>
            If you want to use this Element, please read the Sections 8.4 and 8.5 of
            the PDF Reference Manual version 1.3 first.
            </remarks>
            <seealso cref="T:iTextSharp.text.Element"/>
        </member>
        <member name="F:iTextSharp.text.Graphic.HORIZONTAL_LINE">
            <summary> This is a type of Graphic. </summary>
        </member>
        <member name="F:iTextSharp.text.Graphic.BORDER">
            <summary> This is a type of Graphic. </summary>
        </member>
        <member name="F:iTextSharp.text.Graphic.attributes">
            <summary> Contains some of the attributes for this Graphic. </summary>
        </member>
        <member name="M:iTextSharp.text.Graphic.#ctor">
            <summary>
            Constructs a Graphic-object.
            </summary>
        </member>
        <member name="M:iTextSharp.text.Graphic.Process(iTextSharp.text.IElementListener)">
            <summary>
            Processes the element by adding it (or the different parts) to an
            IElementListener.
            </summary>
            <param name="listener">an IElementListener</param>
            <returns>true if the element was processed successfully</returns>
        </member>
        <member name="M:iTextSharp.text.Graphic.SetHorizontalLine(System.Single,System.Single)">
            <summary>
            Orders this graphic to draw a horizontal line.
            </summary>
            <param name="linewidth">the width</param>
            <param name="percentage">the percentage</param>
        </member>
        <member name="M:iTextSharp.text.Graphic.SetHorizontalLine(System.Single,System.Single,System.Int32)">
            Orders this graphic to draw a horizontal line with some alignment.
            @param linewidth the line width
            @param percentage the percentage horizontal width in relation to the margins or if negative, an absolute value
            @param align the line alignment
        </member>
        <member name="M:iTextSharp.text.Graphic.SetHorizontalLine(System.Single,System.Single,iTextSharp.text.Color)">
            Orders this graphic to draw a horizontal line.
            <summary>
            Orders this graphic to draw a horizontal line.
            </summary>
            <param name="linewidth">the width</param>
            <param name="percentage">the percentage</param>
            <param name="color">the Color</param>
        </member>
        <member name="M:iTextSharp.text.Graphic.SetHorizontalLine(System.Single,System.Single,iTextSharp.text.Color,System.Int32)">
            Orders this graphic to draw a horizontal, centered line.
            @param linewidth the line width
            @param percentage the percentage horizontal width in relation to the margins or if negative, an absolute value
            @param color the color of the line
            @param align the line alignment
        </member>
        <member name="M:iTextSharp.text.Graphic.DrawHorizontalLine(System.Single,iTextSharp.text.Color,System.Single,System.Single,System.Single)">
            draws a horizontal line.
            <summary>
            draws a horizontal line.
            </summary>
            <param name="linewidth">the width</param>
            <param name="color">the Color</param>
            <param name="x1"></param>
            <param name="x2"></param>
            <param name="y"></param>
        </member>
        <member name="M:iTextSharp.text.Graphic.SetBorder(System.Single,System.Single)">
            <summary>
            Orders this graphic to draw a horizontal line.
            </summary>
            <param name="linewidth">the width</param>
            <param name="extraSpace"></param>
        </member>
        <member name="M:iTextSharp.text.Graphic.SetBorder(System.Single,System.Single,iTextSharp.text.Color)">
            <summary>
            Orders this graphic to draw a horizontal line.
            </summary>
            <param name="linewidth"></param>
            <param name="extraSpace"></param>
            <param name="color"></param>
        </member>
        <member name="M:iTextSharp.text.Graphic.DrawBorder(System.Single,iTextSharp.text.Color,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a border
            </summary>
            <param name="lineWidth"></param>
            <param name="color"></param>
            <param name="llx"></param>
            <param name="lly"></param>
            <param name="urx"></param>
            <param name="ury"></param>
        </member>
        <member name="M:iTextSharp.text.Graphic.ProcessAttributes(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Processes the attributes of this object.
            </summary>
            <param name="llx">the lower left x-value</param>
            <param name="lly">the lower left y-value</param>
            <param name="urx">the upper right x-value</param>
            <param name="ury">the upper right y-value</param>
            <param name="y"></param>
        </member>
        <member name="P:iTextSharp.text.Graphic.Type">
            <summary>
            Gets the type of the text element.
            </summary>
            <value>a type</value>
        </member>
        <member name="P:iTextSharp.text.Graphic.Chunks">
            <summary>
            Gets all the chunks in this element.
            </summary>
            <value>an ArrayList</value>
        </member>
        <member name="T:iTextSharp.text.GreekList">
            
            A special-version of <CODE>LIST</CODE> whitch use greek-letters.
            
            @see com.lowagie.text.List
            @version 2003-06-22
            @author Michael Niedermair
        </member>
        <member name="T:iTextSharp.text.List">
            <summary>
            A List contains several ListItems.
            </summary>
            <example>
            <B>Example 1:</B>
            <code>
            <strong>List list = new List(true, 20);
            list.Add(new ListItem("First line"));
            list.Add(new ListItem("The second line is longer to see what happens once the end of the line is reached. Will it start on a new line?"));
            list.Add(new ListItem("Third line"));</strong>
            </code>
            
            The result of this code looks like this:
            <OL>
                <LI>
                    First line
                </LI>
                <LI>
                    The second line is longer to see what happens once the end of the line is reached. Will it start on a new line?
                </LI>
                <LI>
                    Third line
                </LI>
            </OL>
            
            <B>Example 2:</B>
            <code>
            <strong>List overview = new List(false, 10);
            overview.Add(new ListItem("This is an item"));
            overview.Add("This is another item");</strong>
            </code>
            
            The result of this code looks like this:
            <UL>
                   <LI>
                       This is an item
                   </LI>
                   <LI>
                       This is another item
                   </LI>
               </UL>
            </example>
            <seealso cref="T:iTextSharp.text.Element"/>
            <seealso cref="T:iTextSharp.text.ListItem"/>
        </member>
        <member name="F:iTextSharp.text.List.list">
            <summary> This is the ArrayList containing the different ListItems. </summary>
        </member>
        <member name="F:iTextSharp.text.List.numbered">
            <summary> This variable indicates if the list has to be numbered. </summary>
        </member>
        <member name="F:iTextSharp.text.List.first">
            <summary> This variable indicates the first number of a numbered list. </summary>
        </member>
        <member name="F:iTextSharp.text.List.symbol">
            <summary> This is the listsymbol of a list that is not numbered. </summary>
        </member>
        <member name="F:iTextSharp.text.List.indentationLeft">
            <summary> The indentation of this list on the left side. </summary>
        </member>
        <member name="F:iTextSharp.text.List.indentationRight">
            <summary> The indentation of this list on the right side. </summary>
        </member>
        <member name="F:iTextSharp.text.List.symbolIndent">
            <summary> The indentation of the listitems. </summary>
        </member>
        <member name="F:iTextSharp.text.List.markupAttributes">
            <summary> Contains extra markupAttributes </summary>
        </member>
        <member name="M:iTextSharp.text.List.#ctor(System.Boolean,System.Single)">
            <summary>
            Constructs a List.
            </summary>
            <remarks>
            the parameter symbolIndent is important for instance when
            generating PDF-documents; it indicates the indentation of the listsymbol.
            </remarks>
            <param name="numbered">a boolean</param>
            <param name="symbolIndent">the indentation that has to be used for the listsymbol</param>
        </member>
        <member name="M:iTextSharp.text.List.#ctor(System.Boolean,System.Boolean,System.Single)">
            <summary>
            Constructs a List.
            </summary>
            <param name="numbered">a boolean</param>
            <param name="lettered">a boolean</param>
            <param name="symbolIndent">the indentation that has to be used for the listsymbol</param>
        </member>
        <member name="M:iTextSharp.text.List.#ctor(System.util.Properties)">
            <summary>
            Returns a List that has been constructed taking in account
            the value of some attributes.
            </summary>
            <param name="attributes">Some attributes</param>
        </member>
        <member name="M:iTextSharp.text.List.Process(iTextSharp.text.IElementListener)">
            <summary>
            Processes the element by adding it (or the different parts) to an
            IElementListener.
            </summary>
            <param name="listener">an IElementListener</param>
            <returns>true if the element was processed successfully</returns>
        </member>
        <member name="M:iTextSharp.text.List.Add(System.Object)">
            <summary>
            Adds an Object to the List.
            </summary>
            <param name="o">the object to add</param>
            <returns>true is successful</returns>
        </member>
        <member name="M:iTextSharp.text.List.SetFirst(System.Char)">
            <summary>
            Sets the Letter that has to come first in the list.
            </summary>
            <param name="first">a letter</param>
        </member>
        <member name="M:iTextSharp.text.List.SetListSymbol(System.String)">
            <summary>
            Sets the listsymbol.
            </summary>
            <remarks>
            This is a shortcut for SetListSymbol(Chunk symbol).
            </remarks>
            <param name="symbol">a string</param>
        </member>
        <member name="M:iTextSharp.text.List.IsNumbered">
            <summary>
            Checks if the list is numbered.
            </summary>
            <returns>true if the list is numbered, false otherwise.</returns>
        </member>
        <member name="M:iTextSharp.text.List.IsSymbol(System.String)">
            <summary>
            Checks if a given tag corresponds with the listsymbol tag of this object.
            </summary>
            <param name="tag">the given tag</param>
            <returns>true if the tag corresponds</returns>
        </member>
        <member name="M:iTextSharp.text.List.IsTag(System.String)">
            <summary>
            Checks if a given tag corresponds with this object.
            </summary>
            <param name="tag">the given tag</param>
            <returns>true if the tag corresponds</returns>
        </member>
        <member name="M:iTextSharp.text.List.NextLetter">
            <summary>
            Retrieves the next letter in the sequence
            </summary>
            <returns>string contains the next character (A-Z or a-z)</returns>
        </member>
        <member name="M:iTextSharp.text.List.ListItemsInList">
             Counts the number of ListItems in the list ommiting nested lists
            
             @return  Integer number of ListItems in the list
        </member>
        <member name="M:iTextSharp.text.List.SetMarkupAttribute(System.String,System.String)">
            <summary>
            See <see cref="M:iTextSharp.text.IMarkupAttributes.SetMarkupAttribute(System.String,System.String)"/>
            </summary>
            <param name="name">attribute name</param>
            <param name="value">attribute value</param>
        </member>
        <member name="M:iTextSharp.text.List.GetMarkupAttribute(System.String)">
            <summary>
            See <see cref="M:iTextSharp.text.IMarkupAttributes.GetMarkupAttribute(System.String)"/>
            </summary>
            <param name="name">attribute name</param>
            <returns>attribute value</returns>
        </member>
        <member name="P:iTextSharp.text.List.Type">
            <summary>
            Gets the type of the text element.
            </summary>
            <value>a type</value>
        </member>
        <member name="P:iTextSharp.text.List.Chunks">
            <summary>
            Gets all the chunks in this element.
            </summary>
            <value>an ArrayList</value>
        </member>
        <member name="P:iTextSharp.text.List.ListSymbol">
            <summary>
            Sets the symbol
            </summary>
            <value>a Chunk</value>
        </member>
        <member name="P:iTextSharp.text.List.Items">
            <summary>
            Gets all the items in the list.
            </summary>
            <value>an ArrayList containing ListItems</value>
        </member>
        <member name="P:iTextSharp.text.List.Size">
            <summary>
            Gets the size of the list.
            </summary>
            <value>a size</value>
        </member>
        <member name="P:iTextSharp.text.List.Leading">
            <summary>
            Gets the leading of the first listitem.
            </summary>
            <value>a leading</value>
        </member>
        <member name="P:iTextSharp.text.List.SymbolIndent">
            <summary>
            Gets the symbol indentation.
            </summary>
            <value>the symbol indentation</value>
        </member>
        <member name="P:iTextSharp.text.List.Symbol">
            <summary>
            Get/set the symbol indentation.
            </summary>
            <value>a Chunk</value>
        </member>
        <member name="P:iTextSharp.text.List.First">
            <summary>
            Get/set the first number
            </summary>
            <value>an int</value>
        </member>
        <member name="P:iTextSharp.text.List.IndentationLeft">
            <summary>
            Get/set the indentation of this paragraph on the left side.
            </summary>
            <value>the indentation</value>
        </member>
        <member name="P:iTextSharp.text.List.IndentationRight">
            <summary>
            Get/set the indentation of this paragraph on the right side.
            </summary>
            <value>the indentation</value>
        </member>
        <member name="P:iTextSharp.text.List.MarkupAttributeNames">
            <summary>
            See <see cref="P:iTextSharp.text.IMarkupAttributes.MarkupAttributeNames"/>
            </summary>
            <value>a collection of string attribute names</value>
        </member>
        <member name="P:iTextSharp.text.List.MarkupAttributes">
            <summary>
            See <see cref="P:iTextSharp.text.IMarkupAttributes.MarkupAttributes"/>
            </summary>
            <value>a Properties-object containing all the markupAttributes.</value>
        </member>
        <member name="F:iTextSharp.text.GreekList.greeklower">
            UpperCase or LowerCase
        </member>
        <member name="M:iTextSharp.text.GreekList.#ctor(System.Int32)">
            Initialisierung
            
            @param symbolIndent   indent
        </member>
        <member name="M:iTextSharp.text.GreekList.#ctor(System.Boolean,System.Int32)">
            Initialisierung 
            @param    greeklower      greek-char in lowercase   
            @param    symbolIndent    indent
        </member>
        <member name="M:iTextSharp.text.GreekList.SetGreekFont">
            change the font to SYMBOL
        </member>
        <member name="M:iTextSharp.text.GreekList.SetGreekLower(System.Boolean)">
            set the greek-letters to lowercase otherwise to uppercase
            
            @param greeklower
        </member>
        <member name="M:iTextSharp.text.GreekList.IsGreekLower">
             Checks if the list is greek-letter with lowercase
            
             @return   <CODE>true</CODE> if the greek-letter is lowercase, <CODE>false</CODE> otherwise.
        </member>
        <member name="M:iTextSharp.text.GreekList.Add(System.Object)">
             Adds an <CODE>Object</CODE> to the <CODE>List</CODE>.
            
             @param    o   the object to add.
             @return true if adding the object succeeded
        </member>
        <member name="T:iTextSharp.text.Header">
            <summary>
            This is an Element that contains
            some userdefined meta information about the document.
            </summary>
            <example>
            <code>
            <strong>Header header = new Header("inspired by", "William Shakespeare");</strong>
            </code>
            </example>
        </member>
        <member name="T:iTextSharp.text.Meta">
            <summary>
            This is an Element that contains
            some meta information about the document.
            </summary>
            <remarks>
            An object of type Meta can not be constructed by the user.
            Userdefined meta information should be placed in a Header-object.
            Meta is reserved for: Subject, Keywords, Author, Title, Producer
            and Creationdate information.
            </remarks>
            <seealso cref="T:iTextSharp.text.Element"/>
            <seealso cref="T:iTextSharp.text.Header"/>
        </member>
        <member name="F:iTextSharp.text.Meta.type">
            <summary> This is the type of Meta-information this object contains. </summary>
        </member>
        <member name="F:iTextSharp.text.Meta.content">
            <summary> This is the content of the Meta-information. </summary>
        </member>
        <member name="F:iTextSharp.text.Meta.markupAttributes">
            <summary> Contains extra markupAttributes </summary>
        </member>
        <member name="M:iTextSharp.text.Meta.#ctor(System.Int32,System.String)">
            <summary>
            Constructs a Meta.
            </summary>
            <param name="type">the type of meta-information</param>
            <param name="content">the content</param>
        </member>
        <member name="M:iTextSharp.text.Meta.#ctor(System.String,System.String)">
            <summary>
            Constructs a Meta.
            </summary>
            <param name="tag">the tagname of the meta-information</param>
            <param name="content">the content</param>
        </member>
        <member name="M:iTextSharp.text.Meta.Process(iTextSharp.text.IElementListener)">
            <summary>
            Processes the element by adding it (or the different parts) to a
            IElementListener.
            </summary>
            <param name="listener">the IElementListener</param>
            <returns>true if the element was processed successfully</returns>
        </member>
        <member name="M:iTextSharp.text.Meta.Append(System.String)">
            <summary>
            appends some text to this Meta.
            </summary>
            <param name="str">a string</param>
            <returns>a StringBuilder</returns>
        </member>
        <member name="M:iTextSharp.text.Meta.GetType(System.String)">
            <summary>
            Returns the name of the meta information.
            </summary>
            <param name="tag">name to match</param>
            <returns>a string</returns>
        </member>
        <member name="M:iTextSharp.text.Meta.SetMarkupAttribute(System.String,System.String)">
            <summary>
            See <see cref="M:iTextSharp.text.IMarkupAttributes.SetMarkupAttribute(System.String,System.String)"/>
            </summary>
            <param name="name">attribute name</param>
            <param name="value">attribute value</param>
        </member>
        <member name="M:iTextSharp.text.Meta.GetMarkupAttribute(System.String)">
            <summary>
            See <see cref="M:iTextSharp.text.IMarkupAttributes.GetMarkupAttribute(System.String)"/>
            </summary>
            <param name="name">attribute name</param>
            <returns>attribute value</returns>
        </member>
        <member name="P:iTextSharp.text.Meta.Type">
            <summary>
            Gets the type of the text element.
            </summary>
            <value>a type</value>
        </member>
        <member name="P:iTextSharp.text.Meta.Chunks">
            <summary>
            Gets all the chunks in this element.
            </summary>
            <value>an ArrayList</value>
        </member>
        <member name="P:iTextSharp.text.Meta.Content">
            <summary>
            Returns the content of the meta information.
            </summary>
            <value>a string</value>
        </member>
        <member name="P:iTextSharp.text.Meta.Name">
            <summary>
            Returns the name of the meta information.
            </summary>
            <value>a string</value>
        </member>
        <member name="P:iTextSharp.text.Meta.MarkupAttributeNames">
            <summary>
            See <see cref="P:iTextSharp.text.IMarkupAttributes.MarkupAttributeNames"/>
            </summary>
            <value>a collection of string attribute names</value>
        </member>
        <member name="P:iTextSharp.text.Meta.MarkupAttributes">
            <summary>
            See <see cref="P:iTextSharp.text.IMarkupAttributes.MarkupAttributes"/>
            </summary>
            <value>a Properties-object containing all the markupAttributes.</value>
        </member>
        <member name="F:iTextSharp.text.Header.name">
            <summary> This is the content of this chunk of text. </summary>
        </member>
        <member name="M:iTextSharp.text.Header.#ctor(System.String,System.String)">
            <summary>
            Constructs a Header.
            </summary>
            <param name="name">the name of the meta-information</param>
            <param name="content">the content</param>
        </member>
        <member name="P:iTextSharp.text.Header.Name">
            <summary>
            Returns the name of the meta information.
            </summary>
            <value>a string</value>
        </member>
        <member name="T:iTextSharp.text.Image">
            <summary>
            An Image is the representation of a graphic element (JPEG, PNG or GIF)
            that has to be inserted into the document
            </summary>
            <seealso cref="T:iTextSharp.text.Element"/>
            <seealso cref="T:iTextSharp.text.Rectangle"/>
        </member>
        <member name="F:iTextSharp.text.Image.DEFAULT">
            <summary> this is a kind of image Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.RIGHT_ALIGN">
            <summary> this is a kind of image Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.LEFT_ALIGN">
            <summary> this is a kind of image Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.MIDDLE_ALIGN">
            <summary> this is a kind of image Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.TEXTWRAP">
            <summary> this is a kind of image Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.UNDERLYING">
            <summary> this is a kind of image Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.AX">
            <summary> This represents a coordinate in the transformation matrix. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.AY">
            <summary> This represents a coordinate in the transformation matrix. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.BX">
            <summary> This represents a coordinate in the transformation matrix. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.BY">
            <summary> This represents a coordinate in the transformation matrix. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.CX">
            <summary> This represents a coordinate in the transformation matrix. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.CY">
            <summary> This represents a coordinate in the transformation matrix. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.DX">
            <summary> This represents a coordinate in the transformation matrix. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.DY">
            <summary> This represents a coordinate in the transformation matrix. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.ORIGINAL_NONE">
            type of image 
        </member>
        <member name="F:iTextSharp.text.Image.ORIGINAL_JPEG">
            type of image 
        </member>
        <member name="F:iTextSharp.text.Image.ORIGINAL_PNG">
            type of image 
        </member>
        <member name="F:iTextSharp.text.Image.ORIGINAL_GIF">
            type of image 
        </member>
        <member name="F:iTextSharp.text.Image.ORIGINAL_BMP">
            type of image 
        </member>
        <member name="F:iTextSharp.text.Image.ORIGINAL_TIFF">
            type of image 
        </member>
        <member name="F:iTextSharp.text.Image.ORIGINAL_WMF">
            type of image 
        </member>
        <member name="F:iTextSharp.text.Image.invert">
            Image color inversion 
        </member>
        <member name="F:iTextSharp.text.Image.type">
            <summary> The imagetype. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.url">
            <summary> The URL of the image. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.rawData">
            <summary> The raw data of the image. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.template">
            <summary> The template to be treated as an image. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.alignment">
            <summary> The alignment of the Image. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.alt">
            <summary> Text that can be shown instead of the image. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.absoluteX">
            <summary> This is the absolute X-position of the image. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.absoluteY">
            <summary> This is the absolute Y-position of the image. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.plainWidth">
            <summary> This is the width of the image without rotation. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.plainHeight">
            <summary> This is the width of the image without rotation. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.scaledWidth">
            <summary> This is the scaled width of the image taking rotation into account. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.scaledHeight">
            <summary> This is the original height of the image taking rotation into account. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.rotation">
            <summary> This is the rotation of the image. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.colorspace">
            <summary> this is the colorspace of a jpeg-image. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.bpc">
            <summary> this is the bits per component of the raw image. It also flags a CCITT image.</summary>
        </member>
        <member name="F:iTextSharp.text.Image.transparency">
            <summary> this is the transparency information of the raw image</summary>
        </member>
        <member name="F:iTextSharp.text.Image.indentationLeft">
            the indentation to the left. 
        </member>
        <member name="F:iTextSharp.text.Image.indentationRight">
            the indentation to the right. 
        </member>
        <member name="F:iTextSharp.text.Image.dpiX">
            <summary> Holds value of property dpiX. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.dpiY">
            <summary> Holds value of property dpiY. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.interpolation">
            <summary> Holds value of property interpolation. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.annotation">
            <summary> if the annotation is not null the image will be clickable. </summary>
        </member>
        <member name="F:iTextSharp.text.Image.markupAttributes">
            <summary> Contains extra markupAttributes </summary>
        </member>
        <member name="F:iTextSharp.text.Image.profile">
            <summary> ICC Profile attached </summary>
        </member>
        <member name="F:iTextSharp.text.Image.deflated">
            Holds value of property deflated. 
        </member>
        <member name="F:iTextSharp.text.Image.smask">
            Holds value of property smask. 
        </member>
        <member name="F:iTextSharp.text.Image.xyRatio">
            Holds value of property XYRatio. 
        </member>
        <member name="F:iTextSharp.text.Image.originalType">
            Holds value of property originalType. 
        </member>
        <member name="F:iTextSharp.text.Image.originalData">
            Holds value of property originalData. 
        </member>
        <member name="F:iTextSharp.text.Image.spacingBefore">
            The spacing before the image. 
        </member>
        <member name="F:iTextSharp.text.Image.spacingAfter">
            The spacing after the image. 
        </member>
        <member name="F:iTextSharp.text.Image.widthPercentage">
            Holds value of property widthPercentage.
        </member>
        <member name="F:iTextSharp.text.Image.initialRotation">
            Holds value of property initialRotation.
        </member>
        <member name="M:iTextSharp.text.Image.#ctor(System.Uri)">
            <summary>
            Constructs an Image-object, using an url.
            </summary>
            <param name="url">the URL where the image can be found.</param>
        </member>
        <member name="M:iTextSharp.text.Image.#ctor(iTextSharp.text.Image)">
            <summary>
            Constructs an Image-object, using an url.
            </summary>
            <param name="image">another Image object.</param>
        </member>
        <member name="M:iTextSharp.text.Image.GetInstance(iTextSharp.text.Image)">
            <summary>
            Gets an instance of an Image.
            </summary>
            <param name="image">an Image</param>
            <returns>an object of type Gif, Jpeg or Png</returns>
        </member>
        <member name="M:iTextSharp.text.Image.GetInstance(System.Uri)">
            <summary>
            Gets an instance of an Image.
            </summary>
            <param name="url">an URL</param>
            <returns>an object of type Gif, Jpeg or Png</returns>
        </member>
        <member name="M:iTextSharp.text.Image.GetInstance(System.Byte[])">
            <summary>
            Gets an instance of an Image.
            </summary>
            <param name="img">a byte array</param>
            <returns>an object of type Gif, Jpeg or Png</returns>
        </member>
        <member name="M:iTextSharp.text.Image.GetInstance(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Converts a .NET image to a Native(PNG, JPG, GIF, WMF) image
            </summary>
            <param name="image"></param>
            <param name="?"></param>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.Image.GetInstance(System.Drawing.Image,iTextSharp.text.Color,System.Boolean)">
            <summary>
            Gets an instance of an Image from a System.Drwaing.Image.
            </summary>
            <param name="image">the System.Drawing.Image to convert</param>
            <param name="color">
            if different from null the transparency
            pixels are replaced by this color
            </param>
            <param name="forceBW">if true the image is treated as black and white</param>
            <returns>an object of type ImgRaw</returns>
        </member>
        <member name="M:iTextSharp.text.Image.GetInstance(System.Drawing.Image,iTextSharp.text.Color)">
            <summary>
            Gets an instance of an Image from a System.Drawing.Image.
            </summary>
            <param name="image">the System.Drawing.Image to convert</param>
            <param name="color">
            if different from null the transparency
            pixels are replaced by this color
            </param>
            <returns>an object of type ImgRaw</returns>
        </member>
        <member name="M:iTextSharp.text.Image.GetInstance(System.String)">
            <summary>
            Gets an instance of an Image.
            </summary>
            <param name="filename">a filename</param>
            <returns>an object of type Gif, Jpeg or Png</returns>
        </member>
        <member name="M:iTextSharp.text.Image.GetInstance(System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[])">
            <summary>
            Gets an instance of an Image in raw mode.
            </summary>
            <param name="width">the width of the image in pixels</param>
            <param name="height">the height of the image in pixels</param>
            <param name="components">1,3 or 4 for GrayScale, RGB and CMYK</param>
            <param name="bpc">bits per component</param>
            <param name="data">the image data</param>
            <returns>an object of type ImgRaw</returns>
        </member>
        <member name="M:iTextSharp.text.Image.GetInstance(iTextSharp.text.pdf.PdfTemplate)">
            <summary>
            Gets an instance of an Image in raw mode.
            </summary>
            <param name="template"></param>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.Image.GetInstance(System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32,System.Byte[])">
            <summary>
            Gets an instance of an Image in raw mode.
            </summary>
            <param name="width">the width of the image in pixels</param>
            <param name="height">the height of the image in pixels</param>
            <param name="reverseBits"></param>
            <param name="typeCCITT"></param>
            <param name="parameters"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.Image.GetInstance(System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32,System.Byte[],System.Int32[])">
            <summary>
            
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="reverseBits"></param>
            <param name="typeCCITT"></param>
            <param name="parameters"></param>
            <param name="data"></param>
            <param name="transparency"></param>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.Image.GetInstance(System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32[])">
            <summary>
            Gets an instance of an Image in raw mode.
            </summary>
            <param name="width">the width of the image in pixels</param>
            <param name="height">the height of the image in pixels</param>
            <param name="components">1,3 or 4 for GrayScale, RGB and CMYK</param>
            <param name="bpc">bits per component</param>
            <param name="data">the image data</param>
            <param name="transparency">
            transparency information in the Mask format of the
            image dictionary
            </param>
            <returns>an object of type ImgRaw</returns>
        </member>
        <member name="M:iTextSharp.text.Image.GetInstance(System.util.Properties)">
            <summary>
            Returns an Image that has been constructed taking in account
            the value of some attributes.
            </summary>
            <param name="attributes">Some attributes</param>
            <returns>an Image</returns>
        </member>
        <member name="M:iTextSharp.text.Image.SetAbsolutePosition(System.Single,System.Single)">
            <summary>
            Sets the absolute position of the Image.
            </summary>
            <param name="absoluteX"></param>
            <param name="absoluteY"></param>
        </member>
        <member name="M:iTextSharp.text.Image.ScaleAbsolute(System.Single,System.Single)">
            <summary>
            Scale the image to an absolute width and an absolute height.
            </summary>
            <param name="newWidth">the new width</param>
            <param name="newHeight">the new height</param>
        </member>
        <member name="M:iTextSharp.text.Image.ScaleAbsoluteWidth(System.Single)">
            <summary>
            Scale the image to an absolute width.
            </summary>
            <param name="newWidth">the new width</param>
        </member>
        <member name="M:iTextSharp.text.Image.ScaleAbsoluteHeight(System.Single)">
            <summary>
            Scale the image to an absolute height.
            </summary>
            <param name="newHeight">the new height</param>
        </member>
        <member name="M:iTextSharp.text.Image.ScalePercent(System.Single)">
            <summary>
            Scale the image to a certain percentage.
            </summary>
            <param name="percent">the scaling percentage</param>
        </member>
        <member name="M:iTextSharp.text.Image.ScalePercent(System.Single,System.Single)">
            <summary>
            Scale the width and height of an image to a certain percentage.
            </summary>
            <param name="percentX">the scaling percentage of the width</param>
            <param name="percentY">the scaling percentage of the height</param>
        </member>
        <member name="M:iTextSharp.text.Image.ScaleToFit(System.Single,System.Single)">
            <summary>
            Scales the image so that it fits a certain width and height.
            </summary>
            <param name="fitWidth">the width to fit</param>
            <param name="fitHeight">the height to fit</param>
        </member>
        <member name="M:iTextSharp.text.Image.HasAbsolutePosition">
            <summary>
            Checks if the Images has to be added at an absolute position.
            </summary>
            <returns>a bool</returns>
        </member>
        <member name="M:iTextSharp.text.Image.HasAbsoluteX">
            <summary>
            Checks if the Images has to be added at an absolute X position.
            </summary>
            <returns>a bool</returns>
        </member>
        <member name="M:iTextSharp.text.Image.IsJpeg">
            <summary>
            Returns true if the image is a Jpeg-object.
            </summary>
            <returns>a bool</returns>
        </member>
        <member name="M:iTextSharp.text.Image.IsImgRaw">
            <summary>
            Returns true if the image is a ImgRaw-object.
            </summary>
            <returns>a bool</returns>
        </member>
        <member name="M:iTextSharp.text.Image.IsImgTemplate">
            <summary>
            Returns true if the image is an ImgTemplate-object.
            </summary>
            <returns>a bool</returns>
        </member>
        <member name="M:iTextSharp.text.Image.Skip(System.IO.Stream,System.Int32)">
            <summary>
            This method is an alternative for the Stream.Skip()-method
            that doesn't seem to work properly for big values of size.
            </summary>
            <param name="istr">the stream</param>
            <param name="size">the number of bytes to skip</param>
        </member>
        <member name="M:iTextSharp.text.Image.ToURL(System.String)">
            <summary>
            This method makes a valid URL from a given filename.
            </summary>
            <remarks>
            
            </remarks>
            <param name="filename">a given filename</param>
            <returns>a valid URL</returns>
        </member>
        <member name="M:iTextSharp.text.Image.IsTag(System.String)">
            <summary>
            Checks if a given tag corresponds with this object.
            </summary>
            <param name="tag">the given tag</param>
            <returns>true if the tag corresponds</returns>
        </member>
        <member name="M:iTextSharp.text.Image.GetSerialId">
            <summary>
            generates new serial id
            </summary>
        </member>
        <member name="M:iTextSharp.text.Image.SetDpi(System.Int32,System.Int32)">
            Sets the dots per inch value
            
            @param dpiX
                       dpi for x coordinates
            @param dpiY
                       dpi for y coordinates
        </member>
        <member name="M:iTextSharp.text.Image.IsMaskCandidate">
            <summary>
            Returns true if this Image has the
            requisites to be a mask.
            </summary>
            <returns>true if this Image can be a mask</returns>
        </member>
        <member name="M:iTextSharp.text.Image.MakeMask">
            <summary>
            Make this Image a mask.
            </summary>
        </member>
        <member name="M:iTextSharp.text.Image.IsMask">
            <summary>
            Returns true if this Image is a mask.
            </summary>
            <returns>true if this Image is a mask</returns>
        </member>
        <member name="M:iTextSharp.text.Image.SetMarkupAttribute(System.String,System.String)">
            <summary>
            See <see cref="M:iTextSharp.text.IMarkupAttributes.SetMarkupAttribute(System.String,System.String)"/>
            </summary>
            <param name="name">attribute name</param>
            <param name="value">attribute value</param>
        </member>
        <member name="M:iTextSharp.text.Image.GetMarkupAttribute(System.String)">
            <summary>
            See <see cref="M:iTextSharp.text.IMarkupAttributes.GetMarkupAttribute(System.String)"/>
            </summary>
            <param name="name">attribute name</param>
            <returns>attribute value</returns>
        </member>
        <member name="M:iTextSharp.text.Image.HasICCProfile">
            Checks is the image has an ICC profile.
            @return the ICC profile or null
        </member>
        <member name="M:iTextSharp.text.Image.SimplifyColorspace">
            Replaces CalRGB and CalGray colorspaces with DeviceRGB and DeviceGray.
        </member>
        <member name="P:iTextSharp.text.Image.Rotation">
            <summary>
            Sets the rotation of the image in radians.
            </summary>
            <param name="r">rotation in radians</param>
        </member>
        <member name="P:iTextSharp.text.Image.RotationDegrees">
            <summary>
            Sets the rotation of the image in degrees.
            </summary>
            <param name="deg">rotation in degrees</param>
        </member>
        <member name="P:iTextSharp.text.Image.Annotation">
            <summary>
            Get/set the annotation.
            </summary>
            <value>the Annotation</value>
        </member>
        <member name="P:iTextSharp.text.Image.Bpc">
            <summary>
            Gets the bpc for the image.
            </summary>
            <remarks>
            this only makes sense for Images of the type RawImage.
            </remarks>
            <value>a bpc value</value>
        </member>
        <member name="P:iTextSharp.text.Image.RawData">
            <summary>
            Gets the raw data for the image.
            </summary>
            <remarks>
            this only makes sense for Images of the type RawImage.
            </remarks>
            <value>the raw data</value>
        </member>
        <member name="P:iTextSharp.text.Image.TemplateData">
            <summary>
            Get/set the template to be used as an image.
            </summary>
            <remarks>
            this only makes sense for Images of the type ImgTemplate.
            </remarks>
            <value>the template</value>
        </member>
        <member name="P:iTextSharp.text.Image.AbsoluteX">
            <summary>
            Returns the absolute X position.
            </summary>
            <value>a position</value>
        </member>
        <member name="P:iTextSharp.text.Image.AbsoluteY">
            <summary>
            Returns the absolute Y position.
            </summary>
            <value>a position</value>
        </member>
        <member name="P:iTextSharp.text.Image.Type">
            <summary>
            Returns the type.
            </summary>
            <value>a type</value>
        </member>
        <member name="P:iTextSharp.text.Image.Url">
            <summary>
            Gets the string-representation of the reference to the image.
            </summary>
            <value>a string</value>
        </member>
        <member name="P:iTextSharp.text.Image.Alignment">
            <summary>
            Get/set the alignment for the image.
            </summary>
            <value>a value</value>
        </member>
        <member name="P:iTextSharp.text.Image.Alt">
            <summary>
            Get/set the alternative text for the image.
            </summary>
            <value>a string</value>
        </member>
        <member name="P:iTextSharp.text.Image.ScaledWidth">
            <summary>
            Gets the scaled width of the image.
            </summary>
            <value>a value</value>
        </member>
        <member name="P:iTextSharp.text.Image.ScaledHeight">
            <summary>
            Gets the scaled height of the image.
            </summary>
            <value>a value</value>
        </member>
        <member name="P:iTextSharp.text.Image.Colorspace">
            <summary>
            Gets the colorspace for the image.
            </summary>
            <remarks>
            this only makes sense for Images of the type Jpeg.
            </remarks>
            <value>a colorspace value</value>
        </member>
        <member name="P:iTextSharp.text.Image.Matrix">
            <summary>
            Returns the transformation matrix of the image.
            </summary>
            <value>an array [AX, AY, BX, BY, CX, CY, DX, DY]</value>
        </member>
        <member name="P:iTextSharp.text.Image.Transparency">
            <summary>
            Returns the transparency.
            </summary>
            <value>the transparency</value>
        </member>
        <member name="P:iTextSharp.text.Image.PlainWidth">
            <summary>
            Gets the plain width of the image.
            </summary>
            <value>a value</value>
        </member>
        <member name="P:iTextSharp.text.Image.PlainHeight">
            <summary>
            Gets the plain height of the image.
            </summary>
            <value>a value</value>
        </member>
        <member name="P:iTextSharp.text.Image.MySerialId">
            <summary>
            returns serial id for this object
            </summary>
        </member>
        <member name="P:iTextSharp.text.Image.DpiX">
            <summary>
            Gets the dots-per-inch in the X direction. Returns 0 if not available.
            </summary>
            <value>the dots-per-inch in the X direction</value>
        </member>
        <member name="P:iTextSharp.text.Image.DpiY">
            <summary>
            Gets the dots-per-inch in the Y direction. Returns 0 if not available.
            </summary>
            <value>the dots-per-inch in the Y direction</value>
        </member>
        <member name="P:iTextSharp.text.Image.ImageMask">
            <summary>
            Get/set the explicit masking.
            </summary>
            <value>the explicit masking</value>
        </member>
        <member name="P:iTextSharp.text.Image.Inverted">
            <summary>
            Inverts the meaning of the bits of a mask.
            </summary>
            <value>true to invert the meaning of the bits of a mask</value>
        </member>
        <member name="P:iTextSharp.text.Image.Interpolation">
            <summary>
            Sets the image interpolation. Image interpolation attempts to
            produce a smooth transition between adjacent sample values.
            </summary>
            <value>New value of property interpolation.</value>
        </member>
        <member name="P:iTextSharp.text.Image.MarkupAttributeNames">
            <summary>
            See <see cref="P:iTextSharp.text.IMarkupAttributes.MarkupAttributeNames"/>
            </summary>
            <value>a collection of string attribute names</value>
        </member>
        <member name="P:iTextSharp.text.Image.MarkupAttributes">
            <summary>
            See <see cref="P:iTextSharp.text.IMarkupAttributes.MarkupAttributes"/>
            </summary>
            <value>a Properties-object containing all the markupAttributes.</value>
        </member>
        <member name="P:iTextSharp.text.Image.TagICC">
            Tags this image with an ICC profile.
            @param profile the profile
        </member>
        <member name="P:iTextSharp.text.Image.InitialRotation">
            Some image formats, like TIFF may present the images rotated that have
            to be compensated.
        </member>
        <member name="T:iTextSharp.text.ImgCCITT">
             CCITT Image data that has to be inserted into the document
            
             @see        Element
             @see        Image
            
             @author  Paulo Soares
            <summary>
            CCITT Image data that has to be inserted into the document
            </summary>
            <seealso cref="T:iTextSharp.text.Element"/>
            <seealso cref="T:iTextSharp.text.Image"/>
        </member>
        <member name="F:iTextSharp.text.ImgCCITT.bitReversal">
            <summary>
            A table to do fast bit reversal.
            </summary>
        </member>
        <member name="M:iTextSharp.text.ImgCCITT.ReverseBits(System.Byte[])">
            <summary>
            Reverses the bits in the array.
            </summary>
            <param name="data">data to reverse bits</param>
        </member>
        <member name="M:iTextSharp.text.ImgCCITT.#ctor(System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32,System.Byte[])">
            <summary>
            Creats an Image in CCITT mode.
            </summary>
            <param name="width">the exact width of the image</param>
            <param name="height">the exact height of the image</param>
            <param name="reverseBits">
            reverses the bits in data.
            Bit 0 is swapped with bit 7 and so on
            </param>
            <param name="typeCCITT">
            the type of compression in data. It can be
            CCITTG4, CCITTG31D, CCITTG32D
            </param>
            <param name="parameters">
            parameters associated with this stream. Possible values are
            CCITT_BLACKIS1, CCITT_ENCODEDBYTEALIGN, CCITT_ENDOFLINE and CCITT_ENDOFBLOCK or a
            combination of them
            </param>
            <param name="data">the image data</param>
        </member>
        <member name="T:iTextSharp.text.ImgRaw">
            <summary>
            Raw Image data that has to be inserted into the document
            </summary>
            <seealso cref="T:iTextSharp.text.Element"/>
            <seealso cref="T:iTextSharp.text.Image"/>
        </member>
        <member name="M:iTextSharp.text.ImgRaw.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[])">
            <summary>
            Creats an Image in raw mode.
            </summary>
            <param name="width">the exact width of the image</param>
            <param name="height">the exact height of the image</param>
            <param name="components">1,3 or 4 for GrayScale, RGB and CMYK</param>
            <param name="bpc">bits per component. Must be 1,2,4 or 8</param>
            <param name="data">data the image data</param>
        </member>
        <member name="T:iTextSharp.text.ImgTemplate">
            <summary>
            PdfTemplate that has to be inserted into the document
            </summary>
            <seealso cref="T:iTextSharp.text.Element"/>
            <seealso cref="T:iTextSharp.text.Image"/>
        </member>
        <member name="M:iTextSharp.text.ImgTemplate.#ctor(iTextSharp.text.Image)">
            <summary>
            Creats an Image from a PdfTemplate.
            </summary>
            <param name="image">the Image</param>
        </member>
        <member name="M:iTextSharp.text.ImgTemplate.#ctor(iTextSharp.text.pdf.PdfTemplate)">
            <summary>
            Creats an Image from a PdfTemplate.
            </summary>
            <param name="template">the PdfTemplate</param>
        </member>
        <member name="T:iTextSharp.text.ImgWMF">
             An ImgWMF is the representation of a windows metafile
             that has to be inserted into the document
            
             @see        Element
             @see        Image
             @see        Gif
             @see        Png
            <summary>
            An ImgWMF is the representation of a windows metafile
            that has to be inserted into the document
            </summary>
        </member>
        <member name="M:iTextSharp.text.ImgWMF.#ctor(iTextSharp.text.Image)">
            <summary>
            Constructs an ImgWMF-object
            </summary>
            <param name="image">a Image</param>
        </member>
        <member name="M:iTextSharp.text.ImgWMF.#ctor(System.Uri)">
            <summary>
            Constructs an ImgWMF-object, using an url.
            </summary>
            <param name="url">the URL where the image can be found</param>
        </member>
        <member name="M:iTextSharp.text.ImgWMF.#ctor(System.String)">
            <summary>
            Constructs an ImgWMF-object, using a filename.
            </summary>
            <param name="filename">a string-representation of the file that contains the image.</param>
        </member>
        <member name="M:iTextSharp.text.ImgWMF.#ctor(System.Byte[])">
            <summary>
            Constructs an ImgWMF-object from memory.
            </summary>
            <param name="img">the memory image</param>
        </member>
        <member name="M:iTextSharp.text.ImgWMF.ProcessParameters">
            <summary>
            This method checks if the image is a valid WMF and processes some parameters.
            </summary>
        </member>
        <member name="M:iTextSharp.text.ImgWMF.ReadWMF(iTextSharp.text.pdf.PdfTemplate)">
            <summary>
            Reads the WMF into a template.
            </summary>
            <param name="template">the template to read to</param>
        </member>
        <member name="T:iTextSharp.text.Jpeg">
            <summary>
            An Jpeg is the representation of a graphic element (JPEG)
            that has to be inserted into the document
            </summary>
            <seealso cref="T:iTextSharp.text.Element"/>
            <seealso cref="T:iTextSharp.text.Image"/>
            <seealso cref="T:iTextSharp.text.Gif"/>
            <seealso cref="T:iTextSharp.text.Png"/>
        </member>
        <member name="F:iTextSharp.text.Jpeg.NOT_A_MARKER">
            <summary> This is a type of marker. </summary>
        </member>
        <member name="F:iTextSharp.text.Jpeg.VALID_MARKER">
            <summary> This is a type of marker. </summary>
        </member>
        <member name="F:iTextSharp.text.Jpeg.VALID_MARKERS">
            <summary> Acceptable Jpeg markers. </summary>
        </member>
        <member name="F:iTextSharp.text.Jpeg.UNSUPPORTED_MARKER">
            <summary> This is a type of marker. </summary>
        </member>
        <member name="F:iTextSharp.text.Jpeg.UNSUPPORTED_MARKERS">
            <summary> Unsupported Jpeg markers. </summary>
        </member>
        <member name="F:iTextSharp.text.Jpeg.NOPARAM_MARKER">
            <summary> This is a type of marker. </summary>
        </member>
        <member name="F:iTextSharp.text.Jpeg.NOPARAM_MARKERS">
            <summary> Jpeg markers without additional parameters. </summary>
        </member>
        <member name="M:iTextSharp.text.Jpeg.#ctor(iTextSharp.text.Image)">
            <summary>
            Construct a Jpeg-object, using a Image
            </summary>
            <param name="image">a Image</param>
        </member>
        <member name="M:iTextSharp.text.Jpeg.#ctor(System.Uri)">
            <summary>
            Constructs a Jpeg-object, using an Uri.
            </summary>
            <remarks>
            Deprecated, use Image.GetInstance(...) to create an Image
            </remarks>
            <param name="Uri">the Uri where the image can be found</param>
        </member>
        <member name="M:iTextSharp.text.Jpeg.#ctor(System.Uri,System.Single,System.Single)">
            <summary>
            Constructs a Jpeg-object, using an Uri.
            </summary>
            <remarks>
            Deprecated, use Image.GetInstance(...) to create an Image
            </remarks>
            <param name="Uri">the Uri where the image can be found.</param>
            <param name="width">the scaled width</param>
            <param name="height">the scaled height</param>
        </member>
        <member name="M:iTextSharp.text.Jpeg.#ctor(System.String)">
            <summary>
            Constructs a Jpeg-object, using a filename.
            </summary>
            <remarks>
            Deprecated, use Image.GetInstance(...) to create an Image
            </remarks>
            <param name="filename">a string-representation of the file that contains the Image.</param>
        </member>
        <member name="M:iTextSharp.text.Jpeg.#ctor(System.String,System.Single,System.Single)">
            <summary>
            Constructs a Jpeg-object, using a filename.
            </summary>
            <remarks>
            Deprecated, use Image.GetInstance(...) to create an Image
            </remarks>
            <param name="filename">a string-representation of the file that contains the Image.</param>
            <param name="width">the scaled width</param>
            <param name="height">the scaled height</param>
        </member>
        <member name="M:iTextSharp.text.Jpeg.#ctor(System.Byte[])">
            <summary>
            Constructs a Jpeg-object from memory.
            </summary>
            <param name="img">the memory image</param>
        </member>
        <member name="M:iTextSharp.text.Jpeg.#ctor(System.Byte[],System.Single,System.Single)">
            <summary>
            Constructs a Jpeg-object from memory.
            </summary>
            <param name="img">the memory image.</param>
            <param name="width">the width you want the image to have</param>
            <param name="height">the height you want the image to have</param>
        </member>
        <member name="M:iTextSharp.text.Jpeg.GetShort(System.IO.Stream)">
            <summary>
            Reads a short from the Stream.
            </summary>
            <param name="istr">the Stream</param>
            <returns>an int</returns>
        </member>
        <member name="M:iTextSharp.text.Jpeg.GetShortInverted(System.IO.Stream)">
            <summary>
            Reads an inverted short from the Stream.
            </summary>
            <param name="istr">the Stream</param>
            <returns>an int</returns>
        </member>
        <member name="M:iTextSharp.text.Jpeg.MarkerType(System.Int32)">
            <summary>
            Returns a type of marker.
            </summary>
            <param name="marker">an int</param>
            <returns>a type: VALID_MARKER, UNSUPPORTED_MARKER or NOPARAM_MARKER</returns>
        </member>
        <member name="M:iTextSharp.text.Jpeg.ProcessParameters">
            <summary>
            This method checks if the image is a valid JPEG and processes some parameters.
            </summary>
        </member>
        <member name="T:iTextSharp.text.ListItem">
            <summary>
            A ListItem is a Paragraph
            that can be added to a List.
            </summary>
            <example>
            <B>Example 1:</B>
            <code>
            List list = new List(true, 20);
            list.Add(<strong>new ListItem("First line")</strong>);
            list.Add(<strong>new ListItem("The second line is longer to see what happens once the end of the line is reached. Will it start on a new line?")</strong>);
            list.Add(<strong>new ListItem("Third line")</strong>);
            </code>
            
            The result of this code looks like this:
            <OL>
                   <LI>
                       First line
                   </LI>
                   <LI>
                       The second line is longer to see what happens once the end of the line is reached. Will it start on a new line?
                   </LI>
                   <LI>
                       Third line
                   </LI>
               </OL>
               
            <B>Example 2:</B>
            <code>
            List overview = new List(false, 10);
            overview.Add(<strong>new ListItem("This is an item")</strong>);
            overview.Add("This is another item");
            </code>
            
            The result of this code looks like this:
            <UL>
                   <LI>
                       This is an item
                   </LI>
                   <LI>
                       This is another item
                   </LI>
               </UL>
            </example>
            <seealso cref="T:iTextSharp.text.Element"/>
            <seealso cref="T:iTextSharp.text.List"/>
            <seealso cref="T:iTextSharp.text.Paragraph"/>
        </member>
        <member name="T:iTextSharp.text.Paragraph">
            <summary>
            A Paragraph is a series of Chunks and/or Phrases.
            </summary>
            <remarks>
            A Paragraph has the same qualities of a Phrase, but also
            some additional layout-parameters:
            <UL>
            <LI/>the indentation
            <LI/>the alignment of the text
            </UL>
            </remarks>
            <example>
            <code>
            <strong>Paragraph p = new Paragraph("This is a paragraph",
                           FontFactory.GetFont(FontFactory.HELVETICA, 18, Font.BOLDITALIC, new Color(0, 0, 255)));</strong>
               </code>
            </example>
            <seealso cref="T:iTextSharp.text.Element"/>
            <seealso cref="T:iTextSharp.text.Phrase"/>
            <seealso cref="T:iTextSharp.text.ListItem"/>
        </member>
        <member name="F:iTextSharp.text.Paragraph.alignment">
            <summary> The alignment of the text. </summary>
        </member>
        <member name="F:iTextSharp.text.Paragraph.indentationLeft">
            <summary> The indentation of this paragraph on the left side. </summary>
        </member>
        <member name="F:iTextSharp.text.Paragraph.indentationRight">
            <summary> The indentation of this paragraph on the right side. </summary>
        </member>
        <member name="F:iTextSharp.text.Paragraph.spacingBefore">
            The spacing before the paragraph. 
        </member>
        <member name="F:iTextSharp.text.Paragraph.spacingAfter">
            The spacing after the paragraph. 
        </member>
        <member name="F:iTextSharp.text.Paragraph.keeptogether">
            <summary> Does the paragraph has to be kept together on 1 page. </summary>
        </member>
        <member name="F:iTextSharp.text.Paragraph.multipliedLeading">
            The text leading that is multiplied by the biggest font size in the line. 
        </member>
        <member name="F:iTextSharp.text.Paragraph.firstLineIndent">
            Holds value of property firstLineIndent.
        </member>
        <member name="F:iTextSharp.text.Paragraph.extraParagraphSpace">
            Holds value of property extraParagraphSpace.
        </member>
        <member name="M:iTextSharp.text.Paragraph.#ctor">
            <summary>
            Constructs a Paragraph.
            </summary>
        </member>
        <member name="M:iTextSharp.text.Paragraph.#ctor(System.Single)">
            <summary>
            Constructs a Paragraph with a certain leading.
            </summary>
            <param name="leading">the leading</param>
        </member>
        <member name="M:iTextSharp.text.Paragraph.#ctor(iTextSharp.text.Chunk)">
            <summary>
            Constructs a Paragraph with a certain Chunk.
            </summary>
            <param name="chunk">a Chunk</param>
        </member>
        <member name="M:iTextSharp.text.Paragraph.#ctor(System.Single,iTextSharp.text.Chunk)">
            <summary>
            Constructs a Paragraph with a certain Chunk
            and a certain leading.
            </summary>
            <param name="leading">the leading</param>
            <param name="chunk">a Chunk</param>
        </member>
        <member name="M:iTextSharp.text.Paragraph.#ctor(System.String)">
            <summary>
            Constructs a Paragraph with a certain string.
            </summary>
            <param name="str">a string</param>
        </member>
        <member name="M:iTextSharp.text.Paragraph.#ctor(System.String,iTextSharp.text.Font)">
            <summary>
            Constructs a Paragraph with a certain string
            and a certain Font.
            </summary>
            <param name="str">a string</param>
            <param name="font">a Font</param>
        </member>
        <member name="M:iTextSharp.text.Paragraph.#ctor(System.Single,System.String)">
            <summary>
            Constructs a Paragraph with a certain string
            and a certain leading.
            </summary>
            <param name="leading">the leading</param>
            <param name="str">a string</param>
        </member>
        <member name="M:iTextSharp.text.Paragraph.#ctor(System.Single,System.String,iTextSharp.text.Font)">
            <summary>
            Constructs a Paragraph with a certain leading, string
            and Font.
            </summary>
            <param name="leading">the leading</param>
            <param name="str">a string</param>
            <param name="font">a Font</param>
        </member>
        <member name="M:iTextSharp.text.Paragraph.#ctor(iTextSharp.text.Phrase)">
            <summary>
            Constructs a Paragraph with a certain Phrase.
            </summary>
            <param name="phrase">a Phrase</param>
        </member>
        <member name="M:iTextSharp.text.Paragraph.#ctor(System.util.Properties)">
            <summary>
            Returns a Paragraph that has been constructed taking in account
            the value of some attributes.
            </summary>
            <param name="attributes">Some attributes</param>
        </member>
        <member name="M:iTextSharp.text.Paragraph.Add(System.Object)">
            <summary>
            Adds an Object to the Paragraph.
            </summary>
            <param name="o">the object to add</param>
            <returns>a boolean</returns>
        </member>
        <member name="M:iTextSharp.text.Paragraph.SetAlignment(System.String)">
            <summary>
            Sets the alignment of this paragraph.
            </summary>
            <param name="alignment">the new alignment as a string</param>
        </member>
        <member name="M:iTextSharp.text.Paragraph.IsTag(System.String)">
            <summary>
            Checks if a given tag corresponds with this object.
            </summary>
            <param name="tag">the given tag</param>
            <returns>true if the tag corresponds</returns>
        </member>
        <member name="M:iTextSharp.text.Paragraph.SetLeading(System.Single,System.Single)">
            Sets the leading fixed and variable. The resultant leading will be
            fixedLeading+multipliedLeading*maxFontSize where maxFontSize is the
            size of the bigest font in the line.
            @param fixedLeading the fixed leading
            @param multipliedLeading the variable leading
        </member>
        <member name="P:iTextSharp.text.Paragraph.Type">
            <summary>
            Gets the type of the text element.
            </summary>
            <value>a type</value>
        </member>
        <member name="P:iTextSharp.text.Paragraph.KeepTogether">
            <summary>
            Set/get if this paragraph has to be kept together on one page.
            </summary>
            <value>a boolean</value>
        </member>
        <member name="P:iTextSharp.text.Paragraph.Alignment">
            <summary>
            Get/set the alignment of this paragraph.
            </summary>
            <value>a integer</value>
        </member>
        <member name="P:iTextSharp.text.Paragraph.IndentationLeft">
            <summary>
            Get/set the indentation of this paragraph on the left side.
            </summary>
            <value>a float</value>
        </member>
        <member name="P:iTextSharp.text.Paragraph.IndentationRight">
            <summary>
            Get/set the indentation of this paragraph on the right side.
            </summary>
            <value>a float</value>
        </member>
        <member name="F:iTextSharp.text.ListItem.symbol">
            <summary> this is the symbol that wil proceed the listitem. </summary>
        </member>
        <member name="M:iTextSharp.text.ListItem.#ctor">
            <summary>
            Constructs a ListItem.
            </summary>
        </member>
        <member name="M:iTextSharp.text.ListItem.#ctor(System.Single)">
            <summary>
               Constructs a ListItem with a certain leading.
            </summary>
            <param name="leading">the leading</param>
        </member>
        <member name="M:iTextSharp.text.ListItem.#ctor(iTextSharp.text.Chunk)">
            <summary>
            Constructs a ListItem with a certain Chunk.
            </summary>
            <param name="chunk">a Chunk</param>
        </member>
        <member name="M:iTextSharp.text.ListItem.#ctor(System.String)">
            <summary>
            Constructs a ListItem with a certain string.
            </summary>
            <param name="str">a string</param>
        </member>
        <member name="M:iTextSharp.text.ListItem.#ctor(System.String,iTextSharp.text.Font)">
            <summary>
            Constructs a ListItem with a certain string
            and a certain Font.
            </summary>
            <param name="str">a string</param>
            <param name="font">a string</param>
        </member>
        <member name="M:iTextSharp.text.ListItem.#ctor(System.Single,iTextSharp.text.Chunk)">
            <summary>
            Constructs a ListItem with a certain Chunk
            and a certain leading.
            </summary>
            <param name="leading">the leading</param>
            <param name="chunk">a Chunk</param>
        </member>
        <member name="M:iTextSharp.text.ListItem.#ctor(System.Single,System.String)">
            <summary>
            Constructs a ListItem with a certain string
            and a certain leading.
            </summary>
            <param name="leading">the leading</param>
            <param name="str">a string</param>
        </member>
        <member name="M:iTextSharp.text.ListItem.#ctor(System.Single,System.String,iTextSharp.text.Font)">
             Constructs a ListItem with a certain leading, string
             and Font.
            
             @param    leading        the leading
             @param    string        a string
             @param    font        a Font
            <summary>
            Constructs a ListItem with a certain leading, string
            and Font.
            </summary>
            <param name="leading">the leading</param>
            <param name="str">a string</param>
            <param name="font">a Font</param>
        </member>
        <member name="M:iTextSharp.text.ListItem.#ctor(iTextSharp.text.Phrase)">
            <summary>
            Constructs a ListItem with a certain Phrase.
            </summary>
            <param name="phrase">a Phrase</param>
        </member>
        <member name="M:iTextSharp.text.ListItem.#ctor(System.util.Properties)">
            <summary>
            Returns a ListItem that has been constructed taking in account
            the value of some attributes.
            </summary>
            <param name="attributes">Some attributes</param>
        </member>
        <member name="M:iTextSharp.text.ListItem.IsTag(System.String)">
            <summary>
            Checks if a given tag corresponds with this object.
            </summary>
            <param name="tag">the given tag</param>
            <returns>true if the tag corresponds</returns>
        </member>
        <member name="P:iTextSharp.text.ListItem.Type">
            <summary>
            Gets the type of the text element.
            </summary>
            <value>a type</value>
        </member>
        <member name="P:iTextSharp.text.ListItem.ListSymbol">
            <summary>
            Get/set the listsymbol.
            </summary>
            <value>a Chunk</value>
        </member>
        <member name="T:iTextSharp.text.PageSize">
            <summary>
            The PageSize-object contains a number of rectangles representing the most common papersizes.
            </summary>
            <seealso cref="T:iTextSharp.text.Rectangle"/>
        </member>
        <member name="F:iTextSharp.text.PageSize.LETTER">
            <summary> This is the letter format </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.NOTE">
            <summary> This is the note format </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.LEGAL">
            <summary> This is the legal format </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.A0">
            <summary> This is the a0 format </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.A1">
            <summary> This is the a1 format </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.A2">
            <summary> This is the a2 format </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.A3">
            <summary> This is the a3 format </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.A4">
            <summary> This is the a4 format </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.A5">
            <summary> This is the a5 format </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.A6">
            <summary> This is the a6 format </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.A7">
            <summary> This is the a7 format </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.A8">
            <summary> This is the a8 format </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.A9">
            <summary> This is the a9 format </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.A10">
            <summary> This is the a10 format </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.B0">
            <summary> This is the b0 format </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.B1">
            <summary> This is the b1 format </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.B2">
            <summary> This is the b2 format </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.B3">
            <summary> This is the b3 format </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.B4">
            <summary> This is the b4 format </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.B5">
            <summary> This is the b5 format </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.ARCH_E">
            <summary> This is the archE format </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.ARCH_D">
            <summary> This is the archD format </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.ARCH_C">
            <summary> This is the archC format </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.ARCH_B">
            <summary> This is the archB format </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.ARCH_A">
            <summary> This is the archA format </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.FLSA">
            <summary> This is the flsa format </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.FLSE">
            <summary> This is the flse format </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.HALFLETTER">
            <summary> This is the halfletter format </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize._11X17">
            <summary> This is the 11x17 format </summary>
        </member>
        <member name="F:iTextSharp.text.PageSize.LEDGER">
            <summary> This is the ledger format </summary>
        </member>
        <member name="T:iTextSharp.text.RomanList">
            
            A special-version of <CODE>LIST</CODE> which use roman-letters.
            
            @see com.lowagie.text.List
            @version 2003-06-22
            @author Michael Niedermair
        </member>
        <member name="F:iTextSharp.text.RomanList.romanlower">
            UpperCase or LowerCase
        </member>
        <member name="M:iTextSharp.text.RomanList.#ctor(System.Int32)">
            Initialization
            
            @param symbolIndent    indent
        </member>
        <member name="M:iTextSharp.text.RomanList.#ctor(System.Boolean,System.Int32)">
            Initialization 
            @param    romanlower        roman-char in lowercase   
            @param     symbolIndent    indent
        </member>
        <member name="M:iTextSharp.text.RomanList.Add(System.Object)">
             Adds an <CODE>Object</CODE> to the <CODE>List</CODE>.
            
             @param    o    the object to add.
             @return true if adding the object succeeded
        </member>
        <member name="F:iTextSharp.text.RomanList.roman">
            Array with Roman digits.
        </member>
        <member name="M:iTextSharp.text.RomanList.ToRoman(System.Int32)">
            changes an int into a lower case roman number.
            @param number the original number
            @return the roman number (lower case)
        </member>
        <member name="M:iTextSharp.text.RomanList.ToRomanUppercase(System.Int32)">
            Changes an int into an upper case roman number.
            @param number the original number
            @return the roman number (upper case)
        </member>
        <member name="M:iTextSharp.text.RomanList.ToRomanLowerCase(System.Int32)">
            Changes an int into a lower case roman number.
            @param number the original number
            @return the roman number (lower case)
        </member>
        <member name="P:iTextSharp.text.RomanList.setRomanLower">
            set the roman-letters to lowercase otherwise to uppercase
            
            @param romanlower
        </member>
        <member name="T:iTextSharp.text.RomanList.RomanDigit">
            Helper class for Roman Digits
        </member>
        <member name="F:iTextSharp.text.RomanList.RomanDigit.digit">
            part of a roman number 
        </member>
        <member name="F:iTextSharp.text.RomanList.RomanDigit.value">
            value of the roman digit 
        </member>
        <member name="F:iTextSharp.text.RomanList.RomanDigit.pre">
            can the digit be used as a prefix 
        </member>
        <member name="M:iTextSharp.text.RomanList.RomanDigit.#ctor(System.Char,System.Int32,System.Boolean)">
            Constructs a roman digit
            @param digit the roman digit
            @param value the value
            @param pre can it be used as a prefix
        </member>
        <member name="T:iTextSharp.text.Row">
            <summary>
            A Row is part of a Table
            and contains some Cells.
            </summary>
            <remarks>
            All Rows are constructed by a Table-object.
            You don't have to construct any Row yourself.
            In fact you can't construct a Row outside the package.
            <P/>
            Since a Cell can span several rows and/or columns
            a row can contain reserved space without any content.
            </remarks>
            <seealso cref="T:iTextSharp.text.Element"/>
            <seealso cref="T:iTextSharp.text.Cell"/>
            <seealso cref="T:iTextSharp.text.Table"/>
        </member>
        <member name="F:iTextSharp.text.Row.NULL">
            <summary> id of a null element in a Row</summary>
        </member>
        <member name="F:iTextSharp.text.Row.CELL">
            <summary> id of the Cell element in a Row</summary>
        </member>
        <member name="F:iTextSharp.text.Row.TABLE">
            <summary> id of the Table element in a Row</summary>
        </member>
        <member name="F:iTextSharp.text.Row.columns">
            <summary> This is the number of columns in the Row. </summary>
        </member>
        <member name="F:iTextSharp.text.Row.currentColumn">
            <summary> This is a valid position the Row. </summary>
        </member>
        <member name="F:iTextSharp.text.Row.reserved">
            <summary> This is the array that keeps track of reserved cells. </summary>
        </member>
        <member name="F:iTextSharp.text.Row.cells">
            <summary> This is the array of Objects (Cell or Table). </summary>
        </member>
        <member name="F:iTextSharp.text.Row.horizontalAlignment">
            <summary> This is the vertical Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Row.verticalAlignment">
            <summary> This is the vertical Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Row.markupAttributes">
            <summary> Contains extra markupAttributes </summary>
        </member>
        <member name="M:iTextSharp.text.Row.#ctor(System.Int32)">
            <summary>
            Constructs a Row with a certain number of columns.
            </summary>
            <param name="columns">a number of columns</param>
        </member>
        <member name="M:iTextSharp.text.Row.Process(iTextSharp.text.IElementListener)">
            <summary>
            Processes the element by adding it (or the different parts) to a
            IElementListener.
            </summary>
            <param name="listener">an IElementListener</param>
            <returns>true if the element was processed successfully</returns>
        </member>
        <member name="M:iTextSharp.text.Row.DeleteColumn(System.Int32)">
            <summary>
            Deletes a certain column has been deleted.
            </summary>
            <param name="column">the number of the column to delete</param>
        </member>
        <member name="M:iTextSharp.text.Row.AddElement(System.Object)">
            <summary>
            Adds a Cell to the Row.
            </summary>
            <param name="element">the element to add (currently only Cells and Tables supported)</param>
            <returns>
            the column position the Cell was added,
                   or -1 if the element couldn't be added.
            </returns>
        </member>
        <member name="M:iTextSharp.text.Row.AddElement(System.Object,System.Int32)">
            <summary>
            Adds an element to the Row at the position given.
            </summary>
            <param name="element">the element to add. (currently only Cells and Tables supported</param>
            <param name="column">the position where to add the cell</param>
            <returns>
            the column position the Cell was added,
                   or -1 if the Cell couldn't be added.
            </returns>
        </member>
        <member name="M:iTextSharp.text.Row.SetElement(System.Object,System.Int32)">
            <summary>
            Puts Cell to the Row at the position given, doesn't reserve colspan.
            </summary>
            <param name="aElement">the cell to add.</param>
            <param name="column">the position where to add the cell.</param>
        </member>
        <member name="M:iTextSharp.text.Row.Reserve(System.Int32)">
            <summary>
            Reserves a Cell in the Row.
            </summary>
            <param name="column">the column that has to be reserved.</param>
            <returns>true if the column was reserved, false if not.</returns>
        </member>
        <member name="M:iTextSharp.text.Row.Reserve(System.Int32,System.Int32)">
            <summary>
            Reserves a Cell in the Row.
            </summary>
            <param name="column">the column that has to be reserved.</param>
            <param name="size">the number of columns</param>
            <returns>true if the column was reserved, false if not.</returns>
        </member>
        <member name="M:iTextSharp.text.Row.IsReserved(System.Int32)">
            <summary>
            Returns true/false when this position in the Row has been reserved, either filled or through a colspan of an Element.
            </summary>
            <param name="column">the column.</param>
            <returns>true if the column was reserved, false if not.</returns>
        </member>
        <member name="M:iTextSharp.text.Row.GetElementID(System.Int32)">
            <summary>
            Returns the type-id of the element in a Row.
            </summary>
            <param name="column">the column of which you'd like to know the type</param>
            <returns>the element id</returns>
        </member>
        <member name="M:iTextSharp.text.Row.GetObjectID(System.Object)">
            <summary>
            Returns the type-id of an Object.
            </summary>
            <param name="element"></param>
            <returns>the object of which you'd like to know the type-id, -1 if invalid</returns>
        </member>
        <member name="M:iTextSharp.text.Row.GetCell(System.Int32)">
            <summary>
            Gets a Cell or Table from a certain column.
            </summary>
            <param name="column">the column the Cell/Table is in.</param>
            <returns>
            the Cell,Table or Object if the column was
            reserved or null if empty.
            </returns>
        </member>
        <member name="M:iTextSharp.text.Row.IsEmpty">
            <summary>
            Checks if the row is empty.
            </summary>
            <returns>true if none of the columns is reserved.</returns>
        </member>
        <member name="M:iTextSharp.text.Row.ValidPosition">
            <summary>
            Gets the index of the current, valid position
            </summary>
            <returns>a value</returns>
        </member>
        <member name="M:iTextSharp.text.Row.IsTag(System.String)">
            <summary>
            Checks if a given tag corresponds with this object.
            </summary>
            <param name="tag">the given tag</param>
            <returns>true if the tag corresponds</returns>
        </member>
        <member name="M:iTextSharp.text.Row.SetMarkupAttribute(System.String,System.String)">
            <summary>
            See <see cref="M:iTextSharp.text.IMarkupAttributes.SetMarkupAttribute(System.String,System.String)"/>
            </summary>
            <param name="name">attribute name</param>
            <param name="value">attribute value</param>
        </member>
        <member name="M:iTextSharp.text.Row.GetMarkupAttribute(System.String)">
            <summary>
            See <see cref="M:iTextSharp.text.IMarkupAttributes.GetMarkupAttribute(System.String)"/>
            </summary>
            <param name="name">attribute name</param>
            <returns>attribute value</returns>
        </member>
        <member name="P:iTextSharp.text.Row.Type">
            <summary>
            Gets the type of the text element.
            </summary>
            <value>a type</value>
        </member>
        <member name="P:iTextSharp.text.Row.Chunks">
            <summary>
            Gets all the chunks in this element.
            </summary>
            <value>an ArrayList</value>
        </member>
        <member name="P:iTextSharp.text.Row.Columns">
            <summary>
            Gets the number of columns.
            </summary>
            <value>a value</value>
        </member>
        <member name="P:iTextSharp.text.Row.HorizontalAlignment">
            <summary>
            Gets the horizontal Element.
            </summary>
            <value>a value</value>
        </member>
        <member name="P:iTextSharp.text.Row.VerticalAlignment">
            <summary>
            Gets the vertical Element.
            </summary>
            <value>a value</value>
        </member>
        <member name="P:iTextSharp.text.Row.MarkupAttributeNames">
            <summary>
            See <see cref="P:iTextSharp.text.IMarkupAttributes.MarkupAttributeNames"/>
            </summary>
            <value>a collection of string attribute names</value>
        </member>
        <member name="P:iTextSharp.text.Row.MarkupAttributes">
            <summary>
            See <see cref="P:iTextSharp.text.IMarkupAttributes.MarkupAttributes"/>
            </summary>
            <value>a Properties-object containing all the markupAttributes.</value>
        </member>
        <member name="T:iTextSharp.text.SimpleCell">
            <summary>
            Summary description for SimpleCell.
            </summary>
        </member>
        <member name="F:iTextSharp.text.SimpleCell.ROW">
            the CellAttributes object represents a row. 
        </member>
        <member name="F:iTextSharp.text.SimpleCell.CELL">
            the CellAttributes object represents a cell. 
        </member>
        <member name="F:iTextSharp.text.SimpleCell.content">
            the content of the Cell. 
        </member>
        <member name="F:iTextSharp.text.SimpleCell.width">
            the width of the Cell. 
        </member>
        <member name="F:iTextSharp.text.SimpleCell.widthpercentage">
            the widthpercentage of the Cell. 
        </member>
        <member name="F:iTextSharp.text.SimpleCell.spacing_left">
            an extra spacing variable 
        </member>
        <member name="F:iTextSharp.text.SimpleCell.spacing_right">
            an extra spacing variable 
        </member>
        <member name="F:iTextSharp.text.SimpleCell.spacing_top">
            an extra spacing variable 
        </member>
        <member name="F:iTextSharp.text.SimpleCell.spacing_bottom">
            an extra spacing variable 
        </member>
        <member name="F:iTextSharp.text.SimpleCell.padding_left">
            an extra padding variable 
        </member>
        <member name="F:iTextSharp.text.SimpleCell.padding_right">
            an extra padding variable 
        </member>
        <member name="F:iTextSharp.text.SimpleCell.padding_top">
            an extra padding variable 
        </member>
        <member name="F:iTextSharp.text.SimpleCell.padding_bottom">
            an extra padding variable 
        </member>
        <member name="F:iTextSharp.text.SimpleCell.colspan">
            the colspan of a Cell 
        </member>
        <member name="F:iTextSharp.text.SimpleCell.horizontalAlignment">
            horizontal alignment inside the Cell. 
        </member>
        <member name="F:iTextSharp.text.SimpleCell.verticalAlignment">
            vertical alignment inside the Cell. 
        </member>
        <member name="F:iTextSharp.text.SimpleCell.cellgroup">
            indicates if these are the attributes of a single Cell (false) or a group of Cells (true). 
        </member>
        <member name="F:iTextSharp.text.SimpleCell.useAscender">
            Indicates that the largest ascender height should be used to determine the
            height of the first line.  Note that this only has an effect when rendered
            to PDF.  Setting this to true can help with vertical alignment problems. 
        </member>
        <member name="F:iTextSharp.text.SimpleCell.useDescender">
            Indicates that the largest descender height should be added to the height of
            the last line (so characters like y don't dip into the border).   Note that
            this only has an effect when rendered to PDF. 
        </member>
        <member name="F:iTextSharp.text.SimpleCell.useBorderPadding">
            Adjusts the cell contents to compensate for border widths.  Note that
            this only has an effect when rendered to PDF.
        </member>
        <member name="M:iTextSharp.text.SimpleCell.#ctor(System.Boolean)">
            A CellAttributes object is always constructed without any dimensions.
            Dimensions are defined after creation.
            @param row only true if the CellAttributes object represents a row.
        </member>
        <member name="M:iTextSharp.text.SimpleCell.AddElement(iTextSharp.text.IElement)">
            Adds content to this object.
            @param element
            @throws BadElementException
        </member>
        <member name="M:iTextSharp.text.SimpleCell.CreateCell(iTextSharp.text.SimpleCell)">
            Creates a Cell with these attributes.
            @param rowAttributes
            @return a cell based on these attributes.
            @throws BadElementException
        </member>
        <member name="M:iTextSharp.text.SimpleCell.CreatePdfPCell(iTextSharp.text.SimpleCell)">
            Creates a PdfPCell with these attributes.
            @param rowAttributes
            @return a PdfPCell based on these attributes.
        </member>
        <member name="M:iTextSharp.text.SimpleCell.GetDimensionlessInstance(iTextSharp.text.Rectangle,System.Single)">
            @param rectangle
            @param spacing
            @return a rectangle
        </member>
        <member name="M:iTextSharp.text.SimpleCell.CellLayout(iTextSharp.text.pdf.PdfPCell,iTextSharp.text.Rectangle,iTextSharp.text.pdf.PdfContentByte[])">
            @see com.lowagie.text.pdf.PdfPCellEvent#cellLayout(com.lowagie.text.pdf.PdfPCell, com.lowagie.text.Rectangle, com.lowagie.text.pdf.PdfContentByte[])
        </member>
        <member name="M:iTextSharp.text.SimpleCell.Add(System.Object)">
            @see com.lowagie.text.TextElementArray#add(java.lang.Object)
        </member>
        <member name="P:iTextSharp.text.SimpleCell.Padding">
            Sets the padding parameters if they are undefined. 
            @param padding
        </member>
        <member name="P:iTextSharp.text.SimpleCell.Colspan">
            @return Returns the colspan.
        </member>
        <member name="P:iTextSharp.text.SimpleCell.Padding_bottom">
            @param padding_bottom The padding_bottom to set.
        </member>
        <member name="P:iTextSharp.text.SimpleCell.Spacing">
            @return Returns the spacing.
        </member>
        <member name="P:iTextSharp.text.SimpleCell.Cellgroup">
            @return Returns the cellgroup.
        </member>
        <member name="P:iTextSharp.text.SimpleCell.HorizontalAlignment">
            @return Returns the horizontal alignment.
        </member>
        <member name="P:iTextSharp.text.SimpleCell.Width">
            @return Returns the width.
        </member>
        <member name="P:iTextSharp.text.SimpleCell.Widthpercentage">
            @return Returns the widthpercentage.
        </member>
        <member name="P:iTextSharp.text.SimpleCell.UseAscender">
            @return Returns the useAscender.
        </member>
        <member name="P:iTextSharp.text.SimpleCell.UseBorderPadding">
            @return Returns the useBorderPadding.
        </member>
        <member name="P:iTextSharp.text.SimpleCell.Content">
            @return Returns the content.
        </member>
        <member name="T:iTextSharp.text.SimpleTable">
            <summary>
            Summary description for SimpleTable.
            </summary>
        </member>
        <member name="F:iTextSharp.text.SimpleTable.content">
            the content of a Table. 
        </member>
        <member name="F:iTextSharp.text.SimpleTable.width">
            the width of the Table. 
        </member>
        <member name="F:iTextSharp.text.SimpleTable.widthpercentage">
            the widthpercentage of the Table. 
        </member>
        <member name="F:iTextSharp.text.SimpleTable.cellspacing">
            the spacing of the Cells. 
        </member>
        <member name="F:iTextSharp.text.SimpleTable.cellpadding">
            the padding of the Cells. 
        </member>
        <member name="F:iTextSharp.text.SimpleTable.alignment">
            the alignment of the table. 
        </member>
        <member name="M:iTextSharp.text.SimpleTable.#ctor">
            A RectangleCell is always constructed without any dimensions.
            Dimensions are defined after creation.
        </member>
        <member name="M:iTextSharp.text.SimpleTable.AddElement(iTextSharp.text.SimpleCell)">
            Adds content to this object.
            @param element
            @throws BadElementException
        </member>
        <member name="M:iTextSharp.text.SimpleTable.CreateTable">
            Creates a Table object based on this TableAttributes object.
            @return a com.lowagie.text.Table object
            @throws BadElementException
        </member>
        <member name="M:iTextSharp.text.SimpleTable.CreatePdfPTable">
            Creates a PdfPTable object based on this TableAttributes object.
            @return a com.lowagie.text.pdf.PdfPTable object
            @throws DocumentException
        </member>
        <member name="M:iTextSharp.text.SimpleTable.GetDimensionlessInstance(iTextSharp.text.Rectangle,System.Single)">
            @param rectangle
            @param spacing
            @return a rectangle
        </member>
        <member name="M:iTextSharp.text.SimpleTable.TableLayout(iTextSharp.text.pdf.PdfPTable,System.Single[][],System.Single[],System.Int32,System.Int32,iTextSharp.text.pdf.PdfContentByte[])">
            @see com.lowagie.text.pdf.PdfPTableEvent#tableLayout(com.lowagie.text.pdf.PdfPTable, float[][], float[], int, int, com.lowagie.text.pdf.PdfContentByte[])
        </member>
        <member name="M:iTextSharp.text.SimpleTable.Add(System.Object)">
            @see com.lowagie.text.TextElementArray#add(java.lang.Object)
        </member>
        <member name="P:iTextSharp.text.SimpleTable.Cellpadding">
            @return Returns the cellpadding.
        </member>
        <member name="P:iTextSharp.text.SimpleTable.Cellspacing">
            @return Returns the cellspacing.
        </member>
        <member name="P:iTextSharp.text.SimpleTable.Alignment">
            @return Returns the alignment.
        </member>
        <member name="P:iTextSharp.text.SimpleTable.Width">
            @return Returns the width.
        </member>
        <member name="P:iTextSharp.text.SimpleTable.Widthpercentage">
            @return Returns the widthpercentage.
        </member>
        <member name="P:iTextSharp.text.SimpleTable.Type">
            @see com.lowagie.text.Element#type()
        </member>
        <member name="M:iTextSharp.text.SpecialSymbol.Index(System.String)">
             Returns the first occurrence of a special symbol in a <CODE>String</CODE>.
            
             @param    string        a <CODE>String</CODE>
             @return    an index of -1 if no special symbol was found
        </member>
        <member name="M:iTextSharp.text.SpecialSymbol.Get(System.Char,iTextSharp.text.Font)">
            Gets a chunk with a symbol character.
            @param c a character that has to be changed into a symbol
            @param font Font if there is no SYMBOL character corresponding with c
            @return a SYMBOL version of a character
        </member>
        <member name="M:iTextSharp.text.SpecialSymbol.GetCorrespondingSymbol(System.Char)">
             Looks for the corresponding symbol in the font Symbol.
            
             @param    c    the original ASCII-char
             @return    the corresponding symbol in font Symbol
        </member>
        <member name="T:iTextSharp.text.Table">
            <summary>
            A Table is a Rectangle that contains Cells,
            ordered in some kind of matrix.
            </summary>
            <remarks>
            Tables that span multiple pages are cut into different parts automatically.
            If you want a table header to be repeated on every page, you may not forget to
            mark the end of the header section by using the method EndHeaders().
            <P/>
            The matrix of a table is not necessarily an m x n-matrix. It can contain holes
            or cells that are bigger than the unit. Believe me or not, but it took some serious
            thinking to make this as userfriendly as possible. I hope you wil find the result
            quite simple (I love simple solutions, especially for complex problems).
            </remarks>
            <example>
            <code>
            // Remark: You MUST know the number of columns when constructing a Table.
            //         The number of rows is not important.
            <STRONG>Table table = new Table(3);</STRONG>
            <STRONG>table.SetBorderWidth(1);</STRONG>
            <STRONG>table.SetBorderColor(new Color(0, 0, 255));</STRONG>
            <STRONG>table.SetPadding(5);</STRONG>
            <STRONG>table.SetSpacing(5);</STRONG>
            Cell cell = new Cell("header");
            cell.SetHeader(true);
            cell.SetColspan(3);
            <STRONG>table.AddCell(cell);</STRONG>
            <STRONG>table.EndHeaders();</STRONG>
            cell = new Cell("example cell with colspan 1 and rowspan 2");
            cell.SetRowspan(2);
            cell.SetBorderColor(new Color(255, 0, 0));
            <STRONG>table.AddCell(cell);</STRONG>
            <STRONG>table.AddCell("1.1");</STRONG>
            <STRONG>table.AddCell("2.1");</STRONG>
            <STRONG>table.AddCell("1.2");</STRONG>
            <STRONG>table.AddCell("2.2");</STRONG>
            <STRONG>table.AddCell("cell test1");</STRONG>
            cell = new Cell("big cell");
            cell.SetRowspan(2);
            cell.SetColspan(2);
            <STRONG>table.AddCell(cell);</STRONG>
            <STRONG>table.AddCell("cell test2");</STRONG>
            </code>
            
            The result of this code is a table:
                <TABLE ALIGN="Center" BORDER="1" BORDERCOLOR="#0000ff" CELLPADDING="5" CELLSPACING="5">
                       <TR ALIGN="Left" VALIGN="Left">
                               <TH ALIGN="Left" COLSPAN="3" VALIGN="Left">
                                       header
                               </TH>
                       </TR>
                       <TR ALIGN="Left" VALIGN="Left">
                               <TD ALIGN="Left" BORDERCOLOR="#ff0000" ROWSPAN="2" VALIGN="Left">
                                       example cell with colspan 1 and rowspan 2
                               </TD>
                               <TD ALIGN="Left" VALIGN="Left">
                                       1.1
                               </TD>
                               <TD ALIGN="Left" VALIGN="Left">
                                       2.1
                               </TD>
                       </TR>
                       <TR ALIGN="Left" VALIGN="Left">
                               <TD ALIGN="Left" VALIGN="Left">
                                       1.2
                               </TD>
                               <TD ALIGN="Left" VALIGN="Left">
                                       2.2
                               </TD>
                       </TR>
                       <TR ALIGN="Left" VALIGN="Left">
                               <TD ALIGN="Left" VALIGN="Left">
                                       cell test1
                               </TD>
                               <TD ALIGN="Left" COLSPAN="2" ROWSPAN="2" VALIGN="Left">
                                       big cell
                               </TD>
                       </TR>
                       <TR ALIGN="Left" VALIGN="Left">
                               <TD ALIGN="Left" VALIGN="Left">
                                       cell test2
                               </TD>
                       </TR>
               </TABLE>
            </example>
            <seealso cref="T:iTextSharp.text.Rectangle"/>
            <seealso cref="T:iTextSharp.text.Element"/>
            <seealso cref="T:iTextSharp.text.Row"/>
            <seealso cref="T:iTextSharp.text.Cell"/>
        </member>
        <member name="F:iTextSharp.text.Table.columns">
            <summary> This is the number of columns in the Table. </summary>
        </member>
        <member name="F:iTextSharp.text.Table.rows">
            <summary> This is the list of Rows. </summary>
        </member>
        <member name="F:iTextSharp.text.Table.defaultLayout">
            <summary> This Empty Cell contains the DEFAULT layout of each Cell added with the method AddCell(string content). </summary>
        </member>
        <member name="F:iTextSharp.text.Table.lastHeaderRow">
            <summary> This is the number of the last row of the table headers. </summary>
        </member>
        <member name="F:iTextSharp.text.Table.alignment">
            <summary> This is the horizontal Element. </summary>
        </member>
        <member name="F:iTextSharp.text.Table.cellpadding">
            <summary> This is cellpadding. </summary>
        </member>
        <member name="F:iTextSharp.text.Table.cellspacing">
            <summary> This is cellspacing. </summary>
        </member>
        <member name="F:iTextSharp.text.Table.widthPercentage">
            <summary> This is the width of the table (in percent of the available space). </summary>
        </member>
        <member name="F:iTextSharp.text.Table.absWidth">
            <summary> This is the width of the table (in pixels). </summary>
        </member>
        <member name="F:iTextSharp.text.Table.widths">
            <summary> This is an array containing the widths (in percentages) of every column. </summary>
        </member>
        <member name="F:iTextSharp.text.Table.mDebug">
            <summary> Boolean to track errors (some checks will be performed) </summary>
        </member>
        <member name="F:iTextSharp.text.Table.mTableInserted">
            <summary> bool to track if a table was inserted (to avoid unnecessary computations afterwards) </summary>
        </member>
        <member name="F:iTextSharp.text.Table.mAutoFillEmptyCells">
            <summary>
            Boolean to automatically fill empty cells before a table is rendered
            (takes CPU so may be set to false in case of certainty)
            </summary>
        </member>
        <member name="F:iTextSharp.text.Table.tableFitsPage">
            <summary> If true this table may not be split over two pages. </summary>
        </member>
        <member name="F:iTextSharp.text.Table.cellsFitPage">
            <summary> If true cells may not be split over two pages. </summary>
        </member>
        <member name="F:iTextSharp.text.Table.offset">
            <summary> This is the offset of the table. </summary>
        </member>
        <member name="F:iTextSharp.text.Table.alternatingRowAttributes">
            <summary> contains the attributes that are added to each odd (or even) row </summary>
        </member>
        <member name="F:iTextSharp.text.Table.convert2pdfptable">
            if you want to generate tables the old way, set this value to false. 
        </member>
        <member name="M:iTextSharp.text.Table.#ctor(System.Int32)">
            <summary>
            Constructs a Table with a certain number of columns.
            </summary>
            <param name="columns">The number of columns in the table</param>
            <overloads>
            Has three overloads
            </overloads>
        </member>
        <member name="M:iTextSharp.text.Table.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a Table with a certain number of columns
            and a certain number of Rows.
            </summary>
            <param name="columns">The number of columns in the table</param>
            <param name="rows">The number of rows</param>
            <overloads>
            Has three overloads
            </overloads>
        </member>
        <member name="M:iTextSharp.text.Table.#ctor(System.util.Properties)">
            <summary>
            Returns a Table that has been constructed taking in account
            the value of some <VAR>attributes</VAR>.
            </summary>
            <param name="attributes">some attributes</param>
            <overloads>
            Has three overloads
            </overloads>
        </member>
        <member name="M:iTextSharp.text.Table.Process(iTextSharp.text.IElementListener)">
            <summary>
            Processes the element by adding it (or the different parts) to an
            IElementListener.
            </summary>
            <param name="listener">an IElementListener</param>
            <returns>true if the element was processed successfully</returns>
        </member>
        <member name="M:iTextSharp.text.Table.HasToFitPageTable">
            <summary>
            Checks if this Table has to fit a page.
            </summary>
            <returns>true if the table may not be split</returns>
        </member>
        <member name="M:iTextSharp.text.Table.HasToFitPageCells">
            <summary>
            Checks if the cells of this Table have to fit a page.
            </summary>
            <returns>true if the cells may not be split</returns>
        </member>
        <member name="M:iTextSharp.text.Table.AddCell(iTextSharp.text.Cell,System.Int32,System.Int32)">
            <summary>
            Adds a Cell to the Table at a certain row and column.
            </summary>
            <param name="aCell">The Cell to add</param>
            <param name="row">The row where the Cell will be added</param>
            <param name="column">The column where the Cell will be added</param>
        </member>
        <member name="M:iTextSharp.text.Table.AddCell(iTextSharp.text.Cell,System.Object)">
            <summary>
            Adds a Cell to the Table at a certain location.
            </summary>
            <param name="aCell">The Cell to add</param>
            <param name="aLocation">The location where the Cell will be added</param>
        </member>
        <member name="M:iTextSharp.text.Table.AddCell(iTextSharp.text.Cell)">
            <summary>
            Adds a Cell to the Table.
            </summary>
            <param name="cell">a Cell</param>
        </member>
        <member name="M:iTextSharp.text.Table.AddCell(iTextSharp.text.Phrase)">
            <summary>
            Adds a Cell to the Table.
            </summary>
            <remarks>
            This is a shortcut for AddCell(Cell cell).
            The Phrase will be converted to a Cell.
            </remarks>
            <param name="content">a Phrase</param>
        </member>
        <member name="M:iTextSharp.text.Table.AddCell(iTextSharp.text.Phrase,System.Drawing.Point)">
            <summary>
            Adds a Cell to the Table.
            </summary>
            <param name="content">a Phrase</param>
            <param name="location">a System.Drawing.Point</param>
        </member>
        <member name="M:iTextSharp.text.Table.AddCell(System.String)">
            <summary>
            Adds a Cell to the Table.
            </summary>
            <remarks>
            This is a shortcut for AddCell(Cell cell).
            The string will be converted to a Cell.
            </remarks>
            <param name="content">a string</param>
        </member>
        <member name="M:iTextSharp.text.Table.AddCell(System.String,System.Drawing.Point)">
            <summary>
            Adds a Cell to the Table.
            </summary>
            <remarks>
            This is a shortcut for AddCell(Cell cell, System.Drawing.Point location).
            The string will be converted to a Cell.
            </remarks>
            <param name="content">a string</param>
            <param name="location">a point</param>
        </member>
        <member name="M:iTextSharp.text.Table.InsertTable(iTextSharp.text.Table)">
            <summary>
            To put a table within the existing table at the current position
            generateTable will of course re-arrange the widths of the columns.
            </summary>
            <param name="aTable">the table you want to insert</param>
        </member>
        <member name="M:iTextSharp.text.Table.InsertTable(iTextSharp.text.Table,System.Int32,System.Int32)">
            <summary>
            To put a table within the existing table at the given position
            generateTable will of course re-arrange the widths of the columns.
            </summary>
            <param name="aTable">The Table to add</param>
            <param name="row">The row where the Cell will be added</param>
            <param name="column">The column where the Cell will be added</param>
        </member>
        <member name="M:iTextSharp.text.Table.InsertTable(iTextSharp.text.Table,System.Object)">
            <summary>
            To put a table within the existing table at the given position
            generateTable will of course re-arrange the widths of the columns.
            </summary>
            <param name="aTable">the table you want to insert</param>
            <param name="aLocation">a System.Drawing.Point</param>
        </member>
        <member name="M:iTextSharp.text.Table.Complete">
            <summary>
            Will fill empty cells with valid blank Cells
            </summary>
        </member>
        <member name="M:iTextSharp.text.Table.AssumeTableDefaults(iTextSharp.text.Cell)">
            <summary>
            Sets the unset cell properties to be the table defaults.
            </summary>
            <param name="aCell">The cell to set to table defaults as necessary.</param>
        </member>
        <member name="M:iTextSharp.text.Table.DeleteColumn(System.Int32)">
            <summary>
            Deletes a column in this table.
            </summary>
            <param name="column">the number of the column that has to be deleted</param>
        </member>
        <member name="M:iTextSharp.text.Table.DeleteRow(System.Int32)">
            <summary>
            Deletes a row.
            </summary>
            <param name="row">the number of the row to delete</param>
            <returns>true if the row was deleted; false if not</returns>
        </member>
        <member name="M:iTextSharp.text.Table.DeleteAllRows">
            Deletes all rows in this table.
            (contributed by dperezcar@fcc.es)
        </member>
        <member name="M:iTextSharp.text.Table.DeleteLastRow">
            <summary>
            Deletes the last row in this table.
            </summary>
            <returns>true if the row was deleted; false if not</returns>
        </member>
        <member name="M:iTextSharp.text.Table.EndHeaders">
            <summary>
            Marks the last row of the table headers.
            </summary>
            <returns>the number of the last row of the table headers</returns>
        </member>
        <member name="M:iTextSharp.text.Table.SetAlignment(System.String)">
            <summary>
            Sets the alignment of this paragraph.
            </summary>
            <param name="alignment">the new alignment as a string</param>
        </member>
        <member name="M:iTextSharp.text.Table.SetWidths(System.Int32[])">
            <summary>
            Sets the widths of the different columns (percentages).
            </summary>
            <remarks>
            You can give up relative values of borderwidths.
            The sum of these values will be considered 100%.
            The values will be recalculated as percentages of this sum.
            </remarks>
            <param name="widths">an array with values</param>
        </member>
        <member name="M:iTextSharp.text.Table.GetEnumerator">
            <summary>
            Gets an Iterator of all the Rows.
            </summary>
            <returns>an IEnumerator</returns>
        </member>
        <member name="M:iTextSharp.text.Table.GetElement(System.Int32,System.Int32)">
            <summary>
            returns the element at the position row, column
                      (Cast to Cell or Table)
            </summary>
            <param name="row"></param>
            <param name="column"></param>
            <returns>an object</returns>
        </member>
        <member name="M:iTextSharp.text.Table.MergeInsertedTables">
            <summary>
            Integrates all added tables and recalculates column widths.
            </summary>
        </member>
        <member name="M:iTextSharp.text.Table.FillEmptyMatrixCells">
            <summary>
            Integrates all added tables and recalculates column widths.
            </summary>
        </member>
        <member name="M:iTextSharp.text.Table.IsValidLocation(iTextSharp.text.Cell,System.Drawing.Point)">
            <summary>
            check if Cell 'fits' the table.
            </summary>
            <remarks>
            <UL><LI/>rowspan/colspan not beyond borders
                <LI/>spanned cell don't overlap existing cells</UL>
            </remarks>
            <param name="aCell">the cell that has to be checked</param>
            <param name="aLocation">the location where the cell has to be placed</param>
            <returns></returns>
        </member>
        <member name="M:iTextSharp.text.Table.PlaceCell(System.Collections.ArrayList,iTextSharp.text.Cell,System.Drawing.Point)">
            <summary>
            Inserts a Cell in a cell-array and reserves cells defined by row-/colspan.
            </summary>
            <param name="someRows">some rows</param>
            <param name="aCell">the cell that has to be inserted</param>
            <param name="aPosition">the position where the cell has to be placed</param>
        </member>
        <member name="M:iTextSharp.text.Table.AddColumns(System.Int32)">
            <summary>
            Gives you the posibility to add columns.
            </summary>
            <param name="aColumns">the number of columns to add</param>
        </member>
        <member name="M:iTextSharp.text.Table.GetWidths(System.Single,System.Single)">
            <summary>
            Gets an array with the positions of the borders between every column.
            </summary>
            <remarks>
            This method translates the widths expressed in percentages into the
            x-coordinate of the borders of the columns on a real document.
            </remarks>
            <param name="left">this is the position of the first border at the left (cellpadding not included)</param>
            <param name="totalWidth">
            this is the space between the first border at the left
            and the last border at the right (cellpadding not included)
            </param>
            <returns>an array with borderpositions</returns>
        </member>
        <member name="M:iTextSharp.text.Table.IsTag(System.String)">
            <summary>
            Checks if a given tag corresponds with this object.
            </summary>
            <param name="tag">the given tag</param>
            <returns>true if the tag corresponds</returns>
        </member>
        <member name="M:iTextSharp.text.Table.SetAlternatingRowAttribute(System.String,System.String,System.String)">
            <summary>
            Allows clients to set up alternating attributes for each Row in the Table.
            </summary>
            <remarks>
            This code was contributed by Matt Benson.
            </remarks>
            <param name="name">the name of the attribute</param>
            <param name="value0">the value of the attribute for even rows</param>
            <param name="value1">the value of the attribute for odd rows</param>
        </member>
        <member name="M:iTextSharp.text.Table.CreatePdfPTable">
            Create a PdfPTable based on this Table object.
            @return a PdfPTable object
            @throws BadElementException
        </member>
        <member name="P:iTextSharp.text.Table.Debug">
            <summary>
            Performs extra checks when executing table code (currently only when cells are added).
            </summary>
            <value>new value</value>
        </member>
        <member name="P:iTextSharp.text.Table.DefaultLayout">
            Sets the default layout of the Table to
            the provided Cell
            @param value a cell with all the defaults
        </member>
        <member name="P:iTextSharp.text.Table.AutoFillEmptyCells">
            <summary>
            Enables/disables automatic insertion of empty cells before table is rendered. (default = false)
            </summary>
            <remarks>
            As some people may want to create a table, fill only a couple of the cells and don't bother with
            investigating which empty ones need to be added, this default behaviour may be very welcome.
            Disabling is recommended to increase speed. (empty cells should be added through extra code then)
            </remarks>
            <value>enable/disable autofill</value>
        </member>
        <member name="P:iTextSharp.text.Table.TableFitsPage">
            <summary>
            Allows you to control when a page break occurs.
            </summary>
            <remarks>
            When a table doesn't fit a page, it is split in two parts.
            If you want to avoid this, you should set the <VAR>tableFitsPage</VAR> value to true.
            </remarks>
            <value>a value</value>
        </member>
        <member name="P:iTextSharp.text.Table.CellsFitPage">
            <summary>
            Allows you to control when a page break occurs.
            </summary>
            <remarks>
            When a cell doesn't fit a page, it is split in two parts.
            If you want to avoid this, you should set the <VAR>cellsFitPage</VAR> value to true.
            </remarks>
            <value>a value</value>
        </member>
        <member name="P:iTextSharp.text.Table.Offset">
            <summary>
            Get/set the offset of this table.
            </summary>
            <value>the space between this table and the previous element.</value>
        </member>
        <member name="P:iTextSharp.text.Table.Type">
            <summary>
            Gets the type of the text element.
            </summary>
            <value>a type</value>
        </member>
        <member name="P:iTextSharp.text.Table.DefaultCellBorder">
            <summary>
            Changes the border in the default layout of the Cells
            added with method AddCell(string content).
            </summary>
            <value>the new border value</value>
        </member>
        <member name="P:iTextSharp.text.Table.DefaultCellBorderWidth">
            <summary>
            Changes the width of the borders in the default layout of the Cells
            added with method AddCell(string content).
            </summary>
            <value>the new width</value>
        </member>
        <member name="P:iTextSharp.text.Table.DefaultCellBorderColor">
            <summary>
            Changes the bordercolor in the default layout of the Cells
            added with method AddCell(string content).
            </summary>
        </member>
        <member name="P:iTextSharp.text.Table.DefaultCellBackgroundColor">
            <summary>
            Changes the backgroundcolor in the default layout of the Cells
            added with method AddCell(string content).
            </summary>
            <value>the new color</value>
        </member>
        <member name="P:iTextSharp.text.Table.DefaultCellGrayFill">
            <summary>
            Changes the grayfill in the default layout of the Cells
            added with method AddCell(string content).
            </summary>
            <value>the new value</value>
        </member>
        <member name="P:iTextSharp.text.Table.DefaultHorizontalAlignment">
            <summary>
            Changes the horizontalalignment in the default layout of the Cells
            added with method AddCell(string content).
            </summary>
            <value>the new alignment value</value>
        </member>
        <member name="P:iTextSharp.text.Table.DefaultVerticalAlignment">
            <summary>
            Changes the verticalAlignment in the default layout of the Cells
            added with method AddCell(string content).
            </summary>
            <value>the new alignment value</value>
        </member>
        <member name="P:iTextSharp.text.Table.DefaultRowspan">
            <summary>
            Changes the rowspan in the default layout of the Cells
            added with method AddCell(string content).
            </summary>
            <value>the new rowspan value</value>
        </member>
        <member name="P:iTextSharp.text.Table.DefaultColspan">
            <summary>
            Changes the colspan in the default layout of the Cells
            added with method AddCell(string content).
            </summary>
            <value>the new colspan value</value>
        </member>
        <member name="P:iTextSharp.text.Table.LastHeaderRow">
            <summary>
            Sets the horizontal Element.
            </summary>
            <value>the new value</value>
        </member>
        <member name="P:iTextSharp.text.Table.SpaceInsideCell">
            <summary>
            Sets the cellpadding.
            </summary>
            <value>the new value</value>
        </member>
        <member name="P:iTextSharp.text.Table.SpaceBetweenCells">
            <summary>
            Sets the cellspacing.
            </summary>
            <value>the new value</value>
        </member>
        <member name="P:iTextSharp.text.Table.Padding">
            <summary>
            Sets the cellpadding.
            </summary>
            <value>the new value</value>
        </member>
        <member name="P:iTextSharp.text.Table.Spacing">
            <summary>
            Sets the cellspacing.
            </summary>
            <value>the new value</value>
        </member>
        <member name="P:iTextSharp.text.Table.Widths">
            <summary>
            Sets the widths of the different columns (percentages).
            </summary>
            <remarks>
            You can give up relative values of borderwidths.
            The sum of these values will be considered 100%.
            The values will be recalculated as percentages of this sum.
            </remarks>
            <example>
            <BLOCKQUOTE><PRE>
            float[] widths = {2, 1, 1};
            <STRONG>table.SetWidths(widths)</STRONG>
            </PRE></BLOCKQUOTE>
            
            The widths will be: a width of 50% for the first column,
            25% for the second and third column.
            </example>
            <value>an array with values</value>
        </member>
        <member name="P:iTextSharp.text.Table.Columns">
            <summary>
            Gets the number of columns.
            </summary>
            <value>a value</value>
        </member>
        <member name="P:iTextSharp.text.Table.Size">
            <summary>
            Gets the number of rows in this Table.
            </summary>
            <value>the number of rows in this Table</value>
        </member>
        <member name="P:iTextSharp.text.Table.ProportionalWidths">
            <summary>
            Gets the proportional widths of the columns in this Table.
            </summary>
            <value>the proportional widths of the columns in this Table</value>
        </member>
        <member name="P:iTextSharp.text.Table.Alignment">
            <summary>
            Get/set the horizontal Element.
            </summary>
            <value>a value</value>
        </member>
        <member name="P:iTextSharp.text.Table.Cellpadding">
            <summary>
            Get/set the cellpadding.
            </summary>
            <value>the cellpadding</value>
        </member>
        <member name="P:iTextSharp.text.Table.Cellspacing">
            <summary>
            Get/set the cellspacing.
            </summary>
            <value>the cellspacing</value>
        </member>
        <member name="P:iTextSharp.text.Table.WidthPercentage">
            <summary>
            Get/set the table width (a percentage).
            </summary>
            <value>the table width (a percentage)</value>
        </member>
        <member name="P:iTextSharp.text.Table.AbsWidth">
            <summary>
            Get/set the table width (in pixels).
            </summary>
            <value>the table width (in pixels)</value>
        </member>
        <member name="P:iTextSharp.text.Table.FirstDataRow">
            <summary>
            Gets the first number of the row that doesn't contain headers.
            </summary>
            <returns>a rownumber</returns>
        </member>
        <member name="P:iTextSharp.text.Table.Dimension">
            <summary>
            Gets the dimension of this table
            </summary>
            <value>the dimension</value>
        </member>
        <member name="P:iTextSharp.text.Table.CurrentLocationToNextValidPosition">
            <summary>
            Sets current col/row to Valid(empty) pos after addCell/Table
            </summary>
            <value>a System.Drawing.Point</value>
        </member>
        <member name="P:iTextSharp.text.Table.NextRow">
            Returns the next row 0-based index where a new cell would be added.
            (contributed by dperezcar@fcc.es)
            @return x coordinate for the next row
        </member>
        <member name="P:iTextSharp.text.Table.NextColumn">
            Returns the next column 0-based index where a new cell would be added.
            (contributed by dperezcar@fcc.es)
            @return y coordinate for the next row
        </member>
        <member name="P:iTextSharp.text.Table.Convert2pdfptable">
            If set to true, iText will try to convert the Table to a PdfPTable.
            @param convert2pdfptable true if you want iText to try to convert the Table to a PdfPTable
        </member>
        <member name="T:iTextSharp.text.Watermark">
            <summary>
            A <CODE>Watermark</CODE> is a graphic element (GIF or JPEG)
            that is shown on a certain position on each page.
            </summary>
            <seealso cref="T:iTextSharp.text.Element"/>
            <seealso cref="T:iTextSharp.text.Jpef"/>
            <seealso cref="T:iTextSharp.text.Gif"/>
            <seealso cref="T:iTextSharp.text.Png"/>
        </member>
        <member name="F:iTextSharp.text.Watermark.offsetX">
            <summary> This is the offset in x-direction of the Watermark. </summary>
        </member>
        <member name="F:iTextSharp.text.Watermark.offsetY">
            <summary> This is the offset in y-direction of the Watermark. </summary>
        </member>
        <member name="M:iTextSharp.text.Watermark.#ctor(iTextSharp.text.Image,System.Single,System.Single)">
            <summary>
            Constructs a <CODE>Watermark</CODE>-object, using an <CODE>Image</CODE>.
            </summary>
            <param name="image">an <CODE>Image</CODE>-object</param>
            <param name="offsetX">the offset in x-direction</param>
            <param name="offsetY">the offset in y-direction</param>
        </member>
        <member name="P:iTextSharp.text.Watermark.Type">
            <summary>
            Gets the type of the text element.
            </summary>
            <value>a type</value>
        </member>
        <member name="P:iTextSharp.text.Watermark.OffsetX">
            <summary>
            Returns the offset in x direction.
            </summary>
            <value>a value</value>
        </member>
        <member name="P:iTextSharp.text.Watermark.OffsetY">
            <summary>
            Returns the offset in y direction.
            </summary>
            <value>an offset</value>
        </member>
        <member name="T:iTextSharp.text.ZapfDingbatsList">
            
            A special-version of <CODE>LIST</CODE> whitch use zapfdingbats-letters.
            
            @see com.lowagie.text.List
            @version 2003-06-22
            @author Michael Niedermair
        </member>
        <member name="F:iTextSharp.text.ZapfDingbatsList.zn">
            char-number in zapfdingbats
        </member>
        <member name="M:iTextSharp.text.ZapfDingbatsList.#ctor(System.Int32,System.Int32)">
            Creates a ZapfDingbatsList
            
            @param zn a char-number
            @param symbolIndent    indent
        </member>
        <member name="M:iTextSharp.text.ZapfDingbatsList.Add(System.Object)">
             Adds an <CODE>Object</CODE> to the <CODE>List</CODE>.
            
             @param    o    the object to add.
             @return true if adding the object succeeded
        </member>
        <member name="P:iTextSharp.text.ZapfDingbatsList.CharNumber">
            set the char-number 
            @param zn a char-number
        </member>
        <member name="T:iTextSharp.text.ZapfDingbatsNumberList">
            
            A special-version of <CODE>LIST</CODE> whitch use zapfdingbats-numbers (1..10).
            
            @see com.lowagie.text.List
            @version 2003-06-22
            @author Michael Niedermair
        </member>
        <member name="F:iTextSharp.text.ZapfDingbatsNumberList.type">
            which type
        </member>
        <member name="M:iTextSharp.text.ZapfDingbatsNumberList.#ctor(System.Int32,System.Int32)">
            Creates a ZapdDingbatsNumberList
            @param type the type of list
            @param symbolIndent    indent
        </member>
        <member name="M:iTextSharp.text.ZapfDingbatsNumberList.Add(System.Object)">
             Adds an <CODE>Object</CODE> to the <CODE>List</CODE>.
            
             @param    o    the object to add.
             @return true if adding the object succeeded
        </member>
        <member name="P:iTextSharp.text.ZapfDingbatsNumberList.NumberType">
             get the type
            
             @return    char-number
        </member>
        <member name="T:ICSharpCode.SharpZipLib.BZip2.BZip2">
            <summary>
            Does all the compress and decompress pre-operation stuff.
            Sets up the streams and file header characters.
            Uses multiply overloaded methods to call for the compress/decompress.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2.Decompress(System.IO.Stream,System.IO.Stream)">
            <summary>
            Decompress <paramref name="instream">input</paramref> writing 
            decompressed data to <paramref name="outstream">output stream</paramref>
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2.Compress(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            Compress <paramref name="instream">input stream</paramref> sending 
            result to <paramref name="outputstream">output stream</paramref>
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.BZip2.BZip2Constants">
            <summary>
            Defines internal values for both compression and decompression
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.BZip2Constants.rNums">
            <summary>
            Random numbers used to randomise repetitive blocks
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.BZip2Constants.baseBlockSize">
            <summary>
            When multiplied by compression parameter (1-9) gives the block size for compression
            9 gives the best compresssion but uses the most memory.
            </summary>        
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.BZip2Constants.MAX_ALPHA_SIZE">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.BZip2Constants.MAX_CODE_LEN">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.BZip2Constants.RUNA">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.BZip2Constants.RUNB">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.BZip2Constants.N_GROUPS">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.BZip2Constants.G_SIZE">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.BZip2Constants.N_ITERS">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.BZip2Constants.MAX_SELECTORS">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.BZip2Constants.NUM_OVERSHOOT_BYTES">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.BZip2.BZip2Exception">
            <summary>
            BZip2Exception represents exceptions specific to Bzip2 algorithm
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            <summary>
            SharpZipBaseException is the base exception class for the SharpZipLibrary.
            All library exceptions are derived from this.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.SharpZipBaseException.#ctor">
            <summary>
            Initializes a new instance of the SharpZipLibraryException class.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.SharpZipBaseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SharpZipLibraryException class with a specified error message.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.SharpZipBaseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the SharpZipLibraryException class with a specified
            error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">Error message string</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2Exception.#ctor">
            <summary>
            Initialise a new instance of BZip2Exception.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2Exception.#ctor(System.String)">
            <summary>
            Initialise a new instance of BZip2Exception with its message set to message.
            </summary>
            <param name="message">The messaage describing the error.</param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream">
            <summary>
            An input stream that decompresses files in the BZip2 format 
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.Flush">
            <summary>
            Flushes the stream.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Set the streams position.  This operation is not supported and will throw a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.SetLength(System.Int64)">
            <summary>
            Sets the length of this stream to the given value.
            This operation is not supported and will throw a NotSupportedExceptionortedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a block of bytes to this stream using data from a buffer.
            This operation is not supported and will throw a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the file stream.
            This operation is not supported and will throw a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read a sequence of bytes and advances the read position by one byte.
            </summary>
            <param name="b">Array of bytes to store values in</param>
            <param name="offset">Offset in array to begin storing data</param>
            <param name="count">The maximum number of bytes to read</param>
            <returns>The total number of bytes read into the buffer. This might be less
            than the number of bytes requested if that number of bytes are not 
            currently available or zero if the end of the stream is reached.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.Close">
            <summary>
            Closes the stream, releasing any associated resources.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.#ctor(System.IO.Stream)">
            <summary>
            Construct instance for reading from stream
            </summary>
            <param name="stream">Data source</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.ReadByte">
            <summary>
            Read a byte from stream advancing position
            </summary>
            <returns>byte read or -1 on end of stream</returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.CanRead">
            <summary>
            Gets a value indicating if the stream supports reading
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            This property always returns false
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.Position">
            <summary>
            Gets or sets the streams position.
            Setting the position is not supported and will throw a NotSupportException
            </summary>
            <exception cref="T:System.NotSupportedException">Any attempt to set the position</exception>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream">
            <summary>
            An output stream that compresses into the BZip2 format 
            including file header chars into another stream.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the current position of this stream to the given value.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.SetLength(System.Int64)">
            <summary>
            Sets the length of this stream to the given value.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.ReadByte">
            <summary>
            Read a byte from the stream advancing the position.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read a block of bytes
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write a block of bytes to the stream
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.#ctor(System.IO.Stream)">
            <summary>
            Construct a default output stream with maximum block size
            </summary>
            <param name="stream">The stream to write BZip data onto.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Initialise a new instance of the <see cref="T:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream"></see> 
            for the specified stream, using the given blocksize.
            </summary>
            <param name="stream">The stream to write compressed data to.</param>
            <param name="blockSize">The block size to use.</param>
            <remarks>
            Valid block sizes are in the range 1..9, with 1 giving 
            the lowest compression and 9 the highest.
            </remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.WriteByte(System.Byte)">
            <summary>
            Write a byte to the stream.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.Finalize">
            <summary>
            Free any resources and other cleanup before garbage collection reclaims memory
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.Close">
            <summary>
            End the current block and end compression.
            Close the stream and free any resources
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.Flush">
            <summary>
            Flush output buffers
            </summary>        
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.Length">
            <summary>
            Gets the length in bytes of the stream
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.Position">
            <summary>
            Gets or sets the current position of this stream.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Checksums.Adler32">
            <summary>
            Computes Adler32 checksum for a stream of data. An Adler32
            checksum is not as reliable as a CRC32 checksum, but a lot faster to
            compute.
            
            The specification for Adler32 may be found in RFC 1950.
            ZLIB Compressed Data Format Specification version 3.3)
            
            
            From that document:
            
                 "ADLER32 (Adler-32 checksum)
                  This contains a checksum value of the uncompressed data
                  (excluding any dictionary data) computed according to Adler-32
                  algorithm. This algorithm is a 32-bit extension and improvement
                  of the Fletcher algorithm, used in the ITU-T X.224 / ISO 8073
                  standard.
            
                  Adler-32 is composed of two sums accumulated per byte: s1 is
                  the sum of all bytes, s2 is the sum of all s1 values. Both sums
                  are done modulo 65521. s1 is initialized to 1, s2 to zero.  The
                  Adler-32 checksum is stored as s2*65536 + s1 in most-
                  significant-byte first (network) order."
            
             "8.2. The Adler-32 algorithm
            
               The Adler-32 algorithm is much faster than the CRC32 algorithm yet
               still provides an extremely low probability of undetected errors.
            
               The modulo on unsigned long accumulators can be delayed for 5552
               bytes, so the modulo operation time is negligible.  If the bytes
               are a, b, c, the second sum is 3a + 2b + c + 3, and so is position
               and order sensitive, unlike the first sum, which is just a
               checksum.  That 65521 is prime is important to avoid a possible
               large class of two-byte errors that leave the check unchanged.
               (The Fletcher checksum uses 255, which is not prime and which also
               makes the Fletcher check insensitive to single byte changes 0 -
               255.)
            
               The sum s1 is initialized to 1 instead of zero to make the length
               of the sequence part of s2, so that the length does not have to be
               checked separately. (Any sequence of zeroes has a Fletcher
               checksum of zero.)"
            </summary>
            <see cref="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream"/>
            <see cref="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream"/>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Checksums.IChecksum">
            <summary>
            Interface to compute a data checksum used by checked input/output streams.
            A data checksum can be updated by one byte or with a byte array. After each
            update the value of the current checksum can be returned by calling
            <code>getValue</code>. The complete checksum object can also be reset
            so it can be used again with new data.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.IChecksum.Reset">
            <summary>
            Resets the data checksum as if no update was ever called.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.IChecksum.Update(System.Int32)">
            <summary>
            Adds one byte to the data checksum.
            </summary>
            <param name = "bval">
            the data value to add. The high byte of the int is ignored.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.IChecksum.Update(System.Byte[])">
            <summary>
            Updates the data checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">
            buffer an array of bytes
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.IChecksum.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds the byte array to the data checksum.
            </summary>
            <param name = "buf">
            the buffer which contains the data
            </param>
            <param name = "off">
            the offset in the buffer where the data starts
            </param>
            <param name = "len">
            the length of the data
            </param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.IChecksum.Value">
            <summary>
            Returns the data checksum computed so far.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Checksums.Adler32.BASE">
            <summary>
            largest prime smaller than 65536
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Adler32.#ctor">
            <summary>
            Creates a new instance of the <code>Adler32</code> class.
            The checksum starts off with a value of 1.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Adler32.Reset">
            <summary>
            Resets the Adler32 checksum to the initial value.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Adler32.Update(System.Int32)">
            <summary>
            Updates the checksum with the byte b.
            </summary>
            <param name="bval">
            the data value to add. The high byte of the int is ignored.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Adler32.Update(System.Byte[])">
            <summary>
            Updates the checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">
            buffer an array of bytes
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Adler32.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Updates the checksum with the bytes taken from the array.
            </summary>
            <param name="buf">
            an array of bytes
            </param>
            <param name="off">
            the start of the data used for this update
            </param>
            <param name="len">
            the number of bytes to use for this update
            </param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.Adler32.Value">
            <summary>
            Returns the Adler32 data checksum computed so far.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Checksums.Crc32">
            <summary>
            Generate a table for a byte-wise 32-bit CRC calculation on the polynomial:
            x^32+x^26+x^23+x^22+x^16+x^12+x^11+x^10+x^8+x^7+x^5+x^4+x^2+x+1.
            
            Polynomials over GF(2) are represented in binary, one bit per coefficient,
            with the lowest powers in the most significant bit.  Then adding polynomials
            is just exclusive-or, and multiplying a polynomial by x is a right shift by
            one.  If we call the above polynomial p, and represent a byte as the
            polynomial q, also with the lowest power in the most significant bit (so the
            byte 0xb1 is the polynomial x^7+x^3+x+1), then the CRC is (q*x^32) mod p,
            where a mod b means the remainder after dividing a by b.
            
            This calculation is done using the shift-register method of multiplying and
            taking the remainder.  The register is initialized to zero, and for each
            incoming bit, x^32 is added mod p to the register if the bit is a one (where
            x^32 mod p is p+x^32 = x^26+...+1), and the register is multiplied mod p by
            x (which is shifting right by one and adding x^32 mod p if the bit shifted
            out is a one).  We start with the highest power (least significant bit) of
            q and repeat for all eight bits of q.
            
            The table is simply the CRC of all possible eight bit values.  This is all
            the information needed to generate CRC's on data a byte at a time for all
            combinations of CRC register values and incoming bytes.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Checksums.Crc32.crc">
            <summary>
            The crc data checksum so far.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Crc32.Reset">
            <summary>
            Resets the CRC32 data checksum as if no update was ever called.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Crc32.Update(System.Int32)">
            <summary>
            Updates the checksum with the int bval.
            </summary>
            <param name = "bval">
            the byte is taken as the lower 8 bits of bval
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Crc32.Update(System.Byte[])">
            <summary>
            Updates the checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">
            buffer an array of bytes
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Crc32.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds the byte array to the data checksum.
            </summary>
            <param name = "buf">
            the buffer which contains the data
            </param>
            <param name = "off">
            the offset in the buffer where the data starts
            </param>
            <param name = "len">
            the length of the data
            </param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.Crc32.Value">
            <summary>
            Returns the CRC32 data checksum computed so far.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Checksums.StrangeCRC">
            <summary>
            Bzip2 checksum algorithm
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.StrangeCRC.#ctor">
            <summary>
            construct Crc
            </summary>    
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.StrangeCRC.Reset">
            <summary>
            reset state of Crc
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.StrangeCRC.Update(System.Int32)">
            <summary>
            update Crc value
            </summary>
            <param name="inCh">data update is based on</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.StrangeCRC.Update(System.Byte[])">
            <summary>
            Update Crc based on a block of data
            </summary>        
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.StrangeCRC.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            update Crc based on a portion of a block of data
            </summary>
            <param name="buf">block of data</param>
            <param name="off">index of first byte to use</param>
            <param name="len">number of bytes to use</param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.StrangeCRC.Value">
            <summary>
            current Crc value
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.GZip.GZipConstants">
            <summary>
            This class contains constants used for gzip.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.GZipConstants.FTEXT">
            <summary>
            Flag bit mask for text
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.GZipConstants.FHCRC">
            <summary>
            Flag bitmask for Crc
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.GZipConstants.FEXTRA">
            <summary>
            Flag bit mask for extra
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.GZipConstants.FNAME">
            <summary>
            flag bitmask for name
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.GZipConstants.FCOMMENT">
            <summary>
            flag bit mask indicating comment is present
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.GZipConstants.GZIP_MAGIC">
            <summary>
            Magic number found at start of GZIP header
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.GZip.GZipException">
            <summary>
            GZipException represents a Gzip specific exception    
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipException.#ctor">
            <summary>
            Initialise a new instance of GZipException
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipException.#ctor(System.String)">
            <summary>
            Initialise a new instance of GZipException with its message string.
            </summary>
            <param name="message">A <see cref="T:System.String"></see>string that describes the error.</param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.GZip.GZipInputStream">
            <summary>
            This filter stream is used to decompress a "GZIP" format stream.
            The "GZIP" format is described baseInputStream RFC 1952.
            
            author of the original java version : John Leuner
            </summary>
            <example> This sample shows how to unzip a gzipped file
            <code>
            using System;
            using System.IO;
            
            using ICSharpCode.SharpZipLib.GZip;
            
            class MainClass
            {
                public static void Main(string[] args)
                {
                    Stream s = new GZipInputStream(File.OpenRead(args[0]));
                    FileStream fs = File.Create(Path.GetFileNameWithoutExtension(args[0]));
                    int size = 2048;
                    byte[] writeData = new byte[2048];
                    while (true) {
                        size = s.Read(writeData, 0, size);
                        if (size > 0) {
                            fs.Write(writeData, 0, size);
                        } else {
                            break;
                        }
                    }
                    s.Close();
                }
            }    
            </code>
            </example>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream">
            <summary>
            This filter stream is used to decompress data compressed using the "deflate"
            format. The "deflate" format is described in RFC 1951.
            
            This stream may form the basis for other decompression filters, such
            as the <see cref="T:ICSharpCode.SharpZipLib.GZip.GZipInputStream">GZipInputStream</see>.
            
            Author of the original java version : John Leuner.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.inf">
            <summary>
            Decompressor for this stream
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.buf">
            <summary>
            Byte array used for buffering input.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.len">
            <summary>
            Size of buffer <see cref="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.buf"></see>
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.baseInputStream">
            <summary>
            Base stream the inflater reads from.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.csize">
            <summary>
            The compressed size
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Flush">
            <summary>
            Flushes the baseInputStream
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream
            Always throws a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.SetLength(System.Int64)">
            <summary>
            Set the length of the current stream
            Always throws a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to stream and advances the current position
            This method always throws a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.WriteByte(System.Byte)">
            <summary>
            Writes one byte to the current stream and advances the current position
            Always throws a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Entry point to begin an asynchronous write.  Always throws a NotSupportedException.
            </summary>
            <param name="buffer">The buffer to write data from</param>
            <param name="offset">Offset of first byte to write</param>
            <param name="count">The maximum number of bytes to write</param>
            <param name="callback">The method to be called when the asynchronous write operation is completed</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous write request from other requests</param>
            <returns>An <see cref="T:System.IAsyncResult">IAsyncResult</see> that references the asynchronous write</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.#ctor(System.IO.Stream)">
            <summary>
            Create an InflaterInputStream with the default decompressor
            and a default buffer size of 4KB.
            </summary>
            <param name = "baseInputStream">
            The InputStream to read bytes from
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.#ctor(System.IO.Stream,ICSharpCode.SharpZipLib.Zip.Compression.Inflater)">
            <summary>
            Create an InflaterInputStream with the specified decompressor
            and a default buffer size of 4KB.
            </summary>
            <param name = "baseInputStream">
            The source of input data
            </param>
            <param name = "inf">
            The decompressor used to decompress data read from baseInputStream
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.#ctor(System.IO.Stream,ICSharpCode.SharpZipLib.Zip.Compression.Inflater,System.Int32)">
            <summary>
            Create an InflaterInputStream with the specified decompressor
            and the specified buffer size.
            </summary>
            <param name = "baseInputStream">
            The InputStream to read bytes from
            </param>
            <param name = "inflater">
            The decompressor to use
            </param>
            <param name = "bufferSize">
            Size of the buffer to use
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Close">
            <summary>
            Closes the input stream.  When <see cref="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.IsStreamOwner"></see>
            is true the underlying stream is also closed.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.FillInputBuffer">
            <summary>
            Fill input buffer with a chunk of data.
            </summary>        
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            Stream ends early
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Fill">
            <summary>
            Fills the buffer with more data to decompress.
            </summary>
            <exception cref="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            Stream ends early
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.ReadByte">
            <summary>
            Reads one byte of decompressed data.
            
            The byte is baseInputStream the lower 8 bits of the int.
            </summary>
            <returns>
            The byte read cast to an int, or -1 on end of stream.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decompresses data into the byte array
            </summary>
            <param name="b">
            The array to read and decompress data into
            </param>
            <param name="off">
            The offset indicating where the data should be placed
            </param>
            <param name="len">
            The number of bytes to decompress
            </param>
            <returns>The number of bytes read.  Zero signals the end of stream</returns>
            <exception cref="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            Inflater needs a dictionary
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Skip(System.Int64)">
            <summary>
            Skip specified number of bytes of uncompressed data
            </summary>
            <param name="n">
            Number of bytes to skip
            </param>
            <returns>
            The number of bytes skipped, zero if the end of 
            stream has been reached
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Number of bytes to skip is zero or less
            </exception>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.cryptbuffer">
            <summary>
            A buffer used for decrypting data.  Used to hold Zip crypto header.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.DecryptByte">
            <summary>
            Decrypt a single byte
            </summary>
            <returns>plain text byte value</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.DecryptBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decrypt cipher text block, updating keys
            </summary>
            <param name="buf">Data to decrypt</param>
            <param name="off">Offset of first byte to process</param>
            <param name="len">Number of bytes to process</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.InitializePassword(System.String)">
            <summary>
            Initialise the decryption keys
            </summary>
            <param name="password">The password used to initialise the keys</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.UpdateKeys(System.Byte)">
            <summary>
            Update the decryption keys
            </summary>
            <param name="ch">Character to update the keys with</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.StopDecrypting">
            <summary>
            Clear any cryptographic state.
            </summary>        
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.IsStreamOwner">
            <summary>
            Get/set flag indicating ownership of underlying stream.
            When the flag is true <see cref="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Close"/> will close the underlying stream also.
            </summary>
            <remarks>
            The default value is true.
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.CanSeek">
            <summary>
            Gets a value of false indicating seeking is not supported for this stream.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.CanWrite">
            <summary>
            Gets a value of false indicating that this stream is not writeable.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Length">
            <summary>
            A value representing the length of the stream in bytes.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Position">
            <summary>
            The current position within the stream.
            Throws a NotSupportedException when attempting to set the position
            </summary>
            <exception cref="T:System.NotSupportedException">Attempting to set the position</exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Available">
            <summary>
            Returns 0 once the end of the stream (EOF) has been reached.
            Otherwise returns 1.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.BufferReadSize">
            <summary>
            Sets the size of chunks to read from the input stream
            0 means as larger as possible.
            </summary>
            <remarks>
            Used to handle decryption where the length of stream is unknown.
            </remarks>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.GZipInputStream.crc">
            <summary>
            CRC-32 value for uncompressed data
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.GZipInputStream.eos">
            <summary>
            Indicates end of stream
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipInputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a GzipInputStream with the default buffer size
            </summary>
            <param name="baseInputStream">
            The stream to read compressed data from (baseInputStream GZIP format)
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipInputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Creates a GZIPInputStream with the specified buffer size
            </summary>
            <param name="baseInputStream">
            The stream to read compressed data from (baseInputStream GZIP format)
            </param>
            <param name="size">
            Size of the buffer to use
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads uncompressed data into an array of bytes
            </summary>
            <param name="buf">
            The buffer to read uncompressed data into
            </param>
            <param name="offset">
            The offset indicating where the data should be placed
            </param>
            <param name="len">
            The number of uncompressed bytes to be read
            </param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.GZip.GZipOutputStream">
            <summary>
            This filter stream is used to compress a stream into a "GZIP" stream.
            The "GZIP" format is described in RFC 1952.
            
            author of the original java version : John Leuner
            </summary>
            <example> This sample shows how to gzip a file
            <code>
            using System;
            using System.IO;
            
            using ICSharpCode.SharpZipLib.GZip;
            
            class MainClass
            {
                public static void Main(string[] args)
                {
                    Stream s = new GZipOutputStream(File.Create(args[0] + ".gz"));
                    FileStream fs = File.OpenRead(args[0]);
                    byte[] writeData = new byte[fs.Length];
                    fs.Read(writeData, 0, (int)fs.Length);
                    s.Write(writeData, 0, writeData.Length);
                    s.Close();
                }
            }    
            </code>
            </example>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream">
            <summary>
            A special stream deflating or compressing the bytes that are
            written to it.  It uses a Deflater to perform actual deflating.<br/>
            Authors of the original java version : Tom Tromey, Jochen Hoenicke 
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.buf">
            <summary>
            This buffer is used temporarily to retrieve the bytes from the
            deflater and write them to the underlying output stream.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.def">
            <summary>
            The deflater which is used to deflate the stream.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.baseOutputStream">
            <summary>
            Base stream the deflater depends on.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the current position of this stream to the given value. Not supported by this class!
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.SetLength(System.Int64)">
            <summary>
            Sets the length of this stream to the given value. Not supported by this class!
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.ReadByte">
            <summary>
            Read a byte from stream advancing position by one
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read a block of bytes from stream
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronous reads are not supported a NotSupportedException is always thrown
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <param name="callback"></param>
            <param name="state"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronous writes arent supported, a NotSupportedException is always thrown
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <param name="callback"></param>
            <param name="state"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Deflate">
            <summary>
            Deflates everything in the input buffers.  This will call
            <code>def.deflate()</code> until all bytes from the input buffers
            are processed.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a new DeflaterOutputStream with a default Deflater and default buffer size.
            </summary>
            <param name="baseOutputStream">
            the output stream where deflated output should be written.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.#ctor(System.IO.Stream,ICSharpCode.SharpZipLib.Zip.Compression.Deflater)">
            <summary>
            Creates a new DeflaterOutputStream with the given Deflater and
            default buffer size.
            </summary>
            <param name="baseOutputStream">
            the output stream where deflated output should be written.
            </param>
            <param name="defl">
            the underlying deflater.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.#ctor(System.IO.Stream,ICSharpCode.SharpZipLib.Zip.Compression.Deflater,System.Int32)">
            <summary>
            Creates a new DeflaterOutputStream with the given Deflater and
            buffer size.
            </summary>
            <param name="baseOutputStream">
            The output stream where deflated output is written.
            </param>
            <param name="deflater">
            The underlying deflater to use
            </param>
            <param name="bufsize">
            The buffer size to use when deflating
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            bufsize is less than or equal to zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            baseOutputStream does not support writing
            </exception>
            <exception cref="T:System.ArgumentNullException">
            deflater instance is null
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Flush">
            <summary>
            Flushes the stream by calling flush() on the deflater and then
            on the underlying stream.  This ensures that all bytes are
            flushed.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Finish">
            <summary>
            Finishes the stream by calling finish() on the deflater. 
            </summary>
            <exception cref="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            Not all input is deflated
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Close">
            <summary>
            Calls finish() and closes the underlying
            stream when <see cref="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.IsStreamOwner"></see> is true.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.WriteByte(System.Byte)">
            <summary>
            Writes a single byte to the compressed output stream.
            </summary>
            <param name="bval">
            The byte value.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes bytes from an array to the compressed stream.
            </summary>
            <param name="buf">
            The byte array
            </param>
            <param name="off">
            The offset into the byte array where to start.
            </param>
            <param name="len">
            The number of bytes to write.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.EncryptByte">
            <summary>
            Encrypt a single byte 
            </summary>
            <returns>
            The encrypted value
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.EncryptBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encrypt a block of data
            </summary>
            <param name="buffer">
            Data to encrypt.  NOTE the original contents of the buffer are lost
            </param>
            <param name="offset">
            Offset of first byte in buffer to encrypt
            </param>
            <param name="length">
            Number of bytes in buffer to encrypt
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.InitializePassword(System.String)">
            <summary>
            Initializes encryption keys based on given password
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.UpdateKeys(System.Byte)">
            <summary>
            Update encryption keys 
            </summary>        
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.IsStreamOwner">
            <summary>
            Get/set flag indicating ownership of underlying stream.
            When the flag is true <see cref="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Close"></see> will close the underlying stream also.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.CanPatchEntries">
               <summary>
            Allows client to determine if an entry can be patched after its added
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.CanRead">
            <summary>
            Gets value indicating stream can be read from
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.CanSeek">
            <summary>
            Gets a value indicating if seeking is supported for this stream
            This property always returns false
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.CanWrite">
            <summary>
            Get value indicating if this stream supports writing
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Length">
            <summary>
            Get current length of stream
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Position">
            <summary>
            The current position within the stream.
            Always throws a NotSupportedExceptionNotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any attempt to set position</exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Password">
            <summary>
            Get/set the password used for encryption.  When null no encryption is performed
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.GZipOutputStream.crc">
            <summary>
            CRC-32 value for uncompressed data
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipOutputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a GzipOutputStream with the default buffer size
            </summary>
            <param name="baseOutputStream">
            The stream to read data (to be compressed) from
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipOutputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Creates a GZipOutputStream with the specified buffer size
            </summary>
            <param name="baseOutputStream">
            The stream to read data (to be compressed) from
            </param>
            <param name="size">
            Size of the buffer to use
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write given buffer to output updating crc
            </summary>
            <param name="buf">Buffer to write</param>
            <param name="off">Offset of first byte in buf to write</param>
            <param name="len">Number of bytes to write</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipOutputStream.Close">
            <summary>
            Writes remaining compressed output data to the output stream
            and closes it.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipOutputStream.SetLevel(System.Int32)">
            <summary>
            Sets the active compression level (1-9).  The new level will be activated
            immediately.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Level specified is not supported.
            </exception>
            <see cref="T:ICSharpCode.SharpZipLib.Zip.Compression.Deflater"/>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipOutputStream.GetLevel">
            <summary>
            Get the current compression level.
            </summary>
            <returns>The current compression level.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipOutputStream.Finish">
            <summary>
            Finish compression and write any footer information required to stream
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.InvalidHeaderException">
            <summary>
            This exception is used to indicate that there is a problem
            with a TAR archive header.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.TarException">
            <summary>
            TarExceptions are used for exceptions specific to tar classes and code.    
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarException.#ctor">
            <summary>
            Initialises a new instance of the TarException class.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarException.#ctor(System.String)">
            <summary>
            Initialises a new instance of the TarException class with a specified message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.InvalidHeaderException.#ctor">
            <summary>
            Initialise a new instance of the InvalidHeaderException class.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.InvalidHeaderException.#ctor(System.String)">
            <summary>
            Initialises a new instance of the InvalidHeaderException class with a specified message.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.ProgressMessageHandler">
            <summary>
            Used to advise clients of 'events' while processing archives
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.TarArchive">
            <summary>
            The TarArchive class implements the concept of a
            'Tape Archive'. A tar archive is a series of entries, each of
            which represents a file system object. Each entry in
            the archive consists of a header block followed by 0 or more data blocks.
            Directory entries consist only of the header block, and are followed by entries
            for the directory's contents. File entries consist of a
            header followed by the number of blocks needed to
            contain the file's contents. All entries are written on
            block boundaries. Blocks are 512 bytes long.
            
            TarArchives are instantiated in either read or write mode,
            based upon whether they are instantiated with an InputStream
            or an OutputStream. Once instantiated TarArchives read/write
            mode can not be changed.
            
            There is currently no support for random access to tar archives.
            However, it seems that subclassing TarArchive, and using the
            TarBuffer.getCurrentRecordNum() and TarBuffer.getCurrentBlockNum()
            methods, this would be rather trvial.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.OnProgressMessageEvent(ICSharpCode.SharpZipLib.Tar.TarEntry,System.String)">
            <summary>
            Raises the ProgressMessage event
            </summary>
            <param name="entry">TarEntry for this event</param>
            <param name="message">message for this event.  Null is no message</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.#ctor">
            <summary>
            Constructor for a TarArchive.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.CreateInputTarArchive(System.IO.Stream)">
            <summary>
            The InputStream based constructors create a TarArchive for the
            purposes of extracting or listing a tar archive. Thus, use
            these constructors when you wish to extract files from or list
            the contents of an existing tar archive.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.CreateInputTarArchive(System.IO.Stream,System.Int32)">
            <summary>
            Create TarArchive for reading setting block factor
            </summary>
            <param name="inputStream">Stream for tar archive contents</param>
            <param name="blockFactor">The blocking factor to apply</param>
            <returns>
            TarArchive
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.CreateOutputTarArchive(System.IO.Stream)">
            <summary>
            Create a TarArchive for writing to, using the default blocking factor
            </summary>
            <param name="outputStream">Stream to write to</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.CreateOutputTarArchive(System.IO.Stream,System.Int32)">
            <summary>
            Create a TarArchive for writing to
            </summary>
            <param name="outputStream">The stream to write to</param>
            <param name="blockFactor">The blocking factor to use for buffering.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.Initialize(System.Int32)">
            <summary>
            Common constructor initialization code.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.SetKeepOldFiles(System.Boolean)">
            <summary>
            Set the flag that determines whether existing files are
            kept, or overwritten during extraction.
            </summary>
            <param name="keepOldFiles">
            If true, do not overwrite existing files.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.SetAsciiTranslation(System.Boolean)">
            <summary>
            Set the ascii file translation flag. If ascii file translation
            is true, then the file is checked to see if it a binary file or not. 
            If the flag is true and the test indicates it is ascii text 
            file, it will be translated. The translation converts the local
            operating system's concept of line ends into the UNIX line end,
            '\n', which is the defacto standard for a TAR archive. This makes
            text files compatible with UNIX.
            </summary>
            <param name= "asciiTranslate">
            If true, translate ascii text files.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.SetUserInfo(System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Set user and group information that will be used to fill in the
            tar archive's entry headers. This information based on that available 
            for the linux operating system, which is not always available on other
            operating systems.  TarArchive allows the programmer to specify values
            to be used in their place.
            </summary>
            <param name="userId">
            The user id to use in the headers.
            </param>
            <param name="userName">
            The user name to use in the headers.
            </param>
            <param name="groupId">
            The group id to use in the headers.
            </param>
            <param name="groupName">
            The group name to use in the headers.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.CloseArchive">
            <summary>
            Close the archive. This simply calls the underlying
            tar stream's close() method.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.ListContents">
            <summary>
            Perform the "list" command for the archive contents.
            
            NOTE That this method uses the <see cref="E:ICSharpCode.SharpZipLib.Tar.TarArchive.ProgressMessageEvent"> progress event</see> to actually list
            the contents. If the progress display event is not set, nothing will be listed!
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.ExtractContents(System.String)">
            <summary>
            Perform the "extract" command and extract the contents of the archive.
            </summary>
            <param name="destDir">
            The destination directory into which to extract.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.ExtractEntry(System.String,ICSharpCode.SharpZipLib.Tar.TarEntry)">
            <summary>
            Extract an entry from the archive. This method assumes that the
            tarIn stream has been properly set with a call to getNextEntry().
            </summary>
            <param name="destDir">
            The destination directory into which to extract.
            </param>
            <param name="entry">
            The TarEntry returned by tarIn.getNextEntry().
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.WriteEntry(ICSharpCode.SharpZipLib.Tar.TarEntry,System.Boolean)">
            <summary>
            Write an entry to the archive. This method will call the putNextEntry
            and then write the contents of the entry, and finally call closeEntry()
            for entries that are files. For directories, it will call putNextEntry(),
            and then, if the recurse flag is true, process each entry that is a
            child of the directory.
            </summary>
            <param name="sourceEntry">
            The TarEntry representing the entry to write to the archive.
            </param>
            <param name="recurse">
            If true, process the children of directory entries.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.InternalWriteEntry(ICSharpCode.SharpZipLib.Tar.TarEntry,System.Boolean)">
            <summary>
            Write an entry to the archive. This method will call the putNextEntry
            and then write the contents of the entry, and finally call closeEntry()
            for entries that are files. For directories, it will call putNextEntry(),
            and then, if the recurse flag is true, process each entry that is a
            child of the directory.
            </summary>
            <param name="sourceEntry">
            The TarEntry representing the entry to write to the archive.
            </param>
            <param name="recurse">
            If true, process the children of directory entries.
            </param>
        </member>
        <member name="E:ICSharpCode.SharpZipLib.Tar.TarArchive.ProgressMessageEvent">
            <summary>
            Client hook allowing detailed information to be reported during processing
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarArchive.PathPrefix">
            <summary>
            PathPrefix is added to entry names as they are written if the value is not null.
            A slash character is appended after PathPrefix 
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarArchive.RootPath">
            <summary>
            RootPath is removed from entry names if it is found at the
            beginning of the name.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarArchive.ApplyUserInfoOverrides">
            <summary>
            Get or set a value indicating if overrides defined by <see cref="M:ICSharpCode.SharpZipLib.Tar.TarArchive.SetUserInfo(System.Int32,System.String,System.Int32,System.String)">SetUserInfo</see> should be applied.
            </summary>
            <remarks>If overrides are not applied then the values as set in each header will be used.</remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarArchive.UserId">
            <summary>
            Get the archive user id.
            See <see cref="P:ICSharpCode.SharpZipLib.Tar.TarArchive.ApplyUserInfoOverrides">ApplyUserInfoOverrides</see> for detail
            on how to allow setting values on a per entry basis.
            </summary>
            <returns>
            The current user id.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarArchive.UserName">
            <summary>
            Get the archive user name.
            See <see cref="P:ICSharpCode.SharpZipLib.Tar.TarArchive.ApplyUserInfoOverrides">ApplyUserInfoOverrides</see> for detail
            on how to allow setting values on a per entry basis.
            </summary>
            <returns>
            The current user name.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarArchive.GroupId">
            <summary>
            Get the archive group id.
            See <see cref="P:ICSharpCode.SharpZipLib.Tar.TarArchive.ApplyUserInfoOverrides">ApplyUserInfoOverrides</see> for detail
            on how to allow setting values on a per entry basis.
            </summary>
            <returns>
            The current group id.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarArchive.GroupName">
            <summary>
            Get the archive group name.
            See <see cref="P:ICSharpCode.SharpZipLib.Tar.TarArchive.ApplyUserInfoOverrides">ApplyUserInfoOverrides</see> for detail
            on how to allow setting values on a per entry basis.
            </summary>
            <returns>
            The current group name.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarArchive.RecordSize">
            <summary>
            Get the archive's record size. Because of its history, tar
            supports the concept of buffered IO consisting of RECORDS of
            BLOCKS. This allowed tar to match the IO characteristics of
            the physical device being used. Of course, in the C# world,
            this makes no sense, WITH ONE EXCEPTION - archives are expected
            to be properly "blocked". Thus, all of the horrible TarBuffer
            support boils down to simply getting the "boundaries" correct.
            </summary>
            <returns>
            The record size this archive is using.
            </returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.TarBuffer">
            <summary>
            The TarBuffer class implements the tar archive concept
            of a buffered input stream. This concept goes back to the
            days of blocked tape drives and special io devices. In the
            C# universe, the only real function that this class
            performs is to ensure that files have the correct "record"
            size, or other tars will complain.
            <p>
            You should never have a need to access this class directly.
            TarBuffers are created by Tar IO Streams.
            </p>
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarBuffer.BlockSize">
            <summary>
            The size of a block in a tar archive in bytes.
            </summary>
            <remarks>This is 512 bytes.</remarks>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarBuffer.DefaultBlockFactor">
            <summary>
            The number of blocks in a default record.
            </summary>
            <remarks>
            The default value is 20 block per record.
            </remarks>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarBuffer.DefaultRecordSize">
            <summary>
            The size in bytes of a default record.
            </summary>
            <remarks>
            The default size is 10KB.
            </remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.#ctor">
            <summary>
            Construct a default TarBuffer
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.CreateInputTarBuffer(System.IO.Stream)">
            <summary>
            Create TarBuffer for reading with default BlockFactor
            </summary>
            <param name="inputStream">Stream to buffer</param>
            <returns>TarBuffer</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.CreateInputTarBuffer(System.IO.Stream,System.Int32)">
            <summary>
            Construct TarBuffer for reading inputStream setting BlockFactor
            </summary>
            <param name="inputStream">Stream to buffer</param>
            <param name="blockFactor">Blocking factor to apply</param>
            <returns>TarBuffer</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.CreateOutputTarBuffer(System.IO.Stream)">
            <summary>
            Construct TarBuffer for writing with default BlockFactor
            </summary>
            <param name="outputStream">output stream for buffer</param>
            <returns>TarBuffer</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.CreateOutputTarBuffer(System.IO.Stream,System.Int32)">
            <summary>
            Construct TarBuffer for writing Tar output to streams.
            </summary>
            <param name="outputStream">Output stream to write to.</param>
            <param name="blockFactor">Blocking factor to apply</param>
            <returns>TarBuffer</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.Initialize(System.Int32)">
            <summary>
            Initialization common to all constructors.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.GetBlockFactor">
            <summary>
            Get the TAR Buffer's block factor
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.GetRecordSize">
            <summary>
            Get the TAR Buffer's record size.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.IsEOFBlock(System.Byte[])">
            <summary>
            Determine if an archive block indicates End of Archive. End of
            archive is indicated by a block that consists entirely of null bytes.
            All remaining blocks for the record should also be null's
            However some older tars only do a couple of null blocks (Old GNU tar for one)
            and also partial records
            </summary>
            <param name = "block">The data block to check.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.SkipBlock">
            <summary>
            Skip over a block on the input stream.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.ReadBlock">
            <summary>
            Read a block from the input stream.
            </summary>
            <returns>
            The block of data read.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.ReadRecord">
            <summary>
            Read a record from data stream.
            </summary>
            <returns>
            false if End-Of-File, else true.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.GetCurrentBlockNum">
            <summary>
            Get the current block number, within the current record, zero based.
            </summary>
            <returns>
            The current zero based block number.
            </returns>
            <remarks>
            The absolute block number = (<see cref="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.GetCurrentRecordNum">record number</see> * <see cref="P:ICSharpCode.SharpZipLib.Tar.TarBuffer.BlockFactor">block factor</see>) + <see cref="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.GetCurrentBlockNum">block number</see>.
            </remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.GetCurrentRecordNum">
            <summary>
            Get the current record number.
            </summary>
            <returns>
            The current zero based record number.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.WriteBlock(System.Byte[])">
            <summary>
            Write a block of data to the archive.
            </summary>
            <param name="block">
            The data to write to the archive.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.WriteBlock(System.Byte[],System.Int32)">
            <summary>
            Write an archive record to the archive, where the record may be
            inside of a larger array buffer. The buffer must be "offset plus
            record size" long.
            </summary>
            <param name="buf">
            The buffer containing the record data to write.
            </param>
            <param name="offset">
            The offset of the record data within buf.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.WriteRecord">
            <summary>
            Write a TarBuffer record to the archive.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.Flush">
            <summary>
            Flush the current data block if it has any data in it.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.Close">
            <summary>
            Close the TarBuffer. If this is an output buffer, also flush the
            current block before closing.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarBuffer.RecordSize">
            <summary>
            Get the record size for this buffer
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarBuffer.BlockFactor">
            <summary>
            Get the Blocking factor for the buffer
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.TarEntry">
            <summary>
            This class represents an entry in a Tar archive. It consists
            of the entry's header, as well as the entry's File. Entries
            can be instantiated in one of three ways, depending on how
            they are to be used.
            <p>
            TarEntries that are created from the header bytes read from
            an archive are instantiated with the TarEntry( byte[] )
            constructor. These entries will be used when extracting from
            or listing the contents of an archive. These entries have their
            header filled in using the header bytes. They also set the File
            to null, since they reference an archive entry not a file.</p>
            <p>
            TarEntries that are created from files that are to be written
            into an archive are instantiated with the CreateEntryFromFile(string)
            pseudo constructor. These entries have their header filled in using
            the File's information. They also keep a reference to the File
            for convenience when writing entries.</p>
            <p>
            Finally, TarEntries can be constructed from nothing but a name.
            This allows the programmer to construct the entry by hand, for
            instance when only an InputStream is available for writing to
            the archive, and the header information is constructed from
            other information. In this case the header fields are set to
            defaults and the File is set to null.</p>
            
            <see cref="P:ICSharpCode.SharpZipLib.Tar.TarEntry.TarHeader"/>
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarEntry.file">
            <summary>
            The name of the file this entry represents or null if the entry is not based on a file.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarEntry.header">
            <summary>
            The entry's header information.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.#ctor">
            <summary>
            Only allow creation of Entries with the static CreateXYZ factory methods.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.#ctor(System.Byte[])">
            <summary>
            Construct an entry from an archive's header bytes. File is set
            to null.
            </summary>
            <param name = "headerBuf">
            The header bytes from a tar archive entry.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.#ctor(ICSharpCode.SharpZipLib.Tar.TarHeader)">
            <summary>
            Construct a TarEntry using the <paramref name="header">header</paramref> provided
            </summary>
            <param name="header">Header details for entry</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.Clone">
            <summary>
            Clone this tar entry.
            </summary>
            <returns>Returns a clone of this entry.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.CreateTarEntry(System.String)">
            <summary>
            Construct an entry with only a <paramref name="name"></paramref>.
            This allows the programmer to construct the entry's header "by hand". 
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.CreateEntryFromFile(System.String)">
            <summary>
            Construct an entry for a file. File is set to file, and the
            header is constructed from information from the file.
            </summary>
            <param name = "fileName">
            The file that the entry represents.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.Initialize">
            <summary>
            Initialization code common to all pseudo constructors.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.Equals(System.Object)">
            <summary>
            Determine if the two entries are equal. Equality is determined
            by the header names being equal.
            </summary>
            <returns>
            True if the entries are equal.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.GetHashCode">
            <summary>
            Must be overridden when you override Equals.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.IsDescendent(ICSharpCode.SharpZipLib.Tar.TarEntry)">
            <summary>
            Determine if the given entry is a descendant of this entry.
            Descendancy is determined by the name of the descendant
            starting with this entry's name.
            </summary>
            <param name = "desc">
            Entry to be checked as a descendent of this.
            </param>
            <returns>
            True if entry is a descendant of this.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.SetIds(System.Int32,System.Int32)">
            <summary>
            Convenience method to set this entry's group and user ids.
            </summary>
            <param name="userId">
            This entry's new user id.
            </param>
            <param name="groupId">
            This entry's new group id.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.SetNames(System.String,System.String)">
            <summary>
            Convenience method to set this entry's group and user names.
            </summary>
            <param name="userName">
            This entry's new user name.
            </param>
            <param name="groupName">
            This entry's new group name.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.AdjustEntryName(System.Byte[],System.String)">
            <summary>
            Convenience method that will modify an entry's name directly
            in place in an entry header buffer byte array.
            </summary>
            <param name="outbuf">
            The buffer containing the entry header to modify.
            </param>
            <param name="newName">
            The new name to place into the header buffer.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.GetFileTarHeader(ICSharpCode.SharpZipLib.Tar.TarHeader,System.String)">
            <summary>
            Fill in a TarHeader with information from a File.
            </summary>
            <param name="hdr">
            The TarHeader to fill in.
            </param>
            <param name="file">
            The file from which to get the header information.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.GetDirectoryEntries">
            <summary>
            Get entries for all files present in this entries directory.
            If this entry doesnt represent a directory zero entries are returned.
            </summary>
            <returns>
            An array of TarEntry's for this entry's children.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.WriteEntryHeader(System.Byte[])">
            <summary>
            Write an entry's header information to a header buffer.
            </summary>
            <param name = "outbuf">
            The tar entry header buffer to fill in.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.NameTarHeader(ICSharpCode.SharpZipLib.Tar.TarHeader,System.String)">
            <summary>
            Fill in a TarHeader given only the entry's name.
            </summary>
            <param name="hdr">
            The TarHeader to fill in.
            </param>
            <param name="name">
            The tar entry name.
            </param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarEntry.TarHeader">
            <summary>
            Get this entry's header.
            </summary>
            <returns>
            This entry's TarHeader.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarEntry.Name">
            <summary>
            Get/Set this entry's name.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarEntry.UserId">
            <summary>
            Get/set this entry's user id.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarEntry.GroupId">
            <summary>
            Get/set this entry's group id.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarEntry.UserName">
            <summary>
            Get/set this entry's user name.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarEntry.GroupName">
            <summary>
            Get/set this entry's group name.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarEntry.ModTime">
            <summary>
            Get/Set the modification time for this entry
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarEntry.File">
            <summary>
            Get this entry's file.
            </summary>
            <returns>
            This entry's file.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarEntry.Size">
            <summary>
            Get/set this entry's recorded file size.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarEntry.IsDirectory">
            <summary>
            Return true if this entry represents a directory, false otherwise
            </summary>
            <returns>
            True if this entry is a directory.
            </returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.TarHeader">
            <summary>
            This class encapsulates the Tar Entry Header used in Tar Archives.
            The class also holds a number of tar constants, used mostly in headers.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.CHKSUMOFS">
            <summary>
            Offset of checksum in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_OLDNORM">
            <summary>
             The "old way" of indicating a normal file.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_NORMAL">
            <summary>
            Normal file type.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_LINK">
            <summary>
            Link file type.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_SYMLINK">
            <summary>
            Symbolic link file type.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_CHR">
            <summary>
            Character device file type.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_BLK">
            <summary>
            Block device file type.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_DIR">
            <summary>
            Directory file type.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_FIFO">
            <summary>
            FIFO (pipe) file type.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_CONTIG">
            <summary>
            Contiguous file type.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_GHDR">
            <summary>
            Posix.1 2001 global extended header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_ACL">
            <summary>
            Solaris access control list file type
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_GNU_DUMPDIR">
            <summary>
            GNU dir dump file type
            This is a dir entry that contains the names of files that were in the
            dir at the time the dump was made
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_EXTATTR">
            <summary>
            Solaris Extended Attribute File
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_META">
            <summary>
            Inode (metadata only) no file content
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_GNU_LONGLINK">
            <summary>
            Identifies the next file on the tape as having a long link name
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_GNU_LONGNAME">
            <summary>
            Identifies the next file on the tape as having a long name
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_GNU_MULTIVOL">
            <summary>
            Continuation of a file that began on another volume
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_GNU_NAMES">
            <summary>
            For storing filenames that dont fit in the main header (old GNU)
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_GNU_SPARSE">
            <summary>
            GNU Sparse file
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_GNU_VOLHDR">
            <summary>
            GNU Tape/volume header ignore on extraction
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.NAMELEN">
            <summary>
            The length of the name field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.MODELEN">
            <summary>
            The length of the mode field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.UIDLEN">
            <summary>
            The length of the user id field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.GIDLEN">
            <summary>
            The length of the group id field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.CHKSUMLEN">
            <summary>
            The length of the checksum field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.SIZELEN">
            <summary>
            The length of the size field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.MAGICLEN">
            <summary>
            The length of the magic field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.VERSIONLEN">
            <summary>
            The length of the version field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.MODTIMELEN">
            <summary>
            The length of the modification time field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.UNAMELEN">
            <summary>
            The length of the user name field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.GNAMELEN">
            <summary>
            The length of the group name field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.DEVLEN">
            <summary>
            The length of the devices field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_XHDR">
            <summary>
            Posix.1 2001 extended header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.TMAGIC">
            <summary>
            The magic tag representing a POSIX tar archive.  (includes trailing NULL)
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.GNU_TMAGIC">
            <summary>
            The magic tag representing an old GNU tar archive where version is included in magic and overwrites it
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.#ctor">
            <summary>
            Initialise a default TarHeader instance
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.SetValueDefaults(System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Set defaults for values used when constructing a TarHeader instance.
            </summary>
            <param name="userId">Value to apply as a default for userId.</param>
            <param name="userName">Value to apply as a default for userName.</param>
            <param name="groupId">Value to apply as a default for groupId.</param>
            <param name="groupName">Value to apply as a default for groupName.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.ResetValueDefaults">
            <summary>
            Reset value defaults to initial values.
            </summary>
            <remarks>
            The default values are user id=0, group id=0, groupname="None", user name=null.
            When the default user name is null the value from Environment.UserName is used. Or "PocketPC" for the Compact framework.
            When the default group name is null the value "None" is used.
            </remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.Clone">
            <summary>
            Clone a TAR header.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.GetHashCode">
            <summary>
            Get a hash code for the current object.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.Equals(System.Object)">
            <summary>
            Determines if this instance is equal to the specified object.
            </summary>
            <param name="obj">The object to compare with.</param>
            <returns>true if the objects are equal, false otherwise.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.GetName">
            <summary>
            Get the name of this entry.
            </summary>
            <returns>The entry's name.</returns>
            <remarks>
            This is obsolete use the Name property instead.
            </remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.ParseOctal(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parse an octal string from a header buffer.
            </summary>
            <param name = "header">The header buffer from which to parse.</param>
            <param name = "offset">The offset into the buffer from which to parse.</param>
            <param name = "length">The number of header bytes to parse.</param>
            <returns>The long equivalent of the octal string.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.ParseName(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parse a name from a header buffer.
            </summary>
            <param name="header">
            The header buffer from which to parse.
            </param>
            <param name="offset">
            The offset into the buffer from which to parse.
            </param>
            <param name="length">
            The number of header bytes to parse.
            </param>
            <returns>
            The name parsed.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.GetNameBytes(System.Text.StringBuilder,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add <paramref name="name">name</paramref> to the buffer as a collection of bytes
            </summary>
            <param name="name">The name to add</param>
            <param name="nameOffset">The offset of the first character</param>
            <param name="buf">The buffer to add to</param>
            <param name="bufferOffset">The index of the first byte to add</param>
            <param name="length">The number of characters/bytes to add</param>
            <returns>The next free index in the <paramref name="buf">buffer</paramref></returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.GetNameBytes(System.String,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add <paramref name="name">name</paramref> to the buffer as a collection of bytes
            </summary>
            <param name="name">The name to add</param>
            <param name="nameOffset">The offset of the first character</param>
            <param name="buf">The buffer to add to</param>
            <param name="bufferOffset">The index of the first byte to add</param>
            <param name="length">The number of characters/bytes to add</param>
            <returns>The next free index in the <paramref name="buf">buffer</paramref></returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.GetNameBytes(System.Text.StringBuilder,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add an entry name to the buffer
            </summary>
            <param name="name">
            The name to add
            </param>
            <param name="buf">
            The buffer to add to
            </param>
            <param name="offset">
            The offset into the buffer from which to start adding
            </param>
            <param name="length">
            The number of header bytes to add
            </param>
            <returns>
            The index of the next free byte in the buffer
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.GetNameBytes(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add an entry name to the buffer
            </summary>
            <param name="name">The name to add</param>
            <param name="buf">The buffer to add to</param>
            <param name="offset">The offset into the buffer from which to start adding</param>
            <param name="length">The number of header bytes to add</param>
            <returns>The index of the next free byte in the buffer</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.GetAsciiBytes(System.String,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add a string to a buffer as a collection of ascii bytes.
            </summary>
            <param name="toAdd">The string to add</param>
            <param name="nameOffset">The offset of the first character to add.</param>
            <param name="buffer">The buffer to add to.</param>
            <param name="bufferOffset">The offset to start adding at.</param>
            <param name="length">The number of ascii characters to add.</param>
            <returns>The next free index in the buffer.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.GetOctalBytes(System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Put an octal representation of a value into a buffer
            </summary>
            <param name = "val">
            the value to be converted to octal
            </param>
            <param name = "buf">
            buffer to store the octal string
            </param>
            <param name = "offset">
            The offset into the buffer where the value starts
            </param>
            <param name = "length">
            The length of the octal string to create
            </param>
            <returns>
            The offset of the character next byte after the octal string
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.GetLongOctalBytes(System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Put an octal representation of a value into a buffer
            </summary>
            <param name = "val">Value to be convert to octal</param>
            <param name = "buf">The buffer to update</param>
            <param name = "offset">The offset into the buffer to store the value</param>
            <param name = "length">The length of the octal string</param>
            <returns>Index of next byte</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.GetCheckSumOctalBytes(System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add the checksum integer to header buffer.
            </summary>
            <param name = "val"></param>
            <param name = "buf">The header buffer to set the checksum for</param>
            <param name = "offset">The offset into the buffer for the checksum</param>
            <param name = "length">The number of header bytes to update.
            It's formatted differently from the other fields: it has 6 digits, a
            null, then a space -- rather than digits, a space, then a null.
            The final space is already there, from checksumming
            </param>
            <returns>The modified buffer offset</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.ComputeCheckSum(System.Byte[])">
            <summary>
            Compute the checksum for a tar entry header.  
            The checksum field must be all spaces prior to this happening
            </summary>
            <param name = "buf">The tar entry's header buffer.</param>
            <returns>The computed checksum.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.MakeCheckSum(System.Byte[])">
            <summary>
            Make a checksum for a tar entry ignoring the checksum contents.
            </summary>
            <param name = "buf">The tar entry's header buffer.</param>
            <returns>The checksum for the buffer</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.ParseBuffer(System.Byte[])">
            <summary>
            Parse TarHeader information from a header buffer.
            </summary>
            <param name = "header">
            The tar entry header buffer to get information from.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.WriteHeader(System.Byte[])">
            <summary>
            'Write' header information to buffer provided, updating the <see cref="P:ICSharpCode.SharpZipLib.Tar.TarHeader.Checksum">check sum</see>.
            </summary>
            <param name="outbuf">output buffer for header information</param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.Name">
            <summary>
            Get/set the name for this tar entry.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when attempting to set the property to null.</exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.Mode">
            <summary>
            Get/set the entry's Unix style permission mode.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.UserId">
            <summary>
            The entry's user id.
            </summary>
            <remarks>
            This is only directly relevant to unix systems.
            The default is zero.
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.GroupId">
            <summary>
            Get/set the entry's group id.
            </summary>
            <remarks>
            This is only directly relevant to linux/unix systems.
            The default value is zero.
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.Size">
            <summary>
            Get/set the entry's size.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when setting the size to less than zero.</exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.ModTime">
            <summary>
            Get/set the entry's modification time.
            </summary>
            <remarks>
            The modification time is only accurate to within a second.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when setting the date time to less than 1/1/1970.</exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.Checksum">
            <summary>
            Get the entry's checksum.  This is only valid/updated after writing or reading an entry.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.IsChecksumValid">
            <summary>
            Get value of true if the header checksum is valid, false otherwise.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.TypeFlag">
            <summary>
            Get/set the entry's type flag.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.LinkName">
            <summary>
            The entry's link name.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when attempting to set LinkName to null.</exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.Magic">
            <summary>
            Get/set the entry's magic tag.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when attempting to set Magic to null.</exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.Version">
            <summary>
            The entry's version.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when attempting to set Version to null.</exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.UserName">
            <summary>
            The entry's user name.
            </summary>
            <remarks>
            See <see cref="M:ICSharpCode.SharpZipLib.Tar.TarHeader.ResetValueDefaults">ResetValueDefaults</see>
            for detail on how this value is derived.
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.GroupName">
            <summary>
            Get/set the entry's group name.
            </summary>
            <remarks>
            This is only directly relevant to unix systems.
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.DevMajor">
            <summary>
            Get/set the entry's major device number.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.DevMinor">
            <summary>
            Get/set the entry's minor device number.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.TarInputStream">
            <summary>
            The TarInputStream reads a UNIX tar archive as an InputStream.
            methods are provided to position at each successive entry in
            the archive, and the read each entry as a normal input stream
            using read().
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarInputStream.hasHitEOF">
            <summary>
            Flag set when last block has been read
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarInputStream.entrySize">
            <summary>
            Size of this entry as recorded in header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarInputStream.entryOffset">
            <summary>
            Number of bytes read for this entry so far
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarInputStream.readBuf">
            <summary>
            Buffer used with calls to <code>Read()</code>
            </summary>        
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarInputStream.buffer">
            <summary>
            Working buffer
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarInputStream.currEntry">
            <summary>
            Current entry being read
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarInputStream.eFactory">
            <summary>
            Factory used to create TarEntry or descendant class instance
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.Flush">
            <summary>
            Flushes the baseInputStream
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Set the streams position.  This operation is not supported and will throw a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the stream
            This operation is not supported and will throw a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a block of bytes to this stream using data from a buffer.
            This operation is not supported and will throw a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the file stream.
            This operation is not supported and will throw a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.#ctor(System.IO.Stream)">
            <summary>
            Construct a TarInputStream with default block factor
            </summary>
            <param name="inputStream">stream to source data from</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Construct a TarInputStream with user specified block factor
            </summary>
            <param name="inputStream">stream to source data from</param>
            <param name="blockFactor">block factor to apply to archive</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.SetEntryFactory(ICSharpCode.SharpZipLib.Tar.TarInputStream.IEntryFactory)">
            <summary>
            Set the entry factory for this instance.
            </summary>
            <param name="factory">The factory for creating new entries</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.Close">
            <summary>
            Closes this stream. Calls the TarBuffer's close() method.
            The underlying stream is closed by the TarBuffer.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.GetRecordSize">
            <summary>
            Get the record size being used by this stream's TarBuffer.
            </summary>
            <returns>
            TarBuffer record size.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.Skip(System.Int64)">
            <summary>
            Skip bytes in the input buffer. This skips bytes in the
            current entry's data, not the entire archive, and will
            stop at the end of the current entry's data if the number
            to skip extends beyond that point.
            </summary>
            <param name="numToSkip">
            The number of bytes to skip.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.Mark(System.Int32)">
            <summary>
            Since we do not support marking just yet, we do nothing.
            </summary>
            <param name ="markLimit">
            The limit to mark.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.Reset">
            <summary>
            Since we do not support marking just yet, we do nothing.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.GetNextEntry">
            <summary>
            Get the next entry in this tar archive. This will skip
            over any remaining data in the current entry, if there
            is one, and place the input stream at the header of the
            next entry, and read the header and instantiate a new
            TarEntry from the header bytes and return that entry.
            If there are no more entries in the archive, null will
            be returned to indicate that the end of the archive has
            been reached.
            </summary>
            <returns>
            The next TarEntry in the archive, or null.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.ReadByte">
            <summary>
            Reads a byte from the current tar archive entry.
            This method simply calls read(byte[], int, int).
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads bytes from the current tar archive entry.
            
            This method is aware of the boundaries of the current
            entry in the archive and will deal with them appropriately
            </summary>
            <param name="outputBuffer">
            The buffer into which to place bytes read.
            </param>
            <param name="offset">
            The offset at which to place bytes read.
            </param>
            <param name="count">
            The number of bytes to read.
            </param>
            <returns>
            The number of bytes read, or 0 at end of stream/EOF.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.CopyEntryContents(System.IO.Stream)">
            <summary>
            Copies the contents of the current tar archive entry directly into
            an output stream.
            </summary>
            <param name="outputStream">
            The OutputStream into which to write the entry's data.
            </param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarInputStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarInputStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking
            This property always returns false.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarInputStream.CanWrite">
            <summary>
            Gets a value indicating if the stream supports writing.
            This property always returns false.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarInputStream.Length">
            <summary>
            The length in bytes of the stream
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarInputStream.Position">
            <summary>
            Gets or sets the position within the stream. 
            Setting the Position is not supported and throws a NotSupportedExceptionNotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any attempt to set position</exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarInputStream.Available">
            <summary>
            Get the available data that can be read from the current
            entry in the archive. This does not indicate how much data
            is left in the entire archive, only in the current entry.
            This value is determined from the entry's size header field
            and the amount of data already read from the current entry.
            </summary>
            <returns>
            The number of available bytes for the current entry.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarInputStream.IsMarkSupported">
            <summary>
            Since we do not support marking just yet, we return false.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.TarInputStream.IEntryFactory">
            <summary>
            This interface is provided, along with the method setEntryFactory(), to allow
            the programmer to have their own TarEntry subclass instantiated for the
            entries return from getNextEntry().
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.IEntryFactory.CreateEntry(System.String)">
            <summary>
            Create an entry based on name alone
            </summary>
            <param name="name">
            Name of the new EntryPointNotFoundException to create
            </param>
            <returns>created TarEntry or descendant class</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.IEntryFactory.CreateEntryFromFile(System.String)">
            <summary>
            Create an instance based on an actual file
            </summary>
            <param name="fileName">
            Name of file to represent in the entry
            </param>
            <returns>
            Created TarEntry or descendant class
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.IEntryFactory.CreateEntry(System.Byte[])">
            <summary>
            Create a tar entry based on the header information passed
            </summary>
            <param name="headerBuf">
            Buffer containing header information to base entry on
            </param>
            <returns>
            Created TarEntry or descendant class
            </returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.TarInputStream.EntryFactoryAdapter">
            <summary>
            Standard entry factory class creating instances of the class TarEntry
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.EntryFactoryAdapter.CreateEntry(System.String)">
            <summary>
            Create a TarEntry based on named
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.EntryFactoryAdapter.CreateEntryFromFile(System.String)">
            <summary>
            Create a tar entry with details obtained from <paramref name="fileName">file</paramref>
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.EntryFactoryAdapter.CreateEntry(System.Byte[])">
            <summary>
            Create and entry based on details in <paramref name="headerBuf">header</paramref>
            </summary>            
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.TarOutputStream">
            <summary>
            The TarOutputStream writes a UNIX tar archive as an OutputStream.
            Methods are provided to put entries, and then write their contents
            by writing to this stream using write().
            </summary>
            public
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarOutputStream.debug">
            <summary>
            flag indicating debugging code should be activated or not
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarOutputStream.currSize">
            <summary>
            Size for the current entry
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarOutputStream.currBytes">
            <summary>
            bytes written for this entry so far
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarOutputStream.blockBuf">
            <summary>
            single block working buffer 
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarOutputStream.assemLen">
            <summary>
            current 'Assembly' buffer length
            </summary>        
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarOutputStream.assemBuf">
            <summary>
            'Assembly' buffer used to assmble data before writing
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarOutputStream.buffer">
            <summary>
            TarBuffer used to provide correct blocking factor
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarOutputStream.outputStream">
            <summary>
            the destination stream for the archive contents
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            set the position within the current stream
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.SetLength(System.Int64)">
            <summary>
            set the length of the current stream
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.ReadByte">
            <summary>
            Read a byte from the stream and advance the position within the stream 
            by one byte or returns -1 if at the end of the stream.
            </summary>
            <returns>The byte value or -1 if at end of stream</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            read bytes from the current stream and advance the position within the 
            stream by the number of bytes read.
            </summary>
            <returns>The total number of bytes read, or zero if at the end of the stream</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.Flush">
            <summary>
            All buffered data is written to destination
            </summary>        
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.#ctor(System.IO.Stream)">
            <summary>
            Construct TarOutputStream using default block factor
            </summary>
            <param name="outputStream">stream to write to</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Construct TarOutputStream with user specified block factor
            </summary>
            <param name="outputStream">stream to write to</param>
            <param name="blockFactor">blocking factor</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.Finish">
            <summary>
            Ends the TAR archive without closing the underlying OutputStream.
            The result is that the EOF record of nulls is written.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.Close">
            <summary>
            Ends the TAR archive and closes the underlying OutputStream.
            This means that finish() is called followed by calling the
            TarBuffer's close().
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.GetRecordSize">
            <summary>
            Get the record size being used by this stream's TarBuffer.
            </summary>
            <returns>
            The TarBuffer record size.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.PutNextEntry(ICSharpCode.SharpZipLib.Tar.TarEntry)">
            <summary>
            Put an entry on the output stream. This writes the entry's
            header and positions the output stream for writing
            the contents of the entry. Once this method is called, the
            stream is ready for calls to write() to write the entry's
            contents. Once the contents are written, closeEntry()
            <B>MUST</B> be called to ensure that all buffered data
            is completely written to the output stream.
            </summary>
            <param name="entry">
            The TarEntry to be written to the archive.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.CloseEntry">
            <summary>
            Close an entry. This method MUST be called for all file
            entries that contain data. The reason is that we must
            buffer data written to the stream in order to satisfy
            the buffer's block based writes. Thus, there may be
            data fragments still being assembled that must be written
            to the output stream before this entry is closed and the
            next entry written.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current tar archive entry.
            This method simply calls Write(byte[], int, int).
            </summary>
            <param name="b">
            The byte to be written.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes bytes to the current tar archive entry. This method
            is aware of the current entry and will throw an exception if
            you attempt to write bytes past the length specified for the
            current entry. The method is also (painfully) aware of the
            record buffering required by TarBuffer, and manages buffers
            that are not a multiple of recordsize in length, including
            assembling records from small buffers.
            </summary>
            <param name = "wBuf">
            The buffer to write to the archive.
            </param>
            <param name = "wOffset">
            The offset in the buffer from which to get bytes.
            </param>
            <param name = "numToWrite">
            The number of bytes to write.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.WriteEOFRecord">
            <summary>
            Write an EOF (end of archive) record to the tar archive.
            An EOF record consists of a record of all zeros.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarOutputStream.CanRead">
            <summary>
            true if the stream supports reading; otherwise, false.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarOutputStream.CanSeek">
            <summary>
            true if the stream supports seeking; otherwise, false.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarOutputStream.CanWrite">
            <summary>
            true if stream supports writing; otherwise, false.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarOutputStream.Length">
            <summary>
            length of stream in bytes
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarOutputStream.Position">
            <summary>
            gets or sets the position within the current stream.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow">
            <summary>
            Contains the output from the Inflation process.
            We need to have a window so that we can refer backwards into the output stream
            to repeat stuff.<br/>
            Author of the original java version : John Leuner
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.Write(System.Int32)">
            <summary>
            Write a byte to this output window
            </summary>
            <param name="abyte">value to write</param>
            <exception cref="T:System.InvalidOperationException">
            if window is full
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.Repeat(System.Int32,System.Int32)">
            <summary>
            Append a byte pattern already in the window itself
            </summary>
            <param name="len">length of pattern to copy</param>
            <param name="dist">distance from end of window pattern occurs</param>
            <exception cref="T:System.InvalidOperationException">
            If the repeated data overflows the window
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.CopyStored(ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator,System.Int32)">
            <summary>
            Copy from input manipulator to internal window
            </summary>
            <param name="input">source of data</param>
            <param name="len">length of data to copy</param>
            <returns>the number of bytes copied</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.CopyDict(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copy dictionary to window
            </summary>
            <param name="dict">source dictionary</param>
            <param name="offset">offset of start in source dictionary</param>
            <param name="len">length of dictionary</param>
            <exception cref="T:System.InvalidOperationException">
            If window isnt empty
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.GetFreeSpace">
            <summary>
            Get remaining unfilled space in window
            </summary>
            <returns>Number of bytes left in window</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.GetAvailable">
            <summary>
            Get bytes available for output in window
            </summary>
            <returns>Number of bytes filled</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.CopyOutput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copy contents of window to output
            </summary>
            <param name="output">buffer to copy to</param>
            <param name="offset">offset to start at</param>
            <param name="len">number of bytes to count</param>
            <returns>The number of bytes copied</returns>
            <exception cref="T:System.InvalidOperationException">
            If a window underflow occurs
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.Reset">
            <summary>
            Reset by clearing window so <see cref="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.GetAvailable">GetAvailable</see> returns 0
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator">
            <summary>
            This class allows us to retrieve a specified number of bits from
            the input buffer, as well as copy big byte blocks.
            
            It uses an int buffer to store up to 31 bits for direct
            manipulation.  This guarantees that we can get at least 16 bits,
            but we only need at most 15, so this is all safe.
            
            There are some optimizations in this class, for example, you must
            never peek more than 8 bits more than needed, and you must first
            peek bits before you may drop them.  This is not a general purpose
            class but optimized for the behaviour of the Inflater.
            
            authors of the original java version : John Leuner, Jochen Hoenicke
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.PeekBits(System.Int32)">
            <summary>
            Get the next n bits but don't increase input pointer.  n must be
            less or equal 16 and if this call succeeds, you must drop
            at least n - 8 bits in the next call.
            </summary>
            <returns>
            the value of the bits, or -1 if not enough bits available.  */
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.DropBits(System.Int32)">
            <summary>
            Drops the next n bits from the input.  You should have called PeekBits
            with a bigger or equal n before, to make sure that enough bits are in
            the bit buffer.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.GetBits(System.Int32)">
            <summary>
            Gets the next n bits and increases input pointer.  This is equivalent
            to PeekBits followed by dropBits, except for correct error handling.
            </summary>
            <returns>
            the value of the bits, or -1 if not enough bits available.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.SkipToByteBoundary">
            <summary>
            Skips to the next byte boundary.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.CopyBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies length bytes from input buffer to output buffer starting
            at output[offset].  You have to make sure, that the buffer is
            byte aligned.  If not enough bytes are available, copies fewer
            bytes.
            </summary>
            <param name="output">
            The buffer to copy bytes to.
            </param>
            <param name="offset">
            The offset in the buffer at which copying starts
            </param>
            <param name="length">
            The length to copy, 0 is allowed.
            </param>
            <returns>
            The number of bytes copied, 0 if no bytes were available.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Length is less than zero
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Bit buffer isnt byte aligned
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.#ctor">
            <summary>
            Constructs a default StreamManipulator with all buffers empty
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.Reset">
            <summary>
            resets state and empties internal buffers
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add more input for consumption.
            Only call when IsNeedingInput returns true
            </summary>
            <param name="buf">data to be input</param>
            <param name="off">offset of first byte of input</param>
            <param name="len">length of input</param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.AvailableBits">
            <summary>
            Gets the number of bits available in the bit buffer.  This must be
            only called when a previous PeekBits() returned -1.
            </summary>
            <returns>
            the number of bits available.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.AvailableBytes">
            <summary>
            Gets the number of bytes available.
            </summary>
            <returns>
            The number of bytes available.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.IsNeedingInput">
            <summary>
            Returns true when SetInput can be called
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Deflater">
            <summary>
            This is the Deflater class.  The deflater class compresses input
            with the deflate algorithm described in RFC 1951.  It has several
            compression levels and three different strategies described below.
            
            This class is <i>not</i> thread safe.  This is inherent in the API, due
            to the split of deflate and setInput.
            
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.BEST_COMPRESSION">
            <summary>
            The best and slowest compression level.  This tries to find very
            long and distant string repetitions.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.BEST_SPEED">
            <summary>
            The worst but fastest compression level.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.DEFAULT_COMPRESSION">
            <summary>
            The default compression level.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.NO_COMPRESSION">
            <summary>
            This level won't compress at all but output uncompressed blocks.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.DEFLATED">
            <summary>
            The compression method.  This is the only method supported so far.
            There is no need to use this constant at all.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.level">
            <summary>
            Compression level.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.noZlibHeaderOrFooter">
            <summary>
            If true no Zlib/RFC1950 headers or footers are generated
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.state">
            <summary>
            The current state.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.totalOut">
            <summary>
            The total bytes of output written.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.pending">
            <summary>
            The pending output.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.engine">
            <summary>
            The deflater engine.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.#ctor">
            <summary>
            Creates a new deflater with default compression level.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.#ctor(System.Int32)">
            <summary>
            Creates a new deflater with given compression level.
            </summary>
            <param name="lvl">
            the compression level, a value between NO_COMPRESSION
            and BEST_COMPRESSION, or DEFAULT_COMPRESSION.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">if lvl is out of range.</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.#ctor(System.Int32,System.Boolean)">
            <summary>
            Creates a new deflater with given compression level.
            </summary>
            <param name="level">
            the compression level, a value between NO_COMPRESSION
            and BEST_COMPRESSION.
            </param>
            <param name="noZlibHeaderOrFooter">
            true, if we should suppress the Zlib/RFC1950 header at the
            beginning and the adler checksum at the end of the output.  This is
            useful for the GZIP/PKZIP formats.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">if lvl is out of range.</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.Reset">
            <summary>
            Resets the deflater.  The deflater acts afterwards as if it was
            just created with the same compression level and strategy as it
            had before.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.Flush">
            <summary>
            Flushes the current input block.  Further calls to deflate() will
            produce enough output to inflate everything in the current input
            block.  This is not part of Sun's JDK so I have made it package
            private.  It is used by DeflaterOutputStream to implement
            flush().
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.Finish">
            <summary>
            Finishes the deflater with the current input block.  It is an error
            to give more input after this method was called.  This method must
            be called to force all bytes to be flushed.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.SetInput(System.Byte[])">
            <summary>
            Sets the data which should be compressed next.  This should be only
            called when needsInput indicates that more input is needed.
            If you call setInput when needsInput() returns false, the
            previous input that is still pending will be thrown away.
            The given byte array should not be changed, before needsInput() returns
            true again.
            This call is equivalent to <code>setInput(input, 0, input.length)</code>.
            </summary>
            <param name="input">
            the buffer containing the input data.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if the buffer was finished() or ended().
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the data which should be compressed next.  This should be
            only called when needsInput indicates that more input is needed.
            The given byte array should not be changed, before needsInput() returns
            true again.
            </summary>
            <param name="input">
            the buffer containing the input data.
            </param>
            <param name="off">
            the start of the data.
            </param>
            <param name="len">
            the length of the data.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if the buffer was finished() or ended() or if previous input is still pending.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.SetLevel(System.Int32)">
            <summary>
            Sets the compression level.  There is no guarantee of the exact
            position of the change, but if you call this when needsInput is
            true the change of compression level will occur somewhere near
            before the end of the so far given input.
            </summary>
            <param name="lvl">
            the new compression level.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.GetLevel">
            <summary>
            Get current compression level
            </summary>
            <returns>Returns the current compression level</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.SetStrategy(ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy)">
            <summary>
            Sets the compression strategy. Strategy is one of
            DEFAULT_STRATEGY, HUFFMAN_ONLY and FILTERED.  For the exact
            position where the strategy is changed, the same as for
            setLevel() applies.
            </summary>
            <param name="strategy">
            The new compression strategy.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.Deflate(System.Byte[])">
            <summary>
            Deflates the current input block with to the given array.
            </summary>
            <param name="output">
            The buffer where compressed data is stored
            </param>
            <returns>
            The number of compressed bytes added to the output, or 0 if either
            needsInput() or finished() returns true or length is zero.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.Deflate(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Deflates the current input block to the given array.
            </summary>
            <param name="output">
            Buffer to store the compressed data.
            </param>
            <param name="offset">
            Offset into the output array.
            </param>
            <param name="length">
            The maximum number of bytes that may be stored.
            </param>
            <returns>
            The number of compressed bytes added to the output, or 0 if either
            needsInput() or finished() returns true or length is zero.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If end() was previously called.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If offset and/or length don't match the array length.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.SetDictionary(System.Byte[])">
            <summary>
            Sets the dictionary which should be used in the deflate process.
            This call is equivalent to <code>setDictionary(dict, 0, dict.Length)</code>.
            </summary>
            <param name="dict">
            the dictionary.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if setInput () or deflate () were already called or another dictionary was already set.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the dictionary which should be used in the deflate process.
            The dictionary is a byte array containing strings that are
            likely to occur in the data which should be compressed.  The
            dictionary is not stored in the compressed output, only a
            checksum.  To decompress the output you need to supply the same
            dictionary again.
            </summary>
            <param name="dict">
            The dictionary data
            </param>
            <param name="offset">
            An offset into the dictionary.
            </param>
            <param name="length">
            The length of the dictionary data to use
            </param>
            <exception cref="T:System.InvalidOperationException">
            If setInput () or deflate () were already called or another dictionary was already set.
            </exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.Adler">
            <summary>
            Gets the current adler checksum of the data that was processed so far.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.TotalIn">
            <summary>
            Gets the number of input bytes processed so far.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.TotalOut">
            <summary>
            Gets the number of output bytes so far.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.IsFinished">
            <summary>
            Returns true if the stream was finished and no more output bytes
            are available.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.IsNeedingInput">
            <summary>
            Returns true, if the input buffer is empty.
            You should then call setInput(). 
            NOTE: This method can also return true when the stream
            was finished.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants">
            <summary>
            This class contains constants used for deflation.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.DEBUGGING">
            <summary>
            Set to true to enable debugging
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.STORED_BLOCK">
            <summary>
            Written to Zip file to identify a stored block
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.STATIC_TREES">
            <summary>
            Identifies static tree in Zip file
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.DYN_TREES">
            <summary>
            Identifies dynamic tree in Zip file
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.PRESET_DICT">
            <summary>
            Header flag indicating a preset dictionary for deflation
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.DEFAULT_MEM_LEVEL">
            <summary>
            Sets internal buffer sizes for Huffman encoding
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_MATCH">
            <summary>
            Internal compression engine constant
            </summary>        
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MIN_MATCH">
            <summary>
            Internal compression engine constant
            </summary>        
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_WBITS">
            <summary>
            Internal compression engine constant
            </summary>        
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.WSIZE">
            <summary>
            Internal compression engine constant
            </summary>        
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.WMASK">
            <summary>
            Internal compression engine constant
            </summary>        
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.HASH_BITS">
            <summary>
            Internal compression engine constant
            </summary>        
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.HASH_SIZE">
            <summary>
            Internal compression engine constant
            </summary>        
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.HASH_MASK">
            <summary>
            Internal compression engine constant
            </summary>        
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.HASH_SHIFT">
            <summary>
            Internal compression engine constant
            </summary>        
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MIN_LOOKAHEAD">
            <summary>
            Internal compression engine constant
            </summary>        
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_DIST">
            <summary>
            Internal compression engine constant
            </summary>        
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.PENDING_BUF_SIZE">
            <summary>
            Internal compression engine constant
            </summary>        
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.DEFLATE_STORED">
            <summary>
            Internal compression engine constant
            </summary>        
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.DEFLATE_FAST">
            <summary>
            Internal compression engine constant
            </summary>        
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.DEFLATE_SLOW">
            <summary>
            Internal compression engine constant
            </summary>        
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_BLOCK_SIZE">
            <summary>
            Internal compression engine constant
            </summary>        
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.GOOD_LENGTH">
            <summary>
            Internal compression engine constant
            </summary>        
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_LAZY">
            <summary>
            Internal compression engine constant
            </summary>        
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.NICE_LENGTH">
            <summary>
            Internal compression engine constant
            </summary>        
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_CHAIN">
            <summary>
            Internal compression engine constant
            </summary>        
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.COMPR_FUNC">
            <summary>
            Internal compression engine constant
            </summary>        
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy">
            <summary>
            Strategies for deflater
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy.Default">
            <summary>
            The default strategy
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy.Filtered">
            <summary>
            This strategy will only allow longer string repetitions.  It is
            useful for random data with a small character set.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy.HuffmanOnly">
            <summary>
            This strategy will not look for string repetitions at all.  It
            only encodes with Huffman trees (which means, that more common
            characters get a smaller encoding.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine">
            <summary>
            Low level compression engine for deflate algorithm which uses a 32K sliding window
            with secondary compression from Huffman/Shannon-Fano codes.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.comprFunc">
            <summary>
            The current compression function.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.inputBuf">
            <summary>
            The input data for compression.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.totalIn">
            <summary>
            The total bytes of input read.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.inputOff">
            <summary>
            The offset into inputBuf, where input data starts.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.inputEnd">
            <summary>
            The end offset of the input data.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.adler">
            <summary>
            The adler checksum
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.#ctor(ICSharpCode.SharpZipLib.Zip.Compression.DeflaterPending)">
            <summary>
            Construct instance with pending buffer
            </summary>
            <param name="pending">
            Pending buffer to use
            </param>>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.Reset">
            <summary>
            Reset internal state
            </summary>        
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.ResetAdler">
            <summary>
            Reset Adler checksum
            </summary>        
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.SetLevel(System.Int32)">
            <summary>
            Set the deflate level (0-9)
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.FillWindow">
            <summary>
            Fill the window
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Set compression dictionary
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.Deflate(System.Boolean,System.Boolean)">
            <summary>
            Deflate drives actual compression of data
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.SetInput(System.Byte[],System.Int32,System.Int32)">
            Sets input data to be deflated.  Should only be called when <code>NeedsInput()</code>
            returns true
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.NeedsInput">
            <summary>
            Return true if input is needed <see cref="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.SetInput(System.Byte[],System.Int32,System.Int32)"> via SetInput</see>
            </summary>        
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.Adler">
            <summary>
            Get current value of Adler checksum
            </summary>        
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.TotalIn">
            <summary>
            Total data processed
            </summary>        
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.Strategy">
            <summary>
            Get/set the <see cref="T:ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy">deflate strategy</see>
            </summary>        
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman">
            <summary>
            This is the DeflaterHuffman class.
            
            This class is <i>not</i> thread safe.  This is inherent in the API, due
            to the split of deflate and setInput.
            
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.pending">
            <summary>
            Pending buffer to use
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.BitReverse(System.Int32)">
            <summary>
            Reverse the bits of a 16 bit value.
            </summary>
            <param name="toReverse">Value to reverse bits</param>
            <returns>Value with bits reversed</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.#ctor(ICSharpCode.SharpZipLib.Zip.Compression.DeflaterPending)">
            <summary>
            Construct instance with pending buffer
            </summary>
            <param name="pending">Pending buffer to use</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Reset">
            <summary>
            Reset internal state
            </summary>        
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.SendAllTrees(System.Int32)">
            <summary>
            Write all trees to pending buffer
            </summary>        
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.CompressBlock">
            <summary>
            Compress current buffer writing data to pending buffer
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.FlushStoredBlock(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Flush block to output with no compression
            </summary>
            <param name="stored">Data to write</param>
            <param name="storedOffset">Index of first byte to write</param>
            <param name="storedLength">Count of bytes to write</param>
            <param name="lastBlock">True if this is the last block</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.FlushBlock(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Flush block to output with compression
            </summary>        
            <param name="stored">Data to flush</param>
            <param name="storedOffset">Index of first byte to flush</param>
            <param name="storedLength">Count of bytes to flush</param>
            <param name="lastBlock">True if this is the last block</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.IsFull">
            <summary>
            Get value indicating if internal buffer is full
            </summary>
            <returns>true if buffer is full</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.TallyLit(System.Int32)">
            <summary>
            Add literal to buffer
            </summary>
            <param name="lit"></param>
            <returns>Value indicating internal buffer is full</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.TallyDist(System.Int32,System.Int32)">
            <summary>
            Add distance code and length to literal and distance trees
            </summary>
            <param name="dist">Distance code</param>
            <param name="len">Length</param>
            <returns>Value indicating if internal buffer is full</returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.freqs">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.length">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.minNumCodes">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.numCodes">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.#ctor(ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman,System.Int32,System.Int32,System.Int32)">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.Reset">
            <summary>
            Resets the internal state of the tree
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.WriteSymbol(System.Int32)">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.CheckEmpty">
            <summary>
            Check that at least one frequency is non-zero
            </summary>
            <exception cref="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            No frequencies are non-zero
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.SetStaticCodes(System.Int16[],System.Byte[])">
            <summary>
            Set static codes and length
            </summary>
            <param name="stCodes">new codes</param>
            <param name="stLength">length for new codes</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.BuildCodes">
            <summary>
            Build dynamic codes and lengths
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.BuildTree">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.GetEncodedLength">
            <summary>
            Get encoded length
            </summary>
            <returns>Encoded length, the sum of frequencies * lengths</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.CalcBLFreq(ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree)">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.WriteTree(ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree)">
            <summary>
            Write tree values
            </summary>
            <param name="blTree">Tree to write</param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterPending">
            <summary>
            This class stores the pending output of the Deflater.
            
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer">
            <summary>
            This class is general purpose class for writing data to a buffer.
            
            It allows you to write bits as well as bytes
            Based on DeflaterPending.java
            
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.buf">
            <summary>Internal work buffer
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.#ctor">
            <summary>
            construct instance using default buffer size of 4096
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.#ctor(System.Int32)">
            <summary>
            construct instance using specified buffer size
            </summary>
            <param name="bufsize">
            size to use for internal buffer
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.Reset">
            <summary>
            Clear internal state/buffers
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.WriteByte(System.Int32)">
            <summary>
            write a byte to buffer
            </summary>
            <param name="b">
            value to write
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.WriteShort(System.Int32)">
            <summary>
            Write a short value to buffer LSB first
            </summary>
            <param name="s">
            value to write
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.WriteInt(System.Int32)">
            <summary>
            write an integer LSB first
            </summary>
            <param name="s">value to write</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.WriteBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write a block of data to buffer
            </summary>
            <param name="block">data to write</param>
            <param name="offset">offset of first byte to write</param>
            <param name="len">number of bytes to write</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.AlignToByte">
            <summary>
            Align internal buffer on a byte boundary
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.WriteBits(System.Int32,System.Int32)">
            <summary>
            Write bits to internal buffer
            </summary>
            <param name="b">source of bits</param>
            <param name="count">number of bits to write</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.WriteShortMSB(System.Int32)">
            <summary>
            Write a short value to internal buffer most significant byte first
            </summary>
            <param name="s">value to write</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.Flush(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Flushes the pending buffer into the given output array.  If the
            output array is to small, only a partial flush is done.
            </summary>
            <param name="output">
            the output array;
            </param>
            <param name="offset">
            the offset into output array;
            </param>
            <param name="length">        
            length the maximum number of bytes to store;
            </param>
            <exception name="ArgumentOutOfRangeException">
            IndexOutOfBoundsException if offset or length are invalid.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.ToByteArray">
            <summary>
            Convert internal buffer to byte array.
            Buffer is empty on completion
            </summary>
            <returns>
            converted buffer contents contents
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.BitCount">
            <summary>
            The number of bits written to the buffer
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.IsFlushed">
            <summary>
            Indicates if buffer has been flushed
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterPending.#ctor">
            <summary>
            Construct instance with default buffer size
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Inflater">
            <summary>
            Inflater is used to decompress data that has been compressed according
            to the "deflate" standard described in rfc1951.
            
            By default Zlib (rfc1950) headers and footers are expected in the input.
            You can use constructor <code> public Inflater(bool noHeader)</code> passing true
            if there is no Zlib header information
            
            The usage is as following.  First you have to set some input with
            <code>setInput()</code>, then inflate() it.  If inflate doesn't
            inflate any bytes there may be three reasons:
            <ul>
            <li>needsInput() returns true because the input buffer is empty.
            You have to provide more input with <code>setInput()</code>.
            NOTE: needsInput() also returns true when, the stream is finished.
            </li>
            <li>needsDictionary() returns true, you have to provide a preset
               dictionary with <code>setDictionary()</code>.</li>
            <li>finished() returns true, the inflater has finished.</li>
            </ul>
            Once the first output byte is produced, a dictionary will not be
            needed at a later stage.
            
            author of the original java version : John Leuner, Jochen Hoenicke
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.DECODE_HEADER">
            <summary>
            These are the possible states for an inflater
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.CPLENS">
            <summary>
            Copy lengths for literal codes 257..285
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.CPLEXT">
            <summary>
            Extra bits for literal codes 257..285
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.CPDIST">
            <summary>
            Copy offsets for distance codes 0..29
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.CPDEXT">
            <summary>
            Extra bits for distance codes
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.mode">
            <summary>
            This variable contains the current state.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.readAdler">
            <summary>
            The adler checksum of the dictionary or of the decompressed
            stream, as it is written in the header resp. footer of the
            compressed stream. 
            Only valid if mode is DECODE_DICT or DECODE_CHKSUM.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.neededBits">
            <summary>
            The number of bits needed to complete the current state.  This
            is valid, if mode is DECODE_DICT, DECODE_CHKSUM,
            DECODE_HUFFMAN_LENBITS or DECODE_HUFFMAN_DISTBITS.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.isLastBlock">
            <summary>
            True, if the last block flag was set in the last block of the
            inflated stream.  This means that the stream ends after the
            current block.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.totalOut">
            <summary>
            The total number of inflated bytes.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.totalIn">
            <summary>
            The total number of bytes set with setInput().  This is not the
            value returned by the TotalIn property, since this also includes the
            unprocessed input.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.noHeader">
            <summary>
            This variable stores the noHeader flag that was given to the constructor.
            True means, that the inflated stream doesn't contain a Zlib header or 
            footer.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.#ctor">
            <summary>
            Creates a new inflater or RFC1951 decompressor
            RFC1950/Zlib headers and footers will be expected in the input data
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.#ctor(System.Boolean)">
            <summary>
            Creates a new inflater.
            </summary>
            <param name="noHeader">
            True if no RFC1950/Zlib header and footer fields are expected in the input data
            
            This is used for GZIPed/Zipped input.
            
            For compatibility with
            Sun JDK you should provide one byte of input more than needed in
            this case.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.Reset">
            <summary>
            Resets the inflater so that a new stream can be decompressed.  All
            pending input and output will be discarded.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.DecodeHeader">
            <summary>
            Decodes a zlib/RFC1950 header.
            </summary>
            <returns>
            False if more input is needed.
            </returns>
            <exception cref="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            The header is invalid.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.DecodeDict">
            <summary>
            Decodes the dictionary checksum after the deflate header.
            </summary>
            <returns>
            False if more input is needed.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.DecodeHuffman">
            <summary>
            Decodes the huffman encoded symbols in the input stream.
            </summary>
            <returns>
            false if more input is needed, true if output window is
            full or the current block ends.
            </returns>
            <exception cref="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.DecodeChksum">
            <summary>
            Decodes the adler checksum after the deflate stream.
            </summary>
            <returns>
            false if more input is needed.
            </returns>
            <exception cref="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            If checksum doesn't match.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.Decode">
            <summary>
            Decodes the deflated stream.
            </summary>
            <returns>
            false if more input is needed, or if finished.
            </returns>
            <exception cref="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.SetDictionary(System.Byte[])">
            <summary>
            Sets the preset dictionary.  This should only be called, if
            needsDictionary() returns true and it should set the same
            dictionary, that was used for deflating.  The getAdler()
            function returns the checksum of the dictionary needed.
            </summary>
            <param name="buffer">
            The dictionary.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the preset dictionary.  This should only be called, if
            needsDictionary() returns true and it should set the same
            dictionary, that was used for deflating.  The getAdler()
            function returns the checksum of the dictionary needed.
            </summary>
            <param name="buffer">
            The dictionary.
            </param>
            <param name="offset">
            The offset into buffer where the dictionary starts.
            </param>
            <param name="len">
            The length of the dictionary.
            </param>
            <exception cref="T:System.InvalidOperationException">
            No dictionary is needed.
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            The adler checksum for the buffer is invalid
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.SetInput(System.Byte[])">
            <summary>
            Sets the input.  This should only be called, if needsInput()
            returns true.
            </summary>
            <param name="buf">
            the input.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the input.  This should only be called, if needsInput()
            returns true.
            </summary>
            <param name="buffer">
            The source of input data
            </param>
            <param name="offset">
            The offset into buffer where the input starts.
            </param>
            <param name="length">
            The number of bytes of input to use.
            </param>
            <exception cref="T:System.InvalidOperationException">
            No input is needed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The off and/or len are wrong.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.Inflate(System.Byte[])">
            <summary>
            Inflates the compressed stream to the output buffer.  If this
            returns 0, you should check, whether needsDictionary(),
            needsInput() or finished() returns true, to determine why no
            further output is produced.
            </summary>
            <param name="buf">
            the output buffer.
            </param>
            <returns>
            the number of bytes written to the buffer, 0 if no further
            output can be produced.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if buf has length 0.
            </exception>
            <exception cref="T:System.FormatException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.Inflate(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Inflates the compressed stream to the output buffer.  If this
            returns 0, you should check, whether needsDictionary(),
            needsInput() or finished() returns true, to determine why no
            further output is produced.
            </summary>
            <param name="buf">
            the output buffer.
            </param>
            <param name="offset">
            the offset into buffer where the output should start.
            </param>
            <param name="len">
            the maximum length of the output.
            </param>
            <returns>
            the number of bytes written to the buffer, 0 if no further output can be produced.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if len is &lt;= 0.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if the offset and/or len are wrong.
            </exception>
            <exception cref="T:System.FormatException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.IsNeedingInput">
            <summary>
            Returns true, if the input buffer is empty.
            You should then call setInput(). 
            NOTE: This method also returns true when the stream is finished.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.IsNeedingDictionary">
            <summary>
            Returns true, if a preset dictionary is needed to inflate the input.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.IsFinished">
            <summary>
            Returns true, if the inflater has finished.  This means, that no
            input is needed and no output can be produced.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.Adler">
            <summary>
            Gets the adler checksum.  This is either the checksum of all
            uncompressed bytes returned by inflate(), or if needsDictionary()
            returns true (and thus no output was yet produced) this is the
            adler checksum of the expected dictionary.
            </summary>
            <returns>
            the adler checksum.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.TotalOut">
            <summary>
            Gets the total number of output bytes returned by inflate().
            </summary>
            <returns>
            the total number of output bytes.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.TotalIn">
            <summary>
            Gets the total number of processed compressed input bytes.
            </summary>
            <returns>
            The total number of bytes of processed input bytes.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.RemainingInput">
            <summary>
            Gets the number of unprocessed input bytes.  Useful, if the end of the
            stream is reached and you want to further process the bytes after
            the deflate stream.
            </summary>
            <returns>
            The number of bytes of the input which have not been processed.
            </returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree">
            <summary>
            Huffman tree used for inflation
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree.defLitLenTree">
            <summary>
            Literal length tree
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree.defDistTree">
            <summary>
            Distance tree
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree.#ctor(System.Byte[])">
            <summary>
            Constructs a Huffman tree from the array of code lengths.
            </summary>
            <param name = "codeLengths">
            the array of code lengths
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree.GetSymbol(ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator)">
            <summary>
            Reads the next symbol from input.  The symbol is encoded using the
            huffman tree.
            </summary>
            <param name="input">
            input the input source.
            </param>
            <returns>
            the next symbol, or -1 if not enough input is available.
            </returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.CompressionMethod">
            <summary>
            The kind of compression used for an entry in an archive
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.CompressionMethod.Stored">
            <summary>
            A direct copy of the file contents is held in the archive
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.CompressionMethod.Deflated">
            <summary>
            Common Zip compression method using a sliding dictionary 
            of up to 32KB and secondary compression from Huffman/Shannon-Fano trees
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.CompressionMethod.Deflate64">
            <summary>
            An extension to deflate with a 64KB window. Not supported
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.CompressionMethod.BZip2">
            <summary>
            Not supported
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.CompressionMethod.WinZipAES">
            <summary>
            WinZip special for AES encryption, Not supported
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipConstants">
            <summary>
            This class contains constants used for Zip format files
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.VERSION_MADE_BY">
            <summary>
            The version made by field for entries in the central header when created by this library
            </summary>
            <remarks>
            This is also the Zip version for the library when comparing against the version required to extract
            for an entry.  See <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipInputStream.CanDecompressEntry">ZipInputStream.CanDecompressEntry</see>.
            </remarks>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.LOCHDR">
            <summary>
            Size of local entry header (excluding variable length fields at end)
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.LOCSIG">
            <summary>
            Signature for local entry header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.LOCVER">
            <summary>
            Offset of version to extract in local entry header
            </summary>        
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.LOCFLG">
            <summary>
            Offset of general purpose flags in local entry header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.LOCHOW">
            <summary>
            Offset of compression method in local entry header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.LOCTIM">
            <summary>
            Offset of last mod file time + date in local entry header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.LOCCRC">
            <summary>
            Offset of crc-32 in local entry header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.LOCSIZ">
            <summary>
            Offset of compressed size in local entry header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.LOCLEN">
            <summary>
            Offset of uncompressed size in local entry header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.LOCNAM">
            <summary>
            Offset of file name length in local entry header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.LOCEXT">
            <summary>
            Offset of extra field length in local entry header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.SPANNINGSIG">
            <summary>
            Signature for spanning entry
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.SPANTEMPSIG">
            <summary>
            Signature for temporary spanning entry
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.EXTSIG">
            <summary>
            Signature for data descriptor
            </summary>
            <remarks>
            This is only used where the length, Crc, or compressed size isnt known when the
            entry is created and the output stream doesnt support seeking.
            The local entry cannot be 'patched' with the correct values in this case
            so the values are recorded after the data prefixed by this header, as well as in the central directory.<br/>
            </remarks>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.EXTHDR">
            <summary>
            Size of data descriptor
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.EXTCRC">
            <summary>
            Offset of crc-32 in data descriptor
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.EXTSIZ">
            <summary>
            Offset of compressed size in data descriptor
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.EXTLEN">
            <summary>
            Offset of uncompressed length in data descriptor
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENSIG">
            <summary>
            Signature for central header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENHDR">
            <summary>
            Size of central header entry
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENVEM">
            <summary>
            Offset of version made by in central file header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENVER">
            <summary>
            Offset of version needed to extract in central file header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENFLG">
            <summary>
            Offset of general purpose bit flag in central file header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENHOW">
            <summary>
            Offset of compression method in central file header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENTIM">
            <summary>
            Offset of time/date in central file header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENCRC">
            <summary>
            Offset of crc-32 in central file header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENSIZ">
            <summary>
            Offset of compressed size in central file header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENLEN">
            <summary>
            Offset of uncompressed size in central file header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENNAM">
            <summary>
            Offset of file name length in central file header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENEXT">
            <summary>
            Offset of extra field length in central file header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENCOM">
            <summary>
            Offset of file comment length in central file header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENDSK">
            <summary>
            Offset of disk start number in central file header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENATT">
            <summary>
            Offset of internal file attributes in central file header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENATX">
            <summary>
            Offset of external file attributes in central file header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENOFF">
            <summary>
            Offset of relative offset of local header in central file header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENSIG64">
            <summary>
            Signature for Zip64 central file header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENDIGITALSIG">
            <summary>
            Central header digitial signature
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.ENDSIG">
            <summary>
            End of central directory record signature
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.ENDHDR">
            <summary>
            Size of end of central record (excluding variable fields)
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.ENDNRD">
            <summary>
            Offset of number of this disk
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.ENDDCD">
            <summary>
            Offset of number of disk with start of central directory
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.ENDSUB">
            <summary>
            Offset of number of entries in the central directory of this disk
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.ENDTOT">
            <summary>
            Offset of total number of entries in the central directory
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.ENDSIZ">
            <summary>
            Offset of size of central directory
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.ENDOFF">
            <summary>
            Offset of offset of start of central directory with respect to starting disk number
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.ENDCOM">
            <summary>
            Offset of ZIP file comment length
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CRYPTO_HEADER_SIZE">
            <summary>
            Size of cryptographic header stored before entry data
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipConstants.ConvertToString(System.Byte[],System.Int32)">
            <summary>
            Convert a portion of a byte array to a string.
            </summary>        
            <param name="data">
            Data to convert to string
            </param>
            <param name="length">
            Number of bytes to convert starting from index 0
            </param>
            <returns>
            data[0]..data[length - 1] converted to a string
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipConstants.ConvertToString(System.Byte[])">
            <summary>
            Convert byte array to string
            </summary>
            <param name="data">
            Byte array to convert
            </param>
            <returns>
            <paramref name="data">data</paramref>converted to a string
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipConstants.ConvertToArray(System.String)">
            <summary>
            Convert a string to a byte array
            </summary>
            <param name="str">
            String to convert to an array
            </param>
            <returns>Converted array</returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipConstants.DefaultCodePage">
            <summary>
            Default encoding used for string conversion.  0 gives default system ansi code page.
            Dont use unicode encodings if you want to be Zip compatible!
            Using the default code page isnt the full solution neccessarily
            there are many variable factors, codepage 850 is often a good choice for
            European users, however be careful about compatability.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipEntry">
            <summary>
            This class represents an entry in a zip archive.  This can be a file
            or a directory
            ZipFile and ZipInputStream will give you instances of this class as 
            information about the members in an archive.  ZipOutputStream
            uses an instance of this class when creating an entry in a Zip file.
            <br/>
            <br/>Author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.#ctor(System.String)">
            <summary>
            Creates a zip entry with the given name.
            </summary>
            <param name="name">
            The name for this entry. Can include directory components.
            The convention for names is 'unix'  style paths with no device names and 
            path elements separated by '/' characters.  This is not enforced see <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.CleanName(System.String,System.Boolean)">CleanName</see>
            on how to ensure names are valid if this is desired.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The name passed is null
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.#ctor(System.String,System.Int32)">
            <summary>
            Creates a zip entry with the given name and version required to extract
            </summary>
            <param name="name">
            The name for this entry. Can include directory components.
            The convention for names is 'unix'  style paths with no device names and 
            path elements separated by '/' characters.  This is not enforced see <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.CleanName(System.String,System.Boolean)">CleanName</see>
            on how to ensure names are valid if this is desired.
            </param>
            <param name="versionRequiredToExtract">
            The minimum 'feature version' required this entry
            </param>
            <exception cref="T:System.ArgumentNullException">
            The name passed is null
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes an entry with the given name and made by information
            </summary>
            <param name="name">Name for this entry</param>
            <param name="madeByInfo">Version and HostSystem Information</param>
            <param name="versionRequiredToExtract">Minimum required zip feature version required to extract this entry</param>
            <exception cref="T:System.ArgumentNullException">
            The name passed is null
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            versionRequiredToExtract should be 0 (auto-calculate) or &gt; 10
            </exception>
            <remarks>
            This constructor is used by the ZipFile class when reading from the central header
            It is not generally useful, use the constructor specifying the name only.
            </remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.#ctor(ICSharpCode.SharpZipLib.Zip.ZipEntry)">
            <summary>
            Creates a copy of the given zip entry.
            </summary>
            <param name="e">
            The entry to copy.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.CleanName(System.String,System.Boolean)">
            <summary>
            Cleans a name making it conform to Zip file conventions.
            Devices names ('c:\') and UNC share names ('\\server\share') are removed
            and forward slashes ('\') are converted to back slashes ('/').
            </summary>
            <param name="name">Name to clean</param>
            <param name="relativePath">Make names relative if true or absolute if false</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.CleanName(System.String)">
            <summary>
            Cleans a name making it conform to Zip file conventions.
            Devices names ('c:\') and UNC share names ('\\server\share') are removed
            and forward slashes ('\') are converted to back slashes ('/').
            Names are made relative by trimming leading slashes which is compatible
            with Windows-XPs built in Zip file handling.
            </summary>
            <param name="name">Name to clean</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.Clone">
            <summary>
            Creates a copy of this zip entry.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.ToString">
            <summary>
            Gets the string representation of this ZipEntry.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.IsCrypted">
            <summary>
            Get/Set flag indicating if entry is encrypted.
            A simple helper routine to aid interpretation of <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Flags">flags</see>
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Flags">
            <summary>
            Get/Set general purpose bit flag for entry
            </summary>
            <remarks>
            General purpose bit flag<br/>
            Bit 0: If set, indicates the file is encrypted<br/>
            Bit 1-2 Only used for compression type 6 Imploding, and 8, 9 deflating<br/>
            Imploding:<br/>
            Bit 1 if set indicates an 8K sliding dictionary was used.  If clear a 4k dictionary was used<br/>
            Bit 2 if set indicates 3 Shannon-Fanno trees were used to encode the sliding dictionary, 2 otherwise<br/>
            <br/>
            Deflating:<br/>
              Bit 2    Bit 1<br/>
                0        0       Normal compression was used<br/>
                0        1       Maximum compression was used<br/>
                1        0       Fast compression was used<br/>
                1        1       Super fast compression was used<br/>
            <br/>
            Bit 3: If set, the fields crc-32, compressed size
            and uncompressed size are were not able to be written during zip file creation
            The correct values are held in a data descriptor immediately following the compressed data. <br/>
            Bit 4: Reserved for use by PKZIP for enhanced deflating<br/>
            Bit 5: If set indicates the file contains compressed patch data<br/>
            Bit 6: If set indicates strong encryption was used.<br/>
            Bit 7-15: Unused or reserved<br/>
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.ZipFileIndex">
            <summary>
            Get/Set index of this entry in Zip file
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Offset">
            <summary>
            Get/set offset for use in central header
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.ExternalFileAttributes">
            <summary>
            Get/Set external file attributes as an integer.
            The values of this are operating system dependant see
            <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.HostSystem">HostSystem</see> for details
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.VersionMadeBy">
            <summary>
            Get the version made by for this entry or zero if unknown.
            The value / 10 indicates the major version number, and 
            the value mod 10 is the minor version number
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.HostSystem">
            <summary>
            Gets the compatability information for the <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.ExternalFileAttributes">external file attribute</see>
            If the external file attributes are compatible with MS-DOS and can be read
            by PKZIP for DOS version 2.04g then this value will be zero.  Otherwise the value
            will be non-zero and identify the host system on which the attributes are compatible.
            </summary>
                    
            <remarks>
            The values for this as defined in the Zip File format and by others are shown below.  The values are somewhat
            misleading in some cases as they are not all used as shown.  You should consult the relevant documentation
            to obtain up to date and correct information.  The modified appnote by the infozip group is
            particularly helpful as it documents a lot of peculiarities.  The document is however a little dated.
            <list type="table">
            <item>0 - MS-DOS and OS/2 (FAT / VFAT / FAT32 file systems)</item>
            <item>1 - Amiga</item>
            <item>2 - OpenVMS</item>
            <item>3 - Unix</item>
            <item>4 - VM/CMS</item>
            <item>5 - Atari ST</item>
            <item>6 - OS/2 HPFS</item>
            <item>7 - Macintosh</item>
            <item>8 - Z-System</item>
            <item>9 - CP/M</item>
            <item>10 - Windows NTFS</item>
            <item>11 - MVS (OS/390 - Z/OS)</item>
            <item>12 - VSE</item>
            <item>13 - Acorn Risc</item>
            <item>14 - VFAT</item>
            <item>15 - Alternate MVS</item>
            <item>16 - BeOS</item>
            <item>17 - Tandem</item>
            <item>18 - OS/400</item>
            <item>19 - OS/X (Darwin)</item>
            <item>99 - WinZip AES</item>
            <item>remainder - unused</item>
            </list>
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Version">
            <summary>
            Get minimum Zip feature version required to extract this entry
            </summary>        
            <remarks>
            Minimum features are defined as:<br/>
            1.0 - Default value<br/>
            1.1 - File is a volume label<br/>
            2.0 - File is a folder/directory<br/>
            2.0 - File is compressed using Deflate compression<br/>
            2.0 - File is encrypted using traditional encryption<br/>
            2.1 - File is compressed using Deflate64<br/>
            2.5 - File is compressed using PKWARE DCL Implode<br/>
            2.7 - File is a patch data set<br/>
            4.5 - File uses Zip64 format extensions<br/>
            4.6 - File is compressed using BZIP2 compression<br/>
            5.0 - File is encrypted using DES<br/>
            5.0 - File is encrypted using 3DES<br/>
            5.0 - File is encrypted using original RC2 encryption<br/>
            5.0 - File is encrypted using RC4 encryption<br/>
            5.1 - File is encrypted using AES encryption<br/>
            5.1 - File is encrypted using corrected RC2 encryption<br/>
            5.1 - File is encrypted using corrected RC2-64 encryption<br/>
            6.1 - File is encrypted using non-OAEP key wrapping<br/>
            6.2 - Central directory encryption (not confirmed yet)<br/>
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.DosTime">
            <summary>
            Get/Set DosTime
            </summary>        
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.DateTime">
            <summary>
            Gets/Sets the time of last modification of the entry.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Name">
            <summary>
            Returns the entry name.  The path components in the entry should
            always separated by slashes ('/').  Dos device names like C: should also
            be removed.  See <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.CleanName(System.String,System.Boolean)">CleanName</see>.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Size">
            <summary>
            Gets/Sets the size of the uncompressed data.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If the size is not in the range 0..0xffffffffL
            </exception>
            <returns>
            The size or -1 if unknown.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.CompressedSize">
            <summary>
            Gets/Sets the size of the compressed data.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Size is not in the range 0..0xffffffff
            </exception>
            <returns>
            The size or -1 if unknown.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Crc">
            <summary>
            Gets/Sets the crc of the uncompressed data.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Crc is not in the range 0..0xffffffffL
            </exception>
            <returns>
            The crc value or -1 if unknown.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.CompressionMethod">
            <summary>
            Gets/Sets the compression method. Only Deflated and Stored are supported.
            </summary>
            <returns>
            The compression method for this entry
            </returns>
            <see cref="F:ICSharpCode.SharpZipLib.Zip.CompressionMethod.Deflated"/>
            <see cref="F:ICSharpCode.SharpZipLib.Zip.CompressionMethod.Stored"/>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.ExtraData">
            <summary>
            Gets/Sets the extra data.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Extra data is longer than 0xffff bytes.
            </exception>
            <returns>
            Extra data or null if not set.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Comment">
            <summary>
            Gets/Sets the entry comment.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If comment is longer than 0xffff.
            </exception>
            <returns>
            The comment or null if not set.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.IsDirectory">
            <summary>
            Gets a value indicating of the if the entry is a directory.  A directory is determined by
            an entry name with a trailing slash '/'.  The external file attributes
            can also mark a file as a directory.  The trailing slash convention should always be followed
            however.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            <summary>
            Represents errors specific to Zip file handling
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipException.#ctor">
            <summary>
            Initializes a new instance of the ZipException class.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ZipException class with a specified error message.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipFile">
            <summary>
            This class represents a Zip archive.  You can ask for the contained
            entries, or get an input stream for a file entry.  The entry is
            automatically decompressed.
            
            This class is thread safe:  You can open input streams for arbitrary
            entries in different threads.
            <br/>
            <br/>Author of the original java version : Jochen Hoenicke
            </summary>
            <example>
            <code>
            using System;
            using System.Text;
            using System.Collections;
            using System.IO;
            
            using ICSharpCode.SharpZipLib.Zip;
            
            class MainClass
            {
                static public void Main(string[] args)
                {
                    ZipFile zFile = new ZipFile(args[0]);
                    Console.WriteLine("Listing of : " + zFile.Name);
                    Console.WriteLine("");
                    Console.WriteLine("Raw Size    Size      Date     Time     Name");
                    Console.WriteLine("--------  --------  --------  ------  ---------");
                    foreach (ZipEntry e in zFile) {
                        DateTime d = e.DateTime;
                        Console.WriteLine("{0, -10}{1, -10}{2}  {3}   {4}", e.Size, e.CompressedSize,
                                                                            d.ToString("dd-MM-yy"), d.ToString("t"),
                                                                            e.Name);
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.#ctor(System.String)">
            <summary>
            Opens a Zip file with the given name for reading.
            </summary>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            The file doesn't contain a valid zip archive.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.#ctor(System.IO.FileStream)">
            <summary>
            Opens a Zip file reading the given FileStream
            </summary>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            The file doesn't contain a valid zip archive.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.#ctor(System.IO.Stream)">
            <summary>
            Opens a Zip file reading the given Stream
            </summary>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            The file doesn't contain a valid zip archive.<br/>
            The stream provided cannot seek
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.ReadLeShort">
            <summary>
            Read an unsigned short in little endian byte order.
            </summary>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
            <exception cref="T:System.IO.EndOfStreamException">
            The file ends prematurely
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.ReadLeInt">
            <summary>
            Read an int in little endian byte order.
            </summary>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
            <exception cref="T:System.IO.EndOfStreamException">
            The file ends prematurely
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.ReadEntries">
            <summary>
            Search for and read the central directory of a zip file filling the entries
            array.  This is called exactly once by the constructors.
            </summary>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            The central directory is malformed or cannot be found
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.Close">
            <summary>
            Closes the ZipFile.  If the stream is <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipFile.IsStreamOwner">owned</see> then this also closes the underlying input stream.
            Once closed, no further instance methods should be called.
            </summary>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.GetEnumerator">
            <summary>
            Returns an enumerator for the Zip entries in this Zip file.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The Zip file has been closed.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.FindEntry(System.String,System.Boolean)">
            <summary>
            Return the index of the entry with a matching name
            </summary>
            <param name="name">Entry name to find</param>
            <param name="ignoreCase">If true the comparison is case insensitive</param>
            <returns>The index position of the matching entry or -1 if not found</returns>
            <exception cref="T:System.InvalidOperationException">
            The Zip file has been closed.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.GetEntry(System.String)">
            <summary>
            Searches for a zip entry in this archive with the given name.
            String comparisons are case insensitive
            </summary>
            <param name="name">
            The name to find. May contain directory components separated by slashes ('/').
            </param>
            <returns>
            The zip entry, or null if no entry with that name exists.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The Zip file has been closed.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.CheckLocalHeader(ICSharpCode.SharpZipLib.Zip.ZipEntry)">
            <summary>
            Checks, if the local header of the entry at index i matches the
            central directory, and returns the offset to the data.
            </summary>
            <returns>
            The start offset of the (compressed) data.
            </returns>
            <exception cref="T:System.IO.EndOfStreamException">
            The stream ends prematurely
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            The local header signature is invalid, the entry and central header file name lengths are different
            or the local and entry compression methods dont match
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.GetInputStream(ICSharpCode.SharpZipLib.Zip.ZipEntry)">
            <summary>
            Creates an input stream reading the given zip entry as
            uncompressed data.  Normally zip entry should be an entry
            returned by GetEntry().
            </summary>
            <returns>
            the input stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The ZipFile has already been closed
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            The compression method for the entry is unknown
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            The entry is not found in the ZipFile
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.GetInputStream(System.Int32)">
            <summary>
            Creates an input stream reading the zip entry based on the index passed
            </summary>
            <returns>
            An input stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The ZipFile has already been closed
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            The compression method for the entry is unknown
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            The entry is not found in the ZipFile
            </exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.IsStreamOwner">
            <summary>
            Get/set a flag indicating if the underlying stream is owned by the ZipFile instance.
            If the flag is true then the stream will be closed when <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipFile.Close">Close</see> is called.
            </summary>
            <remarks>
            The default value is true in all cases.
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.EntryByIndex(System.Int32)">
            <summary>
            Indexer property for ZipEntries
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipFileComment">
            <summary>
            Gets the comment for the zip file.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.Name">
            <summary>
            Gets the name of this zip file.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.Size">
            <summary>
            Gets the number of entries in this zip file.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The Zip file has been closed.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.PartialInputStream.Close">
            <summary>
            Close this partial input stream.
            </summary>
            <remarks>
            The underlying stream is not closed.  Close the parent ZipFile class to do that.
            </remarks>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipInputStream">
            <summary>
            This is an InflaterInputStream that reads the files baseInputStream an zip archive
            one after another.  It has a special method to get the zip entry of
            the next file.  The zip entry contains information about the file name
            size, compressed size, Crc, etc.
            It includes support for Stored and Deflated entries.
            <br/>
            <br/>Author of the original java version : Jochen Hoenicke
            </summary>
            
            <example> This sample shows how to read a zip file
            <code lang="C#">
            using System;
            using System.Text;
            using System.IO;
            
            using ICSharpCode.SharpZipLib.Zip;
            
            class MainClass
            {
                public static void Main(string[] args)
                {
                    ZipInputStream s = new ZipInputStream(File.OpenRead(args[0]));
                    
                    ZipEntry theEntry;
                    while ((theEntry = s.GetNextEntry()) != null) {
                        int size = 2048;
                        byte[] data = new byte[2048];
                        
                        Console.Write("Show contents (y/n) ?");
                        if (Console.ReadLine() == "y") {
                            while (true) {
                                size = s.Read(data, 0, data.Length);
                                if (size > 0) {
                                    Console.Write(new ASCIIEncoding().GetString(data, 0, size));
                                } else {
                                    break;
                                }
                            }
                        }
                    }
                    s.Close();
                }
            }    
            </code>
            </example>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a new Zip input stream, for reading a zip archive.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.ReadLeShort">
            <summary>
            Read an unsigned short baseInputStream little endian byte order.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.ReadLeInt">
            <summary>
            Read an int baseInputStream little endian byte order.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.ReadLeLong">
            <summary>
            Read an int baseInputStream little endian byte order.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.GetNextEntry">
            <summary>
            Advances to the next entry in the archive
            </summary>
            <returns>
            The next <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry">entry</see> in the archive or null if there are no more entries.
            </returns>
            <remarks>
            If the previous entry is still open <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.CloseEntry">CloseEntry</see> is called.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Input stream is closed
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            Password is not set, password is invalid, compression method is invalid, 
            version required to extract is not supported
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.CloseEntry">
            <summary>
            Closes the current zip entry and moves to the next one.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The stream is closed
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            The Zip stream ends early
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.ReadByte">
            <summary>
            Reads a byte from the current zip entry.
            </summary>
            <returns>
            The byte or -1 if end of stream is reached.
            </returns>
            <exception name="System.IO.IOException">
            An i/o error occured.
            </exception>
            <exception name="ICSharpCode.SharpZipLib.ZipException">
            The deflated stream is corrupted.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a block of bytes from the current zip entry.
            </summary>
            <returns>
            The number of bytes read (this may be less than the length requested, even before the end of stream), or 0 on end of stream.
            </returns>
            <exception name="IOException">
            An i/o error occured.
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            The deflated stream is corrupted.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The stream is not open.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.Close">
            <summary>
            Closes the zip input stream
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipInputStream.Password">
            <summary>
            Optional password used for encryption when non-null
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipInputStream.CanDecompressEntry">
            <summary>
            Gets a value indicating if the entry can be decompressed
            </summary>
            <remarks>
            The entry can only be decompressed if the library supports the zip features required to extract it.
            See the <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Version">ZipEntry Version</see> property for more details.
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipInputStream.Available">
            <summary>
            Returns 1 if there is an entry available
            Otherwise returns 0.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipOutputStream">
            <summary>
            This is a DeflaterOutputStream that writes the files into a zip
            archive one after another.  It has a special method to start a new
            zip entry.  The zip entries contains information about the file name
            size, compressed size, CRC, etc.
            
            It includes support for Stored and Deflated entries.
            This class is not thread safe.
            <br/>
            <br/>Author of the original java version : Jochen Hoenicke
            </summary>
            <example> This sample shows how to create a zip file
            <code>
            using System;
            using System.IO;
            
            using ICSharpCode.SharpZipLib.Zip;
            
            class MainClass
            {
                public static void Main(string[] args)
                {
                    string[] filenames = Directory.GetFiles(args[0]);
                    
                    ZipOutputStream s = new ZipOutputStream(File.Create(args[1]));
                    
                    s.SetLevel(5); // 0 - store only to 9 - means best compression
                    
                    foreach (string file in filenames) {
                        FileStream fs = File.OpenRead(file);
                        
                        byte[] buffer = new byte[fs.Length];
                        fs.Read(buffer, 0, buffer.Length);
                        
                        ZipEntry entry = new ZipEntry(file);
                        
                        s.PutNextEntry(entry);
                        
                        s.Write(buffer, 0, buffer.Length);
                        
                    }
                    
                    s.Finish();
                    s.Close();
                }
            }    
            </code>
            </example>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a new Zip output stream, writing a zip archive.
            </summary>
            <param name="baseOutputStream">
            The output stream to which the archive contents are written.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.SetComment(System.String)">
            <summary>
            Set the zip file comment.
            </summary>
            <param name="comment">
            The comment string
            </param>
            <exception name ="ArgumentOutOfRangeException">
            Encoding of comment is longer than 0xffff bytes.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.SetLevel(System.Int32)">
            <summary>
            Sets default compression level.  The new level will be activated
            immediately.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Level specified is not supported.
            </exception>
            <see cref="T:ICSharpCode.SharpZipLib.Zip.Compression.Deflater"/>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.GetLevel">
            <summary>
            Get the current deflate compression level
            </summary>
            <returns>The current compression level</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.WriteLeShort(System.Int32)">
            <summary>
            Write an unsigned short in little endian byte order.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.WriteLeInt(System.Int32)">
            <summary>
            Write an int in little endian byte order.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.WriteLeLong(System.Int64)">
            <summary>
            Write an int in little endian byte order.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.PutNextEntry(ICSharpCode.SharpZipLib.Zip.ZipEntry)">
            <summary>
            Starts a new Zip entry. It automatically closes the previous
            entry if present.
            All entry elements bar name are optional, but must be correct if present.
            If the compression method is stored and the output is not patchable
            the compression for that entry is automatically changed to deflate level 0
            </summary>
            <param name="entry">
            the entry.
            </param>
            <exception cref="T:System.IO.IOException">
            if an I/O error occured.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            if stream was finished
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            Too many entries in the Zip file<br/>
            Entry name is too long<br/>
            Finish has already been called<br/>
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.CloseEntry">
            <summary>
            Closes the current entry, updating header and footer information as required
            </summary>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            No entry is active.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the given buffer to the current entry.
            </summary>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            Archive size is invalid
            </exception>
            <exception cref="T:System.InvalidOperationException">
            No entry is active.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.Finish">
            <summary>
            Finishes the stream.  This will write the central directory at the
            end of the zip file and flush the stream.
            </summary>
            <remarks>
            This is automatically called when the stream is closed.
            </remarks>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            Comment exceeds the maximum length<br/>
            Entry name exceeds the maximum length
            </exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.IsFinished">
            <summary>
            Gets boolean indicating central header has been added for this archive...
            No further entries can be added once this has been done.
            </summary>
        </member>
        <member name="T:org.bouncycastle.asn1.cms.CompressedData">
            RFC 3274 - CMS Compressed Data.
            <pre>
            CompressedData ::= SEQUENCE {
             version CMSVersion,
             compressionAlgorithm CompressionAlgorithmIdentifier,
             encapContentInfo EncapsulatedContentInfo
            }
            </pre>
        </member>
        <member name="M:org.bouncycastle.asn1.cms.CompressedData.getInstance(org.bouncycastle.asn1.ASN1TaggedObject,System.Boolean)">
             return a CompressedData object from a tagged object.
            
             @param _ato the tagged object holding the object we want.
             @param _explicit true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception IllegalArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.cms.CompressedData.getInstance(System.Object)">
             return a CompressedData object from the given object.
            
             @param _obj the object we want converted.
             @exception IllegalArgumentException if the object cannot be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.cms.ContentInfo.toASN1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
            ContentInfo ::= SEQUENCE {
                     contentType ContentType,
                     content
                     [0] EXPLICIT ANY DEFINED BY contentType OPTIONAL }
            </pre>
        </member>
        <member name="M:org.bouncycastle.asn1.cms.EncryptedContentInfo.getInstance(System.Object)">
             return an EncryptedContentInfo object from the given object.
            
             @param obj the object we want converted.
             @exception IllegalArgumentException if the object cannot be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.cms.EncryptedContentInfo.toASN1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
            EncryptedContentInfo ::= SEQUENCE {
                contentType ContentType,
                contentEncryptionAlgorithm ContentEncryptionAlgorithmIdentifier,
                encryptedContent [0] IMPLICIT EncryptedContent OPTIONAL 
            }
            </pre>
        </member>
        <member name="M:org.bouncycastle.asn1.cms.EnvelopedData.getInstance(org.bouncycastle.asn1.ASN1TaggedObject,System.Boolean)">
             return an EnvelopedData object from a tagged object.
            
             @param obj the tagged object holding the object we want.
             @param explicit true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception IllegalArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.cms.EnvelopedData.getInstance(System.Object)">
             return an EnvelopedData object from the given object.
            
             @param obj the object we want converted.
             @exception IllegalArgumentException if the object cannot be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.cms.EnvelopedData.toASN1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
            EnvelopedData ::= SEQUENCE {
                version CMSVersion,
                originatorInfo [0] IMPLICIT OriginatorInfo OPTIONAL,
                recipientInfos RecipientInfos,
                encryptedContentInfo EncryptedContentInfo,
                unprotectedAttrs [1] IMPLICIT UnprotectedAttributes OPTIONAL 
            }
            </pre>
        </member>
        <member name="M:org.bouncycastle.asn1.cms.KEKIdentifier.getInstance(org.bouncycastle.asn1.ASN1TaggedObject,System.Boolean)">
             return a KEKIdentifier object from a tagged object.
            
             @param obj the tagged object holding the object we want.
             @param explicit true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception IllegalArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.cms.KEKIdentifier.getInstance(System.Object)">
             return a KEKIdentifier object from the given object.
            
             @param obj the object we want converted.
             @exception IllegalArgumentException if the object cannot be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.cms.KEKIdentifier.toASN1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
            KEKIdentifier ::= SEQUENCE {
                keyIdentifier OCTET STRING,
                date GeneralizedTime OPTIONAL,
                other OtherKeyAttribute OPTIONAL 
            }
            </pre>
        </member>
        <member name="M:org.bouncycastle.asn1.cms.KEKRecipientInfo.getInstance(org.bouncycastle.asn1.ASN1TaggedObject,System.Boolean)">
             return a KEKRecipientInfo object from a tagged object.
            
             @param obj the tagged object holding the object we want.
             @param explicit true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception IllegalArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.cms.KEKRecipientInfo.getInstance(System.Object)">
             return a KEKRecipientInfo object from the given object.
            
             @param obj the object we want converted.
             @exception IllegalArgumentException if the object cannot be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.cms.KEKRecipientInfo.toASN1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
            KEKRecipientInfo ::= SEQUENCE {
                version CMSVersion,  -- always set to 4
                kekid KEKIdentifier,
                keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,
                encryptedKey EncryptedKey 
            }
            </pre>
        </member>
        <member name="M:org.bouncycastle.asn1.cms.KeyAgreeRecipientInfo.getInstance(org.bouncycastle.asn1.ASN1TaggedObject,System.Boolean)">
             return a KeyAgreeRecipientInfo object from a tagged object.
            
             @param obj the tagged object holding the object we want.
             @param explicit true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception IllegalArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.cms.KeyAgreeRecipientInfo.getInstance(System.Object)">
             return a KeyAgreeRecipientInfo object from the given object.
            
             @param obj the object we want converted.
             @exception IllegalArgumentException if the object cannot be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.cms.KeyAgreeRecipientInfo.toASN1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
            KeyAgreeRecipientInfo ::= SEQUENCE {
                version CMSVersion,  -- always set to 3
                originator [0] EXPLICIT OriginatorIdentifierOrKey,
                ukm [1] EXPLICIT UserKeyingMaterial OPTIONAL,
                keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,
                recipientEncryptedKeys RecipientEncryptedKeys 
            }
            </pre>
        </member>
        <member name="M:org.bouncycastle.asn1.cms.KeyTransRecipientInfo.getInstance(System.Object)">
             return a KeyTransRecipientInfo object from the given object.
            
             @param obj the object we want converted.
             @exception IllegalArgumentException if the object cannot be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.cms.KeyTransRecipientInfo.toASN1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
            KeyTransRecipientInfo ::= SEQUENCE {
                version CMSVersion,  -- always set to 0 or 2
                rid RecipientIdentifier,
                keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,
                encryptedKey EncryptedKey 
            }
            </pre>
        </member>
        <member name="M:org.bouncycastle.asn1.cms.OriginatorIdentifierOrKey.getInstance(org.bouncycastle.asn1.ASN1TaggedObject,System.Boolean)">
             return an OriginatorIdentifierOrKey object from a tagged object.
            
             @param o the tagged object holding the object we want.
             @param explicit true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception IllegalArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.cms.OriginatorIdentifierOrKey.getInstance(System.Object)">
             return an OriginatorIdentifierOrKey object from the given object.
            
             @param o the object we want converted.
             @exception IllegalArgumentException if the object cannot be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.cms.OriginatorIdentifierOrKey.toASN1Object">
             Produce an object suitable for an ASN1OutputStream.
             <pre>
             OriginatorIdentifierOrKey ::= CHOICE {
                 issuerAndSerialNumber IssuerAndSerialNumber,
                 subjectKeyIdentifier [0] SubjectKeyIdentifier,
                 originatorKey [1] OriginatorPublicKey 
             }
            
             SubjectKeyIdentifier ::= OCTET STRING
             </pre>
        </member>
        <member name="M:org.bouncycastle.asn1.cms.OriginatorInfo.getInstance(org.bouncycastle.asn1.ASN1TaggedObject,System.Boolean)">
             return an OriginatorInfo object from a tagged object.
            
             @param obj the tagged object holding the object we want.
             @param explicit true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception IllegalArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.cms.OriginatorInfo.getInstance(System.Object)">
             return an OriginatorInfo object from the given object.
            
             @param obj the object we want converted.
             @exception IllegalArgumentException if the object cannot be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.cms.OriginatorInfo.toASN1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
            OriginatorInfo ::= SEQUENCE {
                certs [0] IMPLICIT CertificateSet OPTIONAL,
                crls [1] IMPLICIT CertificateRevocationLists OPTIONAL 
            }
            </pre>
        </member>
        <member name="M:org.bouncycastle.asn1.cms.OriginatorPublicKey.getInstance(org.bouncycastle.asn1.ASN1TaggedObject,System.Boolean)">
             return an OriginatorPublicKey object from a tagged object.
            
             @param obj the tagged object holding the object we want.
             @param explicit true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception IllegalArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.cms.OriginatorPublicKey.getInstance(System.Object)">
             return an OriginatorPublicKey object from the given object.
            
             @param obj the object we want converted.
             @exception IllegalArgumentException if the object cannot be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.cms.OriginatorPublicKey.toASN1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
            OriginatorPublicKey ::= SEQUENCE {
                algorithm AlgorithmIdentifier,
                publicKey BIT STRING 
            }
            </pre>
        </member>
        <member name="M:org.bouncycastle.asn1.cms.OtherKeyAttribute.getInstance(System.Object)">
             return an OtherKeyAttribute object from the given object.
            
             @param o the object we want converted.
             @exception IllegalArgumentException if the object cannot be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.cms.OtherKeyAttribute.toASN1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
            OtherKeyAttribute ::= SEQUENCE {
                keyAttrId OBJECT IDENTIFIER,
                keyAttr ANY DEFINED BY keyAttrId OPTIONAL
            }
            </pre>
        </member>
        <member name="M:org.bouncycastle.asn1.cms.OtherRecipientInfo.getInstance(org.bouncycastle.asn1.ASN1TaggedObject,System.Boolean)">
             return a OtherRecipientInfo object from a tagged object.
            
             @param obj the tagged object holding the object we want.
             @param explicit true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception IllegalArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.cms.OtherRecipientInfo.getInstance(System.Object)">
             return a OtherRecipientInfo object from the given object.
            
             @param obj the object we want converted.
             @exception IllegalArgumentException if the object cannot be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.cms.OtherRecipientInfo.toASN1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
            OtherRecipientInfo ::= SEQUENCE {
               oriType OBJECT IDENTIFIER,
               oriValue ANY DEFINED BY oriType }
            </pre>
        </member>
        <member name="M:org.bouncycastle.asn1.cms.PasswordRecipientInfo.getInstance(org.bouncycastle.asn1.ASN1TaggedObject,System.Boolean)">
             return a PasswordRecipientInfo object from a tagged object.
            
             @param obj the tagged object holding the object we want.
             @param explicit true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception IllegalArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.cms.PasswordRecipientInfo.getInstance(System.Object)">
             return a PasswordRecipientInfo object from the given object.
            
             @param obj the object we want converted.
             @exception IllegalArgumentException if the object cannot be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.cms.PasswordRecipientInfo.toASN1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
            PasswordRecipientInfo ::= SEQUENCE {
              version CMSVersion,   -- Always set to 0
              keyDerivationAlgorithm [0] KeyDerivationAlgorithmIdentifier
                                        OPTIONAL,
             keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,
             encryptedKey EncryptedKey }
            </pre>
        </member>
        <member name="M:org.bouncycastle.asn1.cms.RecipientIdentifier.getInstance(System.Object)">
             return a RecipientIdentifier object from the given object.
            
             @param o the object we want converted.
             @exception IllegalArgumentException if the object cannot be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.cms.RecipientIdentifier.toASN1Object">
             Produce an object suitable for an ASN1OutputStream.
             <pre>
             RecipientIdentifier ::= CHOICE {
                 issuerAndSerialNumber IssuerAndSerialNumber,
                 subjectKeyIdentifier [0] SubjectKeyIdentifier 
             }
            
             SubjectKeyIdentifier ::= OCTET STRING
             </pre>
        </member>
        <member name="M:org.bouncycastle.asn1.cms.RecipientInfo.toASN1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
            RecipientInfo ::= CHOICE {
                ktri KeyTransRecipientInfo,
                kari [1] KeyAgreeRecipientInfo,
                kekri [2] KEKRecipientInfo,
                pwri [3] PasswordRecipientInfo,
                ori [4] OtherRecipientInfo }
            </pre>
        </member>
        <member name="M:org.bouncycastle.asn1.cms.RecipientKeyIdentifier.getInstance(org.bouncycastle.asn1.ASN1TaggedObject,System.Boolean)">
             return a RecipientKeyIdentifier object from a tagged object.
            
             @param _ato the tagged object holding the object we want.
             @param _explicit true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception IllegalArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.cms.RecipientKeyIdentifier.getInstance(System.Object)">
             return a RecipientKeyIdentifier object from the given object.
            
             @param _obj the object we want converted.
             @exception IllegalArgumentException if the object cannot be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.cms.RecipientKeyIdentifier.toASN1Object">
             Produce an object suitable for an ASN1OutputStream.
             <pre>
             RecipientKeyIdentifier ::= SEQUENCE {
                 subjectKeyIdentifier SubjectKeyIdentifier,
                 date GeneralizedTime OPTIONAL,
                 other OtherKeyAttribute OPTIONAL 
             }
            
             SubjectKeyIdentifier ::= OCTET STRING
             </pre>
        </member>
        <member name="T:org.bouncycastle.asn1.cms.SignedData">
            a signed data object.
        </member>
        <member name="M:org.bouncycastle.asn1.cms.SignedData.toASN1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
            SignedData ::= SEQUENCE {
                version CMSVersion,
                digestAlgorithms DigestAlgorithmIdentifiers,
                encapContentInfo EncapsulatedContentInfo,
                certificates [0] IMPLICIT CertificateSet OPTIONAL,
                crls [1] IMPLICIT CertificateRevocationLists OPTIONAL,
                signerInfos SignerInfos
              }
            </pre>
        </member>
        <member name="M:org.bouncycastle.asn1.cms.SignerIdentifier.getInstance(System.Object)">
             return a SignerIdentifier object from the given object.
            
             @param o the object we want converted.
             @exception IllegalArgumentException if the object cannot be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.cms.SignerIdentifier.toASN1Object">
             Produce an object suitable for an ASN1OutputStream.
             <pre>
             SignerIdentifier ::= CHOICE {
                 issuerAndSerialNumber IssuerAndSerialNumber,
                 subjectKeyIdentifier [0] SubjectKeyIdentifier 
             }
            
             SubjectKeyIdentifier ::= OCTET STRING
             </pre>
        </member>
        <member name="M:org.bouncycastle.asn1.cms.SignerInfo.toASN1Object">
             Produce an object suitable for an ASN1OutputStream.
             <pre>
              SignerInfo ::= SEQUENCE {
                  version Version,
                  SignerIdentifier sid,
                  digestAlgorithm DigestAlgorithmIdentifier,
                  authenticatedAttributes [0] IMPLICIT Attributes OPTIONAL,
                  digestEncryptionAlgorithm DigestEncryptionAlgorithmIdentifier,
                  encryptedDigest EncryptedDigest,
                  unauthenticatedAttributes [1] IMPLICIT Attributes OPTIONAL
              }
            
              EncryptedDigest ::= OCTET STRING
            
              DigestAlgorithmIdentifier ::= AlgorithmIdentifier
            
              DigestEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier
             </pre>
        </member>
        <member name="M:org.bouncycastle.asn1.cms.Time.getInstance(System.Object)">
            creates a time object from a given date - if the date is between 1950
            and 2049 a UTCTime object is generated, otherwise a GeneralizedTime
            is used.
        </member>
        <member name="M:org.bouncycastle.asn1.cms.Time.toASN1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
            Time ::= CHOICE {
                        utcTime        UTCTime,
                        generalTime    GeneralizedTime }
            </pre>
        </member>
        <member name="M:org.bouncycastle.asn1.misc.CAST5CBCParameters.toASN1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
            cast5CBCParameters ::= SEQUENCE {
                                      iv         OCTET STRING DEFAULT 0,
                                             -- Initialization vector
                                      keyLength  INTEGER
                                             -- Key length, in bits
                                 }
            </pre>
        </member>
        <member name="M:org.bouncycastle.asn1.misc.IDEACBCPar.toASN1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
            IDEA-CBCPar ::= SEQUENCE {
                                 iv    OCTET STRING OPTIONAL -- exactly 8 octets
                             }
            </pre>
        </member>
        <member name="T:org.bouncycastle.asn1.misc.NetscapeCertType">
            The NetscapeCertType object.
            <pre>
               NetscapeCertType ::= BIT STRING {
                    SSLClient               (0),
                    SSLServer               (1),
                    S/MIME                  (2),
                    Object Signing          (3),
                    Reserved                (4),
                    SSL CA                  (5),
                    S/MIME CA               (6),
                    Object Signing CA       (7) }
            </pre>
        </member>
        <member name="T:org.bouncycastle.asn1.DERString">
            basic interface for DER string objects.
        </member>
        <member name="M:org.bouncycastle.asn1.DERBitString.getPadBits(System.Int32)">
            return the correct number of pad bits for a bit string defined in
            a 32 bit constant
        </member>
        <member name="M:org.bouncycastle.asn1.DERBitString.getBytes(System.Int32)">
            return the correct number of bytes for a bit string defined in
            a 32 bit constant
        </member>
        <member name="M:org.bouncycastle.asn1.DERBitString.getInstance(System.Object)">
             return a Bit string from the passed in object
            
             @exception IllegalArgumentException if the object cannot be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.DERBitString.getInstance(org.bouncycastle.asn1.ASN1TaggedObject,System.Boolean)">
             return a Bit string from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception IllegalArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.DERBitString.#ctor(System.Byte[],System.Int32)">
            @param data the octets making up the bit string.
            @param padBits the number of extra bits at the end of the string.
        </member>
        <member name="M:org.bouncycastle.asn1.misc.NetscapeCertType.#ctor(System.Int32)">
            Basic constructor.
            
            @param usage - the bitwise OR of the Key Usage flags giving the
            allowed uses for the key.
            e.g. (X509NetscapeCertType.sslCA | X509NetscapeCertType.smimeCA)
        </member>
        <member name="T:org.bouncycastle.asn1.DERIA5String">
            DER IA5String object - this is an ascii string.
        </member>
        <member name="M:org.bouncycastle.asn1.DERIA5String.getInstance(System.Object)">
             return a IA5 string from the passed in object
            
             @exception IllegalArgumentException if the object cannot be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.DERIA5String.getInstance(org.bouncycastle.asn1.ASN1TaggedObject,System.Boolean)">
             return an IA5 string from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception IllegalArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.DERIA5String.#ctor(System.Byte[])">
            basic constructor - with bytes.
        </member>
        <member name="M:org.bouncycastle.asn1.DERIA5String.#ctor(System.String)">
            basic constructor - with string.
        </member>
        <member name="M:org.bouncycastle.asn1.ocsp.BasicOCSPResponse.toASN1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
            BasicOCSPResponse       ::= SEQUENCE {
                 tbsResponseData      ResponseData,
                 signatureAlgorithm   AlgorithmIdentifier,
                 signature            BIT STRING,
                 certs                [0] EXPLICIT SEQUENCE OF Certificate OPTIONAL }
            </pre>
        </member>
        <member name="M:org.bouncycastle.asn1.ocsp.CertID.toASN1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
            CertID          ::=     SEQUENCE {
                hashAlgorithm       AlgorithmIdentifier,
                issuerNameHash      OCTET STRING, -- Hash of Issuer's DN
                issuerKeyHash       OCTET STRING, -- Hash of Issuers public key
                serialNumber        CertificateSerialNumber }
            </pre>
        </member>
        <member name="M:org.bouncycastle.asn1.ocsp.CertStatus.#ctor">
            create a CertStatus object with a tag of zero.
        </member>
        <member name="M:org.bouncycastle.asn1.ocsp.CertStatus.toASN1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
             CertStatus ::= CHOICE {
                             good        [0]     IMPLICIT NULL,
                             revoked     [1]     IMPLICIT RevokedInfo,
                             unknown     [2]     IMPLICIT UnknownInfo }
            </pre>
        </member>
        <member name="M:org.bouncycastle.asn1.ocsp.CrlID.toASN1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
            CrlID ::= SEQUENCE {
                crlUrl               [0]     EXPLICIT IA5String OPTIONAL,
                crlNum               [1]     EXPLICIT INTEGER OPTIONAL,
                crlTime              [2]     EXPLICIT GeneralizedTime OPTIONAL }
            </pre>
        </member>
        <member name="M:org.bouncycastle.asn1.ocsp.OCSPRequest.toASN1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
            OCSPRequest     ::=     SEQUENCE {
                tbsRequest                  TBSRequest,
                optionalSignature   [0]     EXPLICIT Signature OPTIONAL }
            </pre>
        </member>
        <member name="M:org.bouncycastle.asn1.ocsp.OCSPResponse.toASN1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
            OCSPResponse ::= SEQUENCE {
                responseStatus         OCSPResponseStatus,
                responseBytes          [0] EXPLICIT ResponseBytes OPTIONAL }
            </pre>
        </member>
        <member name="M:org.bouncycastle.asn1.DEREnumerated.getInstance(System.Object)">
             return an integer from the passed in object
            
             @exception IllegalArgumentException if the object cannot be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.DEREnumerated.getInstance(org.bouncycastle.asn1.ASN1TaggedObject,System.Boolean)">
             return an Enumerated from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception IllegalArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.ocsp.OCSPResponseStatus.#ctor(System.Int32)">
            The OCSPResponseStatus enumeration.
            <pre>
            OCSPResponseStatus ::= ENUMERATED {
                successful            (0),  --Response has valid confirmations
                malformedRequest      (1),  --Illegal confirmation request
                internalError         (2),  --Internal error in issuer
                tryLater              (3),  --Try again later
                                            --(4) is not used
                sigRequired           (5),  --Must sign the request
                unauthorized          (6)   --Request unauthorized
            }
            </pre>
        </member>
        <member name="M:org.bouncycastle.asn1.ocsp.Request.toASN1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
            Request         ::=     SEQUENCE {
                reqCert                     CertID,
                singleRequestExtensions     [0] EXPLICIT Extensions OPTIONAL }
            </pre>
        </member>
        <member name="M:org.bouncycastle.asn1.ocsp.ResponderID.toASN1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
            ResponderID ::= CHOICE {
                 byName          [1] Name,
                 byKey           [2] KeyHash }
            </pre>
        </member>
        <member name="M:org.bouncycastle.asn1.ocsp.ResponseBytes.toASN1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
            ResponseBytes ::=       SEQUENCE {
                responseType   OBJECT IDENTIFIER,
                response       OCTET STRING }
            </pre>
        </member>
        <member name="M:org.bouncycastle.asn1.ocsp.ResponseData.toASN1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
            ResponseData ::= SEQUENCE {
                version              [0] EXPLICIT Version DEFAULT v1,
                responderID              ResponderID,
                producedAt               GeneralizedTime,
                responses                SEQUENCE OF SingleResponse,
                responseExtensions   [1] EXPLICIT Extensions OPTIONAL }
            </pre>
        </member>
        <member name="M:org.bouncycastle.asn1.ocsp.RevokedInfo.toASN1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
            RevokedInfo ::= SEQUENCE {
                 revocationTime              GeneralizedTime,
                 revocationReason    [0]     EXPLICIT CRLReason OPTIONAL }
            </pre>
        </member>
        <member name="M:org.bouncycastle.asn1.ocsp.ServiceLocator.toASN1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
            ServiceLocator ::= SEQUENCE {
                issuer    Name,
                locator   AuthorityInfoAccessSyntax OPTIONAL }
            </pre>
        </member>
        <member name="M:org.bouncycastle.asn1.ocsp.Signature.toASN1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
            Signature       ::=     SEQUENCE {
                signatureAlgorithm      AlgorithmIdentifier,
                signature               BIT STRING,
                certs               [0] EXPLICIT SEQUENCE OF Certificate OPTIONAL}
            </pre>
        </member>
        <member name="M:org.bouncycastle.asn1.ocsp.SingleResponse.toASN1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
             SingleResponse ::= SEQUENCE {
                     certID                       CertID,
                     certStatus                   CertStatus,
                     thisUpdate                   GeneralizedTime,
                     nextUpdate         [0]       EXPLICIT GeneralizedTime OPTIONAL,
                     singleExtensions   [1]       EXPLICIT Extensions OPTIONAL }
            </pre>
        </member>
        <member name="M:org.bouncycastle.asn1.ocsp.TBSRequest.toASN1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
            TBSRequest      ::=     SEQUENCE {
                version             [0]     EXPLICIT Version DEFAULT v1,
                requestorName       [1]     EXPLICIT GeneralName OPTIONAL,
                requestList                 SEQUENCE OF Request,
                requestExtensions   [2]     EXPLICIT Extensions OPTIONAL }
            </pre>
        </member>
        <member name="M:org.bouncycastle.asn1.pkcs.Attribute.getInstance(System.Object)">
             return an Attribute object from the given object.
            
             @param o the object we want converted.
             @exception IllegalArgumentException if the object cannot be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.pkcs.Attribute.toASN1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
            Attribute ::= SEQUENCE {
                attrType OBJECT IDENTIFIER,
                attrValues SET OF AttributeValue
            }
            </pre>
        </member>
        <member name="T:org.bouncycastle.asn1.pkcs.CertificationRequest">
            PKCS10 Certfication request object.
            <pre>
            CertificationRequest ::= SEQUENCE {
              certificationRequestInfo  CertificationRequestInfo,
              signatureAlgorithm        AlgorithmIdentifier{{ SignatureAlgorithms }},
              signature                 BIT STRING
            }
            </pre>
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:org.bouncycastle.asn1.pkcs.CertificationRequestInfo" -->
        <member name="M:org.bouncycastle.asn1.pkcs.ContentInfo.toASN1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
            ContentInfo ::= SEQUENCE {
                     contentType ContentType,
                     content
                     [0] EXPLICIT ANY DEFINED BY contentType OPTIONAL }
            </pre>
        </member>
        <member name="T:org.bouncycastle.asn1.pkcs.EncryptedData">
             The EncryptedData object.
             <pre>
                  EncryptedData ::= SEQUENCE {
                       version Version,
                       encryptedContentInfo EncryptedContentInfo
                  }
            
            
                  EncryptedContentInfo ::= SEQUENCE {
                      contentType ContentType,
                      contentEncryptionAlgorithm  ContentEncryptionAlgorithmIdentifier,
                      encryptedContent [0] IMPLICIT EncryptedContent OPTIONAL
                }
            
                EncryptedContent ::= OCTET STRING
             </pre>
        </member>
        <member name="M:org.bouncycastle.asn1.pkcs.EncryptedPrivateKeyInfo.toASN1Object">
             Produce an object suitable for an ASN1OutputStream.
             <pre>
             EncryptedPrivateKeyInfo ::= SEQUENCE {
                  encryptionAlgorithm AlgorithmIdentifier {{KeyEncryptionAlgorithms}},
                  encryptedData EncryptedData
             }
            
             EncryptedData ::= OCTET STRING
            
             KeyEncryptionAlgorithms ALGORITHM-IDENTIFIER ::= {
                      ... -- For local profiles
             }
             </pre>
        </member>
        <member name="M:org.bouncycastle.asn1.x509.AlgorithmIdentifier.toASN1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
                 AlgorithmIdentifier ::= SEQUENCE {
                                       algorithm OBJECT IDENTIFIER,
                                       parameters ANY DEFINED BY algorithm OPTIONAL }
            </pre>
        </member>
        <member name="T:org.bouncycastle.asn1.pkcs.Pfx">
            the infamous Pfx from PKCS12
        </member>
        <member name="M:org.bouncycastle.asn1.pkcs.PrivateKeyInfo.toASN1Object">
             write out an RSA private key with it's asscociated information
             as described in PKCS8.
             <pre>
                  PrivateKeyInfo ::= SEQUENCE {
                                          version Version,
                                          privateKeyAlgorithm AlgorithmIdentifier {{PrivateKeyAlgorithms}},
                                          privateKey PrivateKey,
                                          attributes [0] IMPLICIT Attributes OPTIONAL 
                                      }
                  Version ::= INTEGER {v1(0)} (v1,...)
            
                  PrivateKey ::= OCTET STRING
            
                  Attributes ::= SET OF Attribute
             </pre>
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:org.bouncycastle.asn1.pkcs.RSAPrivateKeyStructure.toASN1Object" -->
        <member name="T:org.bouncycastle.asn1.pkcs.SignedData">
            a PKCS#7 signed data object.
        </member>
        <member name="M:org.bouncycastle.asn1.pkcs.SignedData.toASN1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
             SignedData ::= SEQUENCE {
                 version Version,
                 digestAlgorithms DigestAlgorithmIdentifiers,
                 contentInfo ContentInfo,
                 certificates
                     [0] IMPLICIT ExtendedCertificatesAndCertificates
                              OPTIONAL,
                 crls
                     [1] IMPLICIT CertificateRevocationLists OPTIONAL,
                 signerInfos SignerInfos }
            </pre>
        </member>
        <member name="T:org.bouncycastle.asn1.pkcs.SignerInfo">
            a PKCS#7 signer info object.
        </member>
        <member name="M:org.bouncycastle.asn1.pkcs.SignerInfo.toASN1Object">
             Produce an object suitable for an ASN1OutputStream.
             <pre>
              SignerInfo ::= SEQUENCE {
                  version Version,
                  issuerAndSerialNumber IssuerAndSerialNumber,
                  digestAlgorithm DigestAlgorithmIdentifier,
                  authenticatedAttributes [0] IMPLICIT Attributes OPTIONAL,
                  digestEncryptionAlgorithm DigestEncryptionAlgorithmIdentifier,
                  encryptedDigest EncryptedDigest,
                  unauthenticatedAttributes [1] IMPLICIT Attributes OPTIONAL
              }
            
              EncryptedDigest ::= OCTET STRING
            
              DigestAlgorithmIdentifier ::= AlgorithmIdentifier
            
              DigestEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier
             </pre>
        </member>
        <member name="T:org.bouncycastle.asn1.sec.ECPrivateKeyStructure">
            the elliptic curve private key object from SEC 1
        </member>
        <member name="T:org.bouncycastle.asn1.smime.SMIMECapabilities">
            Handler class for dealing with S/MIME Capabilities
        </member>
        <member name="F:org.bouncycastle.asn1.smime.SMIMECapabilities.preferSignedData">
            general preferences
        </member>
        <member name="F:org.bouncycastle.asn1.smime.SMIMECapabilities.dES_CBC">
            encryption algorithms preferences
        </member>
        <member name="M:org.bouncycastle.asn1.smime.SMIMECapabilities.getInstance(System.Object)">
             return an Attribute object from the given object.
            
             @param o the object we want converted.
             @exception IllegalArgumentException if the object cannot be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.smime.SMIMECapabilities.getCapabilities(org.bouncycastle.asn1.DERObjectIdentifier)">
            returns a vector with 0 or more objects of all the capabilities
            matching the passed in capability OID. If the OID passed is null the
            entire set is returned.
        </member>
        <member name="M:org.bouncycastle.asn1.smime.SMIMECapabilities.toASN1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
            SMIMECapabilities ::= SEQUENCE OF SMIMECapability
            </pre>
        </member>
        <member name="M:org.bouncycastle.asn1.x509.Attribute.getInstance(System.Object)">
             return an Attribute object from the given object.
            
             @param o the object we want converted.
             @exception IllegalArgumentException if the object cannot be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.x509.Attribute.toASN1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
            Attribute ::= SEQUENCE {
                attrType OBJECT IDENTIFIER,
                attrValues SET OF AttributeValue
            }
            </pre>
        </member>
        <member name="F:org.bouncycastle.asn1.smime.SMIMECapability.preferSignedData">
            general preferences
        </member>
        <member name="F:org.bouncycastle.asn1.smime.SMIMECapability.dES_CBC">
            encryption algorithms preferences
        </member>
        <member name="M:org.bouncycastle.asn1.smime.SMIMECapability.toASN1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre> 
            SMIMECapability ::= SEQUENCE {
                capabilityID OBJECT IDENTIFIER,
                parameters ANY DEFINED BY capabilityID OPTIONAL 
            }
            </pre>
        </member>
        <member name="T:org.bouncycastle.asn1.smime.SMIMECapabilityVector">
            Handler for creating a vector S/MIME Capabilities
        </member>
        <member name="T:org.bouncycastle.asn1.smime.SMIMEEncryptionKeyPreferenceAttribute">
            The SMIMEEncryptionKeyPreference object.
            <pre>
            SMIMEEncryptionKeyPreference ::= CHOICE {
                issuerAndSerialNumber   [0] IssuerAndSerialNumber,
                receipentKeyId          [1] RecipientKeyIdentifier,
                subjectAltKeyIdentifier [2] SubjectKeyIdentifier
            }
            </pre>
        </member>
        <member name="M:org.bouncycastle.asn1.smime.SMIMEEncryptionKeyPreferenceAttribute.#ctor(org.bouncycastle.asn1.ASN1OctetString)">
            @param sKeyId the subjectKeyIdentifier value (normally the X.509 one)
        </member>
        <member name="M:org.bouncycastle.asn1.util.ASN1Dump._dumpAsString(System.String,org.bouncycastle.asn1.ASN1Object)">
             dump a DER object as a formatted string with indentation
            
             @param obj the ASN1Object to be dumped out.
        </member>
        <member name="M:org.bouncycastle.asn1.util.ASN1Dump.dumpAsString(System.Object)">
             dump out a DER object as a formatted string
            
             @param obj the ASN1Object to be dumped out.
        </member>
        <member name="M:org.bouncycastle.asn1.x509.AttCertIssuer.toASN1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
             AttCertIssuer ::= CHOICE {
                  v1Form   GeneralNames,  -- MUST NOT be used in this
                                          -- profile
                  v2Form   [0] V2Form     -- v2 only
             }
            </pre>
        </member>
        <member name="M:org.bouncycastle.asn1.x509.AttCertValidityPeriod.toASN1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
             AttCertValidityPeriod  ::= SEQUENCE {
                  notBeforeTime  GeneralizedTime,
                  notAfterTime   GeneralizedTime
             } 
            </pre>
        </member>
        <member name="M:org.bouncycastle.asn1.x509.AttributeCertificate.getInstance(System.Object)">
            @param obj
            @return
        </member>
        <member name="M:org.bouncycastle.asn1.x509.AttributeCertificate.toASN1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
             AttributeCertificate ::= SEQUENCE {
                  acinfo               AttributeCertificateInfo,
                  signatureAlgorithm   AlgorithmIdentifier,
                  signatureValue       BIT STRING
             }
            </pre>
        </member>
        <member name="M:org.bouncycastle.asn1.x509.AttributeCertificateInfo.toASN1Object">
             Produce an object suitable for an ASN1OutputStream.
             <pre>
              AttributeCertificateInfo ::= SEQUENCE {
                   version              AttCertVersion -- version is v2,
                   holder               Holder,
                   issuer               AttCertIssuer,
                   signature            AlgorithmIdentifier,
                   serialNumber         CertificateSerialNumber,
                   attrCertValidityPeriod   AttCertValidityPeriod,
                   attributes           SEQUENCE OF Attribute,
                   issuerUniqueID       UniqueIdentifier OPTIONAL,
                   extensions           Extensions OPTIONAL
              }
            
              AttCertVersion ::= INTEGER { v2(1) }
             </pre>
        </member>
        <member name="T:org.bouncycastle.asn1.x509.AuthorityInformationAccess">
             The AuthorityInformationAccess object.
             <pre>
             id-pe-authorityInfoAccess OBJECT IDENTIFIER ::= { id-pe 1 }
            
             AuthorityInfoAccessSyntax  ::=
                  SEQUENCE SIZE (1..MAX) OF AccessDescription
             AccessDescription  ::=  SEQUENCE {
                   accessMethod          OBJECT IDENTIFIER,
                   accessLocation        GeneralName  }
            
             id-ad OBJECT IDENTIFIER ::= { id-pkix 48 }
             id-ad-caIssuers OBJECT IDENTIFIER ::= { id-ad 2 }
             id-ad-ocsp OBJECT IDENTIFIER ::= { id-ad 1 }
             </pre>
        </member>
        <member name="M:org.bouncycastle.asn1.x509.AuthorityInformationAccess.#ctor(org.bouncycastle.asn1.DERObjectIdentifier,org.bouncycastle.asn1.x509.GeneralName)">
            create an AuthorityInformationAccess with the oid and location provided.
        </member>
        <member name="T:org.bouncycastle.asn1.x509.AuthorityKeyIdentifier">
             The AuthorityKeyIdentifier object.
             <pre>
             id-ce-authorityKeyIdentifier OBJECT IDENTIFIER ::=  { id-ce 35 }
            
               AuthorityKeyIdentifier ::= SEQUENCE {
                  keyIdentifier             [0] IMPLICIT KeyIdentifier           OPTIONAL,
                  authorityCertIssuer       [1] IMPLICIT GeneralNames            OPTIONAL,
                  authorityCertSerialNumber [2] IMPLICIT CertificateSerialNumber OPTIONAL  }
            
               KeyIdentifier ::= OCTET STRING
             </pre>
            
        </member>
        <member name="M:org.bouncycastle.asn1.x509.AuthorityKeyIdentifier.#ctor(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo)">
            
             Calulates the keyidentifier using a SHA1 hash over the BIT STRING
             from SubjectPublicKeyInfo as defined in RFC2459.
            
             Example of making a AuthorityKeyIdentifier:
             <pre>
               SubjectPublicKeyInfo apki = new SubjectPublicKeyInfo((ASN1Sequence)new DERInputStream(
                   new ByteArrayInputStream(publicKey.getEncoded())).readObject());
               AuthorityKeyIdentifier aki = new AuthorityKeyIdentifier(apki);
             </pre>
            
            
        </member>
        <member name="M:org.bouncycastle.asn1.x509.AuthorityKeyIdentifier.#ctor(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo,org.bouncycastle.asn1.x509.GeneralNames,org.bouncycastle.math.BigInteger)">
            create an AuthorityKeyIdentifier with the GeneralNames tag and
            the serial number provided as well.
        </member>
        <member name="M:org.bouncycastle.asn1.x509.AuthorityKeyIdentifier.toASN1Object">
            Produce an object suitable for an ASN1OutputStream.
        </member>
        <member name="M:org.bouncycastle.asn1.x509.BasicConstraints.#ctor(System.Int32)">
            create a cA=true object for the given path length constraint.
            
            @param pathLenConstraint
        </member>
        <member name="M:org.bouncycastle.asn1.x509.BasicConstraints.toASN1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
            BasicConstraints := SEQUENCE {
               cA                  BOOLEAN DEFAULT FALSE,
               pathLenConstraint   INTEGER (0..MAX) OPTIONAL
            }
            </pre>
        </member>
        <member name="T:org.bouncycastle.asn1.x509.CertificateList">
             PKIX RFC-2459
            
             The X.509 v2 CRL syntax is as follows.  For signature calculation,
             the data that is to be signed is ASN.1 DER encoded.
            
             <pre>
             CertificateList  ::=  SEQUENCE  {
                  tbsCertList          TBSCertList,
                  signatureAlgorithm   AlgorithmIdentifier,
                  signatureValue       BIT STRING  }
             </pre>
        </member>
        <member name="T:org.bouncycastle.asn1.x509.CertPolicyId">
             CertPolicyId, used in the CertificatePolicies and PolicyMappings
             X509V3 Extensions.
            
             <pre>
                 CertPolicyId ::= OBJECT IDENTIFIER
             </pre>
        </member>
        <member name="M:org.bouncycastle.asn1.DERObjectIdentifier.getInstance(System.Object)">
             return an OID from the passed in object
            
             @exception IllegalArgumentException if the object cannot be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.DERObjectIdentifier.getInstance(org.bouncycastle.asn1.ASN1TaggedObject,System.Boolean)">
             return an object Identifier from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception IllegalArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.x509.CRLDistPoint.getDistributionPoints">
            Return the distribution points making up the sequence.
            
            @return DistributionPoint[]
        </member>
        <member name="M:org.bouncycastle.asn1.x509.CRLDistPoint.toASN1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
            CRLDistPoint ::= SEQUENCE SIZE {1..MAX} OF DistributionPoint
            </pre>
        </member>
        <member name="T:org.bouncycastle.asn1.x509.CRLNumber">
            The CRLNumber object.
            <pre>
            CRLNumber::= INTEGER(0..MAX)
            </pre>
        </member>
        <member name="M:org.bouncycastle.asn1.DERInteger.getInstance(System.Object)">
             return an integer from the passed in object
            
             @exception IllegalArgumentException if the object cannot be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.DERInteger.getInstance(org.bouncycastle.asn1.ASN1TaggedObject,System.Boolean)">
             return an Integer from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception IllegalArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.DERInteger.getPositiveValue">
            in some cases positive values get crammed into a space,
            that's not quite big enough...
        </member>
        <member name="T:org.bouncycastle.asn1.x509.CRLReason">
            The CRLReason enumeration.
            <pre>
            CRLReason ::= ENUMERATED {
             unspecified             (0),
             keyCompromise           (1),
             cACompromise            (2),
             affiliationChanged      (3),
             superseded              (4),
             cessationOfOperation    (5),
             certificateHold         (6),
             removeFromCRL           (8),
             privilegeWithdrawn      (9),
             aACompromise           (10)
            }
            </pre>
        </member>
        <member name="T:org.bouncycastle.asn1.x509.DigestInfo">
            The DigestInfo object.
            <pre>
            DigestInfo::=SEQUENCE{
                     digestAlgorithm  AlgorithmIdentifier,
                     digest OCTET STRING }
            </pre>
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:org.bouncycastle.asn1.x509.DisplayText" -->
        <member name="F:org.bouncycastle.asn1.x509.DisplayText.CONTENT_TYPE_IA5STRING">
             Constant corresponding to ia5String encoding. 
            
        </member>
        <member name="F:org.bouncycastle.asn1.x509.DisplayText.CONTENT_TYPE_BMPSTRING">
             Constant corresponding to bmpString encoding. 
            
        </member>
        <member name="F:org.bouncycastle.asn1.x509.DisplayText.CONTENT_TYPE_UTF8STRING">
             Constant corresponding to utf8String encoding. 
            
        </member>
        <member name="F:org.bouncycastle.asn1.x509.DisplayText.CONTENT_TYPE_VISIBLESTRING">
             Constant corresponding to visibleString encoding. 
            
        </member>
        <member name="F:org.bouncycastle.asn1.x509.DisplayText.DISPLAY_TEXT_MAXIMUM_SIZE">
             Describe constant <code>DISPLAY_TEXT_MAXIMUM_SIZE</code> here.
            
        </member>
        <member name="M:org.bouncycastle.asn1.x509.DisplayText.#ctor(System.Int32,System.String)">
             Creates a new <code>DisplayText</code> instance.
            
             @param type the desired encoding type for the text. 
             @param text the text to store. Strings longer than 200
             characters are truncated. 
        </member>
        <member name="M:org.bouncycastle.asn1.x509.DisplayText.canBePrintable(System.String)">
            return true if the passed in String can be represented without
            loss as a PrintableString, false otherwise.
        </member>
        <member name="M:org.bouncycastle.asn1.x509.DisplayText.canBeUTF8(System.String)">
            return true if the passed in String can be represented without
            loss as a UTF8String, false otherwise.
        </member>
        <member name="M:org.bouncycastle.asn1.x509.DisplayText.#ctor(System.String)">
             Creates a new <code>DisplayText</code> instance.
            
             @param text the text to encapsulate. Strings longer than 200
             characters are truncated. 
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:org.bouncycastle.asn1.x509.DisplayText.#ctor(org.bouncycastle.asn1.DERString)" -->
        <member name="M:org.bouncycastle.asn1.x509.DisplayText.getString">
             Returns the stored <code>String</code> object. 
            
             @return the stored text as a <code>String</code>. 
        </member>
        <member name="T:org.bouncycastle.asn1.x509.DistributionPoint">
            The DistributionPoint object.
            <pre>
            DistributionPoint ::= SEQUENCE {
                 distributionPoint [0] DistributionPointName OPTIONAL,
                 reasons           [1] ReasonFlags OPTIONAL,
                 cRLIssuer         [2] GeneralNames OPTIONAL
            }
            </pre>
        </member>
        <member name="T:org.bouncycastle.asn1.x509.DistributionPointName">
            The DistributionPointName object.
            <pre>
            DistributionPointName ::= CHOICE {
                fullName                 [0] GeneralNames,
                nameRelativeToCRLIssuer  [1] RelativeDistinguishedName
            }
            </pre>
        </member>
        <member name="T:org.bouncycastle.asn1.x509.ExtendedKeyUsage">
            The extendedKeyUsage object.
            <pre>
                 extendedKeyUsage ::= SEQUENCE SIZE (1..MAX) OF KeyPurposeId
            </pre>
        </member>
        <member name="T:org.bouncycastle.asn1.x509.GeneralName">
             The GeneralName object.
             <pre>
             GeneralName ::= CHOICE {
                  otherName                       [0]     OtherName,
                  rfc822Name                      [1]     IA5String,
                  dNSName                         [2]     IA5String,
                  x400Address                     [3]     ORAddress,
                  directoryName                   [4]     Name,
                  ediPartyName                    [5]     EDIPartyName,
                  uniformResourceIdentifier       [6]     IA5String,
                  iPAddress                       [7]     OCTET STRING,
                  registeredID                    [8]     OBJECT IDENTIFIER}
            
             OtherName ::= SEQUENCE {
                  type-id    OBJECT IDENTIFIER,
                  value      [0] EXPLICIT ANY DEFINED BY type-id }
            
             EDIPartyName ::= SEQUENCE {
                  nameAssigner            [0]     DirectoryString OPTIONAL,
                  partyName               [1]     DirectoryString }
             </pre>
        </member>
        <member name="M:org.bouncycastle.asn1.x509.GeneralName.#ctor(org.bouncycastle.asn1.ASN1Object,System.Int32)">
             When the subjectAltName extension contains an Internet mail address,
             the address MUST be included as an rfc822Name. The format of an
             rfc822Name is an "addr-spec" as defined in RFC 822 [RFC 822].
            
             When the subjectAltName extension contains a domain name service
             label, the domain name MUST be stored in the dNSName (an IA5String).
             The name MUST be in the "preferred name syntax," as specified by RFC
             1034 [RFC 1034].
            
             When the subjectAltName extension contains a URI, the name MUST be
             stored in the uniformResourceIdentifier (an IA5String). The name MUST
             be a non-relative URL, and MUST follow the URL syntax and encoding
             rules specified in [RFC 1738].  The name must include both a scheme
             (e.g., "http" or "ftp") and a scheme-specific-part.  The scheme-
             specific-part must include a fully qualified domain name or IP
             address as the host.
            
             When the subjectAltName extension contains a iPAddress, the address
             MUST be stored in the octet string in "network byte order," as
             specified in RFC 791 [RFC 791]. The least significant bit (LSB) of
             each octet is the LSB of the corresponding byte in the network
             address. For IP Version 4, as specified in RFC 791, the octet string
             MUST contain exactly four octets.  For IP Version 6, as specified in
             RFC 1883, the octet string MUST contain exactly sixteen octets [RFC
             1883].
        </member>
        <member name="M:org.bouncycastle.asn1.x509.GeneralNames.toASN1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
            GeneralNames ::= SEQUENCE SIZE {1..MAX} OF GeneralName
            </pre>
        </member>
        <member name="M:org.bouncycastle.asn1.x509.Holder.toASN1Object">
            The Holder object.
            <pre>
             Holder ::= SEQUENCE {
                   baseCertificateID   [0] IssuerSerial OPTIONAL,
                            -- the issuer and serial number of
                            -- the holder's Public Key Certificate
                   entityName          [1] GeneralNames OPTIONAL,
                            -- the name of the claimant or role
                   objectDigestInfo    [2] ObjectDigestInfo OPTIONAL
                            -- used to directly authenticate the holder,
                            -- for example, an executable
             }
            </pre>
        </member>
        <member name="T:org.bouncycastle.asn1.x509.IetfAttrSyntax">
            Implementation of <code>IetfAttrSyntax</code> as specified by RFC3281.
        </member>
        <member name="M:org.bouncycastle.asn1.x509.IetfAttrSyntax.#ctor(org.bouncycastle.asn1.ASN1Sequence)">
            
        </member>
        <member name="M:org.bouncycastle.asn1.x509.IetfAttrSyntax.toASN1Object">
            
            <pre>
            
             IetfAttrSyntax ::= SEQUENCE {
               policyAuthority [0] GeneralNames OPTIONAL,
               values SEQUENCE OF CHOICE {
                 octets OCTET STRING,
                 oid OBJECT IDENTIFIER,
                 string UTF8String
               }
             }
             
            </pre>
        </member>
        <member name="M:org.bouncycastle.asn1.x509.IssuerSerial.toASN1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
             IssuerSerial  ::=  SEQUENCE {
                  issuer         GeneralNames,
                  serial         CertificateSerialNumber,
                  issuerUID      UniqueIdentifier OPTIONAL
             }
            </pre>
        </member>
        <member name="T:org.bouncycastle.asn1.x509.IssuingDistributionPoint">
            IssuingDistributionPoint ::= SEQUENCE {
                 distributionPoint          [0] DistributionPointName OPTIONAL,
                 onlyContainsUserCerts      [1] BOOLEAN DEFAULT FALSE,
                 onlyContainsCACerts        [2] BOOLEAN DEFAULT FALSE,
                 onlySomeReasons            [3] ReasonFlags OPTIONAL,
                 indirectCRL                [4] BOOLEAN DEFAULT FALSE,
                 onlyContainsAttributeCerts [5] BOOLEAN DEFAULT FALSE }
        </member>
        <member name="M:org.bouncycastle.asn1.x509.IssuingDistributionPoint.#ctor(org.bouncycastle.asn1.ASN1Sequence)">
            Constructor from ASN1Sequence
        </member>
        <member name="T:org.bouncycastle.asn1.x509.KeyPurposeId">
            The KeyPurposeId object.
            <pre>
                KeyPurposeId ::= OBJECT IDENTIFIER
            </pre>
        </member>
        <member name="T:org.bouncycastle.asn1.x509.KeyUsage">
             The KeyUsage object.
             <pre>
                id-ce-keyUsage OBJECT IDENTIFIER ::=  { id-ce 15 }
            
                KeyUsage ::= BIT STRING {
                     digitalSignature        (0),
                     nonRepudiation          (1),
                     keyEncipherment         (2),
                     dataEncipherment        (3),
                     keyAgreement            (4),
                     keyCertSign             (5),
                     cRLSign                 (6),
                     encipherOnly            (7),
                     decipherOnly            (8) }
             </pre>
        </member>
        <member name="M:org.bouncycastle.asn1.x509.KeyUsage.#ctor(System.Int32)">
            Basic constructor.
            
            @param usage - the bitwise OR of the Key Usage flags giving the
            allowed uses for the key.
            e.g. (KeyUsage.keyEncipherment | KeyUsage.dataEncipherment)
        </member>
        <member name="T:org.bouncycastle.asn1.x509.NoticeReference">
             <code>NoticeReference</code> class, used in
             <code>CertificatePolicies</code> X509 V3 extensions
             (in policy qualifiers).
             
             <pre>
              NoticeReference ::= SEQUENCE {
                  organization     DisplayText,
                  noticeNumbers    SEQUENCE OF INTEGER }
            
             </pre> 
             
             @see PolicyQualifierInfo
             @see PolicyInformation
        </member>
        <member name="M:org.bouncycastle.asn1.x509.NoticeReference.#ctor(System.String,System.Collections.ArrayList)">
             Creates a new <code>NoticeReference</code> instance.
            
             @param orgName a <code>String</code> value
             @param numbers a <code>Vector</code> value
        </member>
        <member name="M:org.bouncycastle.asn1.x509.NoticeReference.#ctor(System.String,org.bouncycastle.asn1.ASN1Sequence)">
             Creates a new <code>NoticeReference</code> instance.
            
             @param orgName a <code>String</code> value
             @param numbers an <code>ASN1EncodableVector</code> value
        </member>
        <member name="M:org.bouncycastle.asn1.x509.NoticeReference.#ctor(System.Int32,System.String,org.bouncycastle.asn1.ASN1Sequence)">
             Creates a new <code>NoticeReference</code> instance.
            
             @param displayTextType an <code>int</code> value
             @param orgName a <code>String</code> value
             @param numbers an <code>ASN1EncodableVector</code> value
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:org.bouncycastle.asn1.x509.NoticeReference.#ctor(org.bouncycastle.asn1.ASN1Sequence)" -->
        <member name="M:org.bouncycastle.asn1.x509.NoticeReference.toASN1Object">
             Describe <code>toASN1Object</code> method here.
            
             @return a <code>ASN1Object</code> value
        </member>
        <member name="M:org.bouncycastle.asn1.x509.ObjectDigestInfo.toASN1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
             ObjectDigestInfo ::= SEQUENCE {
                  digestedObjectType  ENUMERATED {
                          publicKey            (0),
                          publicKeyCert        (1),
                          otherObjectTypes     (2) },
                                  -- otherObjectTypes MUST NOT
                                  -- be used in this profile
                  otherObjectTypeID   OBJECT IDENTIFIER OPTIONAL,
                  digestAlgorithm     AlgorithmIdentifier,
                  objectDigest        BIT STRING
             }
            </pre>
        </member>
        <member name="T:org.bouncycastle.asn1.x509.PolicyMappings">
             PolicyMappings V3 extension, described in RFC3280.
             <pre>
                PolicyMappings ::= SEQUENCE SIZE (1..MAX) OF SEQUENCE {
                  issuerDomainPolicy      CertPolicyId,
                  subjectDomainPolicy     CertPolicyId }
             </pre>
            
             @see <a href="http://www.faqs.org/rfc/rfc3280.txt">RFC 3280, section 4.2.1.6</a>
        </member>
        <member name="M:org.bouncycastle.asn1.x509.PolicyMappings.#ctor(org.bouncycastle.asn1.ASN1Sequence)">
             Creates a new <code>PolicyMappings</code> instance.
            
             @param seq an <code>ASN1Sequence</code> constructed as specified
             in RFC 3280
        </member>
        <member name="M:org.bouncycastle.asn1.x509.PolicyMappings.#ctor(System.Collections.Hashtable)">
             Creates a new <code>PolicyMappings</code> instance.
            
             @param mappings a <code>HashMap</code> value that maps
             <code>String</code> oids
             to other <code>String</code> oids. 
        </member>
        <member name="T:org.bouncycastle.asn1.x509.PolicyQualifierId">
            PolicyQualifierId, used in the CertificatePolicies
            X509V3 extension.
            
            <pre>
               id-qt          OBJECT IDENTIFIER ::=  { id-pkix 2 }
               id-qt-cps      OBJECT IDENTIFIER ::=  { id-qt 1 }
               id-qt-unotice  OBJECT IDENTIFIER ::=  { id-qt 2 }
             PolicyQualifierId ::=
                  OBJECT IDENTIFIER ( id-qt-cps | id-qt-unotice )
            </pre>
        </member>
        <member name="T:org.bouncycastle.asn1.x509.PolicyQualifierInfo">
            Policy qualifiers, used in the X509V3 CertificatePolicies
            extension.
            
            <pre>
              PolicyQualifierInfo ::= SEQUENCE {
                  policyQualifierId  PolicyQualifierId,
                  qualifier          ANY DEFINED BY policyQualifierId }
            </pre>
        </member>
        <member name="M:org.bouncycastle.asn1.x509.PolicyQualifierInfo.#ctor(org.bouncycastle.asn1.DERObjectIdentifier,org.bouncycastle.asn1.ASN1Encodable)">
             Creates a new <code>PolicyQualifierInfo</code> instance.
            
             @param policyQualifierId a <code>PolicyQualifierId</code> value
             @param qualifier the qualifier, defined by the above field.
        </member>
        <member name="M:org.bouncycastle.asn1.x509.PolicyQualifierInfo.#ctor(System.String)">
             Creates a new <code>PolicyQualifierInfo</code> containing a
             cPSuri qualifier.
            
             @param cps the CPS (certification practice statement) uri as a
             <code>String</code>.
        </member>
        <member name="M:org.bouncycastle.asn1.x509.PolicyQualifierInfo.#ctor(org.bouncycastle.asn1.ASN1Sequence)">
             Creates a new <code>PolicyQualifierInfo</code> instance.
            
             @param as <code>PolicyQualifierInfo</code> X509 structure
             encoded as an ASN1Sequence. 
        </member>
        <member name="M:org.bouncycastle.asn1.x509.PolicyQualifierInfo.toASN1Object">
             Returns a DER-encodable representation of this instance. 
            
             @return a <code>ASN1Object</code> value
        </member>
        <member name="T:org.bouncycastle.asn1.x509.ReasonFlags">
            The ReasonFlags object.
            <pre>
            ReasonFlags ::= BIT STRING {
               unused(0),
               keyCompromise(1),
               cACompromise(2),
               affiliationChanged(3),
               superseded(4),
               cessationOfOperation(5),
               certficateHold(6)
            }
            </pre>
        </member>
        <member name="M:org.bouncycastle.asn1.x509.ReasonFlags.#ctor(System.Int32)">
            @param reasons - the bitwise OR of the Key Reason flags giving the
            allowed uses for the key.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:org.bouncycastle.asn1.x509.RSAPublicKeyStructure.toASN1Object" -->
        <member name="T:org.bouncycastle.asn1.x509.SubjectKeyIdentifier">
            The SubjectKeyIdentifier object.
            <pre>
            SubjectKeyIdentifier::= OCTET STRING
            </pre>
        </member>
        <member name="M:org.bouncycastle.asn1.x509.SubjectKeyIdentifier.#ctor(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo)">
            
             Calulates the keyidentifier using a SHA1 hash over the BIT STRING
             from SubjectPublicKeyInfo as defined in RFC2459.
            
            
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:org.bouncycastle.asn1.x509.SubjectPublicKeyInfo" -->
        <member name="M:org.bouncycastle.asn1.x509.SubjectPublicKeyInfo.getPublicKey">
             for when the public key is an encoded object - if the bitstring
             can't be decoded this routine throws an IOException.
            
             @exception IOException - if the bit string doesn't represent a DER
             encoded object.
        </member>
        <member name="M:org.bouncycastle.asn1.x509.SubjectPublicKeyInfo.getPublicKeyData">
            for when the public key is raw bits...
        </member>
        <member name="M:org.bouncycastle.asn1.x509.SubjectPublicKeyInfo.toASN1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
            SubjectPublicKeyInfo ::= SEQUENCE {
                                     algorithm AlgorithmIdentifier,
                                     publicKey BIT STRING }
            </pre>
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:org.bouncycastle.asn1.x509.TBSCertificateStructure" -->
        <member name="T:org.bouncycastle.asn1.x509.TBSCertList">
            PKIX RFC-2459 - TBSCertList object.
            <pre>
            TBSCertList  ::=  SEQUENCE  {
                 version                 Version OPTIONAL,
                                              -- if present, shall be v2
                 signature               AlgorithmIdentifier,
                 issuer                  Name,
                 thisUpdate              Time,
                 nextUpdate              Time OPTIONAL,
                 revokedCertificates     SEQUENCE OF SEQUENCE  {
                      userCertificate         CertificateSerialNumber,
                      revocationDate          Time,
                      crlEntryExtensions      Extensions OPTIONAL
                                                    -- if present, shall be v2
                                           }  OPTIONAL,
                 crlExtensions           [0]  EXPLICIT Extensions OPTIONAL
                                                    -- if present, shall be v2
                                           }
            </pre>
        </member>
        <member name="M:org.bouncycastle.asn1.x509.Time.#ctor(System.DateTime)">
            creates a time object from a given date - if the date is between 1950
            and 2049 a UTCTime object is generated, otherwise a GeneralizedTime
            is used.
        </member>
        <member name="M:org.bouncycastle.asn1.x509.Time.toDateTime">
            <summary>
            Return our time as DateTime.
            </summary>
            <param name="time">A Time object of the asn1 lib.</param>
            <returns>A date time.</returns>
        </member>
        <member name="M:org.bouncycastle.asn1.x509.Time.toASN1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
            Time ::= CHOICE {
                        utcTime        UTCTime,
                        generalTime    GeneralizedTime }
            </pre>
        </member>
        <member name="T:org.bouncycastle.asn1.x509.UserNotice">
             <code>UserNotice</code> class, used in
             <code>CertificatePolicies</code> X509 extensions (in policy
             qualifiers).
             <pre>
             UserNotice ::= SEQUENCE {
                  noticeRef        NoticeReference OPTIONAL,
                  explicitText     DisplayText OPTIONAL}
            
             </pre>
             
             @see PolicyQualifierId
             @see PolicyInformation
        </member>
        <member name="M:org.bouncycastle.asn1.x509.UserNotice.#ctor(org.bouncycastle.asn1.x509.NoticeReference,org.bouncycastle.asn1.x509.DisplayText)">
             Creates a new <code>UserNotice</code> instance.
            
             @param noticeRef a <code>NoticeReference</code> value
             @param explicitText a <code>DisplayText</code> value
        </member>
        <member name="M:org.bouncycastle.asn1.x509.UserNotice.#ctor(org.bouncycastle.asn1.x509.NoticeReference,System.String)">
             Creates a new <code>UserNotice</code> instance.
            
             @param noticeRef a <code>NoticeReference</code> value
             @param str the explicitText field as a String. 
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:org.bouncycastle.asn1.x509.UserNotice.#ctor(org.bouncycastle.asn1.ASN1Sequence)" -->
        <member name="T:org.bouncycastle.asn1.x509.V1TBSCertificateGenerator">
             Generator for Version 1 TBSCertificateStructures.
             <pre>
             TBSCertificate ::= SEQUENCE {
                  version          [ 0 ]  Version DEFAULT v1(0),
                  serialNumber            CertificateSerialNumber,
                  signature               AlgorithmIdentifier,
                  issuer                  Name,
                  validity                Validity,
                  subject                 Name,
                  subjectPublicKeyInfo    SubjectPublicKeyInfo,
                  }
             </pre>
            
        </member>
        <member name="T:org.bouncycastle.asn1.x509.V2AttributeCertificateInfoGenerator">
             Generator for Version 2 AttributeCertificateInfo
             <pre>
             AttributeCertificateInfo ::= SEQUENCE {
                   version              AttCertVersion -- version is v2,
                   holder               Holder,
                   issuer               AttCertIssuer,
                   signature            AlgorithmIdentifier,
                   serialNumber         CertificateSerialNumber,
                   attrCertValidityPeriod   AttCertValidityPeriod,
                   attributes           SEQUENCE OF Attribute,
                   issuerUniqueID       UniqueIdentifier OPTIONAL,
                   extensions           Extensions OPTIONAL
             }
             </pre>
            
        </member>
        <member name="M:org.bouncycastle.asn1.x509.V2AttributeCertificateInfoGenerator.addAttribute(org.bouncycastle.asn1.x509.Attribute)">
            @param attribute
        </member>
        <member name="M:org.bouncycastle.asn1.x509.V2Form.toASN1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
             V2Form ::= SEQUENCE {
                  issuerName            GeneralNames  OPTIONAL,
                  baseCertificateID     [0] IssuerSerial  OPTIONAL,
                  objectDigestInfo      [1] ObjectDigestInfo  OPTIONAL
                    -- issuerName MUST be present in this profile
                    -- baseCertificateID and objectDigestInfo MUST NOT
                    -- be present in this profile
             }
            </pre>
        </member>
        <member name="T:org.bouncycastle.asn1.x509.V2TBSCertListGenerator">
             Generator for Version 2 TBSCertList structures.
             <pre>
              TBSCertList  ::=  SEQUENCE  {
                   version                 Version OPTIONAL,
                                                -- if present, shall be v2
                   signature               AlgorithmIdentifier,
                   issuer                  Name,
                   thisUpdate              Time,
                   nextUpdate              Time OPTIONAL,
                   revokedCertificates     SEQUENCE OF SEQUENCE  {
                        userCertificate         CertificateSerialNumber,
                        revocationDate          Time,
                        crlEntryExtensions      Extensions OPTIONAL
                                                      -- if present, shall be v2
                                             }  OPTIONAL,
                   crlExtensions           [0]  EXPLICIT Extensions OPTIONAL
                                                      -- if present, shall be v2
                                             }
             </pre>
            
             <b>Note: This class may be subject to change</b>
        </member>
        <member name="T:org.bouncycastle.asn1.x509.V3TBSCertificateGenerator">
             Generator for Version 3 TBSCertificateStructures.
             <pre>
             TBSCertificate ::= SEQUENCE {
                  version          [ 0 ]  Version DEFAULT v1(0),
                  serialNumber            CertificateSerialNumber,
                  signature               AlgorithmIdentifier,
                  issuer                  Name,
                  validity                Validity,
                  subject                 Name,
                  subjectPublicKeyInfo    SubjectPublicKeyInfo,
                  issuerUniqueID    [ 1 ] IMPLICIT UniqueIdentifier OPTIONAL,
                  subjectUniqueID   [ 2 ] IMPLICIT UniqueIdentifier OPTIONAL,
                  extensions        [ 3 ] Extensions OPTIONAL
                  }
             </pre>
            
        </member>
        <member name="T:org.bouncycastle.asn1.x509.X509CertificateStructure">
            an X509Certificate structure.
            <pre>
             Certificate ::= SEQUENCE {
                 tbsCertificate          TBSCertificate,
                 signatureAlgorithm      AlgorithmIdentifier,
                 signature               BIT STRING
             }
            </pre>
        </member>
        <member name="T:org.bouncycastle.asn1.x509.X509DefaultEntryConverter">
            The default converter for X509 DN entries when going from their
            string value to 
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:org.bouncycastle.asn1.x509.X509NameEntryConverter" -->
        <member name="M:org.bouncycastle.asn1.x509.X509NameEntryConverter.convertHexEncoded(System.String,System.Int32)">
            Convert an inline encoded hex string rendition of an ASN.1
            object back into its corresponding ASN.1 object.
            
            @param str the hex encoded object
            @param off the index at which the encoding starts
            @return the decoded object
        </member>
        <member name="M:org.bouncycastle.asn1.x509.X509NameEntryConverter.canBePrintable(System.String)">
            return true if the passed in String can be represented without
            loss as a PrintableString, false otherwise.
        </member>
        <member name="M:org.bouncycastle.asn1.x509.X509NameEntryConverter.canBeUTF8(System.String)">
            return true if the passed in String can be represented without
            loss as a UTF8String, false otherwise.
        </member>
        <member name="M:org.bouncycastle.asn1.x509.X509NameEntryConverter.getConvertedValue(org.bouncycastle.asn1.DERObjectIdentifier,System.String)">
            Convert the passed in String value into the appropriate ASN.1
            encoded object.
            
            @param oid the oid associated with the value in the DN.
            @param value the value of the particular DN component.
            @return the ASN.1 equivalent for the value.
        </member>
        <member name="M:org.bouncycastle.asn1.x509.X509DefaultEntryConverter.getConvertedValue(org.bouncycastle.asn1.DERObjectIdentifier,System.String)">
            Apply default coversion for the given value depending on the oid
            and the character range of the value.
            
            @param oid the object identifier for the DN entry
            @param value the value associated with it
            @return the ASN.1 equivalent for the string value.
        </member>
        <member name="T:org.bouncycastle.asn1.x509.X509Extension">
            an object for the elements in the X.509 V3 extension block.
        </member>
        <member name="F:org.bouncycastle.asn1.x509.X509Extensions.SubjectKeyIdentifier">
            Subject Key Identifier 
        </member>
        <member name="F:org.bouncycastle.asn1.x509.X509Extensions.KeyUsage">
            Key Usage 
        </member>
        <member name="F:org.bouncycastle.asn1.x509.X509Extensions.PrivateKeyUsagePeriod">
            Private Key Usage Period 
        </member>
        <member name="F:org.bouncycastle.asn1.x509.X509Extensions.SubjectAlternativeName">
            Subject Alternative Name 
        </member>
        <member name="F:org.bouncycastle.asn1.x509.X509Extensions.IssuerAlternativeName">
            Issuer Alternative Name 
        </member>
        <member name="F:org.bouncycastle.asn1.x509.X509Extensions.BasicConstraints">
            Basic Constraints 
        </member>
        <member name="F:org.bouncycastle.asn1.x509.X509Extensions.CRLNumber">
            CRL Number 
        </member>
        <member name="F:org.bouncycastle.asn1.x509.X509Extensions.ReasonCode">
            Reason code 
        </member>
        <member name="F:org.bouncycastle.asn1.x509.X509Extensions.InstructionCode">
            Hold Instruction Code 
        </member>
        <member name="F:org.bouncycastle.asn1.x509.X509Extensions.InvalidityDate">
            Invalidity Date 
        </member>
        <member name="F:org.bouncycastle.asn1.x509.X509Extensions.DeltaCRLIndicator">
            Delta CRL indicator 
        </member>
        <member name="F:org.bouncycastle.asn1.x509.X509Extensions.IssuingDistributionPoint">
            Issuing Distribution Point 
        </member>
        <member name="F:org.bouncycastle.asn1.x509.X509Extensions.CertificateIssuer">
            Certificate Issuer 
        </member>
        <member name="F:org.bouncycastle.asn1.x509.X509Extensions.NameConstraints">
            Name Constraints 
        </member>
        <member name="F:org.bouncycastle.asn1.x509.X509Extensions.CRLDistributionPoints">
            CRL Distribution Points 
        </member>
        <member name="F:org.bouncycastle.asn1.x509.X509Extensions.CertificatePolicies">
            Certificate Policies 
        </member>
        <member name="F:org.bouncycastle.asn1.x509.X509Extensions.PolicyMappings">
            Policy Mappings 
        </member>
        <member name="F:org.bouncycastle.asn1.x509.X509Extensions.AuthorityKeyIdentifier">
            Authority Key Identifier 
        </member>
        <member name="F:org.bouncycastle.asn1.x509.X509Extensions.PolicyConstraints">
            Policy Constraints 
        </member>
        <member name="F:org.bouncycastle.asn1.x509.X509Extensions.ExtendedKeyUsage">
            Extended Key Usage 
        </member>
        <member name="F:org.bouncycastle.asn1.x509.X509Extensions.InhibitAnyPolicy">
            Inhibit Any Policy
        </member>
        <member name="F:org.bouncycastle.asn1.x509.X509Extensions.AuthorityInfoAccess">
            Authority Info Access
        </member>
        <member name="M:org.bouncycastle.asn1.x509.X509Extensions.#ctor(org.bouncycastle.asn1.ASN1Sequence)">
             Constructor from ASN1Sequence.
            
             the extensions are a list of constructed sequences, either with (OID, OctetString) or (OID, Boolean, OctetString)
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:org.bouncycastle.asn1.x509.X509Extensions.#ctor(System.Collections.Hashtable)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:org.bouncycastle.asn1.x509.X509Extensions.#ctor(System.Collections.ArrayList,System.Collections.Hashtable)" -->
        <member name="M:org.bouncycastle.asn1.x509.X509Extensions.oids">
            return an Enumeration of the extension field's object ids.
        </member>
        <member name="M:org.bouncycastle.asn1.x509.X509Extensions.getExtension(org.bouncycastle.asn1.DERObjectIdentifier)">
             return the extension represented by the object identifier
             passed in.
            
             @return the extension if it's present, null otherwise.
        </member>
        <member name="F:org.bouncycastle.asn1.x509.X509Name.C">
            country code - StringType(SIZE(2))
        </member>
        <member name="F:org.bouncycastle.asn1.x509.X509Name.O">
            organization - StringType(SIZE(1..64))
        </member>
        <member name="F:org.bouncycastle.asn1.x509.X509Name.OU">
            organizational unit name - StringType(SIZE(1..64))
        </member>
        <member name="F:org.bouncycastle.asn1.x509.X509Name.T">
            Title
        </member>
        <member name="F:org.bouncycastle.asn1.x509.X509Name.CN">
            common name - StringType(SIZE(1..64))
        </member>
        <member name="F:org.bouncycastle.asn1.x509.X509Name.SN">
            device serial number name - StringType(SIZE(1..64))
        </member>
        <member name="F:org.bouncycastle.asn1.x509.X509Name.L">
            locality name - StringType(SIZE(1..64))
        </member>
        <member name="F:org.bouncycastle.asn1.x509.X509Name.ST">
            state, or province name - StringType(SIZE(1..64))
        </member>
        <member name="F:org.bouncycastle.asn1.x509.X509Name.SURNAME">
            Naming attributes of type X520name
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "F:org.bouncycastle.asn1.x509.X509Name.EmailAddress" -->
        <member name="F:org.bouncycastle.asn1.x509.X509Name.UnstructuredName">
            more from PKCS#9
        </member>
        <member name="F:org.bouncycastle.asn1.x509.X509Name.E">
            email address in Verisign certificates
        </member>
        <member name="F:org.bouncycastle.asn1.x509.X509Name.UID">
            LDAP User id.
        </member>
        <member name="F:org.bouncycastle.asn1.x509.X509Name.OIDLookUp">
            look up table translating OID values into their common symbols - this static is scheduled for deletion
        </member>
        <member name="F:org.bouncycastle.asn1.x509.X509Name.DefaultReverse">
            determines whether or not strings should be processed and printed
            from back to front.
        </member>
        <member name="F:org.bouncycastle.asn1.x509.X509Name.DefaultSymbols">
            default look up table translating OID values into their common symbols following
            the convention in RFC 2253 with a few extras
        </member>
        <member name="F:org.bouncycastle.asn1.x509.X509Name.RFC2253Symbols">
            look up table translating OID values into their common symbols following the convention in RFC 2253
            with a few extras
        </member>
        <member name="F:org.bouncycastle.asn1.x509.X509Name.SymbolLookUp">
            look up table translating string values into their OIDS -
            this static is scheduled for deletion
        </member>
        <member name="F:org.bouncycastle.asn1.x509.X509Name.DefaultLookUp">
            look up table translating common symbols into their OIDS.
        </member>
        <member name="M:org.bouncycastle.asn1.x509.X509Name.#ctor(org.bouncycastle.asn1.ASN1Sequence)">
             Constructor from ASN1Sequence
            
             the principal will be a list of constructed sets, each containing an (OID, String) pair.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:org.bouncycastle.asn1.x509.X509Name.#ctor(System.Collections.Hashtable)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:org.bouncycastle.asn1.x509.X509Name.#ctor(System.Collections.ArrayList,System.Collections.Hashtable)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:org.bouncycastle.asn1.x509.X509Name.#ctor(System.Collections.ArrayList,System.Collections.Hashtable,org.bouncycastle.asn1.x509.X509DefaultEntryConverter)" -->
        <member name="M:org.bouncycastle.asn1.x509.X509Name.#ctor(System.Collections.ArrayList,System.Collections.ArrayList)">
            Takes two vectors one of the oids and the other of the values.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:org.bouncycastle.asn1.x509.X509Name.#ctor(System.Collections.ArrayList,System.Collections.ArrayList,org.bouncycastle.asn1.x509.X509NameEntryConverter)" -->
        <member name="M:org.bouncycastle.asn1.x509.X509Name.#ctor(System.String)">
            Takes an X509 dir name as a string of the format "C=AU, ST=Victoria", or
            some such, converting it into an ordered set of name attributes.
        </member>
        <member name="M:org.bouncycastle.asn1.x509.X509Name.#ctor(System.String,org.bouncycastle.asn1.x509.X509NameEntryConverter)">
            Takes an X509 dir name as a string of the format "C=AU, ST=Victoria", or
            some such, converting it into an ordered set of name attributes with each
            string value being converted to its associated ASN.1 type using the passed
            in converter.
        </member>
        <member name="M:org.bouncycastle.asn1.x509.X509Name.#ctor(System.Boolean,System.String)">
            Takes an X509 dir name as a string of the format "C=AU, ST=Victoria", or
            some such, converting it into an ordered set of name attributes. If reverse
            is true, create the encoded version of the sequence starting from the
            last element in the string.
        </member>
        <member name="M:org.bouncycastle.asn1.x509.X509Name.#ctor(System.Boolean,System.String,org.bouncycastle.asn1.x509.X509NameEntryConverter)">
            Takes an X509 dir name as a string of the format "C=AU, ST=Victoria", or
            some such, converting it into an ordered set of name attributes with each
            string value being converted to its associated ASN.1 type using the passed
            in converter. If reverse is true the ASN.1 sequence representing the DN will
            be built by starting at the end of the string, rather than the start.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:org.bouncycastle.asn1.x509.X509Name.#ctor(System.Boolean,System.Collections.Hashtable,System.String)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:org.bouncycastle.asn1.x509.X509Name.#ctor(System.Boolean,System.Collections.Hashtable,System.String,org.bouncycastle.asn1.x509.X509NameEntryConverter)" -->
        <member name="M:org.bouncycastle.asn1.x509.X509Name.getOIDs">
            return a vector of the oids in the name, in the order they were found.
        </member>
        <member name="M:org.bouncycastle.asn1.x509.X509Name.getValues">
            return a vector of the values found in the name, in the order they
            were found.
        </member>
        <member name="M:org.bouncycastle.asn1.x509.X509Name.Equals(System.Object,System.Boolean)">
            @param inOrder if true the order of both X509 names must be the same,
            as well as the values associated with each element.
        </member>
        <member name="M:org.bouncycastle.asn1.x509.X509Name.Equals(System.Object)">
            test for equality - note: case is ignored.
        </member>
        <member name="M:org.bouncycastle.asn1.x509.X509Name.ToString(System.Boolean,System.Collections.Hashtable)">
             convert the structure to a string - if reverse is true the
             oids and values are listed out starting with the last element
             in the sequence (ala RFC 2253), otherwise the string will begin
             with the first element of the structure. If no string definition
             for the oid is found in oidSymbols the string value of the oid is
             added. Two standard symbol tables are provided DefaultSymbols, and
             RFC2253Symbols as part of this class.
            
             @param reverse if true start at the end of the sequence and work back.
             @param oidSymbols look up table strings for oids.
        </member>
        <member name="M:org.bouncycastle.asn1.x509.X509Name.getRDN(org.bouncycastle.asn1.DERObjectIdentifier)">
            <summary>
            Return the value for a given OID.
            </summary>
            <param name="ident">The oid of the entry.</param>
            <returns>The string representation of the value.</returns>
        </member>
        <member name="M:org.bouncycastle.asn1.x509.X509Name.getRDNTable">
            <summary>
            Retrieve oid and value pairs as a hashtable.
            </summary>
            <returns>Hashtable with name an value pairs.</returns>
        </member>
        <member name="M:org.bouncycastle.asn1.x509.X509Name.getOrdering">
            <summary>
            Return an array list containing the object in order.
            </summary>
            <returns>A array list.</returns>
        </member>
        <member name="T:org.bouncycastle.asn1.x509.X509NameTokenizer">
            class for breaking up an X500 Name into it's component tokens, ala
            java.util.StringTokenizer. We need this class as some of the
            lightweight Java environment don't support classes like
            StringTokenizer.
        </member>
        <member name="T:org.bouncycastle.asn1.x9.KeySpecificInfo">
            ASN.1 def for Diffie-Hellman key exchange KeySpecificInfo structure. See
            RFC 2631, or X9.42, for further details.
        </member>
        <member name="M:org.bouncycastle.asn1.x9.KeySpecificInfo.toASN1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
             KeySpecificInfo ::= SEQUENCE {
                 algorithm OBJECT IDENTIFIER,
                 counter OCTET STRING SIZE (4..4)
             }
            </pre>
        </member>
        <member name="T:org.bouncycastle.asn1.x9.OtherInfo">
            ANS.1 def for Diffie-Hellman key exchange OtherInfo structure. See
            RFC 2631, or X9.42, for further details.
        </member>
        <member name="M:org.bouncycastle.asn1.x9.OtherInfo.toASN1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
             OtherInfo ::= SEQUENCE {
                 keyInfo KeySpecificInfo,
                 partyAInfo [0] OCTET STRING OPTIONAL,
                 suppPubInfo [2] OCTET STRING
             }
            </pre>
        </member>
        <member name="T:org.bouncycastle.asn1.x9.X962NamedCurves">
            table of the current named curves defined in X.962 EC-DSA.
        </member>
        <member name="M:org.bouncycastle.asn1.x9.X962NamedCurves.getByOID(org.bouncycastle.asn1.DERObjectIdentifier)">
             return the X9ECParameters object for the named curve represented by
             the passed in object identifier. Null if the curve isn't present.
            
             @param oid an object identifier representing a named curve, if present.
        </member>
        <member name="M:org.bouncycastle.asn1.x9.X962NamedCurves.getOID(System.String)">
             return the object identifier signified by the passed in name. Null
             if there is no object identifier associated with name.
            
             @return the object identifier associated with name, if present.
        </member>
        <member name="M:org.bouncycastle.asn1.x9.X962NamedCurves.getName(org.bouncycastle.asn1.DERObjectIdentifier)">
            return the named curve name represented by the given object identifier.
        </member>
        <member name="M:org.bouncycastle.asn1.x9.X962NamedCurves.getNames">
            returns an enumeration containing the name strings for curves
            contained in this structure.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:org.bouncycastle.asn1.x9.X962Parameters.toASN1Object" -->
        <member name="T:org.bouncycastle.asn1.x9.X9Curve">
            ASN.1 def for Elliptic-Curve Curve structure. See
            X9.62, for further details.
        </member>
        <member name="M:org.bouncycastle.asn1.x9.X9Curve.toASN1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
             Curve ::= SEQUENCE {
                 a               FieldElement,
                 b               FieldElement,
                 seed            BIT STRING      OPTIONAL
             }
            </pre>
        </member>
        <member name="T:org.bouncycastle.asn1.x9.X9ECParameters">
            ASN.1 def for Elliptic-Curve ECParameters structure. See
            X9.62, for further details.
        </member>
        <member name="M:org.bouncycastle.asn1.x9.X9ECParameters.toASN1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
             ECParameters ::= SEQUENCE {
                 version         INTEGER { ecpVer1(1) } (ecpVer1),
                 fieldID         FieldID {{FieldTypes}},
                 curve           X9Curve,
                 base            X9ECPoint,
                 order           INTEGER,
                 cofactor        INTEGER OPTIONAL
             }
            </pre>
        </member>
        <member name="T:org.bouncycastle.asn1.x9.X9ECPoint">
            class for describing an ECPoint as a DER object.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:org.bouncycastle.asn1.x9.X9ECPoint.toASN1Object" -->
        <member name="T:org.bouncycastle.asn1.x9.X9FieldElement">
            class for processing an FieldElement as a DER object.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:org.bouncycastle.asn1.x9.X9FieldElement.toASN1Object" -->
        <member name="T:org.bouncycastle.asn1.x9.X9FieldID">
            ASN.1 def for Elliptic-Curve Field ID structure. See
            X9.62, for further details.
        </member>
        <member name="M:org.bouncycastle.asn1.x9.X9FieldID.toASN1Object">
            Produce a DER encoding of the following structure.
            <pre>
             FieldID ::= SEQUENCE {
                 fieldType       FIELD-ID.&amp;id({IOSet}),
                 parameters      FIELD-ID.&amp;Type({IOSet}{&#64;fieldType})
             }
            </pre>
        </member>
        <member name="F:org.bouncycastle.asn1.x9.X9ObjectIdentifiers.id_dsa_with_sha1">
            id-dsa-with-sha1 OBJECT IDENTIFIER ::=  { iso(1) member-body(2)
                  us(840) x9-57 (10040) x9cm(4) 3 }
        </member>
        <member name="T:org.bouncycastle.asn1.ASN1EncodableVector">
            the parent class for this will eventually disappear. Use this one!
        </member>
        <member name="T:org.bouncycastle.asn1.ASN1InputStream">
            a general purpose ASN.1 decoder - note: this class differs from the
            others in that it returns null after it has read the last object in
            the stream. If an ASN.1 NULL is encountered a DER/BER Null object is
            returned.
        </member>
        <member name="M:org.bouncycastle.asn1.ASN1InputStream.buildObject(System.Int32,System.Byte[])">
            build an object given its tag and a byte stream to construct it
            from.
        </member>
        <member name="M:org.bouncycastle.asn1.ASN1InputStream.readIndefiniteLengthFully">
            read a string of bytes representing an indefinite length object.
        </member>
        <member name="T:org.bouncycastle.asn1.ASN1Null">
            A NULL object.
        </member>
        <member name="M:org.bouncycastle.asn1.ASN1OctetString.getInstance(org.bouncycastle.asn1.ASN1TaggedObject,System.Boolean)">
             return an Octet string from a tagged object.
            
             @param obj the tagged object holding the object we want.
             @param explicit true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception IllegalArgumentException if the tagged object cannot
                          be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.ASN1OctetString.getInstance(System.Object)">
             return an Octet string from the given object.
            
             @param obj the object we want converted.
             @exception IllegalArgumentException if the object cannot be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.ASN1OctetString.#ctor(System.Byte[])">
            @param string the octets making up the octet string.
        </member>
        <member name="M:org.bouncycastle.asn1.ASN1Sequence.getInstance(System.Object)">
             return an ASN1Sequence from the given object.
            
             @param obj the object we want converted.
             @exception IllegalArgumentException if the object cannot be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.ASN1Sequence.getInstance(org.bouncycastle.asn1.ASN1TaggedObject,System.Boolean)">
             Return an ASN1 sequence from a tagged object. There is a special
             case here, if an object appears to have been explicitly tagged on 
             reading but we were expecting it to be implictly tagged in the 
             normal course of events it indicates that we lost the surrounding
             sequence - so we need to add it back (this will happen if the tagged
             object is a sequence that contains other sequences). If you are
             dealing with implicitly tagged sequences you really <b>should</b>
             be using this method.
            
             @param obj the tagged object.
             @param explicit true if the object is meant to be explicitly tagged,
                      false otherwise.
             @exception IllegalArgumentException if the tagged object cannot
                      be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.ASN1Sequence.getObjectAt(System.Int32)">
             return the object at the sequence postion indicated by index.
            
             @param index the sequence number (starting at zero) of the object
             @return the object at the sequence postion indicated by index.
        </member>
        <member name="M:org.bouncycastle.asn1.ASN1Sequence.size">
             return the number of objects in this sequence.
            
             @return the number of objects in this sequence.
        </member>
        <member name="M:org.bouncycastle.asn1.ASN1Set.getInstance(System.Object)">
             return an ASN1Set from the given object.
            
             @param obj the object we want converted.
             @exception IllegalArgumentException if the object cannot be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.ASN1Set.getInstance(org.bouncycastle.asn1.ASN1TaggedObject,System.Boolean)">
             Return an ASN1 set from a tagged object. There is a special
             case here, if an object appears to have been explicitly tagged on 
             reading but we were expecting it to be implictly tagged in the 
             normal course of events it indicates that we lost the surrounding
             set - so we need to add it back (this will happen if the tagged
             object is a sequence that contains other sequences). If you are
             dealing with implicitly tagged sets you really <b>should</b>
             be using this method.
            
             @param obj the tagged object.
             @param explicit true if the object is meant to be explicitly tagged
                      false otherwise.
             @exception IllegalArgumentException if the tagged object cannot
                      be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.ASN1Set.getObjectAt(System.Int32)">
             return the object at the set postion indicated by index.
            
             @param index the set number (starting at zero) of the object
             @return the object at the set postion indicated by index.
        </member>
        <member name="M:org.bouncycastle.asn1.ASN1Set.size">
             return the number of objects in this set.
            
             @return the number of objects in this set.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:org.bouncycastle.asn1.ASN1Set.lessThanOrEqual(System.Byte[],System.Byte[])" -->
        <member name="T:org.bouncycastle.asn1.ASN1TaggedObject">
            ASN.1 TaggedObject - in ASN.1 nottation this is any object proceeded by
            a [n] where n is some number - these are assume to follow the construction
            rules (as with sequences).
        </member>
        <member name="M:org.bouncycastle.asn1.ASN1TaggedObject.#ctor(System.Int32,org.bouncycastle.asn1.ASN1Encodable)">
            @param tagNo the tag number for this object.
            @param obj the tagged object.
        </member>
        <member name="M:org.bouncycastle.asn1.ASN1TaggedObject.#ctor(System.Boolean,System.Int32,org.bouncycastle.asn1.ASN1Encodable)">
            @param explicit true if the object is explicitly tagged.
            @param tagNo the tag number for this object.
            @param obj the tagged object.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:org.bouncycastle.asn1.ASN1TaggedObject.isExplicit" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:org.bouncycastle.asn1.ASN1TaggedObject.getObject" -->
        <member name="T:org.bouncycastle.asn1.BERNull">
            A BER NULL object.
        </member>
        <member name="T:org.bouncycastle.asn1.DERNull">
            A NULL object.
        </member>
        <member name="M:org.bouncycastle.asn1.DEROctetString.#ctor(System.Byte[])">
            @param string the octets making up the octet string.
        </member>
        <member name="M:org.bouncycastle.asn1.BEROctetString.toBytes(System.Collections.ArrayList)">
            convert a vector of octet strings into a single byte string
        </member>
        <member name="M:org.bouncycastle.asn1.BEROctetString.#ctor(System.Byte[])">
            @param string the octets making up the octet string.
        </member>
        <member name="M:org.bouncycastle.asn1.BEROctetString.getObjects">
            return the DER octets that make up this string.
        </member>
        <member name="M:org.bouncycastle.asn1.DERSequence.#ctor">
            create an empty sequence
        </member>
        <member name="M:org.bouncycastle.asn1.DERSequence.#ctor(org.bouncycastle.asn1.ASN1Encodable)">
            create a sequence containing one object
        </member>
        <member name="M:org.bouncycastle.asn1.DERSequence.#ctor(org.bouncycastle.asn1.ASN1EncodableVector)">
            create a sequence containing a vector of objects.
        </member>
        <member name="M:org.bouncycastle.asn1.BERSequence.#ctor">
            create an empty sequence
        </member>
        <member name="M:org.bouncycastle.asn1.BERSequence.#ctor(org.bouncycastle.asn1.ASN1Encodable)">
            create a sequence containing one object
        </member>
        <member name="M:org.bouncycastle.asn1.BERSequence.#ctor(org.bouncycastle.asn1.ASN1EncodableVector)">
            create a sequence containing a vector of objects.
        </member>
        <member name="T:org.bouncycastle.asn1.DERSet">
            A DER encoded set object
        </member>
        <member name="M:org.bouncycastle.asn1.DERSet.#ctor">
            create an empty set
        </member>
        <member name="M:org.bouncycastle.asn1.DERSet.#ctor(org.bouncycastle.asn1.ASN1Encodable)">
            @param obj - a single object that makes up the set.
        </member>
        <member name="M:org.bouncycastle.asn1.DERSet.#ctor(org.bouncycastle.asn1.ASN1EncodableVector)">
            @param v - a vector of objects making up the set.
        </member>
        <member name="M:org.bouncycastle.asn1.BERSet.#ctor">
            create an empty sequence
        </member>
        <member name="M:org.bouncycastle.asn1.BERSet.#ctor(org.bouncycastle.asn1.ASN1Encodable)">
            create a set containing one object
        </member>
        <member name="M:org.bouncycastle.asn1.BERSet.#ctor(org.bouncycastle.asn1.ASN1EncodableVector)">
            create a set containing a vector of objects.
        </member>
        <member name="T:org.bouncycastle.asn1.BERTaggedObject">
            BER TaggedObject - in ASN.1 nottation this is any object proceeded by
            a [n] where n is some number - these are assume to follow the construction
            rules (as with sequences).
        </member>
        <member name="T:org.bouncycastle.asn1.DERTaggedObject">
            DER TaggedObject - in ASN.1 nottation this is any object proceeded by
            a [n] where n is some number - these are assume to follow the construction
            rules (as with sequences).
        </member>
        <member name="M:org.bouncycastle.asn1.DERTaggedObject.#ctor(System.Int32,org.bouncycastle.asn1.ASN1Encodable)">
            @param tagNo the tag number for this object.
            @param obj the tagged object.
        </member>
        <member name="M:org.bouncycastle.asn1.DERTaggedObject.#ctor(System.Boolean,System.Int32,org.bouncycastle.asn1.ASN1Encodable)">
            @param explicit true if an explicitly tagged object.
            @param tagNo the tag number for this object.
            @param obj the tagged object.
        </member>
        <member name="M:org.bouncycastle.asn1.DERTaggedObject.#ctor(System.Int32)">
            create an implicitly tagged object that contains a zero
            length sequence.
        </member>
        <member name="M:org.bouncycastle.asn1.BERTaggedObject.#ctor(System.Int32,org.bouncycastle.asn1.ASN1Encodable)">
            @param tagNo the tag number for this object.
            @param obj the tagged object.
        </member>
        <member name="M:org.bouncycastle.asn1.BERTaggedObject.#ctor(System.Boolean,System.Int32,org.bouncycastle.asn1.ASN1Encodable)">
            @param explicit true if an explicitly tagged object.
            @param tagNo the tag number for this object.
            @param obj the tagged object.
        </member>
        <member name="M:org.bouncycastle.asn1.BERTaggedObject.#ctor(System.Int32)">
            create an implicitly tagged object that contains a zero
            length sequence.
        </member>
        <member name="T:org.bouncycastle.asn1.DERApplicationSpecific">
            Base class for an application specific object
        </member>
        <member name="T:org.bouncycastle.asn1.DERBMPString">
            DER BMPString object.
        </member>
        <member name="M:org.bouncycastle.asn1.DERBMPString.getInstance(System.Object)">
             return a BMP string from the given object.
            
             @param obj the object we want converted.
             @exception IllegalArgumentException if the object cannot be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.DERBMPString.getInstance(org.bouncycastle.asn1.ASN1TaggedObject,System.Boolean)">
             return a BMP string from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception IllegalArgumentException if the tagged object cannot
                          be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.DERBMPString.#ctor(System.Byte[])">
            basic constructor - byte encoded string.
        </member>
        <member name="M:org.bouncycastle.asn1.DERBMPString.#ctor(System.String)">
            basic constructor
        </member>
        <member name="M:org.bouncycastle.asn1.DERBoolean.getInstance(System.Object)">
             return a bool from the passed in object.
            
             @exception IllegalArgumentException if the object cannot be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.DERBoolean.getInstance(System.Boolean)">
            return a DERBoolean from the passed in boolean.
        </member>
        <member name="M:org.bouncycastle.asn1.DERBoolean.getInstance(org.bouncycastle.asn1.ASN1TaggedObject,System.Boolean)">
             return a Boolean from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicit true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception IllegalArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="T:org.bouncycastle.asn1.DERGeneralizedTime">
            Generalized time object.
        </member>
        <member name="M:org.bouncycastle.asn1.DERGeneralizedTime.getInstance(System.Object)">
             return a generalized time from the passed in object
            
             @exception IllegalArgumentException if the object cannot be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.DERGeneralizedTime.getInstance(org.bouncycastle.asn1.ASN1TaggedObject,System.Boolean)">
             return a Generalized Time object from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception IllegalArgumentException if the tagged object cannot
                           be converted.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:org.bouncycastle.asn1.DERGeneralizedTime.#ctor(System.String)" -->
        <member name="M:org.bouncycastle.asn1.DERGeneralizedTime.#ctor(System.DateTime)">
            base constructer from a local time object
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:org.bouncycastle.asn1.DERGeneralizedTime.getTime" -->
        <member name="M:org.bouncycastle.asn1.DERGeneralizedTime.toDateTime">
            <summary>
            Return our time as DateTime.
            </summary>
            <param name="time">A Time object of the asn1 lib.</param>
            <returns>A date time.</returns>
        </member>
        <member name="T:org.bouncycastle.asn1.DERNumericString">
            DER NumericString object - this is an ascii string of characters {0,1,2,3,4,5,6,7,8,9, }.
        </member>
        <member name="M:org.bouncycastle.asn1.DERNumericString.getInstance(System.Object)">
             return a Numeric string from the passed in object
            
             @exception IllegalArgumentException if the object cannot be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.DERNumericString.getInstance(org.bouncycastle.asn1.ASN1TaggedObject,System.Boolean)">
             return an Numeric string from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception IllegalArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.DERNumericString.#ctor(System.Byte[])">
            basic constructor - with bytes.
        </member>
        <member name="M:org.bouncycastle.asn1.DERNumericString.#ctor(System.String)">
            basic constructor - with string.
        </member>
        <member name="T:org.bouncycastle.asn1.DERPrintableString">
            DER PrintableString object.
        </member>
        <member name="M:org.bouncycastle.asn1.DERPrintableString.getInstance(System.Object)">
            return a printable string from the passed in object.
            
            @exception IllegalArgumentException if the object cannot be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.DERPrintableString.getInstance(org.bouncycastle.asn1.ASN1TaggedObject,System.Boolean)">
             return a Printable string from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception IllegalArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.DERPrintableString.#ctor(System.Byte[])">
            basic constructor - byte encoded string.
        </member>
        <member name="M:org.bouncycastle.asn1.DERPrintableString.#ctor(System.String)">
            basic constructor
        </member>
        <member name="T:org.bouncycastle.asn1.DERT61String">
            DER T61String (also the teletex string)
        </member>
        <member name="M:org.bouncycastle.asn1.DERT61String.getInstance(System.Object)">
             return a T61 string from the passed in object.
            
             @exception IllegalArgumentException if the object cannot be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.DERT61String.getInstance(org.bouncycastle.asn1.ASN1TaggedObject,System.Boolean)">
             return an T61 string from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception IllegalArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.DERT61String.#ctor(System.Byte[])">
            basic constructor - with bytes.
        </member>
        <member name="M:org.bouncycastle.asn1.DERT61String.#ctor(System.String)">
            basic constructor - with string.
        </member>
        <member name="T:org.bouncycastle.asn1.DERUniversalString">
            DER UniversalString object.
        </member>
        <member name="M:org.bouncycastle.asn1.DERUniversalString.getInstance(System.Object)">
             return a Universal string from the passed in object.
            
             @exception IllegalArgumentException if the object cannot be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.DERUniversalString.getInstance(org.bouncycastle.asn1.ASN1TaggedObject,System.Boolean)">
             return a Universal string from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception IllegalArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.DERUniversalString.#ctor(System.Byte[])">
            basic constructor - byte encoded string.
        </member>
        <member name="T:org.bouncycastle.asn1.DERUnknownTag">
            We insert one of these when we find a tag we don't recognise.
        </member>
        <member name="M:org.bouncycastle.asn1.DERUnknownTag.#ctor(System.Int32,System.Byte[])">
            @param tag the tag value.
            @param data the octets making up the time.
        </member>
        <member name="T:org.bouncycastle.asn1.DERUTCTime">
            UTC time object.
        </member>
        <member name="M:org.bouncycastle.asn1.DERUTCTime.getInstance(System.Object)">
             return an UTC Time from the passed in object.
            
             @exception IllegalArgumentException if the object cannot be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.DERUTCTime.getInstance(org.bouncycastle.asn1.ASN1TaggedObject,System.Boolean)">
             return an UTC Time from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception IllegalArgumentException if the tagged object cannot
                           be converted.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:org.bouncycastle.asn1.DERUTCTime.#ctor(System.String)" -->
        <member name="M:org.bouncycastle.asn1.DERUTCTime.#ctor(System.DateTime)">
            base constructer from a java.util.date object
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:org.bouncycastle.asn1.DERUTCTime.getTime" -->
        <member name="M:org.bouncycastle.asn1.DERUTCTime.toDateTime">
            <summary>
            Return our time as DateTime.
            </summary>
            <param name="time">A Time object of the asn1 lib.</param>
            <returns>A date time.</returns>
        </member>
        <member name="M:org.bouncycastle.asn1.DERUTCTime.getAdjustedTime">
            return the time as an adjusted date with a 4 digit year. This goes
            in the range of 1950 - 2049.
        </member>
        <member name="T:org.bouncycastle.asn1.DERUTF8String">
            DER UTF8String object.
        </member>
        <member name="M:org.bouncycastle.asn1.DERUTF8String.getInstance(System.Object)">
             return an UTF8 string from the passed in object.
            
             @exception IllegalArgumentException if the object cannot be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.DERUTF8String.getInstance(org.bouncycastle.asn1.ASN1TaggedObject,System.Boolean)">
             return an UTF8 string from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception IllegalArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.DERUTF8String.#ctor(System.Byte[])">
            basic constructor - byte encoded string.
        </member>
        <member name="M:org.bouncycastle.asn1.DERUTF8String.#ctor(System.String)">
            basic constructor
        </member>
        <member name="T:org.bouncycastle.asn1.DERVisibleString">
            DER VisibleString object.
        </member>
        <member name="M:org.bouncycastle.asn1.DERVisibleString.getInstance(System.Object)">
             return a Visible string from the passed in object.
            
             @exception IllegalArgumentException if the object cannot be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.DERVisibleString.getInstance(org.bouncycastle.asn1.ASN1TaggedObject,System.Boolean)">
             return a Visible string from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception IllegalArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:org.bouncycastle.asn1.DERVisibleString.#ctor(System.Byte[])">
            basic constructor - byte encoded string.
        </member>
        <member name="M:org.bouncycastle.asn1.DERVisibleString.#ctor(System.String)">
            basic constructor
        </member>
        <member name="T:org.bouncycastle.asn1.OIDTokenizer">
            class for breaking up an OID into it's component tokens, ala
            java.util.StringTokenizer. We need this class as some of the
            lightweight Java environment don't support classes like
            StringTokenizer.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:org.bouncycastle.crypto.agreement.DHAgreement" -->
        <member name="M:org.bouncycastle.crypto.agreement.DHAgreement.calculateMessage">
            calculate our initial message.
        </member>
        <member name="M:org.bouncycastle.crypto.agreement.DHAgreement.calculateAgreement(org.bouncycastle.crypto.parameters.DHPublicKeyParameters,org.bouncycastle.math.BigInteger)">
            given a message from a given party and the coresponding public key
            calculate the next message in the agreement sequence. In this case
            this will represent the shared secret.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:org.bouncycastle.crypto.agreement.DHBasicAgreement" -->
        <member name="T:org.bouncycastle.crypto.BasicAgreement">
            The basic interface that basic Diffie-Hellman implementations
            conforms to.
        </member>
        <member name="M:org.bouncycastle.crypto.BasicAgreement.init(org.bouncycastle.crypto.CipherParameters)">
            initialise the agreement engine.
        </member>
        <member name="M:org.bouncycastle.crypto.BasicAgreement.calculateAgreement(org.bouncycastle.crypto.CipherParameters)">
            given a public key from a given party calculate the next
            message in the agreement sequence. 
        </member>
        <member name="M:org.bouncycastle.crypto.agreement.DHBasicAgreement.calculateAgreement(org.bouncycastle.crypto.CipherParameters)">
            given a short term public key from a given party calculate the next
            message in the agreement sequence. 
        </member>
        <member name="T:org.bouncycastle.crypto.agreement.ECDHBasicAgreement">
             P1363 7.2.1 ECSVDP-DH
            
             ECSVDP-DH is Elliptic Curve Secret Value Derivation Primitive,
             Diffie-Hellman version. It is based on the work of [DH76], [Mil86],
             and [Kob87]. This primitive derives a shared secret value from one
             party's private key and another party's public key, where both have
             the same set of EC domain parameters. If two parties correctly
             execute this primitive, they will produce the same output. This
             primitive can be invoked by a scheme to derive a shared secret key;
             specifically, it may be used with the schemes ECKAS-DH1 and
             DL/ECKAS-DH2. It assumes that the input keys are valid (see also
             Section 7.2.2).
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:org.bouncycastle.crypto.agreement.ECDHCBasicAgreement" -->
        <member name="T:org.bouncycastle.crypto.digests.GeneralDigest">
            base implementation of MD4 family style digest as outlined in
            "Handbook of Applied Cryptography", pages 344 - 347.
        </member>
        <member name="T:org.bouncycastle.crypto.Digest">
            interface that a message digest conforms to.
        </member>
        <member name="M:org.bouncycastle.crypto.Digest.getAlgorithmName">
             return the algorithm name
            
             @return the algorithm name
        </member>
        <member name="M:org.bouncycastle.crypto.Digest.getDigestSize">
             return the size, in bytes, of the digest produced by this message digest.
            
             @return the size, in bytes, of the digest produced by this message digest.
        </member>
        <member name="M:org.bouncycastle.crypto.Digest.update(System.Byte)">
             update the message digest with a single byte.
            
             @param inByte the input byte to be entered.
        </member>
        <member name="M:org.bouncycastle.crypto.Digest.update(System.Byte[],System.Int32,System.Int32)">
             update the message digest with a block of bytes.
            
             @param inBytes the byte array containing the data.
             @param inOff the offset into the byte array where the data starts.
             @param len the length of the data.
        </member>
        <member name="M:org.bouncycastle.crypto.Digest.doFinal(System.Byte[],System.Int32)">
             close the digest, producing the final digest value. The doFinal
             call leaves the digest reset.
            
             @param outBytes the array the digest is to be copied into.
             @param outOff the offset into the out array the digest is to start at.
        </member>
        <member name="M:org.bouncycastle.crypto.Digest.reset">
            reset the digest back to it's initial state.
        </member>
        <member name="T:org.bouncycastle.crypto.digests.LongDigest">
            Base class for SHA-384 and SHA-512.
        </member>
        <member name="M:org.bouncycastle.crypto.digests.LongDigest.#ctor">
            Constructor for variable length word
        </member>
        <member name="M:org.bouncycastle.crypto.digests.LongDigest.#ctor(org.bouncycastle.crypto.digests.LongDigest)">
            Copy constructor.  We are using copy constructors in place
            of the Object.clone() interface as this interface is not
            supported by J2ME.
        </member>
        <member name="M:org.bouncycastle.crypto.digests.LongDigest.adjustByteCounts">
            adjust the byte counts so that byteCount2 represents the
            upper long (less 3 bits) word of the byte count.
        </member>
        <member name="T:org.bouncycastle.crypto.digests.MD2Digest">
            implementation of MD2
            as outlined in RFC1319 by B.Kaliski from RSA Laboratories April 1992
        </member>
        <member name="M:org.bouncycastle.crypto.digests.MD2Digest.getAlgorithmName">
             return the algorithm name
            
             @return the algorithm name
        </member>
        <member name="M:org.bouncycastle.crypto.digests.MD2Digest.getDigestSize">
             return the size, in bytes, of the digest produced by this message digest.
            
             @return the size, in bytes, of the digest produced by this message digest.
        </member>
        <member name="M:org.bouncycastle.crypto.digests.MD2Digest.doFinal(System.Byte[],System.Int32)">
             close the digest, producing the final digest value. The doFinal
             call leaves the digest reset.
            
             @param out the array the digest is to be copied into.
             @param outOff the offset into the out array the digest is to start at.
        </member>
        <member name="M:org.bouncycastle.crypto.digests.MD2Digest.reset">
            reset the digest back to it's initial state.
        </member>
        <member name="M:org.bouncycastle.crypto.digests.MD2Digest.update(System.Byte)">
             update the message digest with a single byte.
            
             @param in the input byte to be entered.
        </member>
        <member name="M:org.bouncycastle.crypto.digests.MD2Digest.update(System.Byte[],System.Int32,System.Int32)">
             update the message digest with a block of bytes.
            
             @param in the byte array containing the data.
             @param inOff the offset into the byte array where the data starts.
             @param len the length of the data.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:org.bouncycastle.crypto.digests.MD4Digest" -->
        <member name="M:org.bouncycastle.crypto.digests.MD4Digest.#ctor">
            Standard constructor
        </member>
        <member name="M:org.bouncycastle.crypto.digests.MD4Digest.#ctor(org.bouncycastle.crypto.digests.MD4Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:org.bouncycastle.crypto.digests.MD4Digest.reset">
            reset the chaining variables to the IV values.
        </member>
        <member name="T:org.bouncycastle.crypto.digests.MD5Digest">
            implementation of MD5 as outlined in "Handbook of Applied Cryptography", pages 346 - 347.
        </member>
        <member name="M:org.bouncycastle.crypto.digests.MD5Digest.#ctor(org.bouncycastle.crypto.digests.MD5Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:org.bouncycastle.crypto.digests.MD5Digest.reset">
            reset the chaining variables to the IV values.
        </member>
        <member name="T:org.bouncycastle.crypto.digests.RIPEMD128Digest">
            implementation of RIPEMD128
        </member>
        <member name="M:org.bouncycastle.crypto.digests.RIPEMD128Digest.#ctor">
            Standard constructor
        </member>
        <member name="M:org.bouncycastle.crypto.digests.RIPEMD128Digest.#ctor(org.bouncycastle.crypto.digests.RIPEMD128Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:org.bouncycastle.crypto.digests.RIPEMD128Digest.reset">
            reset the chaining variables to the IV values.
        </member>
        <member name="T:org.bouncycastle.crypto.digests.RIPEMD160Digest">
            implementation of RIPEMD see,
            http://www.esat.kuleuven.ac.be/~bosselae/ripemd160.html
        </member>
        <member name="M:org.bouncycastle.crypto.digests.RIPEMD160Digest.#ctor">
            Standard constructor
        </member>
        <member name="M:org.bouncycastle.crypto.digests.RIPEMD160Digest.#ctor(org.bouncycastle.crypto.digests.RIPEMD160Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:org.bouncycastle.crypto.digests.RIPEMD160Digest.reset">
            reset the chaining variables to the IV values.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:org.bouncycastle.crypto.digests.RIPEMD256Digest" -->
        <member name="M:org.bouncycastle.crypto.digests.RIPEMD256Digest.#ctor">
            <summary> Standard constructor</summary>
        </member>
        <member name="M:org.bouncycastle.crypto.digests.RIPEMD256Digest.#ctor(org.bouncycastle.crypto.digests.RIPEMD256Digest)">
            <summary> Copy constructor.  This will copy the state of the provided
            message digest.
            </summary>
        </member>
        <member name="M:org.bouncycastle.crypto.digests.RIPEMD256Digest.reset">
            <summary> reset the chaining variables to the IV values.</summary>
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:org.bouncycastle.crypto.digests.RIPEMD320Digest" -->
        <member name="M:org.bouncycastle.crypto.digests.RIPEMD320Digest.#ctor">
            <summary> Standard constructor</summary>
        </member>
        <member name="M:org.bouncycastle.crypto.digests.RIPEMD320Digest.#ctor(org.bouncycastle.crypto.digests.RIPEMD320Digest)">
            <summary> Copy constructor.  This will copy the state of the provided
            message digest.
            </summary>
        </member>
        <member name="M:org.bouncycastle.crypto.digests.RIPEMD320Digest.reset">
            <summary> reset the chaining variables to the IV values.</summary>
        </member>
        <member name="T:org.bouncycastle.crypto.digests.SHA1Digest">
             implementation of SHA-1 as outlined in "Handbook of Applied Cryptography", pages 346 - 349.
            
             It is interesting to ponder why the, apart from the extra IV, the other difference here from MD5
             is the "endienness" of the word processing!
        </member>
        <member name="M:org.bouncycastle.crypto.digests.SHA1Digest.#ctor(org.bouncycastle.crypto.digests.SHA1Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:org.bouncycastle.crypto.digests.SHA1Digest.reset">
            reset the chaining variables
        </member>
        <member name="T:org.bouncycastle.crypto.digests.SHA224Digest">
            SHA-224 as described in RFC 3874
            <pre>
                    block  word  digest
            SHA-1   512    32    160
            SHA-224 512    32    224
            SHA-256 512    32    256
            SHA-384 1024   64    384
            SHA-512 1024   64    512
            </pre>
        </member>
        <member name="M:org.bouncycastle.crypto.digests.SHA224Digest.#ctor">
            Standard constructor
        </member>
        <member name="M:org.bouncycastle.crypto.digests.SHA224Digest.#ctor(org.bouncycastle.crypto.digests.SHA224Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:org.bouncycastle.crypto.digests.SHA224Digest.reset">
            reset the chaining variables
        </member>
        <member name="T:org.bouncycastle.crypto.digests.SHA256Digest">
             Draft FIPS 180-2 implementation of SHA-256. <b>Note:</b> As this is
             based on a draft this implementation is subject to change.
            
             <pre>
                     block  word  digest
             SHA-1   512    32    160
             SHA-256 512    32    256
             SHA-384 1024   64    384
             SHA-512 1024   64    512
             </pre>
        </member>
        <member name="M:org.bouncycastle.crypto.digests.SHA256Digest.#ctor(org.bouncycastle.crypto.digests.SHA256Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:org.bouncycastle.crypto.digests.SHA256Digest.reset">
            reset the chaining variables
        </member>
        <member name="T:org.bouncycastle.crypto.digests.SHA384Digest">
             Draft FIPS 180-2 implementation of SHA-384. <b>Note:</b> As this is
             based on a draft this implementation is subject to change.
            
             <pre>
                     block  word  digest
             SHA-1   512    32    160
             SHA-256 512    32    256
             SHA-384 1024   64    384
             SHA-512 1024   64    512
             </pre>
        </member>
        <member name="M:org.bouncycastle.crypto.digests.SHA384Digest.#ctor(org.bouncycastle.crypto.digests.SHA384Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:org.bouncycastle.crypto.digests.SHA384Digest.reset">
            reset the chaining variables
        </member>
        <member name="T:org.bouncycastle.crypto.digests.SHA512Digest">
             Draft FIPS 180-2 implementation of SHA-512. <b>Note:</b> As this is
             based on a draft this implementation is subject to change.
            
             <pre>
                     block  word  digest
             SHA-1   512    32    160
             SHA-256 512    32    256
             SHA-384 1024   64    384
             SHA-512 1024   64    512
             </pre>
        </member>
        <member name="M:org.bouncycastle.crypto.digests.SHA512Digest.#ctor(org.bouncycastle.crypto.digests.SHA512Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:org.bouncycastle.crypto.digests.SHA512Digest.reset">
            reset the chaining variables
        </member>
        <member name="T:org.bouncycastle.crypto.digests.TigerDigest">
            implementation of Tiger based on:
            <a href="http://www.cs.technion.ac.il/~biham/Reports/Tiger">
             http://www.cs.technion.ac.il/~biham/Reports/Tiger</a>
        </member>
        <member name="M:org.bouncycastle.crypto.digests.TigerDigest.#ctor">
            Standard constructor
        </member>
        <member name="M:org.bouncycastle.crypto.digests.TigerDigest.#ctor(org.bouncycastle.crypto.digests.TigerDigest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:org.bouncycastle.crypto.digests.TigerDigest.reset">
            reset the chaining variables
        </member>
        <member name="T:org.bouncycastle.crypto.encodings.ISO9796d1Encoding">
            ISO 9796-1 padding. Note in the light of recent results you should
            only use this with RSA (rather than the "simpler" Rabin keys) and you
            should never use it with anything other than a hash (ie. even if the 
            message is small don't sign the message, sign it's hash) or some "random"
            value. See your favorite search engine for details.
        </member>
        <member name="T:org.bouncycastle.crypto.AsymmetricBlockCipher">
            base interface that a public/private key block cipher needs
            to conform to.
        </member>
        <member name="M:org.bouncycastle.crypto.AsymmetricBlockCipher.init(System.Boolean,org.bouncycastle.crypto.CipherParameters)">
             initialise the cipher.
            
             @param forEncryption if true the cipher is initialised for 
              encryption, if false for decryption.
             @param param the key and other data required by the cipher.
        </member>
        <member name="M:org.bouncycastle.crypto.AsymmetricBlockCipher.getInputBlockSize">
             returns the largest size an input block can be.
            
             @return maximum size for an input block.
        </member>
        <member name="M:org.bouncycastle.crypto.AsymmetricBlockCipher.getOutputBlockSize">
             returns the maximum size of the block produced by this cipher.
            
             @return maximum size of the output block produced by the cipher.
        </member>
        <member name="M:org.bouncycastle.crypto.AsymmetricBlockCipher.processBlock(System.Byte[],System.Int32,System.Int32)">
             process the block of len bytes stored in in from offset inOff.
            
             @param in the input data
             @param inOff offset into the in array where the data starts
             @param len the length of the block to be processed.
             @return the resulting byte array of the encryption/decryption process.
             @exception InvalidCipherTextException data decrypts improperly.
             @exception DataLengthException the input data is too large for the cipher.
        </member>
        <member name="M:org.bouncycastle.crypto.encodings.ISO9796d1Encoding.getInputBlockSize">
            return the input block size. The largest message we can process
            is (key_size_in_bits + 3)/16, which in our world comes to 
            key_size_in_bytes / 2.
        </member>
        <member name="M:org.bouncycastle.crypto.encodings.ISO9796d1Encoding.getOutputBlockSize">
            return the maximum possible size for the output.
        </member>
        <member name="M:org.bouncycastle.crypto.encodings.ISO9796d1Encoding.setPadBits(System.Int32)">
            set the number of bits in the next message to be treated as 
            pad bits.
        </member>
        <member name="M:org.bouncycastle.crypto.encodings.ISO9796d1Encoding.getPadBits">
            retrieve the number of pad bits in the last decoded message.
        </member>
        <member name="M:org.bouncycastle.crypto.encodings.ISO9796d1Encoding.decodeBlock(System.Byte[],System.Int32,System.Int32)">
            @exception InvalidCipherTextException if the decrypted block is not a valid ISO 9796 bit string
        </member>
        <member name="T:org.bouncycastle.crypto.encodings.OAEPEncoding">
            Optimal Asymmetric Encryption Padding (OAEP) - see PKCS 1 V 2.
        </member>
        <member name="F:org.bouncycastle.crypto.encodings.OAEPEncoding.defHash">
            by default the encoding parameters for OAEP padding are the empty
            string - rather than have to create a hash and perform the calculation,
            this is the output string for a SHA1 hash when given an empty string
        </member>
        <member name="M:org.bouncycastle.crypto.encodings.OAEPEncoding.decodeBlock(System.Byte[],System.Int32,System.Int32)">
            @exception InvalidCipherTextException if the decryypted block turns out to
            be badly formatted.
        </member>
        <member name="M:org.bouncycastle.crypto.encodings.OAEPEncoding.ItoOSP(System.Int32,System.Byte[])">
            int to octet string.
        </member>
        <member name="M:org.bouncycastle.crypto.encodings.OAEPEncoding.maskGeneratorFunction1(System.Byte[],System.Int32,System.Int32,System.Int32)">
            mask generator function, as described in PKCS1v2.
        </member>
        <member name="T:org.bouncycastle.crypto.encodings.PKCS1Encoding">
            this does your basic PKCS 1 v1.5 padding - whether or not you should be using this
            depends on your application - see PKCS1 Version 2 for details.
        </member>
        <member name="M:org.bouncycastle.crypto.encodings.PKCS1Encoding.decodeBlock(System.Byte[],System.Int32,System.Int32)">
            @exception InvalidCipherTextException if the decrypted block is not in PKCS1 format.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:org.bouncycastle.crypto.engines.AESEngine" -->
        <member name="T:org.bouncycastle.crypto.BlockCipher">
            Block cipher engines are expected to conform to this interface.
        </member>
        <member name="M:org.bouncycastle.crypto.BlockCipher.init(System.Boolean,org.bouncycastle.crypto.CipherParameters)">
             Initialise the cipher.
            
             @param forEncryption if true the cipher is initialised for
              encryption, if false for decryption.
             @param param the key and other data required by the cipher.
             @exception IllegalArgumentException if the params argument is
             inappropriate.
        </member>
        <member name="M:org.bouncycastle.crypto.BlockCipher.getAlgorithmName">
             Return the name of the algorithm the cipher implements.
            
             @return the name of the algorithm the cipher implements.
        </member>
        <member name="M:org.bouncycastle.crypto.BlockCipher.getBlockSize">
             Return the block size for this cipher (in bytes).
            
             @return the block size for this cipher in bytes.
        </member>
        <member name="M:org.bouncycastle.crypto.BlockCipher.processBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Process one block of input from the array in and write it to
             the out array.
            
             @param in the array containing the input data.
             @param inOff offset into the in array the data starts at.
             @param out the array the output data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception IllegalStateException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="M:org.bouncycastle.crypto.BlockCipher.reset">
            Reset the cipher. After resetting the cipher is in the same state
            as it was after the last init (if there was one).
        </member>
        <member name="M:org.bouncycastle.crypto.engines.AESEngine.generateWorkingKey(System.Byte[],System.Boolean)">
            Calculate the necessary round keys
            The number of calculations depends on key size and block size
            AES specified a fixed block size of 128 bits and key sizes 128/192/256 bits
            This code is written assuming those are the only possible values
        </member>
        <member name="M:org.bouncycastle.crypto.engines.AESEngine.#ctor">
            default constructor - 128 bit block size.
        </member>
        <member name="M:org.bouncycastle.crypto.engines.AESEngine.init(System.Boolean,org.bouncycastle.crypto.CipherParameters)">
             initialise an AES cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param params the parameters required to set up the cipher.
             @exception IllegalArgumentException if the params argument is
             inappropriate.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:org.bouncycastle.crypto.engines.AESFastEngine" -->
        <member name="M:org.bouncycastle.crypto.engines.AESFastEngine.generateWorkingKey(System.Byte[],System.Boolean)">
            Calculate the necessary round keys
            The number of calculations depends on key size and block size
            AES specified a fixed block size of 128 bits and key sizes 128/192/256 bits
            This code is written assuming those are the only possible values
        </member>
        <member name="M:org.bouncycastle.crypto.engines.AESFastEngine.#ctor">
            default constructor - 128 bit block size.
        </member>
        <member name="M:org.bouncycastle.crypto.engines.AESFastEngine.init(System.Boolean,org.bouncycastle.crypto.CipherParameters)">
             initialise an AES cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param params the parameters required to set up the cipher.
             @exception IllegalArgumentException if the params argument is
             inappropriate.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:org.bouncycastle.crypto.engines.AESLightEngine" -->
        <member name="M:org.bouncycastle.crypto.engines.AESLightEngine.generateWorkingKey(System.Byte[],System.Boolean)">
            Calculate the necessary round keys
            The number of calculations depends on key size and block size
            AES specified a fixed block size of 128 bits and key sizes 128/192/256 bits
            This code is written assuming those are the only possible values
        </member>
        <member name="M:org.bouncycastle.crypto.engines.AESLightEngine.#ctor">
            default constructor - 128 bit block size.
        </member>
        <member name="M:org.bouncycastle.crypto.engines.AESLightEngine.init(System.Boolean,org.bouncycastle.crypto.CipherParameters)">
             initialise an AES cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param params the parameters required to set up the cipher.
             @exception IllegalArgumentException if the params argument is
             inappropriate.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:org.bouncycastle.crypto.engines.AESWrapEngine" -->
        <member name="M:org.bouncycastle.crypto.Wrapper.getAlgorithmName">
             Return the name of the algorithm the wrapper implements.
            
             @return the name of the algorithm the wrapper implements.
        </member>
        <member name="T:org.bouncycastle.crypto.engines.BlowfishEngine">
            A class that provides Blowfish key encryption operations,
            such as encoding data and generating keys.
            All the algorithms herein are from Applied Cryptography
            and implement a simplified cryptography interface.
        </member>
        <member name="M:org.bouncycastle.crypto.engines.BlowfishEngine.init(System.Boolean,org.bouncycastle.crypto.CipherParameters)">
             initialise a Blowfish cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param params the parameters required to set up the cipher.
             @exception IllegalArgumentException if the params argument is
             inappropriate.
        </member>
        <member name="M:org.bouncycastle.crypto.engines.BlowfishEngine.processTable(System.Int32,System.Int32,System.Int32[])">
            apply the encryption cycle to each value pair in the table.
        </member>
        <member name="M:org.bouncycastle.crypto.engines.BlowfishEngine.encryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
            Encrypt the given input starting at the given offset and place
            the result in the provided buffer starting at the given offset.
            The input will be an exact multiple of our blocksize.
        </member>
        <member name="M:org.bouncycastle.crypto.engines.BlowfishEngine.decryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
            Decrypt the given input starting at the given offset and place
            the result in the provided buffer starting at the given offset.
            The input will be an exact multiple of our blocksize.
        </member>
        <member name="T:org.bouncycastle.crypto.engines.CAST5Engine">
             A class that provides CAST key encryption operations,
             such as encoding data and generating keys.
            
             All the algorithms herein are from the Internet RFC's
            
             RFC2144 - CAST5 (64bit block, 40-128bit key)
             RFC2612 - CAST6 (128bit block, 128-256bit key)
            
             and implement a simplified cryptography interface.
        </member>
        <member name="M:org.bouncycastle.crypto.engines.CAST5Engine.init(System.Boolean,org.bouncycastle.crypto.CipherParameters)">
             initialise a CAST cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param params the parameters required to set up the cipher.
             @exception IllegalArgumentException if the params argument is
             inappropriate.
        </member>
        <member name="M:org.bouncycastle.crypto.engines.CAST5Engine.encryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Encrypt the given input starting at the given offset and place
             the result in the provided buffer starting at the given offset.
            
             @param src		The plaintext buffer
             @param srcIndex	An offset into src
             @param dst		The ciphertext buffer
             @param dstIndex	An offset into dst
        </member>
        <member name="M:org.bouncycastle.crypto.engines.CAST5Engine.decryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Decrypt the given input starting at the given offset and place
             the result in the provided buffer starting at the given offset.
            
             @param src		The plaintext buffer
             @param srcIndex	An offset into src
             @param dst		The ciphertext buffer
             @param dstIndex	An offset into dst
        </member>
        <member name="M:org.bouncycastle.crypto.engines.CAST5Engine.F1(System.Int32,System.Int32,System.Int32)">
             The first of the three processing functions for the
             encryption and decryption.
            
             @param D			the input to be processed
             @param Kmi		the mask to be used from Km[n]
             @param Kri		the rotation value to be used
            
        </member>
        <member name="M:org.bouncycastle.crypto.engines.CAST5Engine.F2(System.Int32,System.Int32,System.Int32)">
             The second of the three processing functions for the
             encryption and decryption.
            
             @param D			the input to be processed
             @param Kmi		the mask to be used from Km[n]
             @param Kri		the rotation value to be used
            
        </member>
        <member name="M:org.bouncycastle.crypto.engines.CAST5Engine.F3(System.Int32,System.Int32,System.Int32)">
             The third of the three processing functions for the
             encryption and decryption.
            
             @param D			the input to be processed
             @param Kmi		the mask to be used from Km[n]
             @param Kri		the rotation value to be used
            
        </member>
        <member name="M:org.bouncycastle.crypto.engines.CAST5Engine.CAST_Encipher(System.Int32,System.Int32,System.Int32[])">
            Does the 16 rounds to encrypt the block.
            
            @param L0	the LH-32bits of the plaintext block
            @param R0	the RH-32bits of the plaintext block
        </member>
        <member name="T:org.bouncycastle.crypto.engines.CAST6Engine">
             A class that provides CAST6 key encryption operations,
             such as encoding data and generating keys.
            
             All the algorithms herein are from the Internet RFC
            
             RFC2612 - CAST6 (128bit block, 128-256bit key)
            
             and implement a simplified cryptography interface.
        </member>
        <member name="M:org.bouncycastle.crypto.engines.CAST6Engine.encryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Encrypt the given input starting at the given offset and place
             the result in the provided buffer starting at the given offset.
            
             @param src		The plaintext buffer
             @param srcIndex	An offset into src
             @param dst		The ciphertext buffer
             @param dstIndex	An offset into dst
        </member>
        <member name="M:org.bouncycastle.crypto.engines.CAST6Engine.decryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Decrypt the given input starting at the given offset and place
             the result in the provided buffer starting at the given offset.
            
             @param src		The plaintext buffer
             @param srcIndex	An offset into src
             @param dst		The ciphertext buffer
             @param dstIndex	An offset into dst
        </member>
        <member name="M:org.bouncycastle.crypto.engines.CAST6Engine.CAST_Encipher(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[])">
            Does the 12 quad rounds rounds to encrypt the block.
            
            @param A	the 00-31  bits of the plaintext block
            @param B	the 32-63  bits of the plaintext block
            @param C	the 64-95  bits of the plaintext block
            @param D	the 96-127 bits of the plaintext block
            @param result the resulting ciphertext
        </member>
        <member name="M:org.bouncycastle.crypto.engines.CAST6Engine.CAST_Decipher(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[])">
            Does the 12 quad rounds rounds to decrypt the block.
            
            @param A	the 00-31  bits of the ciphertext block
            @param B	the 32-63  bits of the ciphertext block
            @param C	the 64-95  bits of the ciphertext block
            @param D	the 96-127 bits of the ciphertext block
            @param result the resulting plaintext
        </member>
        <member name="T:org.bouncycastle.crypto.engines.DESedeEngine">
            a class that provides a basic DESede (or Triple DES) engine.
        </member>
        <member name="T:org.bouncycastle.crypto.engines.DESEngine">
            a class that provides a basic DES engine.
        </member>
        <member name="M:org.bouncycastle.crypto.engines.DESEngine.#ctor">
            standard constructor.
        </member>
        <member name="M:org.bouncycastle.crypto.engines.DESEngine.init(System.Boolean,org.bouncycastle.crypto.CipherParameters)">
             initialise a DES cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param params the parameters required to set up the cipher.
             @exception IllegalArgumentException if the params argument is
             inappropriate.
        </member>
        <member name="F:org.bouncycastle.crypto.engines.DESEngine.Df_Key">
            what follows is mainly taken from "Applied Cryptography", by
            Bruce Schneier, however it also bears great resemblance to Richard
            Outerbridge's D3DES...
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:org.bouncycastle.crypto.engines.DESEngine.generateWorkingKey(System.Boolean,System.Byte[])" -->
        <member name="M:org.bouncycastle.crypto.engines.DESEngine.desFunc(System.Int32[],System.Byte[],System.Int32,System.Byte[],System.Int32)">
            the DES engine.
        </member>
        <member name="M:org.bouncycastle.crypto.engines.DESedeEngine.#ctor">
            standard constructor.
        </member>
        <member name="M:org.bouncycastle.crypto.engines.DESedeEngine.init(System.Boolean,org.bouncycastle.crypto.CipherParameters)">
             initialise a DESede cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param params the parameters required to set up the cipher.
             @exception IllegalArgumentException if the params argument is
             inappropriate.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:org.bouncycastle.crypto.engines.DESedeWrapEngine" -->
        <member name="F:org.bouncycastle.crypto.engines.DESedeWrapEngine.engine">
            Field engine 
        </member>
        <member name="F:org.bouncycastle.crypto.engines.DESedeWrapEngine.param">
            Field param 
        </member>
        <member name="F:org.bouncycastle.crypto.engines.DESedeWrapEngine.paramPlusIV">
            Field paramPlusIV 
        </member>
        <member name="F:org.bouncycastle.crypto.engines.DESedeWrapEngine.iv">
            Field iv 
        </member>
        <member name="F:org.bouncycastle.crypto.engines.DESedeWrapEngine.forWrapping">
            Field forWrapping 
        </member>
        <member name="F:org.bouncycastle.crypto.engines.DESedeWrapEngine.IV2">
            Field IV2           
        </member>
        <member name="M:org.bouncycastle.crypto.engines.DESedeWrapEngine.init(System.Boolean,org.bouncycastle.crypto.CipherParameters)">
             Method init
            
             @param forWrapping
             @param param
        </member>
        <member name="M:org.bouncycastle.crypto.engines.DESedeWrapEngine.getAlgorithmName">
             Method getAlgorithmName
            
             @return
        </member>
        <member name="M:org.bouncycastle.crypto.engines.DESedeWrapEngine.wrap(System.Byte[],System.Int32,System.Int32)">
             Method wrap
            
             @param in
             @param inOff
             @param inLen
             @return
        </member>
        <member name="M:org.bouncycastle.crypto.engines.DESedeWrapEngine.unwrap(System.Byte[],System.Int32,System.Int32)">
             Method unwrap
            
             @param in
             @param inOff
             @param inLen
             @return
             @throws InvalidCipherTextException
        </member>
        <member name="M:org.bouncycastle.crypto.engines.DESedeWrapEngine.calculateCMSKeyChecksum(System.Byte[])">
             Some key wrap algorithms make use of the Key Checksum defined
             in CMS [CMS-Algorithms]. This is used to provide an integrity
             check value for the key being wrapped. The algorithm is
            
             - Compute the 20 octet SHA-1 hash on the key being wrapped.
             - Use the first 8 octets of this hash as the checksum value.
            
             @param key
             @return
             @throws RuntimeException
             @see http://www.w3.org/TR/xmlenc-core/#sec-CMSKeyChecksum
        </member>
        <member name="M:org.bouncycastle.crypto.engines.DESedeWrapEngine.checkCMSKeyChecksum(System.Byte[],System.Byte[])">
            @param key
            @param checksum
            @return
            @see http://www.w3.org/TR/xmlenc-core/#sec-CMSKeyChecksum
        </member>
        <member name="T:org.bouncycastle.crypto.engines.ElGamalEngine">
            this does your basic ElGamal algorithm.
        </member>
        <member name="M:org.bouncycastle.crypto.engines.ElGamalEngine.init(System.Boolean,org.bouncycastle.crypto.CipherParameters)">
             initialise the ElGamal engine.
            
             @param forEncryption true if we are encrypting, false otherwise.
             @param param the necessary ElGamal key parameters.
        </member>
        <member name="M:org.bouncycastle.crypto.engines.ElGamalEngine.getInputBlockSize">
             Return the maximum size for an input block to this engine.
             For ElGamal this is always one byte less than the size of P on
             encryption, and twice the length as the size of P on decryption.
            
             @return maximum size for an input block.
        </member>
        <member name="M:org.bouncycastle.crypto.engines.ElGamalEngine.getOutputBlockSize">
             Return the maximum size for an output block to this engine.
             For ElGamal this is always one byte less than the size of P on
             decryption, and twice the length as the size of P on encryption.
            
             @return maximum size for an output block.
        </member>
        <member name="M:org.bouncycastle.crypto.engines.ElGamalEngine.processBlock(System.Byte[],System.Int32,System.Int32)">
             Process a single block using the basic ElGamal algorithm.
            
             @param in the input array.
             @param inOff the offset into the input buffer where the data starts.
             @param inLen the length of the data to be processed.
             @return the result of the ElGamal process.
             @exception DataLengthException the input block is too large.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:org.bouncycastle.crypto.engines.IDEAEngine" -->
        <member name="M:org.bouncycastle.crypto.engines.IDEAEngine.#ctor">
            standard constructor.
        </member>
        <member name="M:org.bouncycastle.crypto.engines.IDEAEngine.init(System.Boolean,org.bouncycastle.crypto.CipherParameters)">
             initialise an IDEA cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param params the parameters required to set up the cipher.
             @exception ArgumentException if the params argument is
             inappropriate.
        </member>
        <member name="M:org.bouncycastle.crypto.engines.IDEAEngine.mul(System.Int32,System.Int32)">
             return x = x * y where the multiplication is done modulo
             65537 (0x10001) (as defined in the IDEA specification) and
             a zero input is taken to be 65536 (0x10000).
            
             @param x the x value
             @param y the y value
             @return x = x * y
        </member>
        <member name="M:org.bouncycastle.crypto.engines.IDEAEngine.expandKey(System.Byte[])">
            The following function is used to expand the user key to the encryption
            subkey. The first 16 bytes are the user key, and the rest of the subkey
            is calculated by rotating the previous 16 bytes by 25 bits to the left,
            and so on until the subkey is completed.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:org.bouncycastle.crypto.engines.IDEAEngine.mulInv(System.Int32)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:org.bouncycastle.crypto.engines.IDEAEngine.addInv(System.Int32)" -->
        <member name="M:org.bouncycastle.crypto.engines.IDEAEngine.invertKey(System.Int32[])">
            The function to invert the encryption subkey to the decryption subkey.
            It also involves the multiplicative inverse and the additive inverse functions.
        </member>
        <member name="T:org.bouncycastle.crypto.engines.IESEngine">
            support class for constructing intergrated encryption ciphers
            for doing basic message exchanges on top of key agreement ciphers
        </member>
        <member name="M:org.bouncycastle.crypto.engines.IESEngine.#ctor(org.bouncycastle.crypto.BasicAgreement,org.bouncycastle.crypto.DerivationFunction,org.bouncycastle.crypto.Mac)">
             set up for use with stream mode, where the key derivation function
             is used to provide a stream of bytes to xor with the message.
            
             @param agree the key agreement used as the basis for the encryption
             @param kdf the key derivation function used for byte generation
             @param mac the message authentication code generator for the message
        </member>
        <member name="M:org.bouncycastle.crypto.engines.IESEngine.#ctor(org.bouncycastle.crypto.BasicAgreement,org.bouncycastle.crypto.DerivationFunction,org.bouncycastle.crypto.Mac,org.bouncycastle.crypto.BufferedBlockCipher)">
             set up for use in conjunction with a block cipher to handle the
             message.
            
             @param agree the key agreement used as the basis for the encryption
             @param kdf the key derivation function used for byte generation
             @param mac the message authentication code generator for the message
             @param cipher the cipher to used for encrypting the message
        </member>
        <member name="M:org.bouncycastle.crypto.engines.IESEngine.init(System.Boolean,org.bouncycastle.crypto.CipherParameters,org.bouncycastle.crypto.CipherParameters,org.bouncycastle.crypto.CipherParameters)">
             Initialise the encryptor.
            
             @param forEncryption whether or not this is encryption/decryption.
             @param privParam our private key parameters
             @param pubParam the recipient's/sender's public key parameters
             @param param encoding and derivation parameters.
        </member>
        <member name="T:org.bouncycastle.crypto.engines.RC2Engine">
            an implementation of RC2 as described in RFC 2268
                 "A Description of the RC2(r) Encryption Algorithm" R. Rivest.
        </member>
        <member name="M:org.bouncycastle.crypto.engines.RC2Engine.init(System.Boolean,org.bouncycastle.crypto.CipherParameters)">
             initialise a RC2 cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param params the parameters required to set up the cipher.
             @exception ArgumentException if the params argument is
             inappropriate.
        </member>
        <member name="M:org.bouncycastle.crypto.engines.RC2Engine.rotateWordLeft(System.Int32,System.Int32)">
            return the result rotating the 16 bit number in x left by y
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:org.bouncycastle.crypto.engines.RC2WrapEngine" -->
        <member name="F:org.bouncycastle.crypto.engines.RC2WrapEngine.engine">
            Field engine 
        </member>
        <member name="F:org.bouncycastle.crypto.engines.RC2WrapEngine.param">
            Field param 
        </member>
        <member name="F:org.bouncycastle.crypto.engines.RC2WrapEngine.paramPlusIV">
            Field paramPlusIV 
        </member>
        <member name="F:org.bouncycastle.crypto.engines.RC2WrapEngine.iv">
            Field iv 
        </member>
        <member name="F:org.bouncycastle.crypto.engines.RC2WrapEngine.forWrapping">
            Field forWrapping 
        </member>
        <member name="F:org.bouncycastle.crypto.engines.RC2WrapEngine.IV2">
            Field IV2           
        </member>
        <member name="M:org.bouncycastle.crypto.engines.RC2WrapEngine.init(System.Boolean,org.bouncycastle.crypto.CipherParameters)">
             Method init
            
             @param forWrapping
             @param param
        </member>
        <member name="M:org.bouncycastle.crypto.engines.RC2WrapEngine.getAlgorithmName">
             Method getAlgorithmName
            
             @return
        </member>
        <member name="M:org.bouncycastle.crypto.engines.RC2WrapEngine.wrap(System.Byte[],System.Int32,System.Int32)">
             Method wrap
            
             @param in
             @param inOff
             @param inLen
             @return
        </member>
        <member name="M:org.bouncycastle.crypto.engines.RC2WrapEngine.unwrap(System.Byte[],System.Int32,System.Int32)">
             Method unwrap
            
             @param in
             @param inOff
             @param inLen
             @return
             @throws InvalidCipherTextException
        </member>
        <member name="M:org.bouncycastle.crypto.engines.RC2WrapEngine.calculateCMSKeyChecksum(System.Byte[])">
             Some key wrap algorithms make use of the Key Checksum defined
             in CMS [CMS-Algorithms]. This is used to provide an integrity
             check value for the key being wrapped. The algorithm is
            
             - Compute the 20 octet SHA-1 hash on the key being wrapped.
             - Use the first 8 octets of this hash as the checksum value.
            
             @param key
             @return
             @throws RuntimeException
             @see http://www.w3.org/TR/xmlenc-core/#sec-CMSKeyChecksum
        </member>
        <member name="M:org.bouncycastle.crypto.engines.RC2WrapEngine.checkCMSKeyChecksum(System.Byte[],System.Byte[])">
            @param key
            @param checksum
            @return
            @see http://www.w3.org/TR/xmlenc-core/#sec-CMSKeyChecksum
        </member>
        <member name="T:org.bouncycastle.crypto.StreamCipher">
            the interface stream ciphers conform to.
        </member>
        <member name="M:org.bouncycastle.crypto.StreamCipher.init(System.Boolean,org.bouncycastle.crypto.CipherParameters)">
             Initialise the cipher.
            
             @param forEncryption if true the cipher is initialised for
              encryption, if false for decryption.
             @param param the key and other data required by the cipher.
             @exception IllegalArgumentException if the params argument is
             inappropriate.
        </member>
        <member name="M:org.bouncycastle.crypto.StreamCipher.getAlgorithmName">
             Return the name of the algorithm the cipher implements.
            
             @return the name of the algorithm the cipher implements.
        </member>
        <member name="M:org.bouncycastle.crypto.StreamCipher.returnByte(System.Byte)">
             encrypt/decrypt a single byte returning the result.
            
             @param in the byte to be processed.
             @return the result of processing the input byte.
        </member>
        <member name="M:org.bouncycastle.crypto.StreamCipher.processBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
             process a block of bytes from in putting the result into out.
            
             @param in the input byte array.
             @param inOff the offset into the in array where the data to be processed starts.
             @param len the number of bytes to be processed.
             @param out the output buffer the processed bytes go into.
             @param outOff the offset into the output byte array the processed data stars at.
             @exception DataLengthException if the output buffer is too small.
        </member>
        <member name="M:org.bouncycastle.crypto.StreamCipher.reset">
            reset the cipher. This leaves it in the same state
            it was at after the last init (if there was one).
        </member>
        <member name="M:org.bouncycastle.crypto.engines.RC4Engine.init(System.Boolean,org.bouncycastle.crypto.CipherParameters)">
             initialise a RC4 cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param params the parameters required to set up the cipher.
             @exception ArgumentException if the params argument is
             inappropriate.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:org.bouncycastle.crypto.engines.RC532Engine" -->
        <member name="M:org.bouncycastle.crypto.engines.RC532Engine.#ctor">
            Create an instance of the RC5 encryption algorithm
            and set some defaults
        </member>
        <member name="M:org.bouncycastle.crypto.engines.RC532Engine.init(System.Boolean,org.bouncycastle.crypto.CipherParameters)">
             initialise a RC5-32 cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param params the parameters required to set up the cipher.
             @exception ArgumentException if the params argument is
             inappropriate.
        </member>
        <member name="M:org.bouncycastle.crypto.engines.RC532Engine.setKey(System.Byte[])">
            Re-key the cipher.
            
            @param  key  the key to be used
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:org.bouncycastle.crypto.engines.RC532Engine.encryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:org.bouncycastle.crypto.engines.RC532Engine.rotateLeft(System.Int32,System.Int32)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:org.bouncycastle.crypto.engines.RC532Engine.rotateRight(System.Int32,System.Int32)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:org.bouncycastle.crypto.engines.RC564Engine" -->
        <member name="M:org.bouncycastle.crypto.engines.RC564Engine.#ctor">
            Create an instance of the RC5 encryption algorithm
            and set some defaults
        </member>
        <member name="M:org.bouncycastle.crypto.engines.RC564Engine.init(System.Boolean,org.bouncycastle.crypto.CipherParameters)">
             initialise a RC5-64 cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param params the parameters required to set up the cipher.
             @exception ArgumentException if the params argument is
             inappropriate.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:org.bouncycastle.crypto.engines.RC564Engine.setKey(System.Byte[])" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:org.bouncycastle.crypto.engines.RC564Engine.encryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:org.bouncycastle.crypto.engines.RC564Engine.rotateLeft(System.Int64,System.Int64)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:org.bouncycastle.crypto.engines.RC564Engine.rotateRight(System.Int64,System.Int64)" -->
        <member name="T:org.bouncycastle.crypto.engines.RC6Engine">
             An RC6 engine.
            
             Implementation courtesy of Michael Lee.
        </member>
        <member name="M:org.bouncycastle.crypto.engines.RC6Engine.#ctor">
            Create an instance of the RC6 encryption algorithm
            and set some defaults
        </member>
        <member name="M:org.bouncycastle.crypto.engines.RC6Engine.init(System.Boolean,org.bouncycastle.crypto.CipherParameters)">
             initialise a RC5-32 cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param params the parameters required to set up the cipher.
             @exception ArgumentException if the params argument is
             inappropriate.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:org.bouncycastle.crypto.engines.RC6Engine.setKey(System.Byte[])" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:org.bouncycastle.crypto.engines.RC6Engine.rotateLeft(System.Int32,System.Int32)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:org.bouncycastle.crypto.engines.RC6Engine.rotateRight(System.Int32,System.Int32)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:org.bouncycastle.crypto.engines.RijndaelEngine" -->
        <member name="M:org.bouncycastle.crypto.engines.RijndaelEngine.mul0x2(System.Int32)">
            multiply two elements of GF(2^m)
            needed for MixColumn and InvMixColumn
        </member>
        <member name="M:org.bouncycastle.crypto.engines.RijndaelEngine.KeyAddition(System.Int64[])">
            xor corresponding text input and round key input bytes
        </member>
        <member name="M:org.bouncycastle.crypto.engines.RijndaelEngine.ShiftRow(System.Byte[])">
            Row 0 remains unchanged
            The other three rows are shifted a variable amount
        </member>
        <member name="M:org.bouncycastle.crypto.engines.RijndaelEngine.Substitution(System.Byte[])">
            Replace every byte of the input by the byte at that place
            in the nonlinear S-box
        </member>
        <member name="M:org.bouncycastle.crypto.engines.RijndaelEngine.MixColumn">
            Mix the bytes of every column in a linear way
        </member>
        <member name="M:org.bouncycastle.crypto.engines.RijndaelEngine.InvMixColumn">
            Mix the bytes of every column in a linear way
            This is the opposite operation of Mixcolumn
        </member>
        <member name="M:org.bouncycastle.crypto.engines.RijndaelEngine.generateWorkingKey(System.Byte[])">
            Calculate the necessary round keys
            The number of calculations depends on keyBits and blockBits
        </member>
        <member name="M:org.bouncycastle.crypto.engines.RijndaelEngine.#ctor">
            default constructor - 128 bit block size.
        </member>
        <member name="M:org.bouncycastle.crypto.engines.RijndaelEngine.#ctor(System.Int32)">
             basic constructor - set the cipher up for a given blocksize
            
             @param blocksize the blocksize in bits, must be 128, 192, or 256.
        </member>
        <member name="M:org.bouncycastle.crypto.engines.RijndaelEngine.init(System.Boolean,org.bouncycastle.crypto.CipherParameters)">
             initialise a Rijndael cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param params the parameters required to set up the cipher.
             @exception ArgumentException if the params argument is
             inappropriate.
        </member>
        <member name="T:org.bouncycastle.crypto.engines.RSAEngine">
            this does your basic RSA algorithm.
        </member>
        <member name="M:org.bouncycastle.crypto.engines.RSAEngine.init(System.Boolean,org.bouncycastle.crypto.CipherParameters)">
             initialise the RSA engine.
            
             @param forEncryption true if we are encrypting, false otherwise.
             @param param the necessary RSA key parameters.
        </member>
        <member name="M:org.bouncycastle.crypto.engines.RSAEngine.getInputBlockSize">
             Return the maximum size for an input block to this engine.
             For RSA this is always one byte less than the key size on
             encryption, and the same length as the key size on decryption.
            
             @return maximum size for an input block.
        </member>
        <member name="M:org.bouncycastle.crypto.engines.RSAEngine.getOutputBlockSize">
             Return the maximum size for an output block to this engine.
             For RSA this is always one byte less than the key size on
             decryption, and the same length as the key size on encryption.
            
             @return maximum size for an output block.
        </member>
        <member name="M:org.bouncycastle.crypto.engines.RSAEngine.processBlock(System.Byte[],System.Int32,System.Int32)">
             Process a single block using the basic RSA algorithm.
            
             @param in the input array.
             @param inOff the offset into the input buffer where the data starts.
             @param inLen the length of the data to be processed.
             @return the result of the RSA process.
             @exception DataLengthException the input block is too large.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:org.bouncycastle.crypto.engines.SerpentEngine" -->
        <member name="M:org.bouncycastle.crypto.engines.SerpentEngine.init(System.Boolean,org.bouncycastle.crypto.CipherParameters)">
             initialise a Serpent cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param params the parameters required to set up the cipher.
             @exception ArgumentException if the params argument is
             inappropriate.
        </member>
        <member name="M:org.bouncycastle.crypto.engines.SerpentEngine.processBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Process one block of input from the array in and write it to
             the out array.
            
             @param in the array containing the input data.
             @param inOff offset into the in array the data starts at.
             @param out the array the output data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception IllegalStateException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="M:org.bouncycastle.crypto.engines.SerpentEngine.makeWorkingKey(System.Byte[])">
             Expand a user-supplied key material into a session key.
            
             @param key  The user-key bytes (multiples of 4) to use.
             @exception ArgumentException
        </member>
        <member name="M:org.bouncycastle.crypto.engines.SerpentEngine.encryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Encrypt one block of plaintext.
            
             @param in the array containing the input data.
             @param inOff offset into the in array the data starts at.
             @param out the array the output data will be copied into.
             @param outOff the offset into the out array the output will start at.
        </member>
        <member name="M:org.bouncycastle.crypto.engines.SerpentEngine.decryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Decrypt one block of ciphertext.
            
             @param in the array containing the input data.
             @param inOff offset into the in array the data starts at.
             @param out the array the output data will be copied into.
             @param outOff the offset into the out array the output will start at.
        </member>
        <member name="M:org.bouncycastle.crypto.engines.SerpentEngine.sb0(System.Int32,System.Int32,System.Int32,System.Int32)">
            S0 - { 3, 8,15, 1,10, 6, 5,11,14,13, 4, 2, 7, 0, 9,12 } - 15 terms.
        </member>
        <member name="M:org.bouncycastle.crypto.engines.SerpentEngine.ib0(System.Int32,System.Int32,System.Int32,System.Int32)">
            InvSO - {13, 3,11, 0,10, 6, 5,12, 1,14, 4, 7,15, 9, 8, 2 } - 15 terms.
        </member>
        <member name="M:org.bouncycastle.crypto.engines.SerpentEngine.sb1(System.Int32,System.Int32,System.Int32,System.Int32)">
            S1 - {15,12, 2, 7, 9, 0, 5,10, 1,11,14, 8, 6,13, 3, 4 } - 14 terms.
        </member>
        <member name="M:org.bouncycastle.crypto.engines.SerpentEngine.ib1(System.Int32,System.Int32,System.Int32,System.Int32)">
            InvS1 - { 5, 8, 2,14,15, 6,12, 3,11, 4, 7, 9, 1,13,10, 0 } - 14 steps.
        </member>
        <member name="M:org.bouncycastle.crypto.engines.SerpentEngine.sb2(System.Int32,System.Int32,System.Int32,System.Int32)">
            S2 - { 8, 6, 7, 9, 3,12,10,15,13, 1,14, 4, 0,11, 5, 2 } - 16 terms.
        </member>
        <member name="M:org.bouncycastle.crypto.engines.SerpentEngine.ib2(System.Int32,System.Int32,System.Int32,System.Int32)">
            InvS2 - {12, 9,15, 4,11,14, 1, 2, 0, 3, 6,13, 5, 8,10, 7 } - 16 steps.
        </member>
        <member name="M:org.bouncycastle.crypto.engines.SerpentEngine.sb3(System.Int32,System.Int32,System.Int32,System.Int32)">
            S3 - { 0,15,11, 8,12, 9, 6, 3,13, 1, 2, 4,10, 7, 5,14 } - 16 terms.
        </member>
        <member name="M:org.bouncycastle.crypto.engines.SerpentEngine.ib3(System.Int32,System.Int32,System.Int32,System.Int32)">
            InvS3 - { 0, 9,10, 7,11,14, 6,13, 3, 5,12, 2, 4, 8,15, 1 } - 15 terms
        </member>
        <member name="M:org.bouncycastle.crypto.engines.SerpentEngine.sb4(System.Int32,System.Int32,System.Int32,System.Int32)">
            S4 - { 1,15, 8, 3,12, 0,11, 6, 2, 5, 4,10, 9,14, 7,13 } - 15 terms.
        </member>
        <member name="M:org.bouncycastle.crypto.engines.SerpentEngine.ib4(System.Int32,System.Int32,System.Int32,System.Int32)">
            InvS4 - { 5, 0, 8, 3,10, 9, 7,14, 2,12,11, 6, 4,15,13, 1 } - 15 terms.
        </member>
        <member name="M:org.bouncycastle.crypto.engines.SerpentEngine.sb5(System.Int32,System.Int32,System.Int32,System.Int32)">
            S5 - {15, 5, 2,11, 4,10, 9,12, 0, 3,14, 8,13, 6, 7, 1 } - 16 terms.
        </member>
        <member name="M:org.bouncycastle.crypto.engines.SerpentEngine.ib5(System.Int32,System.Int32,System.Int32,System.Int32)">
            InvS5 - { 8,15, 2, 9, 4, 1,13,14,11, 6, 5, 3, 7,12,10, 0 } - 16 terms.
        </member>
        <member name="M:org.bouncycastle.crypto.engines.SerpentEngine.sb6(System.Int32,System.Int32,System.Int32,System.Int32)">
            S6 - { 7, 2,12, 5, 8, 4, 6,11,14, 9, 1,15,13, 3,10, 0 } - 15 terms.
        </member>
        <member name="M:org.bouncycastle.crypto.engines.SerpentEngine.ib6(System.Int32,System.Int32,System.Int32,System.Int32)">
            InvS6 - {15,10, 1,13, 5, 3, 6, 0, 4, 9,14, 7, 2,12, 8,11 } - 15 terms.
        </member>
        <member name="M:org.bouncycastle.crypto.engines.SerpentEngine.sb7(System.Int32,System.Int32,System.Int32,System.Int32)">
            S7 - { 1,13,15, 0,14, 8, 2,11, 7, 4,12,10, 9, 3, 5, 6 } - 16 terms.
        </member>
        <member name="M:org.bouncycastle.crypto.engines.SerpentEngine.ib7(System.Int32,System.Int32,System.Int32,System.Int32)">
            InvS7 - { 3, 0, 6,13, 9,14,15, 8, 5,12,11, 7,10, 1, 4, 2 } - 17 terms.
        </member>
        <member name="M:org.bouncycastle.crypto.engines.SerpentEngine.LT">
            Apply the the linear transformation to the register set.
        </member>
        <member name="M:org.bouncycastle.crypto.engines.SerpentEngine.inverseLT">
            Apply the inverse of the linear transformation to the register set.
        </member>
        <member name="T:org.bouncycastle.crypto.engines.SkipjackEngine">
            a class that provides a basic SKIPJACK engine.
        </member>
        <member name="M:org.bouncycastle.crypto.engines.SkipjackEngine.init(System.Boolean,org.bouncycastle.crypto.CipherParameters)">
             initialise a SKIPJACK cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param params the parameters required to set up the cipher.
             @exception ArgumentException if the params argument is
             inappropriate.
        </member>
        <member name="M:org.bouncycastle.crypto.engines.SkipjackEngine.g(System.Int32,System.Int32)">
            The G permutation
        </member>
        <member name="M:org.bouncycastle.crypto.engines.SkipjackEngine.h(System.Int32,System.Int32)">
            the inverse of the G permutation.
        </member>
        <member name="T:org.bouncycastle.crypto.engines.TwofishEngine">
             A class that provides Twofish encryption operations.
            
             This Java implementation is based on the Java reference
             implementation provided by Bruce Schneier and developed
             by Raif S. Naffah.
        </member>
        <member name="F:org.bouncycastle.crypto.engines.TwofishEngine.P_00">
            Define the fixed p0/p1 permutations used in keyed S-box lookup.
            By changing the following constant definitions, the S-boxes will
            automatically get changed in the Twofish engine.
        </member>
        <member name="F:org.bouncycastle.crypto.engines.TwofishEngine.gSubKeys">
            gSubKeys[] and gSBox[] are eventually used in the 
            encryption and decryption methods.
        </member>
        <member name="M:org.bouncycastle.crypto.engines.TwofishEngine.init(System.Boolean,org.bouncycastle.crypto.CipherParameters)">
             initialise a Twofish cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param params the parameters required to set up the cipher.
             @exception ArgumentException if the params argument is
             inappropriate.
        </member>
        <member name="M:org.bouncycastle.crypto.engines.TwofishEngine.encryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Encrypt the given input starting at the given offset and place
             the result in the provided buffer starting at the given offset.
             The input will be an exact multiple of our blocksize.
            
             encryptBlock uses the pre-calculated gSBox[] and subKey[]
             arrays.
        </member>
        <member name="M:org.bouncycastle.crypto.engines.TwofishEngine.decryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
            Decrypt the given input starting at the given offset and place
            the result in the provided buffer starting at the given offset.
            The input will be an exact multiple of our blocksize.
        </member>
        <member name="M:org.bouncycastle.crypto.engines.TwofishEngine.RS_MDS_Encode(System.Int32,System.Int32)">
             Use (12, 8) Reed-Solomon code over GF(256) to produce
             a key S-box 32-bit entity from 2 key material 32-bit
             entities.
            
             @param    k0 first 32-bit entity
             @param    k1 second 32-bit entity
             @return     Remainder polynomial generated using RS code
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:org.bouncycastle.crypto.engines.TwofishEngine.RS_rem(System.Int32)" -->
        <member name="T:org.bouncycastle.crypto.CipherKeyGenerator">
            The base class for symmetric, or secret, cipher key generators.
        </member>
        <member name="M:org.bouncycastle.crypto.CipherKeyGenerator.init(org.bouncycastle.crypto.KeyGenerationParameters)">
             initialise the key generator.
            
             @param param the parameters to be used for key generation
        </member>
        <member name="M:org.bouncycastle.crypto.CipherKeyGenerator.generateKey">
             generate a secret key.
            
             @return a byte array containing the key value.
        </member>
        <member name="M:org.bouncycastle.crypto.generators.DESedeKeyGenerator.init(org.bouncycastle.crypto.KeyGenerationParameters)">
             initialise the key generator - if strength is set to zero
             the key generated will be 192 bits in size, otherwise
             strength can be 128 or 192 (or 112 or 168 if you don't count
             parity bits), depending on whether you wish to do 2-key or 3-key
             triple DES.
            
             @param param the parameters to be used for key generation
        </member>
        <member name="T:org.bouncycastle.crypto.generators.DHBasicKeyPairGenerator">
             a basic Diffie-Helman key pair generator.
            
             This generates keys consistent for use with the basic algorithm for
             Diffie-Helman.
        </member>
        <member name="T:org.bouncycastle.crypto.AsymmetricCipherKeyPairGenerator">
            interface that a public/private key pair generator should conform to.
        </member>
        <member name="M:org.bouncycastle.crypto.AsymmetricCipherKeyPairGenerator.init(org.bouncycastle.crypto.KeyGenerationParameters)">
             intialise the key pair generator.
            
             @param the parameters the key pair is to be initialised with.
        </member>
        <member name="M:org.bouncycastle.crypto.AsymmetricCipherKeyPairGenerator.generateKeyPair">
             return an AsymmetricCipherKeyPair containing the generated keys.
            
             @return an AsymmetricCipherKeyPair containing the generated keys.
        </member>
        <member name="T:org.bouncycastle.crypto.generators.DHKeyPairGenerator">
             a Diffie-Helman key pair generator.
            
             This generates keys consistent for use in the MTI/A0 key agreement protocol
             as described in "Handbook of Applied Cryptography", Pages 516-519.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:org.bouncycastle.crypto.generators.DHParametersGenerator.generateParameters" -->
        <member name="T:org.bouncycastle.crypto.generators.DSAKeyPairGenerator">
             a DSA key pair generator.
            
             This generates DSA keys in line with the method described 
             in FIPS 186-2.
        </member>
        <member name="T:org.bouncycastle.crypto.generators.DSAParametersGenerator">
            generate suitable parameters for DSA, in line with FIPS 186-2.
        </member>
        <member name="M:org.bouncycastle.crypto.generators.DSAParametersGenerator.init(System.Int32,System.Int32,org.bouncycastle.security.SecureRandom)">
             initialise the key generator.
            
             @param size size of the key (range 2^512 -> 2^1024 - 64 bit increments)
             @param certainty measure of robustness of prime (for FIPS 186-2 compliance this should be at least 80).
             @param random random byte source.
        </member>
        <member name="M:org.bouncycastle.crypto.generators.DSAParametersGenerator.add(System.Byte[],System.Byte[],System.Int32)">
            add value to b, returning the result in a. The a value is treated
            as a BigInteger of length (a.Length * 8) bits. The result is
            modulo 2^a.Length in case of overflow.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:org.bouncycastle.crypto.generators.DSAParametersGenerator.generateParameters" -->
        <member name="M:org.bouncycastle.crypto.generators.ECKeyPairGenerator.generateKeyPair">
            Given the domain parameters this routine generates an EC key
            pair in accordance with X9.62 section 5.2.1 pages 26, 27.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:org.bouncycastle.crypto.generators.ElGamalKeyPairGenerator" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:org.bouncycastle.crypto.generators.ElGamalParametersGenerator.generateParameters" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:org.bouncycastle.crypto.generators.KDF2BytesGenerator" -->
        <member name="T:org.bouncycastle.crypto.DerivationFunction">
            base interface for general purpose byte derivation functions.
        </member>
        <member name="M:org.bouncycastle.crypto.DerivationFunction.getDigest">
            return the message digest used as the basis for the function
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:org.bouncycastle.crypto.generators.KDF2BytesGenerator.#ctor(org.bouncycastle.crypto.Digest)" -->
        <member name="M:org.bouncycastle.crypto.generators.KDF2BytesGenerator.getDigest">
            return the underlying digest.
        </member>
        <member name="M:org.bouncycastle.crypto.generators.KDF2BytesGenerator.generateBytes(System.Byte[],System.Int32,System.Int32)">
             fill len bytes of the output buffer with bytes generated from
             the derivation function.
            
             @throws ArgumentException if the size of the request will cause an overflow.
             @throws DataLengthException if the out buffer is too small.
        </member>
        <member name="T:org.bouncycastle.crypto.generators.MGF1BytesGenerator">
            Generator for MGF1 as defined in PKCS 1v2
        </member>
        <member name="M:org.bouncycastle.crypto.generators.MGF1BytesGenerator.#ctor(org.bouncycastle.crypto.Digest)">
            @param digest the digest to be used as the source of generated bytes
        </member>
        <member name="M:org.bouncycastle.crypto.generators.MGF1BytesGenerator.getDigest">
            return the underlying digest.
        </member>
        <member name="M:org.bouncycastle.crypto.generators.MGF1BytesGenerator.ItoOSP(System.Int32,System.Byte[])">
            int to octet string.
        </member>
        <member name="M:org.bouncycastle.crypto.generators.MGF1BytesGenerator.generateBytes(System.Byte[],System.Int32,System.Int32)">
             fill len bytes of the output buffer with bytes generated from
             the derivation function.
            
             @throws ArgumentException if the size of the request will cause an overflow.
             @throws DataLengthException if the out buffer is too small.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:org.bouncycastle.crypto.generators.PKCS12ParametersGenerator" -->
        <member name="T:org.bouncycastle.crypto.PBEParametersGenerator">
            super class for all Password Based Encyrption (PBE) parameter generator classes.
        </member>
        <member name="M:org.bouncycastle.crypto.PBEParametersGenerator.#ctor">
            base constructor.
        </member>
        <member name="M:org.bouncycastle.crypto.PBEParametersGenerator.init(System.Byte[],System.Byte[],System.Int32)">
             initialise the PBE generator.
            
             @param password the password converted into bytes (see below).
             @param salt the salt to be mixed with the password.
             @param iterationCount the number of iterations the "mixing" function
             is to be applied for.
        </member>
        <member name="M:org.bouncycastle.crypto.PBEParametersGenerator.getPassword">
             return the password byte array.
            
             @return the password byte array.
        </member>
        <member name="M:org.bouncycastle.crypto.PBEParametersGenerator.getSalt">
             return the salt byte array.
            
             @return the salt byte array.
        </member>
        <member name="M:org.bouncycastle.crypto.PBEParametersGenerator.getIterationCount">
             return the iteration count.
            
             @return the iteration count.
        </member>
        <member name="M:org.bouncycastle.crypto.PBEParametersGenerator.generateDerivedParameters(System.Int32)">
             generate derived parameters for a key of length keySize.
            
             @param keySize the length, in bits, of the key required.
             @return a parameters object representing a key.
        </member>
        <member name="M:org.bouncycastle.crypto.PBEParametersGenerator.generateDerivedParameters(System.Int32,System.Int32)">
             generate derived parameters for a key of length keySize, and
             an initialisation vector (IV) of length ivSize.
            
             @param keySize the length, in bits, of the key required.
             @param ivSize the length, in bits, of the iv required.
             @return a parameters object representing a key and an IV.
        </member>
        <member name="M:org.bouncycastle.crypto.PBEParametersGenerator.generateDerivedMacParameters(System.Int32)">
             generate derived parameters for a key of length keySize, specifically
             for use with a MAC.
            
             @param keySize the length, in bits, of the key required.
             @return a parameters object representing a key.
        </member>
        <member name="M:org.bouncycastle.crypto.PBEParametersGenerator.PKCS5PasswordToBytes(System.Char[])">
             converts a password to a byte array according to the scheme in
             PKCS5 (ascii, no padding)
            
             @param password a character array reqpresenting the password.
             @return a byte array representing the password.
        </member>
        <member name="M:org.bouncycastle.crypto.PBEParametersGenerator.PKCS12PasswordToBytes(System.Char[])">
             converts a password to a byte array according to the scheme in
             PKCS12 (unicode, big endian, 2 zero pad bytes at the end).
            
             @param password a character array reqpresenting the password.
             @return a byte array representing the password.
        </member>
        <member name="M:org.bouncycastle.crypto.generators.PKCS12ParametersGenerator.#ctor(org.bouncycastle.crypto.Digest)">
             Construct a PKCS 12 Parameters generator. This constructor will
             accept MD5, SHA1, and RIPEMD160.
            
             @param digest the digest to be used as the source of derived keys.
             @exception ArgumentException if an unknown digest is passed in.
        </member>
        <member name="M:org.bouncycastle.crypto.generators.PKCS12ParametersGenerator.adjust(System.Byte[],System.Int32,System.Byte[])">
            add a + b + 1, returning the result in a. The a value is treated
            as a BigInteger of length (b.Length * 8) bits. The result is 
            modulo 2^b.Length in case of overflow.
        </member>
        <member name="M:org.bouncycastle.crypto.generators.PKCS12ParametersGenerator.generateDerivedKey(System.Int32,System.Int32)">
            generation of a derived key ala PKCS12 V1.0.
        </member>
        <member name="M:org.bouncycastle.crypto.generators.PKCS12ParametersGenerator.generateDerivedParameters(System.Int32)">
             Generate a key parameter derived from the password, salt, and iteration
             count we are currently initialised with.
            
             @param keySize the size of the key we want (in bits)
             @return a KeyParameter object.
        </member>
        <member name="M:org.bouncycastle.crypto.generators.PKCS12ParametersGenerator.generateDerivedParameters(System.Int32,System.Int32)">
             Generate a key with initialisation vector parameter derived from
             the password, salt, and iteration count we are currently initialised
             with.
            
             @param keySize the size of the key we want (in bits)
             @param ivSize the size of the iv we want (in bits)
             @return a ParametersWithIV object.
        </member>
        <member name="M:org.bouncycastle.crypto.generators.PKCS12ParametersGenerator.generateDerivedMacParameters(System.Int32)">
             Generate a key parameter for use with a MAC derived from the password,
             salt, and iteration count we are currently initialised with.
            
             @param keySize the size of the key we want (in bits)
             @return a KeyParameter object.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:org.bouncycastle.crypto.generators.PKCS5S1ParametersGenerator" -->
        <member name="M:org.bouncycastle.crypto.generators.PKCS5S1ParametersGenerator.#ctor(org.bouncycastle.crypto.Digest)">
             Construct a PKCS 5 Scheme 1 Parameters generator. 
            
             @param digest the digest to be used as the source of derived keys.
        </member>
        <member name="M:org.bouncycastle.crypto.generators.PKCS5S1ParametersGenerator.generateDerivedKey">
            the derived key function, the ith hash of the password and the salt.
        </member>
        <member name="M:org.bouncycastle.crypto.generators.PKCS5S1ParametersGenerator.generateDerivedParameters(System.Int32)">
             Generate a key parameter derived from the password, salt, and iteration
             count we are currently initialised with.
            
             @param keySize the size of the key we want (in bits)
             @return a KeyParameter object.
             @exception ArgumentException if the key length larger than the base hash size.
        </member>
        <member name="M:org.bouncycastle.crypto.generators.PKCS5S1ParametersGenerator.generateDerivedParameters(System.Int32,System.Int32)">
             Generate a key with initialisation vector parameter derived from
             the password, salt, and iteration count we are currently initialised
             with.
            
             @param keySize the size of the key we want (in bits)
             @param ivSize the size of the iv we want (in bits)
             @return a ParametersWithIV object.
             @exception ArgumentException if keySize + ivSize is larger than the base hash size.
        </member>
        <member name="M:org.bouncycastle.crypto.generators.PKCS5S1ParametersGenerator.generateDerivedMacParameters(System.Int32)">
             Generate a key parameter for use with a MAC derived from the password,
             salt, and iteration count we are currently initialised with.
            
             @param keySize the size of the key we want (in bits)
             @return a KeyParameter object.
             @exception ArgumentException if the key length larger than the base hash size.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:org.bouncycastle.crypto.generators.PKCS5S2ParametersGenerator" -->
        <member name="M:org.bouncycastle.crypto.generators.PKCS5S2ParametersGenerator.#ctor">
            construct a PKCS5 Scheme 2 Parameters generator.
        </member>
        <member name="M:org.bouncycastle.crypto.generators.PKCS5S2ParametersGenerator.generateDerivedParameters(System.Int32)">
             Generate a key parameter derived from the password, salt, and iteration
             count we are currently initialised with.
            
             @param keySize the size of the key we want (in bits)
             @return a KeyParameter object.
        </member>
        <member name="M:org.bouncycastle.crypto.generators.PKCS5S2ParametersGenerator.generateDerivedParameters(System.Int32,System.Int32)">
             Generate a key with initialisation vector parameter derived from
             the password, salt, and iteration count we are currently initialised
             with.
            
             @param keySize the size of the key we want (in bits)
             @param ivSize the size of the iv we want (in bits)
             @return a ParametersWithIV object.
        </member>
        <member name="M:org.bouncycastle.crypto.generators.PKCS5S2ParametersGenerator.generateDerivedMacParameters(System.Int32)">
             Generate a key parameter for use with a MAC derived from the password,
             salt, and iteration count we are currently initialised with.
            
             @param keySize the size of the key we want (in bits)
             @return a KeyParameter object.
        </member>
        <member name="T:org.bouncycastle.crypto.generators.RSAKeyPairGenerator">
            an RSA key pair generator.
        </member>
        <member name="T:org.bouncycastle.crypto.macs.CBCBlockCipherMac">
            standard CBC Block Cipher MAC - if no padding is specified the default of
            pad of zeroes is used.
        </member>
        <member name="T:org.bouncycastle.crypto.Mac">
            The base interface for implementations of message authentication codes (MACs).
        </member>
        <member name="M:org.bouncycastle.crypto.Mac.init(org.bouncycastle.crypto.CipherParameters)">
             Initialise the MAC.
            
             @param param the key and other data required by the MAC.
             @exception IllegalArgumentException if the params argument is
             inappropriate.
        </member>
        <member name="M:org.bouncycastle.crypto.Mac.getAlgorithmName">
             Return the name of the algorithm the MAC implements.
            
             @return the name of the algorithm the MAC implements.
        </member>
        <member name="M:org.bouncycastle.crypto.Mac.getMacSize">
             Return the block size for this cipher (in bytes).
            
             @return the block size for this cipher in bytes.
        </member>
        <member name="M:org.bouncycastle.crypto.Mac.update(System.Byte)">
             add a single byte to the mac for processing.
            
             @param in the byte to be processed.
             @exception IllegalStateException if the MAC is not initialised.
        </member>
        <member name="M:org.bouncycastle.crypto.Mac.update(System.Byte[],System.Int32,System.Int32)">
            @param in the array containing the input.
            @param inOff the index in the array the data begins at.
            @param len the length of the input starting at inOff.
            @exception IllegalStateException if the MAC is not initialised.
            @exception DataLengthException if there isn't enough data in in.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:org.bouncycastle.crypto.Mac.doFinal(System.Byte[],System.Int32)" -->
        <member name="M:org.bouncycastle.crypto.Mac.reset">
            Reset the MAC. At the end of resetting the MAC should be in the
            in the same state it was after the last init (if there was one).
        </member>
        <member name="M:org.bouncycastle.crypto.macs.CBCBlockCipherMac.#ctor(org.bouncycastle.crypto.BlockCipher)">
             create a standard MAC based on a CBC block cipher. This will produce an
             authentication code half the length of the block size of the cipher.
            
             @param cipher the cipher to be used as the basis of the MAC generation.
        </member>
        <member name="M:org.bouncycastle.crypto.macs.CBCBlockCipherMac.#ctor(org.bouncycastle.crypto.BlockCipher,org.bouncycastle.crypto.paddings.BlockCipherPadding)">
             create a standard MAC based on a CBC block cipher. This will produce an
             authentication code half the length of the block size of the cipher.
            
             @param cipher the cipher to be used as the basis of the MAC generation.
             @param padding the padding to be used to complete the last block.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:org.bouncycastle.crypto.macs.CBCBlockCipherMac.#ctor(org.bouncycastle.crypto.BlockCipher,System.Int32)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:org.bouncycastle.crypto.macs.CBCBlockCipherMac.#ctor(org.bouncycastle.crypto.BlockCipher,System.Int32,org.bouncycastle.crypto.paddings.BlockCipherPadding)" -->
        <member name="M:org.bouncycastle.crypto.macs.CBCBlockCipherMac.reset">
            Reset the mac generator.
        </member>
        <member name="T:org.bouncycastle.crypto.macs.MacCFBBlockCipher">
            implements a Cipher-FeedBack (CFB) mode on top of a simple cipher.
        </member>
        <member name="M:org.bouncycastle.crypto.macs.MacCFBBlockCipher.#ctor(org.bouncycastle.crypto.BlockCipher,System.Int32)">
             Basic constructor.
            
             @param cipher the block cipher to be used as the basis of the
             feedback mode.
             @param blockSize the block size in bits (note: a multiple of 8)
        </member>
        <member name="M:org.bouncycastle.crypto.macs.MacCFBBlockCipher.init(org.bouncycastle.crypto.CipherParameters)">
             Initialise the cipher and, possibly, the initialisation vector (IV).
             If an IV isn't passed as part of the parameter, the IV will be all zeros.
             An IV which is too short is handled in FIPS compliant fashion.
            
             @param param the key and other data required by the cipher.
             @exception ArgumentException if the params argument is
             inappropriate.
        </member>
        <member name="M:org.bouncycastle.crypto.macs.MacCFBBlockCipher.getAlgorithmName">
             return the algorithm name and mode.
            
             @return the name of the underlying algorithm followed by "/CFB"
             and the block size in bits.
        </member>
        <member name="M:org.bouncycastle.crypto.macs.MacCFBBlockCipher.getBlockSize">
             return the block size we are operating at.
            
             @return the block size we are operating at (in bytes).
        </member>
        <member name="M:org.bouncycastle.crypto.macs.MacCFBBlockCipher.processBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Process one block of input from the array in and write it to
             the out array.
            
             @param in the array containing the input data.
             @param inOff offset into the in array the data starts at.
             @param out the array the output data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception IllegalStateException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="M:org.bouncycastle.crypto.macs.MacCFBBlockCipher.reset">
            reset the chaining vector back to the IV and reset the underlying
            cipher.
        </member>
        <member name="M:org.bouncycastle.crypto.macs.CFBBlockCipherMac.#ctor(org.bouncycastle.crypto.BlockCipher)">
             create a standard MAC based on a CFB block cipher. This will produce an
             authentication code half the length of the block size of the cipher, with
             the CFB mode set to 8 bits.
            
             @param cipher the cipher to be used as the basis of the MAC generation.
        </member>
        <member name="M:org.bouncycastle.crypto.macs.CFBBlockCipherMac.#ctor(org.bouncycastle.crypto.BlockCipher,org.bouncycastle.crypto.paddings.BlockCipherPadding)">
             create a standard MAC based on a CFB block cipher. This will produce an
             authentication code half the length of the block size of the cipher, with
             the CFB mode set to 8 bits.
            
             @param cipher the cipher to be used as the basis of the MAC generation.
             @param padding the padding to be used.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:org.bouncycastle.crypto.macs.CFBBlockCipherMac.#ctor(org.bouncycastle.crypto.BlockCipher,System.Int32,System.Int32)" -->
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:org.bouncycastle.crypto.macs.CFBBlockCipherMac.#ctor(org.bouncycastle.crypto.BlockCipher,System.Int32,System.Int32,org.bouncycastle.crypto.paddings.BlockCipherPadding)" -->
        <member name="M:org.bouncycastle.crypto.macs.CFBBlockCipherMac.reset">
            Reset the mac generator.
        </member>
        <member name="T:org.bouncycastle.crypto.macs.HMac">
             HMAC implementation based on RFC2104
            
             H(K XOR opad, H(K XOR ipad, text))
        </member>
        <member name="M:org.bouncycastle.crypto.macs.HMac.reset">
            Reset the mac generator.
        </member>
        <member name="T:org.bouncycastle.crypto.modes.CBCBlockCipher">
            implements Cipher-Block-Chaining (CBC) mode on top of a simple cipher.
        </member>
        <member name="M:org.bouncycastle.crypto.modes.CBCBlockCipher.#ctor(org.bouncycastle.crypto.BlockCipher)">
             Basic constructor.
            
             @param cipher the block cipher to be used as the basis of chaining.
        </member>
        <member name="M:org.bouncycastle.crypto.modes.CBCBlockCipher.getUnderlyingCipher">
             return the underlying block cipher that we are wrapping.
            
             @return the underlying block cipher that we are wrapping.
        </member>
        <member name="M:org.bouncycastle.crypto.modes.CBCBlockCipher.init(System.Boolean,org.bouncycastle.crypto.CipherParameters)">
             Initialise the cipher and, possibly, the initialisation vector (IV).
             If an IV isn't passed as part of the parameter, the IV will be all zeros.
            
             @param forEncryption if true the cipher is initialised for
              encryption, if false for decryption.
             @param param the key and other data required by the cipher.
             @exception IllegalArgumentException if the params argument is
             inappropriate.
        </member>
        <member name="M:org.bouncycastle.crypto.modes.CBCBlockCipher.getAlgorithmName">
             return the algorithm name and mode.
            
             @return the name of the underlying algorithm followed by "/CBC".
        </member>
        <member name="M:org.bouncycastle.crypto.modes.CBCBlockCipher.getBlockSize">
             return the block size of the underlying cipher.
            
             @return the block size of the underlying cipher.
        </member>
        <member name="M:org.bouncycastle.crypto.modes.CBCBlockCipher.processBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Process one block of input from the array in and write it to
             the out array.
            
             @param in the array containing the input data.
             @param inOff offset into the in array the data starts at.
             @param out the array the output data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception IllegalStateException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="M:org.bouncycastle.crypto.modes.CBCBlockCipher.reset">
            reset the chaining vector back to the IV and reset the underlying
            cipher.
        </member>
        <member name="M:org.bouncycastle.crypto.modes.CBCBlockCipher.encryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Do the appropriate chaining step for CBC mode encryption.
            
             @param in the array containing the data to be encrypted.
             @param inOff offset into the in array the data starts at.
             @param out the array the encrypted data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception IllegalStateException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="M:org.bouncycastle.crypto.modes.CBCBlockCipher.decryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Do the appropriate chaining step for CBC mode decryption.
            
             @param in the array containing the data to be decrypted.
             @param inOff offset into the in array the data starts at.
             @param out the array the decrypted data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception IllegalStateException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="T:org.bouncycastle.crypto.modes.CFBBlockCipher">
            implements a Cipher-FeedBack (CFB) mode on top of a simple cipher.
        </member>
        <member name="M:org.bouncycastle.crypto.modes.CFBBlockCipher.#ctor(org.bouncycastle.crypto.BlockCipher,System.Int32)">
             Basic constructor.
            
             @param cipher the block cipher to be used as the basis of the
             feedback mode.
             @param blockSize the block size in bits (note: a multiple of 8)
        </member>
        <member name="M:org.bouncycastle.crypto.modes.CFBBlockCipher.getUnderlyingCipher">
             return the underlying block cipher that we are wrapping.
            
             @return the underlying block cipher that we are wrapping.
        </member>
        <member name="M:org.bouncycastle.crypto.modes.CFBBlockCipher.init(System.Boolean,org.bouncycastle.crypto.CipherParameters)">
             Initialise the cipher and, possibly, the initialisation vector (IV).
             If an IV isn't passed as part of the parameter, the IV will be all zeros.
             An IV which is too short is handled in FIPS compliant fashion.
            
             @param forEncryption if true the cipher is initialised for
              encryption, if false for decryption.
             @param param the key and other data required by the cipher.
             @exception IllegalArgumentException if the params argument is
             inappropriate.
        </member>
        <member name="M:org.bouncycastle.crypto.modes.CFBBlockCipher.getAlgorithmName">
             return the algorithm name and mode.
            
             @return the name of the underlying algorithm followed by "/CFB"
             and the block size in bits.
        </member>
        <member name="M:org.bouncycastle.crypto.modes.CFBBlockCipher.getBlockSize">
             return the block size we are operating at.
            
             @return the block size we are operating at (in bytes).
        </member>
        <member name="M:org.bouncycastle.crypto.modes.CFBBlockCipher.processBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Process one block of input from the array in and write it to
             the out array.
            
             @param in the array containing the input data.
             @param inOff offset into the in array the data starts at.
             @param out the array the output data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception IllegalStateException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="M:org.bouncycastle.crypto.modes.CFBBlockCipher.encryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Do the appropriate processing for CFB mode encryption.
            
             @param in the array containing the data to be encrypted.
             @param inOff offset into the in array the data starts at.
             @param out the array the encrypted data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception IllegalStateException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="M:org.bouncycastle.crypto.modes.CFBBlockCipher.decryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Do the appropriate processing for CFB mode decryption.
            
             @param in the array containing the data to be decrypted.
             @param inOff offset into the in array the data starts at.
             @param out the array the encrypted data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception IllegalStateException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="M:org.bouncycastle.crypto.modes.CFBBlockCipher.reset">
            reset the chaining vector back to the IV and reset the underlying
            cipher.
        </member>
        <member name="T:org.bouncycastle.crypto.modes.CTSBlockCipher">
            A Cipher Text Stealing (CTS) mode cipher. CTS allows block ciphers to
            be used to produce cipher text which is the same length as the plain text.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:org.bouncycastle.crypto.BufferedBlockCipher" -->
        <member name="M:org.bouncycastle.crypto.BufferedBlockCipher.#ctor">
            constructor for subclasses
        </member>
        <member name="M:org.bouncycastle.crypto.BufferedBlockCipher.#ctor(org.bouncycastle.crypto.BlockCipher)">
             Create a buffered block cipher without padding.
            
             @param cipher the underlying block cipher this buffering object wraps.
             @param padded true if the buffer should add, or remove, pad bytes,
             false otherwise.
        </member>
        <member name="M:org.bouncycastle.crypto.BufferedBlockCipher.getUnderlyingCipher">
             return the cipher this object wraps.
            
             @return the cipher this object wraps.
        </member>
        <member name="M:org.bouncycastle.crypto.BufferedBlockCipher.init(System.Boolean,org.bouncycastle.crypto.CipherParameters)">
             initialise the cipher.
            
             @param forEncryption if true the cipher is initialised for
              encryption, if false for decryption.
             @param param the key and other data required by the cipher.
             @exception IllegalArgumentException if the params argument is
             inappropriate.
        </member>
        <member name="M:org.bouncycastle.crypto.BufferedBlockCipher.getBlockSize">
             return the blocksize for the underlying cipher.
            
             @return the blocksize for the underlying cipher.
        </member>
        <member name="M:org.bouncycastle.crypto.BufferedBlockCipher.getUpdateOutputSize(System.Int32)">
             return the size of the output buffer required for an update 
             an input of len bytes.
            
             @param len the length of the input.
             @return the space required to accommodate a call to update
             with len bytes of input.
        </member>
        <member name="M:org.bouncycastle.crypto.BufferedBlockCipher.getOutputSize(System.Int32)">
             return the size of the output buffer required for an update plus a
             doFinal with an input of len bytes.
            
             @param len the length of the input.
             @return the space required to accommodate a call to update and doFinal
             with len bytes of input.
        </member>
        <member name="M:org.bouncycastle.crypto.BufferedBlockCipher.processByte(System.Byte,System.Byte[],System.Int32)">
             process a single byte, producing an output block if neccessary.
            
             @param in the input byte.
             @param out the space for any output that might be produced.
             @param outOff the offset from which the output will be copied.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there isn't enough space in out.
             @exception IllegalStateException if the cipher isn't initialised.
        </member>
        <member name="M:org.bouncycastle.crypto.BufferedBlockCipher.processBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
             process an array of bytes, producing output if necessary.
            
             @param in the input byte array.
             @param inOff the offset at which the input data starts.
             @param len the number of bytes to be copied out of the input array.
             @param out the space for any output that might be produced.
             @param outOff the offset from which the output will be copied.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there isn't enough space in out.
             @exception IllegalStateException if the cipher isn't initialised.
        </member>
        <member name="M:org.bouncycastle.crypto.BufferedBlockCipher.doFinal(System.Byte[],System.Int32)">
             Process the last block in the buffer.
            
             @param out the array the block currently being held is copied into.
             @param outOff the offset at which the copying starts.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there is insufficient space in out for
             the output, or the input is not block size aligned and should be.
             @exception IllegalStateException if the underlying cipher is not
             initialised.
             @exception InvalidCipherTextException if padding is expected and not found.
             @exception DataLengthException if the input is not block size
             aligned.
        </member>
        <member name="M:org.bouncycastle.crypto.BufferedBlockCipher.reset">
            Reset the buffer and cipher. After resetting the object is in the same
            state as it was after the last init (if there was one).
        </member>
        <member name="M:org.bouncycastle.crypto.modes.CTSBlockCipher.#ctor(org.bouncycastle.crypto.BlockCipher)">
             Create a buffered block cipher that uses Cipher Text Stealing
            
             @param cipher the underlying block cipher this buffering object wraps.
        </member>
        <member name="M:org.bouncycastle.crypto.modes.CTSBlockCipher.getUpdateOutputSize(System.Int32)">
             return the size of the output buffer required for an update 
             an input of len bytes.
            
             @param len the length of the input.
             @return the space required to accommodate a call to update
             with len bytes of input.
        </member>
        <member name="M:org.bouncycastle.crypto.modes.CTSBlockCipher.getOutputSize(System.Int32)">
             return the size of the output buffer required for an update plus a
             doFinal with an input of len bytes.
            
             @param len the length of the input.
             @return the space required to accommodate a call to update and doFinal
             with len bytes of input.
        </member>
        <member name="M:org.bouncycastle.crypto.modes.CTSBlockCipher.processByte(System.Byte,System.Byte[],System.Int32)">
             process a single byte, producing an output block if neccessary.
            
             @param in the input byte.
             @param out the space for any output that might be produced.
             @param outOff the offset from which the output will be copied.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there isn't enough space in out.
             @exception IllegalStateException if the cipher isn't initialised.
        </member>
        <member name="M:org.bouncycastle.crypto.modes.CTSBlockCipher.processBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
             process an array of bytes, producing output if necessary.
            
             @param in the input byte array.
             @param inOff the offset at which the input data starts.
             @param len the number of bytes to be copied out of the input array.
             @param out the space for any output that might be produced.
             @param outOff the offset from which the output will be copied.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there isn't enough space in out.
             @exception IllegalStateException if the cipher isn't initialised.
        </member>
        <member name="M:org.bouncycastle.crypto.modes.CTSBlockCipher.doFinal(System.Byte[],System.Int32)">
             Process the last block in the buffer.
            
             @param out the array the block currently being held is copied into.
             @param outOff the offset at which the copying starts.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there is insufficient space in out for
             the output.
             @exception IllegalStateException if the underlying cipher is not
             initialised.
             @exception InvalidCipherTextException if cipher text decrypts wrongly (in
             case the exception will never get thrown).
        </member>
        <member name="T:org.bouncycastle.crypto.modes.OFBBlockCipher">
            implements a Output-FeedBack (OFB) mode on top of a simple cipher.
        </member>
        <member name="M:org.bouncycastle.crypto.modes.OFBBlockCipher.#ctor(org.bouncycastle.crypto.BlockCipher,System.Int32)">
             Basic constructor.
            
             @param cipher the block cipher to be used as the basis of the
             feedback mode.
             @param blockSize the block size in bits (note: a multiple of 8)
        </member>
        <member name="M:org.bouncycastle.crypto.modes.OFBBlockCipher.getUnderlyingCipher">
             return the underlying block cipher that we are wrapping.
            
             @return the underlying block cipher that we are wrapping.
        </member>
        <member name="M:org.bouncycastle.crypto.modes.OFBBlockCipher.init(System.Boolean,org.bouncycastle.crypto.CipherParameters)">
             Initialise the cipher and, possibly, the initialisation vector (IV).
             If an IV isn't passed as part of the parameter, the IV will be all zeros.
             An IV which is too short is handled in FIPS compliant fashion.
            
             @param forEncryption if true the cipher is initialised for
              encryption, if false for decryption.
             @param param the key and other data required by the cipher.
             @exception IllegalArgumentException if the params argument is
             inappropriate.
        </member>
        <member name="M:org.bouncycastle.crypto.modes.OFBBlockCipher.getAlgorithmName">
             return the algorithm name and mode.
            
             @return the name of the underlying algorithm followed by "/OFB"
             and the block size in bits
        </member>
        <member name="M:org.bouncycastle.crypto.modes.OFBBlockCipher.getBlockSize">
             return the block size we are operating at (in bytes).
            
             @return the block size we are operating at (in bytes).
        </member>
        <member name="M:org.bouncycastle.crypto.modes.OFBBlockCipher.processBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Process one block of input from the array in and write it to
             the out array.
            
             @param in the array containing the input data.
             @param inOff offset into the in array the data starts at.
             @param out the array the output data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception IllegalStateException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="M:org.bouncycastle.crypto.modes.OFBBlockCipher.reset">
            reset the feedback vector back to the IV and reset the underlying
            cipher.
        </member>
        <member name="T:org.bouncycastle.crypto.modes.SICBlockCipher">
            Implements the Segmented Integer Counter (SIC) mode on top of a simple
            block cipher.
        </member>
        <member name="M:org.bouncycastle.crypto.modes.SICBlockCipher.#ctor(org.bouncycastle.crypto.BlockCipher)">
             Basic constructor.
            
             @param c the block cipher to be used.
        </member>
        <member name="M:org.bouncycastle.crypto.modes.SICBlockCipher.getUnderlyingCipher">
             return the underlying block cipher that we are wrapping.
            
             @return the underlying block cipher that we are wrapping.
        </member>
        <member name="T:org.bouncycastle.crypto.paddings.BlockCipherPadding">
            Block cipher padders are expected to conform to this interface
        </member>
        <member name="M:org.bouncycastle.crypto.paddings.BlockCipherPadding.init(org.bouncycastle.security.SecureRandom)">
             Initialise the padder.
            
             @param param parameters, if any required.
        </member>
        <member name="M:org.bouncycastle.crypto.paddings.BlockCipherPadding.getPaddingName">
             Return the name of the algorithm the cipher implements.
            
             @return the name of the algorithm the cipher implements.
        </member>
        <member name="M:org.bouncycastle.crypto.paddings.BlockCipherPadding.addPadding(System.Byte[],System.Int32)">
            add the pad bytes to the passed in block, returning the
            number of bytes added.
        </member>
        <member name="M:org.bouncycastle.crypto.paddings.BlockCipherPadding.padCount(System.Byte[])">
            return the number of pad bytes present in the block.
            @exception InvalidCipherTextException if the padding is badly formed
            or invalid.
        </member>
        <member name="T:org.bouncycastle.crypto.paddings.ISO10126d2Padding">
            A padder that adds ISO10126-2 padding to a block.
        </member>
        <member name="M:org.bouncycastle.crypto.paddings.ISO10126d2Padding.init(org.bouncycastle.security.SecureRandom)">
             Initialise the padder.
            
             @param random a SecureRandom if available.
        </member>
        <member name="M:org.bouncycastle.crypto.paddings.ISO10126d2Padding.getPaddingName">
             Return the name of the algorithm the cipher implements.
            
             @return the name of the algorithm the cipher implements.
        </member>
        <member name="M:org.bouncycastle.crypto.paddings.ISO10126d2Padding.addPadding(System.Byte[],System.Int32)">
            add the pad bytes to the passed in block, returning the
            number of bytes added.
        </member>
        <member name="M:org.bouncycastle.crypto.paddings.ISO10126d2Padding.padCount(System.Byte[])">
            return the number of pad bytes present in the block.
        </member>
        <member name="T:org.bouncycastle.crypto.paddings.PaddedBufferedBlockCipher">
            A wrapper class that allows block ciphers to be used to process data in
            a piecemeal fashion with padding. The PaddedBufferedBlockCipher
            outputs a block only when the buffer is full and more data is being added,
            or on a doFinal (unless the current block in the buffer is a pad block).
            The default padding mechanism used is the one outlined in PKCS5/PKCS7.
        </member>
        <member name="M:org.bouncycastle.crypto.paddings.PaddedBufferedBlockCipher.#ctor(org.bouncycastle.crypto.BlockCipher,org.bouncycastle.crypto.paddings.BlockCipherPadding)">
             Create a buffered block cipher with the desired padding.
            
             @param cipher the underlying block cipher this buffering object wraps.
             @param padding the padding type.
        </member>
        <member name="M:org.bouncycastle.crypto.paddings.PaddedBufferedBlockCipher.#ctor(org.bouncycastle.crypto.BlockCipher)">
             Create a buffered block cipher PKCS7 padding
            
             @param cipher the underlying block cipher this buffering object wraps.
        </member>
        <member name="M:org.bouncycastle.crypto.paddings.PaddedBufferedBlockCipher.init(System.Boolean,org.bouncycastle.crypto.CipherParameters)">
             initialise the cipher.
            
             @param forEncryption if true the cipher is initialised for
              encryption, if false for decryption.
             @param param the key and other data required by the cipher.
             @exception IllegalArgumentException if the params argument is
             inappropriate.
        </member>
        <member name="M:org.bouncycastle.crypto.paddings.PaddedBufferedBlockCipher.getOutputSize(System.Int32)">
             return the minimum size of the output buffer required for an update
             plus a doFinal with an input of len bytes.
            
             @param len the length of the input.
             @return the space required to accommodate a call to update and doFinal
             with len bytes of input.
        </member>
        <member name="M:org.bouncycastle.crypto.paddings.PaddedBufferedBlockCipher.getUpdateOutputSize(System.Int32)">
             return the size of the output buffer required for an update 
             an input of len bytes.
            
             @param len the length of the input.
             @return the space required to accommodate a call to update
             with len bytes of input.
        </member>
        <member name="M:org.bouncycastle.crypto.paddings.PaddedBufferedBlockCipher.processByte(System.Byte,System.Byte[],System.Int32)">
             process a single byte, producing an output block if neccessary.
            
             @param in the input byte.
             @param out the space for any output that might be produced.
             @param outOff the offset from which the output will be copied.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there isn't enough space in out.
             @exception IllegalStateException if the cipher isn't initialised.
        </member>
        <member name="M:org.bouncycastle.crypto.paddings.PaddedBufferedBlockCipher.processBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
             process an array of bytes, producing output if necessary.
            
             @param in the input byte array.
             @param inOff the offset at which the input data starts.
             @param len the number of bytes to be copied out of the input array.
             @param out the space for any output that might be produced.
             @param outOff the offset from which the output will be copied.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there isn't enough space in out.
             @exception IllegalStateException if the cipher isn't initialised.
        </member>
        <member name="M:org.bouncycastle.crypto.paddings.PaddedBufferedBlockCipher.doFinal(System.Byte[],System.Int32)">
             Process the last block in the buffer. If the buffer is currently
             full and padding needs to be added a call to doFinal will produce
             2 * getBlockSize() bytes.
            
             @param out the array the block currently being held is copied into.
             @param outOff the offset at which the copying starts.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there is insufficient space in out for
             the output or we are decrypting and the input is not block size aligned.
             @exception IllegalStateException if the underlying cipher is not
             initialised.
             @exception InvalidCipherTextException if padding is expected and not found.
        </member>
        <member name="T:org.bouncycastle.crypto.paddings.PKCS7Padding">
            A padder that adds PKCS7/PKCS5 padding to a block.
        </member>
        <member name="M:org.bouncycastle.crypto.paddings.PKCS7Padding.init(org.bouncycastle.security.SecureRandom)">
             Initialise the padder.
            
             @param random - a SecureRandom if available.
        </member>
        <member name="M:org.bouncycastle.crypto.paddings.PKCS7Padding.getPaddingName">
             Return the name of the algorithm the cipher implements.
            
             @return the name of the algorithm the cipher implements.
        </member>
        <member name="M:org.bouncycastle.crypto.paddings.PKCS7Padding.addPadding(System.Byte[],System.Int32)">
            add the pad bytes to the passed in block, returning the
            number of bytes added.
        </member>
        <member name="M:org.bouncycastle.crypto.paddings.PKCS7Padding.padCount(System.Byte[])">
            return the number of pad bytes present in the block.
        </member>
        <member name="T:org.bouncycastle.crypto.paddings.TBCPadding">
            <summary> A padder that adds Trailing-Bit-Compliment padding to a block.
            <p>
            This padding pads the block out compliment of the last bit
            of the plain text.
            </p>
            </summary>
        </member>
        <member name="M:org.bouncycastle.crypto.paddings.TBCPadding.getPaddingName">
            <summary> Return the name of the algorithm the cipher implements.
            
            </summary>
            <returns> the name of the algorithm the cipher implements.
            </returns>
        </member>
        <member name="M:org.bouncycastle.crypto.paddings.TBCPadding.init(org.bouncycastle.security.SecureRandom)">
            <summary> Initialise the padder.
            
            </summary>
            <param name="random">- a SecureRandom if available.
            </param>
        </member>
        <member name="M:org.bouncycastle.crypto.paddings.TBCPadding.addPadding(System.Byte[],System.Int32)">
            <summary> add the pad bytes to the passed in block, returning the
            number of bytes added.
            <p>
            Note: this assumes that the last block of plain text is always 
            passed to it inside in. i.e. if inOff is zero, indicating the
            entire block is to be overwritten with padding the value of in
            should be the same as the last block of plain text.
            </p>
            </summary>
        </member>
        <member name="M:org.bouncycastle.crypto.paddings.TBCPadding.padCount(System.Byte[])">
            <summary> return the number of pad bytes present in the block.</summary>
        </member>
        <member name="T:org.bouncycastle.crypto.paddings.X923Padding">
            A padder that adds X9.23 padding to a block - if a SecureRandom is
            passed in random padding is assumed, otherwise padding with zeros is used.
        </member>
        <member name="M:org.bouncycastle.crypto.paddings.X923Padding.init(org.bouncycastle.security.SecureRandom)">
             Initialise the padder.
            
             @param random a SecureRandom if one is available.
        </member>
        <member name="M:org.bouncycastle.crypto.paddings.X923Padding.getPaddingName">
             Return the name of the algorithm the cipher implements.
            
             @return the name of the algorithm the cipher implements.
        </member>
        <member name="M:org.bouncycastle.crypto.paddings.X923Padding.addPadding(System.Byte[],System.Int32)">
            add the pad bytes to the passed in block, returning the
            number of bytes added.
        </member>
        <member name="M:org.bouncycastle.crypto.paddings.X923Padding.padCount(System.Byte[])">
            return the number of pad bytes present in the block.
        </member>
        <member name="T:org.bouncycastle.crypto.paddings.ZeroBytePadding">
            <summary> A padder that adds NULL byte padding to a block.</summary>
        </member>
        <member name="M:org.bouncycastle.crypto.paddings.ZeroBytePadding.init(org.bouncycastle.security.SecureRandom)">
            <summary> Initialise the padder.
            
            </summary>
            <param name="random">- a SecureRandom if available.
            </param>
        </member>
        <member name="M:org.bouncycastle.crypto.paddings.ZeroBytePadding.addPadding(System.Byte[],System.Int32)">
            <summary> add the pad bytes to the passed in block, returning the
            number of bytes added.
            </summary>
        </member>
        <member name="M:org.bouncycastle.crypto.paddings.ZeroBytePadding.padCount(System.Byte[])">
            <summary> return the number of pad bytes present in the block.</summary>
        </member>
        <member name="M:org.bouncycastle.crypto.paddings.ZeroBytePadding.getPaddingName">
             Return the name of the algorithm the cipher implements.
            
             @return the name of the algorithm the cipher implements.
        </member>
        <member name="P:org.bouncycastle.crypto.paddings.ZeroBytePadding.PaddingName">
            <summary> Return the name of the algorithm the cipher implements.
            
            </summary>
            <returns> the name of the algorithm the cipher implements.
            </returns>
        </member>
        <member name="T:org.bouncycastle.crypto.CipherParameters">
            all parameter classes implement this.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:org.bouncycastle.crypto.parameters.DESParameters.isWeakKey(System.Byte[],System.Int32)" -->
        <member name="M:org.bouncycastle.crypto.parameters.DESParameters.setOddParity(System.Byte[])">
             DES Keys use the LSB as the odd parity bit.  This can
             be used to check for corrupt keys.
            
             @param bytes the byte array to set the parity on.
        </member>
        <member name="M:org.bouncycastle.crypto.parameters.DESedeParameters.isWeakKey(System.Byte[],System.Int32,System.Int32)">
             return true if the passed in key is a DES-EDE weak key.
            
             @param key bytes making up the key
             @param offset offset into the byte array the key starts at
             @param length number of bytes making up the key
        </member>
        <member name="M:org.bouncycastle.crypto.parameters.DESedeParameters.isWeakKey(System.Byte[],System.Int32)">
             return true if the passed in key is a DES-EDE weak key.
            
             @param key bytes making up the key
             @param offset offset into the byte array the key starts at
        </member>
        <member name="T:org.bouncycastle.crypto.KeyGenerationParameters">
            The base class for parameters to key generators.
        </member>
        <member name="M:org.bouncycastle.crypto.KeyGenerationParameters.#ctor(org.bouncycastle.security.SecureRandom,System.Int32)">
             initialise the generator with a source of randomness
             and a strength (in bits).
            
             @param random the random byte source.
             @param strength the size, in bits, of the keys we want to produce.
        </member>
        <member name="M:org.bouncycastle.crypto.KeyGenerationParameters.getRandom">
             return the random source associated with this
             generator.
            
             @return the generators random source.
        </member>
        <member name="M:org.bouncycastle.crypto.KeyGenerationParameters.getStrength">
             return the bit strength for keys produced by this generator,
            
             @return the strength of the keys this generator produces (in bits).
        </member>
        <member name="M:org.bouncycastle.crypto.parameters.ElGamalParameters.getG">
            return the generator - g
        </member>
        <member name="T:org.bouncycastle.crypto.parameters.IESParameters">
            parameters for using an integrated cipher in stream mode.
        </member>
        <member name="M:org.bouncycastle.crypto.parameters.IESParameters.#ctor(System.Byte[],System.Byte[],System.Int32)">
            @param derivation the derivation parameter for the KDF function.
            @param encoding the encoding parameter for the KDF function.
            @param macKeySize the size of the MAC key (in bits).
        </member>
        <member name="M:org.bouncycastle.crypto.parameters.IESWithCipherParameters.#ctor(System.Byte[],System.Byte[],System.Int32,System.Int32)">
            @param derivation the derivation parameter for the KDF function.
            @param encoding the encoding parameter for the KDF function.
            @param macKeySize the size of the MAC key (in bits).
            @param cipherKeySize the size of the associated Cipher key (in bits).
        </member>
        <member name="T:org.bouncycastle.crypto.parameters.KDFParameters">
            parameters for Key derivation functions.
        </member>
        <member name="T:org.bouncycastle.crypto.DerivationParameters">
            Parameters for key/byte stream derivation classes
        </member>
        <member name="T:org.bouncycastle.crypto.parameters.MGFParameters">
            parameters for mask derivation functions.
        </member>
        <member name="T:org.bouncycastle.crypto.parameters.ParametersWithSalt">
            <summary> Cipher parameters with a fixed salt value associated with them.</summary>
        </member>
        <member name="M:org.bouncycastle.crypto.parameters.RSAPrivateCrtKeyParameters.#ctor(org.bouncycastle.math.BigInteger,org.bouncycastle.math.BigInteger,org.bouncycastle.math.BigInteger,org.bouncycastle.math.BigInteger,org.bouncycastle.math.BigInteger,org.bouncycastle.math.BigInteger,org.bouncycastle.math.BigInteger,org.bouncycastle.math.BigInteger)">
            
        </member>
        <member name="M:org.bouncycastle.crypto.Signer.getAlgorithmName">
             Return the name of the algorithm the signer implements.
            
             @return the name of the algorithm the signer implements.
        </member>
        <member name="M:org.bouncycastle.crypto.Signer.init(System.Boolean,org.bouncycastle.crypto.CipherParameters)">
            Initialise the signer for signing or verification.
            
            @param forSigning true if for signing, false otherwise
            @param param necessary parameters.
        </member>
        <member name="M:org.bouncycastle.crypto.Signer.update(System.Byte)">
            update the internal digest with the byte b
        </member>
        <member name="M:org.bouncycastle.crypto.Signer.update(System.Byte[],System.Int32,System.Int32)">
            update the internal digest with the byte array in
        </member>
        <member name="M:org.bouncycastle.crypto.Signer.generateSignature">
            generate a signature for the message we've been loaded with using
            the key we were initialised with.
        </member>
        <member name="M:org.bouncycastle.crypto.Signer.verifySignature(System.Byte[])">
            return true if the internal state represents the signature described
            in the passed in array.
        </member>
        <member name="M:org.bouncycastle.crypto.Signer.reset">
            reset the internal state
        </member>
        <member name="M:org.bouncycastle.crypto.signers.DSADigestSigner.update(System.Byte)">
            update the internal digest with the byte b
        </member>
        <member name="M:org.bouncycastle.crypto.signers.DSADigestSigner.update(System.Byte[],System.Int32,System.Int32)">
            update the internal digest with the byte array in
        </member>
        <member name="M:org.bouncycastle.crypto.signers.DSADigestSigner.generateSignature">
            generate a signature for the message we've been loaded with using
            the key we were initialised with.
        </member>
        <member name="M:org.bouncycastle.crypto.signers.DSADigestSigner.verifySignature(System.Byte[])">
            return true if the internal state represents the signature described
            in the passed in array.
        </member>
        <member name="M:org.bouncycastle.crypto.signers.DSADigestSigner.reset">
            reset the internal state
        </member>
        <member name="T:org.bouncycastle.crypto.signers.DSASigner">
            The Digital Signature Algorithm - as described in "Handbook of Applied
            Cryptography", pages 452 - 453.
        </member>
        <member name="T:org.bouncycastle.crypto.DSA">
            interface for classes implementing the Digital Signature Algorithm
        </member>
        <member name="M:org.bouncycastle.crypto.DSA.init(System.Boolean,org.bouncycastle.crypto.CipherParameters)">
             initialise the signer for signature generation or signature
             verification.
            
             @param forSigning true if we are generating a signature, false
             otherwise.
             @param param key parameters for signature generation.
        </member>
        <member name="M:org.bouncycastle.crypto.DSA.generateSignature(System.Byte[])">
             sign the passed in message (usually the output of a hash function).
            
             @param message the message to be signed.
             @return two big integers representing the r and s values respectively.
        </member>
        <member name="M:org.bouncycastle.crypto.DSA.verifySignature(System.Byte[],org.bouncycastle.math.BigInteger,org.bouncycastle.math.BigInteger)">
             verify the message message against the signature values r and s.
            
             @param message the message that was supposed to have been signed.
             @param r the r signature value.
             @param s the s signature value.
        </member>
        <member name="M:org.bouncycastle.crypto.signers.DSASigner.generateSignature(System.Byte[])">
             generate a signature for the given message using the key we were
             initialised with. For conventional DSA the message should be a SHA-1
             hash of the message of interest.
            
             @param message the message that will be verified later.
        </member>
        <member name="M:org.bouncycastle.crypto.signers.DSASigner.verifySignature(System.Byte[],org.bouncycastle.math.BigInteger,org.bouncycastle.math.BigInteger)">
            return true if the value r and s represent a DSA signature for
            the passed in message for standard DSA the message should be a
            SHA-1 hash of the real message to be verified.
        </member>
        <member name="T:org.bouncycastle.crypto.signers.ECDSASigner">
            EC-DSA as described in X9.62
        </member>
        <member name="M:org.bouncycastle.crypto.signers.ECDSASigner.generateSignature(System.Byte[])">
             generate a signature for the given message using the key we were
             initialised with. For conventional DSA the message should be a SHA-1
             hash of the message of interest.
            
             @param message the message that will be verified later.
        </member>
        <member name="M:org.bouncycastle.crypto.signers.ECDSASigner.verifySignature(System.Byte[],org.bouncycastle.math.BigInteger,org.bouncycastle.math.BigInteger)">
            return true if the value r and s represent a DSA signature for
            the passed in message (for standard DSA the message should be
            a SHA-1 hash of the real message to be verified).
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:org.bouncycastle.crypto.signers.ISO9796d2PSSSigner" -->
        <member name="T:org.bouncycastle.crypto.SignerWithRecovery">
            Signer with message recovery.
        </member>
        <member name="M:org.bouncycastle.crypto.SignerWithRecovery.hasFullMessage">
            Returns true if the signer has recovered the full message as
            part of signature verification.
            
            @return true if full message recovered.
        </member>
        <member name="M:org.bouncycastle.crypto.SignerWithRecovery.getRecoveredMessage">
            Returns a reference to what message was recovered (if any).
            
            @return full/partial message, null if nothing.
        </member>
        <member name="M:org.bouncycastle.crypto.signers.ISO9796d2PSSSigner.getRecoveredMessage">
            <summary> Return a reference to the recoveredMessage message.
            
            </summary>
            <returns> the full/partial recoveredMessage message.
            </returns>
            <seealso cref="T:org.bouncycastle.crypto.SignerWithRecovery">
            </seealso>
        </member>
        <member name="M:org.bouncycastle.crypto.signers.ISO9796d2PSSSigner.#ctor(org.bouncycastle.crypto.AsymmetricBlockCipher,org.bouncycastle.crypto.Digest,System.Int32,System.Boolean)">
            <summary> Generate a signer for the with either implicit or explicit trailers
            for ISO9796-2, scheme 2 or 3.
            
            </summary>
            <param name="cipher">base cipher to use for signature creation/verification
            </param>
            <param name="digest">digest to use.
            </param>
            <param name="saltLength">length of salt in bytes.
            </param>
            <param name="implicit">whether or not the trailer is implicit or gives the hash.
            </param>
        </member>
        <member name="M:org.bouncycastle.crypto.signers.ISO9796d2PSSSigner.#ctor(org.bouncycastle.crypto.AsymmetricBlockCipher,org.bouncycastle.crypto.Digest,System.Int32)">
            <summary> Constructor for a signer with an explicit digest trailer.
            
            </summary>
            <param name="cipher">cipher to use.
            </param>
            <param name="digest">digest to sign with.
            </param>
            <param name="saltLength">length of salt in bytes.
            </param>
        </member>
        <member name="M:org.bouncycastle.crypto.signers.ISO9796d2PSSSigner.init(System.Boolean,org.bouncycastle.crypto.CipherParameters)">
            <summary> Initialise the signer.
            
            </summary>
            <param name="forSigning">true if for signing, false if for verification.
            </param>
            <param name="param">parameters for signature generation/verification. If the
            parameters are for generation they should be a ParametersWithRandom,
            a ParametersWithSalt, or just an RSAKeyParameters object. If RSAKeyParameters
            are passed in a SecureRandom will be created.
            </param>
            <exception cref="T:System.ArgumentException"> IllegalArgumentException if wrong parameter type or a fixed 
            salt is passed in which is the wrong length.
            </exception>
        </member>
        <member name="M:org.bouncycastle.crypto.signers.ISO9796d2PSSSigner.isSameAs(System.Byte[],System.Byte[])">
            <summary> compare two byte arrays.</summary>
        </member>
        <member name="M:org.bouncycastle.crypto.signers.ISO9796d2PSSSigner.clearBlock(System.Byte[])">
            <summary> clear possible sensitive data</summary>
        </member>
        <member name="M:org.bouncycastle.crypto.signers.ISO9796d2PSSSigner.update(System.Byte)">
            <summary> update the internal digest with the byte b</summary>
        </member>
        <member name="M:org.bouncycastle.crypto.signers.ISO9796d2PSSSigner.update(System.Byte[],System.Int32,System.Int32)">
            <summary> update the internal digest with the byte array in</summary>
        </member>
        <member name="M:org.bouncycastle.crypto.signers.ISO9796d2PSSSigner.reset">
            <summary> reset the internal state</summary>
        </member>
        <member name="M:org.bouncycastle.crypto.signers.ISO9796d2PSSSigner.generateSignature">
            <summary> generate a signature for the loaded message using the key we were
            initialised with.
            </summary>
        </member>
        <member name="M:org.bouncycastle.crypto.signers.ISO9796d2PSSSigner.verifySignature(System.Byte[])">
            <summary> return true if the signature represents a ISO9796-2 signature
            for the passed in message.
            </summary>
        </member>
        <member name="M:org.bouncycastle.crypto.signers.ISO9796d2PSSSigner.hasFullMessage">
            <summary> Return true if the full message was recoveredMessage.
            
            </summary>
            <returns> true on full message recovery, false otherwise, or if not sure.
            </returns>
            <seealso cref="T:org.bouncycastle.crypto.SignerWithRecovery">
            </seealso>
        </member>
        <member name="M:org.bouncycastle.crypto.signers.ISO9796d2PSSSigner.ItoOSP(System.Int32,System.Byte[])">
            <summary> int to octet string.</summary>
            <summary> int to octet string.</summary>
        </member>
        <member name="M:org.bouncycastle.crypto.signers.ISO9796d2PSSSigner.LtoOSP(System.Int64,System.Byte[])">
            <summary> long to octet string.</summary>
        </member>
        <member name="M:org.bouncycastle.crypto.signers.ISO9796d2PSSSigner.maskGeneratorFunction1(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary> mask generator function, as described in PKCS1v2.</summary>
        </member>
        <member name="T:org.bouncycastle.crypto.signers.ISO9796d2Signer">
            <summary> ISO9796-2 - mechanism using a hash function with recovery (scheme 1)</summary>
        </member>
        <member name="M:org.bouncycastle.crypto.signers.ISO9796d2Signer.getRecoveredMessage">
            <summary> Return a reference to the recoveredMessage message.
            
            </summary>
            <returns> the full/partial recoveredMessage message.
            </returns>
            <seealso cref="T:org.bouncycastle.crypto.SignerWithRecovery">
            </seealso>
        </member>
        <member name="M:org.bouncycastle.crypto.signers.ISO9796d2Signer.#ctor(org.bouncycastle.crypto.AsymmetricBlockCipher,org.bouncycastle.crypto.Digest,System.Boolean)">
            <summary> Generate a signer for the with either implicit or explicit trailers
            for ISO9796-2.
            
            </summary>
            <param name="cipher">base cipher to use for signature creation/verification
            </param>
            <param name="digest">digest to use.
            </param>
            <param name="implicit">whether or not the trailer is implicit or gives the hash.
            </param>
        </member>
        <member name="M:org.bouncycastle.crypto.signers.ISO9796d2Signer.#ctor(org.bouncycastle.crypto.AsymmetricBlockCipher,org.bouncycastle.crypto.Digest)">
            <summary> Constructor for a signer with an explicit digest trailer.
            
            </summary>
            <param name="cipher">cipher to use.
            </param>
            <param name="digest">digest to sign with.
            </param>
        </member>
        <member name="M:org.bouncycastle.crypto.signers.ISO9796d2Signer.isSameAs(System.Byte[],System.Byte[])">
            <summary> compare two byte arrays.</summary>
        </member>
        <member name="M:org.bouncycastle.crypto.signers.ISO9796d2Signer.clearBlock(System.Byte[])">
            <summary> clear possible sensitive data</summary>
        </member>
        <member name="M:org.bouncycastle.crypto.signers.ISO9796d2Signer.update(System.Byte)">
            <summary> update the internal digest with the byte b</summary>
        </member>
        <member name="M:org.bouncycastle.crypto.signers.ISO9796d2Signer.update(System.Byte[],System.Int32,System.Int32)">
            <summary> update the internal digest with the byte array in</summary>
        </member>
        <member name="M:org.bouncycastle.crypto.signers.ISO9796d2Signer.reset">
            <summary> reset the internal state</summary>
        </member>
        <member name="M:org.bouncycastle.crypto.signers.ISO9796d2Signer.generateSignature">
            <summary> generate a signature for the loaded message using the key we were
            initialised with.
            </summary>
        </member>
        <member name="M:org.bouncycastle.crypto.signers.ISO9796d2Signer.verifySignature(System.Byte[])">
            <summary> return true if the signature represents a ISO9796-2 signature
            for the passed in message.
            </summary>
        </member>
        <member name="M:org.bouncycastle.crypto.signers.ISO9796d2Signer.hasFullMessage">
            <summary> Return true if the full message was recoveredMessage.
            
            </summary>
            <returns> true on full message recovery, false otherwise.
            </returns>
            <seealso cref="T:org.bouncycastle.crypto.SignerWithRecovery">
            </seealso>
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:org.bouncycastle.crypto.signers.PSSSigner" -->
        <member name="M:org.bouncycastle.crypto.signers.PSSSigner.#ctor(org.bouncycastle.crypto.AsymmetricBlockCipher,org.bouncycastle.crypto.Digest,System.Int32)">
            <summary> basic constructor
            
            </summary>
            <param name="cipher">the assymetric cipher to use.
            </param>
            <param name="digest">the digest to use.
            </param>
            <param name="sLen">the length of the salt to use (in bytes).
            </param>
        </member>
        <member name="M:org.bouncycastle.crypto.signers.PSSSigner.clearBlock(System.Byte[])">
            <summary> clear possible sensitive data</summary>
        </member>
        <member name="M:org.bouncycastle.crypto.signers.PSSSigner.update(System.Byte)">
            <summary> update the internal digest with the byte b</summary>
        </member>
        <member name="M:org.bouncycastle.crypto.signers.PSSSigner.update(System.Byte[],System.Int32,System.Int32)">
            <summary> update the internal digest with the byte array in</summary>
        </member>
        <member name="M:org.bouncycastle.crypto.signers.PSSSigner.reset">
            <summary> reset the internal state</summary>
        </member>
        <member name="M:org.bouncycastle.crypto.signers.PSSSigner.generateSignature">
            <summary> generate a signature for the message we've been loaded with using
            the key we were initialised with.
            </summary>
        </member>
        <member name="M:org.bouncycastle.crypto.signers.PSSSigner.verifySignature(System.Byte[])">
            <summary> return true if the internal state represents the signature described
            in the passed in array.
            </summary>
        </member>
        <member name="M:org.bouncycastle.crypto.signers.PSSSigner.ItoOSP(System.Int32,System.Byte[])">
            <summary> int to octet string.</summary>
        </member>
        <member name="M:org.bouncycastle.crypto.signers.PSSSigner.maskGeneratorFunction1(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary> mask generator function, as described in PKCS1v2.</summary>
        </member>
        <member name="M:org.bouncycastle.crypto.signers.RSADigestSigner.#cctor">
            <summary>
            Load oid table.
            </summary>
        </member>
        <member name="M:org.bouncycastle.crypto.signers.RSADigestSigner.init(System.Boolean,org.bouncycastle.crypto.CipherParameters)">
            Initialise the signer for signing or verification.
            
            @param forSigning true if for signing, false otherwise
            @param param necessary parameters.
        </member>
        <member name="M:org.bouncycastle.crypto.signers.RSADigestSigner.update(System.Byte)">
            update the internal digest with the byte b
        </member>
        <member name="M:org.bouncycastle.crypto.signers.RSADigestSigner.update(System.Byte[],System.Int32,System.Int32)">
            update the internal digest with the byte array in
        </member>
        <member name="M:org.bouncycastle.crypto.signers.RSADigestSigner.generateSignature">
            generate a signature for the message we've been loaded with using
            the key we were initialised with.
        </member>
        <member name="M:org.bouncycastle.crypto.signers.RSADigestSigner.verifySignature(System.Byte[])">
            return true if the internal state represents the signature described
            in the passed in array.
        </member>
        <member name="T:org.bouncycastle.crypto.AsymmetricCipherKeyPair">
            a holding class for public/private parameter pairs.
        </member>
        <member name="M:org.bouncycastle.crypto.AsymmetricCipherKeyPair.#ctor(org.bouncycastle.crypto.AsymmetricKeyParameter,org.bouncycastle.crypto.AsymmetricKeyParameter)">
             basic constructor.
            
             @param publicParam a public key parameters object.
             @param privateParam the corresponding private key parameters.
        </member>
        <member name="M:org.bouncycastle.crypto.AsymmetricCipherKeyPair.getPublic">
             return the public key parameters.
            
             @return the public key parameters.
        </member>
        <member name="M:org.bouncycastle.crypto.AsymmetricCipherKeyPair.getPrivate">
             return the private key parameters.
            
             @return the private key parameters.
        </member>
        <member name="T:org.bouncycastle.crypto.BufferedAsymmetricBlockCipher">
            a buffer wrapper for an asymmetric block cipher, allowing input
            to be accumulated in a piecemeal fashion until final processing.
        </member>
        <member name="M:org.bouncycastle.crypto.BufferedAsymmetricBlockCipher.#ctor(org.bouncycastle.crypto.AsymmetricBlockCipher)">
             base constructor.
            
             @param cipher the cipher this buffering object wraps.
        </member>
        <member name="M:org.bouncycastle.crypto.BufferedAsymmetricBlockCipher.getUnderlyingCipher">
             return the underlying cipher for the buffer.
            
             @return the underlying cipher for the buffer.
        </member>
        <member name="M:org.bouncycastle.crypto.BufferedAsymmetricBlockCipher.getBufferPosition">
             return the amount of data sitting in the buffer.
            
             @return the amount of data sitting in the buffer.
        </member>
        <member name="M:org.bouncycastle.crypto.BufferedAsymmetricBlockCipher.init(System.Boolean,org.bouncycastle.crypto.CipherParameters)">
             initialise the buffer and the underlying cipher.
            
             @param forEncryption if true the cipher is initialised for
              encryption, if false for decryption.
             @param param the key and other data required by the cipher.
        </member>
        <member name="M:org.bouncycastle.crypto.BufferedAsymmetricBlockCipher.getInputBlockSize">
             returns the largest size an input block can be.
            
             @return maximum size for an input block.
        </member>
        <member name="M:org.bouncycastle.crypto.BufferedAsymmetricBlockCipher.getOutputBlockSize">
             returns the maximum size of the block produced by this cipher.
            
             @return maximum size of the output block produced by the cipher.
        </member>
        <member name="M:org.bouncycastle.crypto.BufferedAsymmetricBlockCipher.processByte(System.Byte)">
            add another byte for processing.
            
            @param in the input byte.
        </member>
        <member name="M:org.bouncycastle.crypto.BufferedAsymmetricBlockCipher.processBytes(System.Byte[],System.Int32,System.Int32)">
             add len bytes to the buffer for processing.
            
             @param in the input data
             @param inOff offset into the in array where the data starts
             @param len the length of the block to be processed.
        </member>
        <member name="M:org.bouncycastle.crypto.BufferedAsymmetricBlockCipher.doFinal">
             process the contents of the buffer using the underlying
             cipher.
            
             @return the result of the encryption/decryption process on the
             buffer.
             @exception InvalidCipherTextException if we are given a garbage block.
        </member>
        <member name="M:org.bouncycastle.crypto.BufferedAsymmetricBlockCipher.reset">
            Reset the buffer and the underlying cipher.
        </member>
        <member name="T:org.bouncycastle.crypto.CryptoException">
            the foundation class for the hard exceptions thrown by the crypto packages.
        </member>
        <member name="M:org.bouncycastle.crypto.CryptoException.#ctor">
            base constructor.
        </member>
        <member name="M:org.bouncycastle.crypto.CryptoException.#ctor(System.String)">
             create a CryptoException with the given message.
            
             @param message the message to be carried with the exception.
        </member>
        <member name="T:org.bouncycastle.crypto.DataLengthException">
            this exception is thrown if a buffer that is meant to have output
            copied into it turns out to be too short, or if we've been given 
            insufficient input. In general this exception will get thrown rather
            than an ArrayOutOfBounds exception.
        </member>
        <member name="T:org.bouncycastle.crypto.RuntimeCryptoException">
            the foundation class for the exceptions thrown by the crypto packages.
        </member>
        <member name="M:org.bouncycastle.crypto.RuntimeCryptoException.#ctor">
            base constructor.
        </member>
        <member name="M:org.bouncycastle.crypto.RuntimeCryptoException.#ctor(System.String)">
             create a RuntimeCryptoException with the given message.
            
             @param message the message to be carried with the exception.
        </member>
        <member name="M:org.bouncycastle.crypto.DataLengthException.#ctor">
            base constructor.
        </member>
        <member name="M:org.bouncycastle.crypto.DataLengthException.#ctor(System.String)">
             create a DataLengthException with the given message.
            
             @param message the message to be carried with the exception.
        </member>
        <member name="T:org.bouncycastle.crypto.InvalidCipherTextException">
            this exception is thrown whenever we find something we don't expect in a
            message.
        </member>
        <member name="M:org.bouncycastle.crypto.InvalidCipherTextException.#ctor">
            base constructor.
        </member>
        <member name="M:org.bouncycastle.crypto.InvalidCipherTextException.#ctor(System.String)">
             create a InvalidCipherTextException with the given message.
            
             @param message the message to be carried with the exception.
        </member>
        <member name="T:org.bouncycastle.crypto.StreamBlockCipher">
            a wrapper for block ciphers with a single byte block size, so that they
            can be treated like stream ciphers.
        </member>
        <member name="M:org.bouncycastle.crypto.StreamBlockCipher.#ctor(org.bouncycastle.crypto.BlockCipher)">
             basic constructor.
            
             @param cipher the block cipher to be wrapped.
             @exception IllegalArgumentException if the cipher has a block size other than
             one.
        </member>
        <member name="M:org.bouncycastle.crypto.StreamBlockCipher.init(System.Boolean,org.bouncycastle.crypto.CipherParameters)">
             initialise the underlying cipher.
            
             @param forEncryption true if we are setting up for encryption, false otherwise.
             @param param the necessary parameters for the underlying cipher to be initialised.
        </member>
        <member name="M:org.bouncycastle.crypto.StreamBlockCipher.getAlgorithmName">
             return the name of the algorithm we are wrapping.
            
             @return the name of the algorithm we are wrapping.
        </member>
        <member name="M:org.bouncycastle.crypto.StreamBlockCipher.returnByte(System.Byte)">
             encrypt/decrypt a single byte returning the result.
            
             @param in the byte to be processed.
             @return the result of processing the input byte.
        </member>
        <member name="M:org.bouncycastle.crypto.StreamBlockCipher.processBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            process a block of bytes from in putting the result into out.
            
            @param in the input byte array.
            @param inOff the offset into the in array where the data to be processed starts.
            @param len the number of bytes to be processed.
            @param out the output buffer the processed bytes go into.   
            @param outOff the offset into the output byte array the processed data stars at.
            @exception DataLengthException if the output buffer is too small.
        </member>
        <member name="M:org.bouncycastle.crypto.StreamBlockCipher.reset">
            reset the underlying cipher. This leaves it in the same state
            it was at after the last init (if there was one).
        </member>
        <member name="T:org.bouncycastle.math.ec.ECCurve">
            base class for an elliptic curve
        </member>
        <member name="T:org.bouncycastle.math.ec.ECCurve.Fp">
            Elliptic curve over Fp
        </member>
        <member name="M:org.bouncycastle.math.ec.ECCurve.Fp.decodePoint(System.Byte[])">
            decode a point on this curve which has been encoded using
            point compression (X9.62 s 4.2.1 pg 17) returning the point.
        </member>
        <member name="M:org.bouncycastle.math.ec.ECFieldElement.Fp.getFieldName">
             return the field name for this field.
            
             @return the string "Fp".
        </member>
        <member name="M:org.bouncycastle.math.ec.ECFieldElement.Fp.sqrt">
            return a sqrt root - the routine verifies that the calculation
            returns the right value - if none exists it returns null.
        </member>
        <member name="T:org.bouncycastle.math.ec.ECPoint">
            base class for points on elliptic curves.
        </member>
        <member name="T:org.bouncycastle.math.ec.ECPoint.Fp">
            Elliptic curve points over Fp
        </member>
        <member name="M:org.bouncycastle.math.ec.ECPoint.Fp.getEncoded">
            return the field element encoded with point compression. (S 4.3.6)
        </member>
        <member name="M:org.bouncycastle.math.BigInteger.nextRndBytes(System.Random,System.Byte[])">
            strictly speaking this is a little dodgey from a compliance
            point of view as it forces people to be using SecureRandom as
            well, that being said - this implementation is for a crypto
            library and you do have the source!
        </member>
        <member name="M:org.bouncycastle.math.BigInteger.add(System.Int32[],System.Int32[])">
            return a = a + b - b preserved.
        </member>
        <member name="M:org.bouncycastle.math.BigInteger.compareTo(System.Int32,System.Int32[],System.Int32,System.Int32[])">
            unsigned comparison on two arrays - note the arrays may
            start with leading zeros.
        </member>
        <member name="M:org.bouncycastle.math.BigInteger.divide(System.Int32[],System.Int32[])">
            return z = x / y - done in place (z value preserved, x contains the
            remainder)
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:org.bouncycastle.math.BigInteger.isProbablePrime(System.Int32)" -->
        <member name="M:org.bouncycastle.math.BigInteger.extEuclid(org.bouncycastle.math.BigInteger,org.bouncycastle.math.BigInteger,org.bouncycastle.math.BigInteger,org.bouncycastle.math.BigInteger)">
             Calculate the numbers u1, u2, and u3 such that:
            
             u1 * a + u2 * b = u3
            
             where u3 is the greatest common divider of a and b.
             a and b using the extended Euclid algorithm (refer p. 323
             of The Art of Computer Programming vol 2, 2nd ed).
             This also seems to have the side effect of calculating
             some form of multiplicative inverse.
            
             @param a    First number to calculate gcd for
             @param b    Second number to calculate gcd for
             @param u1Out      the return object for the u1 value
             @param u2Out      the return object for the u2 value
             @return     The greatest common divisor of a and b
        </member>
        <member name="M:org.bouncycastle.math.BigInteger.zero(System.Int32[])">
            zero out the array x
        </member>
        <member name="M:org.bouncycastle.math.BigInteger.square(System.Int32[],System.Int32[])">
            return w with w = x * x - w is assumed to have enough space.
        </member>
        <member name="M:org.bouncycastle.math.BigInteger.multiply(System.Int32[],System.Int32[],System.Int32[])">
            return x with x = y * z - x is assumed to have enough space.
        </member>
        <member name="M:org.bouncycastle.math.BigInteger.getMQuote">
            Calculate mQuote = -m^(-1) mod b with b = 2^32 (32 = word size)
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:org.bouncycastle.math.BigInteger.multiplyMonty(System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int64)" -->
        <member name="M:org.bouncycastle.math.BigInteger.remainder(System.Int32[],System.Int32[])">
            return x = x % y - done in place (y value preserved)
        </member>
        <member name="M:org.bouncycastle.math.BigInteger.shiftLeft(System.Int32[],System.Int32)">
            do a left shift - this returns a new array.
        </member>
        <member name="M:org.bouncycastle.math.BigInteger.shiftRight(System.Int32,System.Int32[],System.Int32)">
            do a right shift - this does it in place.
        </member>
        <member name="M:org.bouncycastle.math.BigInteger.shiftRightOne(System.Int32,System.Int32[])">
            do a right shift by one - this does it in place.
        </member>
        <member name="M:org.bouncycastle.math.BigInteger.subtract(System.Int32,System.Int32[],System.Int32,System.Int32[])">
            returns x = x - y - we assume x is >= y
        </member>
        <member name="M:org.bouncycastle.ocsp.BasicOCSPResp.#ctor(org.bouncycastle.asn1.ocsp.BasicOCSPResponse)">
            <summary>
            Construct using an asn1 BasicOCSPResponse object as a reference.
            </summary>
            <param name="resp">The reference BasicOCSPResponse object.</param>
        </member>
        <member name="M:org.bouncycastle.ocsp.BasicOCSPResp.getSignatureAlgOID">
            <summary>
            Return then dotted decimal OID of the sugnature algorithm.
            </summary>
            <returns>Dotted decimal string.</returns>
        </member>
        <member name="M:org.bouncycastle.ocsp.BasicOCSPResp.getResponseData">
            <summary>
            Fetch the Response Data.
            </summary>
            <returns>A RespData object.</returns>
        </member>
        <member name="M:org.bouncycastle.ocsp.BasicOCSPResp.getSignature">
            <summary>
            Return the raw signature.
            </summary>
            <returns>byte array.</returns>
        </member>
        <member name="M:org.bouncycastle.ocsp.BasicOCSPResp.getCerts">
            <summary>
            Return a list of certificates.
            </summary>
            <returns>X509Certificate array or null if no certificates found.</returns>
        </member>
        <member name="M:org.bouncycastle.ocsp.BasicOCSPResp.verify(org.bouncycastle.crypto.AsymmetricKeyParameter)">
            <summary>
            Verify that requests' signature is valid.
            </summary>
            <param name="key">A public key to verify with.</param>
            <returns>true = verified.</returns>
        </member>
        <member name="M:org.bouncycastle.ocsp.BasicOCSPResp.getEncoded">
            <summary>
            Return a the DER encoded response.
            </summary>
            <returns>A byte array.</returns>
        </member>
        <member name="T:org.bouncycastle.ocsp.BasicOCSPRespGenerator">
            <summary>
            A OCSP Basic Response Generator.
            </summary>
        </member>
        <member name="M:org.bouncycastle.ocsp.BasicOCSPRespGenerator.#ctor(org.bouncycastle.ocsp.RespID)">
            <summary>
            A basic contructor setting the RespID.
            </summary>
            <param name="responderID">An asn1 RespID object.</param>
        </member>
        <member name="M:org.bouncycastle.ocsp.BasicOCSPRespGenerator.#ctor(org.bouncycastle.crypto.AsymmetricKeyParameter)">
            <summary>
            Construct with the responderID to be the SHA-1 keyHash of the passed in public key.
            </summary>
            <param name="key">The key for the hash to be taken.</param>
        </member>
        <member name="M:org.bouncycastle.ocsp.BasicOCSPRespGenerator.addResponse(org.bouncycastle.ocsp.CertificateID,org.bouncycastle.ocsp.CertificateStatus)">
            <summary>
            
            </summary>
            <param name="certID"></param>
            <param name="certStatus"></param>
        </member>
        <member name="M:org.bouncycastle.ocsp.BasicOCSPRespGenerator.addResponse(org.bouncycastle.ocsp.CertificateID,org.bouncycastle.ocsp.CertificateStatus,System.DateTime,org.bouncycastle.asn1.x509.X509Extensions)">
            <summary>
            
            </summary>
            <param name="certID"></param>
            <param name="certStatus"></param>
            <param name="nextUpdate"></param>
            <param name="singleExtensions"></param>
        </member>
        <member name="M:org.bouncycastle.ocsp.BasicOCSPRespGenerator.addResponse(org.bouncycastle.ocsp.CertificateID,org.bouncycastle.ocsp.CertificateStatus,System.DateTime,System.DateTime,org.bouncycastle.asn1.x509.X509Extensions)">
            <summary>
            
            </summary>
            <param name="certID"></param>
            <param name="certStatus"></param>
            <param name="thisUpdate"></param>
            <param name="nextUpdate"></param>
            <param name="singleExtensions"></param>
        </member>
        <member name="M:org.bouncycastle.ocsp.BasicOCSPRespGenerator.generateResponse(org.bouncycastle.asn1.DERObjectIdentifier,org.bouncycastle.crypto.AsymmetricKeyParameter,org.bouncycastle.x509.X509Certificate[],System.DateTime,org.bouncycastle.security.SecureRandom)">
            <summary>
            
            </summary>
            <param name="signingAlgorithm">The OID of the signing algorithm.</param>
            <param name="privkey">The signing private key.</param>
            <param name="chain">An array containing X509Certificate objects, can be null.</param>
            <param name="producedAt">The time this response is produced at.</param>
            <param name="random">A SecureRandom instance.</param>
            <returns></returns>
        </member>
        <member name="T:org.bouncycastle.ocsp.ResponseObject">
            <summary>
            An internal ResponseObject class.
            Not intended for external use.
            </summary>
        </member>
        <member name="M:org.bouncycastle.ocsp.CertificateID.#ctor(System.String,org.bouncycastle.x509.X509Certificate,org.bouncycastle.math.BigInteger,System.String)">
            <summary>
            Generate a CertificateID.
            </summary>
            <param name="hashAlgorithm"></param>
            <param name="issuerCert"></param>
            <param name="number"></param>
            <param name="provider"></param>
        </member>
        <member name="M:org.bouncycastle.ocsp.CertificateID.getHashAlgOID">
            <summary>
            
            </summary>
            <returns>The hash algorithm id.</returns>
        </member>
        <member name="M:org.bouncycastle.ocsp.CertificateID.getIssuerNameHash">
            <summary>
            
            </summary>
            <returns>The issuer derial number.</returns>
        </member>
        <member name="M:org.bouncycastle.ocsp.CertificateID.getIssuerKeyHash">
            <summary>
            
            </summary>
            <returns>The issuer key hash.</returns>
        </member>
        <member name="M:org.bouncycastle.ocsp.CertificateID.getSerialNumber">
            <summary>
            
            </summary>
            <returns>The serial number associated with this request.</returns>
        </member>
        <member name="M:org.bouncycastle.ocsp.CertificateID.toASN1Object">
            <summary>
            
            </summary>
            <returns>An ASN1 object for this type. (CertID)</returns>
        </member>
        <member name="M:org.bouncycastle.ocsp.CertificateID.Equals(System.Object)">
            <summary>
             Is it equal.
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:org.bouncycastle.ocsp.CertificateID.GetHashCode">
            <summary>
            
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="P:org.bouncycastle.ocsp.CertificateID.HashAlgOID">
            <summary>
            
            </summary>
            <value>The Hash algorithm id.</value>
        </member>
        <member name="P:org.bouncycastle.ocsp.CertificateID.IssuerNameHash">
            <summary>
            
            </summary>
            <value>Issuers Name Hash</value>
        </member>
        <member name="P:org.bouncycastle.ocsp.CertificateID.IssuerKeyHash">
            <summary>
            
            </summary>
            <value>The issuer key hash.</value>
        </member>
        <member name="P:org.bouncycastle.ocsp.CertificateID.SerialNumber">
            <summary>
            
            </summary>
            <value>Serial number value.</value>
        </member>
        <member name="M:org.bouncycastle.ocsp.OCSPReq.getSignatureAlgOID">
            return the object identifier representing the signature algorithm
        </member>
        <member name="M:org.bouncycastle.ocsp.OCSPReq.getCerts">
            <summary>
            Return a the certificates associated with this request.
            </summary>
            <returns>An array of certs or null is none were present in this request.</returns>
        </member>
        <member name="M:org.bouncycastle.ocsp.OCSPResp.getEncoded">
            <summary>
            Return a DER encoded OCSPResponse Object.
            </summary>
            <returns>Byte array.</returns>
        </member>
        <member name="M:org.bouncycastle.ocsp.OCSPRespGenerator.generateRequest(org.bouncycastle.asn1.DERObjectIdentifier,org.bouncycastle.crypto.AsymmetricKeyParameter,org.bouncycastle.x509.X509Certificate[],org.bouncycastle.security.SecureRandom)">
            <summary>
            Generate an OCSP Resonse.
            </summary>
            <param name="signingAlgorithm">The DER OID of the signing algorithm.</param>
            <param name="key">The private key used to sign this request.</param>
            <param name="chain">A chain of X509Certificates, can be null.</param>
            <param name="random">A Secure random instance which can be null.</param>
            <returns>An OCSPReq object.</returns>
        </member>
        <member name="T:org.bouncycastle.ocsp.RRequestObject">
            <summary>
            Response Request Object
            </summary>
        </member>
        <member name="F:org.bouncycastle.ocsp.OCSPRespStatus.SUCCESSFUL">
            <summary>
            Response has valid confirmations.
            </summary>
        </member>
        <member name="F:org.bouncycastle.ocsp.OCSPRespStatus.MALFORMED_REQUEST">
            <summary>
            Illegal confirmation request.
            </summary>
        </member>
        <member name="F:org.bouncycastle.ocsp.OCSPRespStatus.INTERNAL_ERROR">
            <summary>
            Internal error in issuer.
            </summary>
        </member>
        <member name="F:org.bouncycastle.ocsp.OCSPRespStatus.TRY_LATER">
            <summary>
            Try again later.
            </summary>
        </member>
        <member name="F:org.bouncycastle.ocsp.OCSPRespStatus.SIGREQUIRED">
            <summary>
            Must sign the request.
            </summary>
        </member>
        <member name="F:org.bouncycastle.ocsp.OCSPRespStatus.UNAUTHORIZED">
            <summary>
            Request unauthorized.
            </summary>
        </member>
        <member name="M:org.bouncycastle.ocsp.RespData.#ctor(org.bouncycastle.asn1.ocsp.ResponseData)">
            <summary>
            Create using a asn1 ResponseData object as a reference.
            </summary>
            <param name="data">The reference ResponseData object.</param>
        </member>
        <member name="M:org.bouncycastle.ocsp.RespData.getVersion">
            <summary>
            The response version.
            </summary>
            <returns>The Version number.</returns>
        </member>
        <member name="M:org.bouncycastle.ocsp.RespData.getResponderId">
            <summary>
            Return the Response ID.
            </summary>
            <returns>RespID</returns>
        </member>
        <member name="M:org.bouncycastle.ocsp.RespData.getProducedAt">
            <summary>
            The time the response was produced.
            </summary>
            <returns>Produced time.</returns>
        </member>
        <member name="M:org.bouncycastle.ocsp.RespData.getResponses">
            <summary>
            Return the Single Responses.
            </summary>
            <returns>An array..</returns>
        </member>
        <member name="M:org.bouncycastle.ocsp.RespData.getResponseExtensions">
            <summary>
            Return any exceptions.
            </summary>
            <returns>An X509Extensions object.</returns>
        </member>
        <member name="M:org.bouncycastle.ocsp.RespID.#ctor(org.bouncycastle.asn1.ocsp.ResponderID)">
            <summary>
            Create a new RespID using a .asn1.ResponderID as a reference.
            </summary>
            <param name="id">The reference ResponderID.</param>
        </member>
        <member name="M:org.bouncycastle.ocsp.RespID.#ctor(org.bouncycastle.asn1.x509.X509Name)">
            <summary>
            Create using data from an X509Name.
            </summary>
            <param name="name">The reference X509Name </param>
        </member>
        <member name="M:org.bouncycastle.ocsp.RespID.#ctor(org.bouncycastle.crypto.AsymmetricKeyParameter)">
            <summary>
            Create using an public Asymmetric Key.
            </summary>
            <param name="key">A public Asymmetric key.</param>
        </member>
        <member name="M:org.bouncycastle.ocsp.RespID.toASN1Object">
            <summary>
            Returns a Reponder ID.
            </summary>
            <returns>An ASN1 Object.</returns>
        </member>
        <member name="M:org.bouncycastle.ocsp.RevokedStatus.getRevocationReason">
            <summary>
            Return the revocation reason. Note: this field is optional, test for it with hasRevocationReason() first.
            </summary>
            <returns>A reason code.</returns>
            <exception cref="T:System.InvalidOperationException">If there is no reason code.</exception>
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:org.bouncycastle.pkcs.PKCS10CertificationRequest" -->
        <member name="M:org.bouncycastle.pkcs.PKCS10CertificationRequest.#ctor(System.String,org.bouncycastle.asn1.x509.X509Name,org.bouncycastle.crypto.AsymmetricKeyParameter,org.bouncycastle.asn1.ASN1Set,org.bouncycastle.crypto.AsymmetricKeyParameter)">
             <summary>
             Instanciate a PKCS10CertificationRequest object with the necessary credentials.
             </summary>
            <param name="signatureAlgorithm">Name of Sig Alg.</param>
             <param name="subject">X509Name of subject eg OU="My unit." O="My Organisatioin" C="au" </param>
             <param name="key">Public Key to be included in cert reqest.</param>
             <param name="attributes">ASN1Set of Attributes.</param>
             <param name="signingKey">Matching Private key for nominated (above) public key to be used to sign the request.</param>
        </member>
        <member name="M:org.bouncycastle.pkcs.PKCS10CertificationRequest.getPublicKey">
            <summary>
            Get the public key.
            </summary>
            <returns>The public key.</returns>
        </member>
        <member name="M:org.bouncycastle.pkcs.PKCS10CertificationRequest.verify">
            <summary>
            Verify PKCS10 Cert Reqest is valid.
            </summary>
            <returns>true = valid.</returns>
        </member>
        <member name="M:org.bouncycastle.pkcs.PKCS10CertificationRequest.getEncoded">
            <summary>
            Get the DER Encoded PKCS10 Certification Request.
            </summary>
            <returns>A byte array.</returns>
        </member>
        <member name="M:org.bouncycastle.pkcs.PKCS10CertificationRequest.toDERSequence(System.Byte[])">
            <summary>
            Convert to DER Sequence.
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:org.bouncycastle.pkcs.PKCS12Store.getCertificate(System.String)">
            simply return the cert entry for the private key
        </member>
        <member name="T:org.bouncycastle.security.DotNetUtils">
            <summary>
            A class containing methods to interface the BouncyCastle world to the D
            </summary>
        </member>
        <member name="M:org.bouncycastle.security.DotNetUtils.toX509Certificate(org.bouncycastle.asn1.x509.X509CertificateStructure)">
            <summary>
            Create an System.Security.Cryptography.X509Certificate from an X509Certificate Structure.
            </summary>
            <param name="x509struct"></param>
            <returns>An System.Security.Cryptography.X509Certificate.</returns>
        </member>
        <member name="T:org.bouncycastle.security.PBEUtil">
            <summary>
             
            </summary>
        </member>
        <member name="M:org.bouncycastle.security.PBEUtil.getObjectIdentifier(System.String)">
            <summary>
            Returns a ObjectIdentifier for a give encoding.
            </summary>
            <param name="mechanism">A String representation of the encoding.</param>
            <returns>A DERObjectIdentifier, null if the OID is not available.</returns>
        </member>
        <member name="T:org.bouncycastle.security.SecureRandom">
            An implementation of SecureRandom specifically for the
            light-weight API, JDK 1.0, and the J2ME. Random generation is 
            based on the traditional SHA1 with counter. Calling setSeed
            will always increase the entropy of the hash.
        </member>
        <member name="T:org.bouncycastle.security.SignerUtil">
            <summary>
             Signer Utility class contains methods that can not be specifically grouped into other classes.
            </summary>
        </member>
        <member name="M:org.bouncycastle.security.SignerUtil.getObjectIdentifier(System.String)">
            <summary>
            Returns a ObjectIdentifier for a give encoding.
            </summary>
            <param name="mechanism">A String representation of the encoding.</param>
            <returns>A DERObjectIdentifier, null if the OID is not available.</returns>
        </member>
        <member name="T:org.bouncycastle.security.TransformationByName">
            <summary>
            A class that returns new objects that perform cryptographic transformations by name.
            This class is experimental and should not be used.
            </summary>
        </member>
        <member name="M:org.bouncycastle.security.TransformationByName.DigestByName(System.String)">
            <summary>
            Return a new digest by digest name.
            </summary>
            <param name="name">The name of the digest.</param>
            <returns>A new digest instance.</returns>
            <exception cref="T:System.ArgumentException">If name not found.</exception>
        </member>
        <member name="T:org.bouncycastle.util.encoders.Base64">
            <summary>
            Utility Base64 class.
            </summary>
        </member>
        <member name="M:org.bouncycastle.util.encoders.Base64.encode(System.Byte[])">
            <summary>
            Encode a byte array.
            </summary>
            <param name="data"></param>
            <returns>Base 64 encoded 'data' in a byte array.</returns>
        </member>
        <member name="M:org.bouncycastle.util.encoders.Base64.decode(System.Byte[])">
            <summary>
            Decode a byte[] containing a base 64 encoded data.
            </summary>
            <param name="data"></param>
            <returns>The Decoded data.</returns>
        </member>
        <member name="M:org.bouncycastle.util.encoders.Base64.decode(System.String)">
            <summary>
            Returns a byte array containing the base 64 encoded data contained in the string.
            </summary>
        </member>
        <member name="T:org.bouncycastle.util.encoders.BufferedDecoder">
            <summary>
             A buffering class to allow translation from one format to another to
             be done in discrete chunks.
            </summary>
        </member>
        <member name="M:org.bouncycastle.util.encoders.BufferedDecoder.#ctor(org.bouncycastle.util.encoders.Translator,System.Int32)">
            <summary>
            Create a buffered Decoder.
            </summary>
            <param name="translator">The translater to use.</param>
            <param name="bufSize">The size of the buffer.</param>
        </member>
        <member name="M:org.bouncycastle.util.encoders.BufferedDecoder.processByte(System.Byte,System.Byte[],System.Int32)">
            <summary>
            Process one byte of data.
            </summary>
            <param name="inByte">Data in.</param>
            <param name="outBytes">Byte array for the output.</param>
            <param name="outOff">The offset in the output byte array to start writing from.</param>
            <returns>The amount of output bytes.</returns>
        </member>
        <member name="M:org.bouncycastle.util.encoders.BufferedDecoder.processBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Process data from a byte array.
            </summary>
            <param name="inBytes">The input data.</param>
            <param name="inOff">Start position within input data array.</param>
            <param name="len">Amount of data to process from input data array.</param>
            <param name="outBytes">Array to store output.</param>
            <param name="outOff">Position in output array to start writing from.</param>
            <returns>The amount of output bytes.</returns>
        </member>
        <member name="T:org.bouncycastle.util.encoders.BufferedEncoder">
            <summary>
            A class that allows encoding of data using a specific encoder to be processed in chunks.
            </summary>
        </member>
        <member name="M:org.bouncycastle.util.encoders.BufferedEncoder.#ctor(org.bouncycastle.util.encoders.Translator,System.Int32)">
            <summary>
            Create.
            </summary>
            <param name="translator">The translator to use.</param>
            <param name="bufSize">Size of the chunks.</param>
        </member>
        <member name="M:org.bouncycastle.util.encoders.BufferedEncoder.processByte(System.Byte,System.Byte[],System.Int32)">
            <summary>
            Process one byte of data.
            </summary>
            <param name="inByte">The byte.</param>
            <param name="outBytes">An array to store output in.</param>
            <param name="outOff">Offset within output array to start writing from.</param>
            <returns></returns>
        </member>
        <member name="M:org.bouncycastle.util.encoders.BufferedEncoder.processBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Process data from a byte array.
            </summary>
            <param name="inBytes">Input data Byte array containing data to be processed.</param>
            <param name="inOff">Start position within input data array.</param>
            <param name="len">Amount of input data to be processed.</param>
            <param name="outBytes">Output data array.</param>
            <param name="outOff">Offset within output data array to start writing to.</param>
            <returns>The amount of data written.</returns>
        </member>
        <member name="T:org.bouncycastle.util.encoders.Hex">
            <summary>
            Class to decode and encode Hex.
            </summary>
        </member>
        <member name="M:org.bouncycastle.util.encoders.Hex.encode(System.Byte[])">
            <summary>
            Encode a byte array into Base 16.
            </summary>
            <param name="array">Input data.</param>
            <returns>Byte Array containing base 16 version of 'array'</returns>
        </member>
        <member name="M:org.bouncycastle.util.encoders.Hex.encode(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Base 16 encode data from a byte array.
            </summary>
            <param name="array">The input array.</param>
            <param name="off">Start position within input array.</param>
            <param name="length">The amount of data to process.</param>
            <returns>A byte aray containing base 16 encoded data.</returns>
        </member>
        <member name="M:org.bouncycastle.util.encoders.Hex.decode(System.String)">
            <summary>
            Decode a string containing base 16 encoded data.
            </summary>
            <param name="data">The base 16 encoded data.</param>
            <returns>The decoded data.</returns>
        </member>
        <member name="M:org.bouncycastle.util.encoders.Hex.decode(System.Byte[])">
            <summary>
            Deocde base 16 encoded data from a byte array.
            </summary>
            <param name="array">A byte array containing base 16 encoded data.</param>
            <returns>The encoded data.</returns>
        </member>
        <member name="T:org.bouncycastle.util.encoders.HexTranslator">
            <summary>
            A hex translator.
            </summary>
        </member>
        <member name="T:org.bouncycastle.util.encoders.Translator">
            <summary>
            Translator interface.
            </summary>
        </member>
        <member name="M:org.bouncycastle.util.encoders.HexTranslator.getEncodedBlockSize">
            <summary>
            Return encoded block size.
            </summary>
            <returns>2</returns>
        </member>
        <member name="M:org.bouncycastle.util.encoders.HexTranslator.encode(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Encode some data.
            </summary>
            <param name="inBytes">Input data array.</param>
            <param name="inOff">Start position within input data array.</param>
            <param name="length">The amount of data to process.</param>
            <param name="outBytes">The output data array.</param>
            <param name="outOff">The offset within the output data array to start writing from.</param>
            <returns>Amount of data encoded.</returns>
        </member>
        <member name="M:org.bouncycastle.util.encoders.HexTranslator.getDecodedBlockSize">
            <summary>
            Returns the decoded block size.
            </summary>
            <returns>1</returns>
        </member>
        <member name="M:org.bouncycastle.util.encoders.HexTranslator.decode(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Decode data from a byte array.
            </summary>
            <param name="inBytes">The input data array.</param>
            <param name="inOff">Start position within input data array.</param>
            <param name="length">The amounty of data to process.</param>
            <param name="outBytes">The output data array.</param>
            <param name="outOff">The position within the output data array to start writing from.</param>
            <returns>The amount of data written.</returns>
        </member>
        <member name="T:org.bouncycastle.util.Arrays">
            <summary> General array utilities.</summary>
        </member>
        <member name="M:org.bouncycastle.util.Arrays.areEqual(System.Byte[],System.Byte[])">
            <summary>
            Are two arrays equal.
            </summary>
            <param name="a">Left side.</param>
            <param name="b">Right side.</param>
            <returns>True if equal.</returns>
        </member>
        <member name="T:org.bouncycastle.x509.SubjectPublicKeyInfoFactory">
            <summary>
            A factory to produce Public Key Info Objects.
            </summary>
        </member>
        <member name="M:org.bouncycastle.x509.SubjectPublicKeyInfoFactory.CreateSubjectPublicKeyInfo(org.bouncycastle.crypto.AsymmetricKeyParameter)">
            <summary>
            Create a Subject Public Key Info object for a given public key.
            </summary>
            <param name="key">One of ElGammalPublicKeyParameters, DSAPublicKeyParameter, DHPublicKeyParameters, RSAKeyParameters or ECPublicKeyParameters</param>
            <returns>A subject public key info object.</returns>
            <exception cref="T:System.Exception">Throw exception if object provided is not one of the above.</exception>
        </member>
        <member name="T:org.bouncycastle.x509.X509Certificate">
            <summary>
            An Object representing an X509 Certificate.
            Has static methods for loading Certificates encoded in many forms that return X509Certificate Objects.
            </summary>
        </member>
        <member name="M:org.bouncycastle.x509.X509Certificate.#ctor(System.Byte[])">
            <summary>
            Load certificate from byte array.
            </summary>
            <param name="encoded">Byte array containing encoded X509Certificate.</param>
        </member>
        <member name="M:org.bouncycastle.x509.X509Certificate.#ctor(System.IO.Stream)">
            <summary>
            Load certificate from Stream.
            Must be positioned at start of certificate.
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:org.bouncycastle.x509.X509Certificate.isValid">
            <summary>
            Retrun true if the current time is within the start and end times nominated on the certificate.
            </summary>
            <returns>true id certificate is valid for the current time.</returns>
        </member>
        <member name="M:org.bouncycastle.x509.X509Certificate.isValid(System.DateTime)">
            <summary>
            Return true if the nominated time is within the start and end times nominated on the certificate.
            </summary>
            <param name="time">The time to test validity against.</param>
            <returns>True if certificate is valid for nominated time.</returns>
        </member>
        <member name="M:org.bouncycastle.x509.X509Certificate.verify(org.bouncycastle.crypto.AsymmetricKeyParameter)">
            <summary>
            Verify the certificates signature using the nominated public key.
            </summary>
            <param name="key">An appropriate public key parameter object, RSAPublicKeyParameters, DSAPublicKeyParameters or ECDSAPublicKeyParameters</param>
            <returns>True if the signature is valid.</returns>
            <exception cref="T:System.Exception">If key submitted is not of the above nomiated types.</exception>
        </member>
        <member name="M:org.bouncycastle.x509.X509Certificate.getTBSCertificate">
            <summary>
            Return the DER encoded TBSCertificate data.
            This is the certificate component less the signature.
            To get the whole certificate call the getEncoded() member.
            </summary>
            <returns>A byte array containing the DER encoded Certificate component.</returns>
        </member>
        <member name="M:org.bouncycastle.x509.X509Certificate.getVersion">
            <summary>
            Return the certificate's version.
            </summary>
            <returns>An integer whose value equals the version of the cerficate.</returns>
        </member>
        <member name="M:org.bouncycastle.x509.X509Certificate.getSerialNumber">
            <summary>
            Return a <see cref="T:org.bouncycastle.math.BigInteger">BigInteger</see> containing the serial number.
            </summary>
            <returns>The Serial number.</returns>
        </member>
        <member name="M:org.bouncycastle.x509.X509Certificate.getIssuerDN">
            <summary>
            Get the Issuer Distinguished Name. (Who signed the certificate.)
            </summary>
            <returns>And X509Object containing name and value pairs.</returns>
        </member>
        <member name="M:org.bouncycastle.x509.X509Certificate.getSubjectDN">
            <summary>
            Get the subject of this certificate.
            </summary>
            <returns>An X509Name object containing name and value pairs.</returns>
        </member>
        <member name="M:org.bouncycastle.x509.X509Certificate.getNotAfter">
            <summary>
            The time that this certificate is valid up to.
            </summary>
            <returns>A DateTime object representing that time in the local time zone.</returns>
        </member>
        <member name="M:org.bouncycastle.x509.X509Certificate.getNotBefore">
            <summary>
            The time that this certificate is valid from.
            </summary>
            <returns>A DateTime object representing that time in the local time zone.</returns>
        </member>
        <member name="M:org.bouncycastle.x509.X509Certificate.getPublicKey">
            <summary>
            Get the public key of the subject of the certificate.
            </summary>
            <returns>The public key parameters.</returns>
        </member>
        <member name="M:org.bouncycastle.x509.X509Certificate.getEncoded">
            <summary>
            Return a DER encoded version of this certificate.
            </summary>
            <returns>A byte array.</returns>
        </member>
        <member name="M:org.bouncycastle.x509.X509Certificate.getSignature">
            <summary>
            The signature.
            </summary>
            <returns>A byte array containg the signature of the certificate.</returns>
        </member>
        <member name="M:org.bouncycastle.x509.X509Certificate.getSigAlgName">
            <summary>
            A meaningful version of the Signature Algorithm. (EG SHA1WITHRSA)
            </summary>
            <returns>A sting representing the signature algorithm.</returns>
        </member>
        <member name="M:org.bouncycastle.x509.X509Certificate.getSigAlgOID">
            <summary>
            Get the Signature Algorithms Object ID. 
            </summary>
            <returns>A string containg a '.' separated object id.</returns>
        </member>
        <member name="M:org.bouncycastle.x509.X509Certificate.getSigAlgParams">
            <summary>
            Get the signature algorithms parameters. (EG DSA Parameters)
            </summary>
            <returns>A byte array containing the DER encoded version of the parameters or null if there are none.</returns>
        </member>
        <member name="M:org.bouncycastle.x509.X509Certificate.getIssuerUniqueID">
            <summary>
            Get the issuers UID.
            </summary>
            <returns>A DERBitString.</returns>
        </member>
        <member name="M:org.bouncycastle.x509.X509Certificate.getSubjectUniqueID">
            <summary>
            Get the subjects UID.
            </summary>
            <returns>A DERBitString.</returns>
        </member>
        <member name="M:org.bouncycastle.x509.X509Certificate.getKeyUsage">
            <summary>
            Get a key usage guidlines.
            </summary>
            <returns>A DER it string or null if they are not specified.</returns>
        </member>
        <member name="M:org.bouncycastle.x509.X509Certificate.getExtensionValue(System.String)">
            <summary>
            Get the value of a given extension.
            </summary>
            <param name="oid">The object ID of the extension. </param>
            <returns>An X509Entention object if that extension is found or null if not.</returns>
        </member>
        <member name="M:org.bouncycastle.x509.X509Certificate.getNonCriticalExtensionOIDs">
            <summary>
            Get non critical extensions.
            </summary>
            <returns>A sorted list of non critical extensions.</returns>
        </member>
        <member name="M:org.bouncycastle.x509.X509Certificate.getCriticalExtensionOIDs">
            <summary>
            Get any critical extensions.
            </summary>
            <returns>A sorted list of critical entension.</returns>
        </member>
        <member name="M:org.bouncycastle.x509.X509Certificate.getExtensionBytes(System.String)">
            <summary>
            Fetch the value of a given Extenstion.
            </summary>
            <param name="oid">The string representation of the oid.</param>
            <returns>A byte array or null if not found.</returns>
        </member>
        <member name="T:org.bouncycastle.x509.X509CertificateParser">
            <summary>
            This class will parse X509Certificates presented to it in PEM, BER and PKCS7 format.
            </summary>
        </member>
        <member name="M:org.bouncycastle.x509.X509CertificateParser.#ctor(System.IO.Stream)">
            <summary>
            Create, loading data from stream.
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:org.bouncycastle.x509.X509CertificateParser.#ctor(System.Byte[])">
            <summary>
            Create loading data from byte array.
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:org.bouncycastle.x509.X509CertificateParser.ReadCertificate">
            <summary>
            Read a certificate, PEM, DER, BER and PKCS7.
            Will also handle PEM encoded with start / stop markers of "-----BEGIN CERTIFICATE-----" or "-----BEGIN X509 CERTIFICATE-----" / "-----END CERTIFICATE-----" or "-----END X509 CERTIFICATE-----". 
            </summary>
            <returns>An X509Certificate Object.</returns>
        </member>
        <member name="T:org.bouncycastle.x509.X509V1CertificateGenerator">
            <summary>
            Class to generate X509V1 Certificates.
            </summary>
        </member>
        <member name="M:org.bouncycastle.x509.X509V1CertificateGenerator.#ctor">
            <summary>
            Defaut Constructor.
            </summary>
        </member>
        <member name="M:org.bouncycastle.x509.X509V1CertificateGenerator.setSerialNumber(org.bouncycastle.math.BigInteger)">
            <summary>
            Set the Certificates serial number.
            </summary>
            <remarks>Make serial numbers long, if you have no serial number policy make sure the number is at least 16 bytes of secure random data.
            You will be surprised how ugly a serial number colision can get.</remarks>
            <param name="serialNumber">The serial number.</param>
        </member>
        <member name="M:org.bouncycastle.x509.X509V1CertificateGenerator.setIssuerDN(org.bouncycastle.asn1.x509.X509Name)">
            <summary>
            Set the Distinguised name of the issuer.
            </summary>
            <param name="issuer">The issuers DN.</param>
        </member>
        <member name="M:org.bouncycastle.x509.X509V1CertificateGenerator.setNotBefore(System.DateTime)">
            <summary>
            Set the date that this certificate is to be valid after.
            </summary>
            <param name="date"></param>
        </member>
        <member name="M:org.bouncycastle.x509.X509V1CertificateGenerator.setNotAfter(System.DateTime)">
            <summary>
            Set the date that this certificate will no longer be valid from.
            </summary>
            <param name="date"></param>
        </member>
        <member name="M:org.bouncycastle.x509.X509V1CertificateGenerator.setPublicKey(org.bouncycastle.crypto.AsymmetricKeyParameter)">
            <summary>
            Set the public key that this certificate identifies.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:org.bouncycastle.x509.X509V1CertificateGenerator.setSignatureAlgorithm(System.String)">
            <summary>
            Set the signature algorithm that will be used to sign this certificate.
            </summary>
            <param name="signatureAlgorithm"></param>
        </member>
        <member name="M:org.bouncycastle.x509.X509V1CertificateGenerator.generateX509Certificate(org.bouncycastle.crypto.AsymmetricKeyParameter)">
            <summary>
            Generate a new X509Certificate.
            </summary>
            <param name="privateKey">The private key of the issuer used to sign this certificate.</param>
            <returns>An X509Certificate.</returns>
        </member>
        <member name="M:org.bouncycastle.x509.X509V1CertificateGenerator.generateX509Certificate(org.bouncycastle.crypto.AsymmetricKeyParameter,org.bouncycastle.security.SecureRandom)">
            <summary>
            Generate a new X509Certificate specifying a SecureRandom instance that you would like to use.
            </summary>
            <param name="privateKey">The private key of the issuer used to sign this certificate.</param>
            <param name="random">The Secure Random you want to use.</param>
            <returns></returns>
        </member>
        <member name="T:org.bouncycastle.x509.X509V3CertificateGenerator">
            <summary>
            A class to generate Version 3 X509Certificates.
            </summary>
        </member>
        <member name="M:org.bouncycastle.x509.X509V3CertificateGenerator.reset">
            <summary>
            Reset the Generator.
            </summary>
        </member>
        <member name="M:org.bouncycastle.x509.X509V3CertificateGenerator.setSerialNumber(org.bouncycastle.math.BigInteger)">
            <summary>
            Set the Certificates serial number.
            </summary>
            <remarks>Make serial numbers long, if you have no serial number policy make sure the number is at least 16 bytes of secure random data.
            You will be surprised how ugly a serial number colision can get.</remarks>
            <param name="serialNumber">The serial number.</param>
        </member>
        <member name="M:org.bouncycastle.x509.X509V3CertificateGenerator.setIssuerDN(org.bouncycastle.asn1.x509.X509Name)">
            <summary>
            Set the Distinguised name of the issuer. The issuer is the entity which is signing the certificate.
            </summary>
            <param name="issuer">The issuers DN.</param>
        </member>
        <member name="M:org.bouncycastle.x509.X509V3CertificateGenerator.setNotBefore(System.DateTime)">
            <summary>
            Set the date that this certificate is to be valid after.
            </summary>
            <param name="date"></param>
        </member>
        <member name="M:org.bouncycastle.x509.X509V3CertificateGenerator.setNotAfter(System.DateTime)">
            <summary>
            Set the date that this certificate will no longer be valid from.
            </summary>
            <param name="date"></param>
        </member>
        <member name="M:org.bouncycastle.x509.X509V3CertificateGenerator.setSubjectDN(org.bouncycastle.asn1.x509.X509Name)">
            <summary>
            Set the DN of the entity that this certificate is about.
            </summary>
            <param name="subject"></param>
        </member>
        <member name="M:org.bouncycastle.x509.X509V3CertificateGenerator.setPublicKey(org.bouncycastle.crypto.AsymmetricKeyParameter)">
            <summary>
            Set the public key that this certificate identifies.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:org.bouncycastle.x509.X509V3CertificateGenerator.setSignatureAlgorithm(System.String)">
            <summary>
            Set the signature algorithm that will be used to sign this certificate.
            </summary>
            <param name="signatureAlgorithm"></param>
        </member>
        <member name="M:org.bouncycastle.x509.X509V3CertificateGenerator.addExtension(org.bouncycastle.asn1.DERObjectIdentifier,System.Boolean,org.bouncycastle.asn1.ASN1Encodable)">
            <summary>
            Add an extension to this certificate.
            </summary>
            <param name="OID">Its Object identifier.</param>
            <param name="critical">Is it crtical.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:org.bouncycastle.x509.X509V3CertificateGenerator.addExtension(org.bouncycastle.asn1.DERObjectIdentifier,System.Boolean,System.Byte[])">
            <summary>
            Add and extension to this certificate.
            </summary>
            <param name="OID">The object identifier.</param>
            <param name="critical">Is it critical.</param>
            <param name="value">byte[] containing the value of this extension.</param>
        </member>
        <member name="M:org.bouncycastle.x509.X509V3CertificateGenerator.addExtension(System.String,System.Boolean,System.Byte[])">
            <summary>
            Add an extension using a string with a dotted decimal OID.
            </summary>
            <param name="OID">String containing a dotted decimal OID.</param>
            <param name="critical">Is it critical.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:org.bouncycastle.x509.X509V3CertificateGenerator.generateX509Certificate(org.bouncycastle.crypto.AsymmetricKeyParameter)">
            <summary>
            Generate an X509Certificate.
            </summary>
            <param name="key">The private key of the issuer that is signing this certificate.</param>
            <returns>An X509Certificate.</returns>
        </member>
        <member name="M:org.bouncycastle.x509.X509V3CertificateGenerator.generateX509Certificate(org.bouncycastle.crypto.AsymmetricKeyParameter,org.bouncycastle.security.SecureRandom)">
            <summary>
            Generate an X509Certificate using your own SecureRandom.
            </summary>
            <param name="key">The private key of the issuer that is signing this certificate.</param>
            <param name="random">You Secure Random instance.</param>
            <returns>An X509Certificate.</returns>
        </member>
        <member name="T:org.bouncycastle.LICENSE">
            <summary>
            The Bouncy Castle License
            
            Copyright (c) 2000-2004 The Legion Of The Bouncy Castle (http://www.bouncycastle.org)
            <p>
            Permission is hereby granted, free of charge, to any person obtaining a copy of this software 
            and associated documentation files (the "Software"), to deal in the Software without restriction, 
            including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
            and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
            subject to the following conditions:
            </p>
            <p>
            The above copyright notice and this permission notice shall be included in all copies or substantial
            portions of the Software.
            </p>
            <p>
            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
            INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
            PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
            LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
            OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
            DEALINGS IN THE SOFTWARE.
            </p>
            </summary>
        </member>
        <member name="T:System.Drawing.Dimension">
            <summary>
            The <code>Dimension</code> class encapsulates the width and
            height of a component (in int precision) in a single object. 
            </summary>
            <remarks>
            The class is 
            associated with certain properties of components. Several methods 
            defined by the <code>Component</code> class and the 
            <code>LayoutManager</code> interface return a <code>Dimension</code> object.
            <p/>
            Normally the values of <code>width</code> 
            and <code>height</code> are non-negative ints. 
            The constructors that allow you to create a dimension do 
            not prevent you from setting a negative value for these properties. 
            If the value of <code>width</code> or <code>height</code> is 
            negative, the behavior of some methods defined by other objects is 
            undefined. 
            </remarks>
        </member>
        <member name="T:System.Drawing.Dimension2D">
            <summary>
            The <code>Dimension2D</code> class is to encapsulate a width 
            and a height dimension.
            </summary>
            <remarks>
            This class is only the abstract baseclass for all objects that
            store a 2D dimension.
            The actual storage representation of the sizes is left to
            the subclass.
            </remarks>
        </member>
        <member name="M:System.Drawing.Dimension2D.#ctor">
            <summary>
            This is an abstract class that cannot be instantiated directly.
            Type-specific implementation subclasses are available for
            instantiation and provide a number of formats for storing
            the information necessary to satisfy the various accessor
            methods below.
            </summary>
            <seealso cref="T:System.Drawing.Dimension"/>
        </member>
        <member name="M:System.Drawing.Dimension2D.SetSize(System.Double,System.Double)">
            <summary>
            Sets the size of this <code>Dimension</code> object to the 
            specified width and height.
            </summary>
            <param name="width">the new width for the <code>Dimension</code>
            object</param>
            <param name="height">the new height for the <code>Dimension</code> 
            object</param>
        </member>
        <member name="M:System.Drawing.Dimension2D.Clone">
            <summary>
            Creates a new object of the same class as this object.
            </summary>
            <returns>a clone of this instance</returns>
        </member>
        <member name="P:System.Drawing.Dimension2D.Width">
            <summary>
            Returns the width of this <code>Dimension</code> in double 
            precision.
            </summary>
               <value>the width</value>
        </member>
        <member name="P:System.Drawing.Dimension2D.Height">
            <summary>
            Returns the height of this <code>Dimension</code> in double 
            precision.
            </summary>
            <value>the height</value>
        </member>
        <member name="P:System.Drawing.Dimension2D.Size">
            <summary>
            Sets the size of this <code>Dimension2D</code> object to 
            match the specified size.
            </summary>
            <value>the size</value>
        </member>
        <member name="F:System.Drawing.Dimension.width">
            <summary>
            The width dimension. Negative values can be used. 
            </summary>
        </member>
        <member name="F:System.Drawing.Dimension.height">
            <summary>
            The height dimension. Negative values can be used. 
            </summary>
        </member>
        <member name="M:System.Drawing.Dimension.#ctor">
            <summary>
            Creates an instance of <code>Dimension</code> with a width 
            of zero and a height of zero. 
            </summary>
        </member>
        <member name="M:System.Drawing.Dimension.#ctor(System.Drawing.Dimension)">
            <summary>
            Creates an instance of <code>Dimension</code> whose width 
            and height are the same as for the specified dimension. 
            </summary>
            <param name="d">
            the specified dimension for the 
            <code>width</code> and 
            <code>height</code> values.
            </param>
        </member>
        <member name="M:System.Drawing.Dimension.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a Dimension and initializes it to the specified width and
            specified height.
            </summary>
            <param name="width">the specified width dimension</param>
            <param name="height">the specified height dimension</param>
        </member>
        <member name="M:System.Drawing.Dimension.SetSize(System.Double,System.Double)">
            <summary>
            Set the size of this Dimension object to the specified width
            and height in double precision.
            </summary>
            <param name="width">the new width for the Dimension object</param>
            <param name="height">the new height for the Dimension object</param>
        </member>
        <member name="M:System.Drawing.Dimension.SetSize(System.Int32,System.Int32)">
            <summary>
            Set the size of this <code>Dimension</code> object 
            to the specified width and height.
            </summary>
            <param name="width">the new width for this <code>Dimension</code> object.</param>
            <param name="height">the new height for this <code>Dimension</code> object.</param>
        </member>
        <member name="M:System.Drawing.Dimension.Equals(System.Object)">
            <summary>
            Checks whether two dimension objects have equal values.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:System.Drawing.Dimension.GetHashCode">
            <summary>
            Returns the hash code for this Dimension.
            </summary>
            <returns>a hash code</returns>
        </member>
        <member name="M:System.Drawing.Dimension.ToString">
            <summary>
            Returns a string representation of the values of this 
            <code>Dimension</code> object's <code>height</code> and 
            <code>width</code> fields.
            </summary>
            <remarks>
            This method is intended to be used only 
            for debugging purposes, and the content and format of the returned 
            string may vary between implementations. The returned string may be 
            empty but may not be <code>null</code>.
            </remarks>
            <returns>a string representation of this <code>Dimension</code>
            object.
            </returns>
        </member>
        <member name="P:System.Drawing.Dimension.Width">
            <summary>
            Returns the width of this dimension in double precision.
            </summary>
            <value>the width</value>
        </member>
        <member name="P:System.Drawing.Dimension.Height">
            <summary>
            Returns the height of this dimension in double precision.
            </summary>
            <value>the height</value>
        </member>
        <member name="P:System.Drawing.Dimension.Size">
            <summary>
            Get/set the size of this <code>Dimension</code> object.
            </summary>
            <value>the size</value>
        </member>
        <member name="T:System.util.collections.k_Algorithm">
            <summary>
            Very basic algorithms tool class.
            </summary>
        </member>
        <member name="T:System.util.collections.IContainer">
            <summary>
            Base interface for all containers
            </summary>
        </member>
        <member name="T:System.util.collections.ISequence">
            <summary>
            Interface for non-associative sequential containers (k_Vector, k_Deque, k_List)
            </summary>
        </member>
        <member name="T:System.util.collections.IMap">
            <summary>
            Interface for IDictionary derived containers which provide key to value mapping (k_HashTable)
            </summary>
        </member>
        <member name="T:System.util.collections.ISortedMap">
            <summary>
            Interface for sorted mapping containers (k_SkipList, k_Tree)
            </summary>
        </member>
        <member name="T:System.util.collections.k_Deque">
            <summary>
            Circular buffer of arrays
            </summary>
        </member>
        <member name="T:System.util.collections.k_HashTable">
            <summary>
            A HashTable with iterators
            </summary>
        </member>
        <member name="T:System.util.collections.k_List">
            <summary>
            A doubly linked list
            </summary>
        </member>
        <member name="T:System.util.collections.k_Queue">
            <summary>
            k_Queue is a first-in, first-out (FIFO) data structure.
            It hides functionality of the underlying container (e.g. k_List, k_Deque) 
            and provides a a basic queue class.
            </summary>
        </member>
        <member name="T:System.util.collections.k_SkipList">
            <summary>
            A Skip List
            </summary>
        </member>
        <member name="M:System.util.collections.k_SkipList.LowerBound(System.Object)">
            <summary>
            Returns an iterator to the first element in a list with a key value 
            that is equal to or greater than that of a specified key.
            </summary>
            <param name="ak_Key">
            The argument key value to be compared with the sort key of an element 
            from the list being searched.
            </param>
            <returns>
            Location of an element in a list that with a key that is equal to 
            or greater than the argument key, or this.End if no match is found for the key.
            </returns>
        </member>
        <member name="M:System.util.collections.k_SkipList.UpperBound(System.Object)">
            <summary>
            Returns an iterator to the first element in a list with a key value 
            that is greater than that of a specified key.
            </summary>
            <param name="ak_Key">
            The argument key value to be compared with the sort key of an element 
            from the list being searched.
            </param>
            <returns>
            Location of an element in a list that with a key that is greater
            than the argument key, or this.End if no match is found for the key.
            </returns>
        </member>
        <member name="M:System.util.collections.k_SkipList.LeftMost">
            <summary>
            Return leftmost node in list.
            </summary>
            <returns>Found node</returns>
        </member>
        <member name="M:System.util.collections.k_SkipList.RightMost">
            <summary>
            Return rightmost node in list.
            </summary>
            <returns>Found node</returns>
        </member>
        <member name="T:System.util.collections.k_Stack">
            <summary>
            A push-down stack using an underlying k_Vector.
            Last in first out (LIFO).
            </summary>
        </member>
        <member name="T:System.util.collections.k_Tree">
            <summary>
            k_Tree is a red-black balanced search tree (BST) implementation.
            Complexity of find, insert and erase operations is near O(lg n).
            </summary>
        </member>
        <member name="M:System.util.collections.k_Tree.LeftMost(System.util.collections.k_Tree.k_Node)">
            <summary>
            Return leftmost node in subtree.
            </summary>
            <param name="ak_Node">Node where to start search</param>
            <returns>Found node</returns>
        </member>
        <member name="M:System.util.collections.k_Tree.RightMost(System.util.collections.k_Tree.k_Node)">
            <summary>
            Return rightmost node in subtree.
            </summary>
            <param name="ak_Node">Node where to start search</param>
            <returns>Found node</returns>
        </member>
        <member name="T:System.util.collections.k_Vector">
            <summary>
            One dimensional array of variable size
            </summary>
        </member>
        <member name="T:System.util.ListIterator">
            <summary>
            Summary description for ListIterator.
            </summary>
        </member>
        <member name="T:System.util.Properties">
            <summary>
            Summary description for Properties.
            </summary>
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "T:System.util.StringTokenizer" -->
        <member name="F:System.util.StringTokenizer.maxDelimChar">
            maxDelimChar stores the value of the delimiter character with the
            highest value. It is used to optimize the detection of delimiter
            characters.
        </member>
        <member name="M:System.util.StringTokenizer.SetMaxDelimChar">
            Set maxDelimChar to the highest char in the delimiter set.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:System.util.StringTokenizer.#ctor(System.String,System.String,System.Boolean)" -->
        <member name="M:System.util.StringTokenizer.#ctor(System.String,System.String)">
             Constructs a string tokenizer for the specified string. The 
             characters in the <code>delim</code> argument are the delimiters 
             for separating tokens. Delimiter characters themselves will not 
             be treated as tokens.
            
             @param   str     a string to be parsed.
             @param   delim   the delimiters.
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:System.util.StringTokenizer.#ctor(System.String)" -->
        <member name="M:System.util.StringTokenizer.SkipDelimiters(System.Int32)">
            Skips delimiters starting from the specified position. If retDelims
            is false, returns the index of the first non-delimiter character at or
            after startPos. If retDelims is true, startPos is returned.
        </member>
        <member name="M:System.util.StringTokenizer.ScanToken(System.Int32)">
            Skips ahead from startPos and returns the index of the next delimiter
            character encountered, or maxPosition if no such delimiter is found.
        </member>
        <member name="M:System.util.StringTokenizer.HasMoreTokens">
             Tests if there are more tokens available from this tokenizer's string. 
             If this method returns <tt>true</tt>, then a subsequent call to 
             <tt>nextToken</tt> with no argument will successfully return a token.
            
             @return  <code>true</code> if and only if there is at least one token 
                      in the string after the current position; <code>false</code> 
                      otherwise.
        </member>
        <member name="M:System.util.StringTokenizer.NextToken">
             Returns the next token from this string tokenizer.
            
             @return     the next token from this string tokenizer.
             @exception  NoSuchElementException  if there are no more tokens in this
                           tokenizer's string.
        </member>
        <member name="M:System.util.StringTokenizer.NextToken(System.String)">
             Returns the next token in this string tokenizer's string. First, 
             the set of characters considered to be delimiters by this 
             <tt>StringTokenizer</tt> object is changed to be the characters in 
             the string <tt>delim</tt>. Then the next token in the string
             after the current position is returned. The current position is 
             advanced beyond the recognized token.  The new delimiter set 
             remains the default after this call. 
            
             @param      delim   the new delimiters.
             @return     the next token, after switching to the new delimiter set.
             @exception  NoSuchElementException  if there are no more tokens in this
                           tokenizer's string.
        </member>
        <member name="M:System.util.StringTokenizer.HasMoreElements">
             Returns the same value as the <code>hasMoreTokens</code>
             method. It exists so that this class can implement the
             <code>Enumeration</code> interface. 
            
             @return  <code>true</code> if there are more tokens;
                      <code>false</code> otherwise.
             @see     java.util.Enumeration
             @see     java.util.StringTokenizer#hasMoreTokens()
        </member>
        <member name="M:System.util.StringTokenizer.NextElement">
             Returns the same value as the <code>nextToken</code> method,
             except that its declared return value is <code>Object</code> rather than
             <code>string</code>. It exists so that this class can implement the
             <code>Enumeration</code> interface. 
            
             @return     the next token in the string.
             @exception  NoSuchElementException  if there are no more tokens in this
                           tokenizer's string.
             @see        java.util.Enumeration
             @see        java.util.StringTokenizer#nextToken()
        </member>
        <member name="M:System.util.StringTokenizer.CountTokens">
             Calculates the number of times that this tokenizer's 
             <code>nextToken</code> method can be called before it generates an 
             exception. The current position is not advanced.
            
             @return  the number of tokens remaining in the string using the current
                      delimiter set.
             @see     java.util.StringTokenizer#nextToken()
        </member>
        <member name="T:System.util.Util">
            <summary>
            Summary description for Util.
            </summary>
        </member>
    </members>
</doc>
